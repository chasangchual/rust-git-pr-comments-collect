owner: apache, repository: kafka
is_array: true
is_object: false
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9506/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9506/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9506"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9506"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9506/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9506"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/e8b70d04e1b600e14dec888b3000626074630703"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "8f02b92fcf1bf33609cbe01ffdec5ba63e1023dc",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "A regression got introduced by https://github.com/apache/kafka/pull/8897. The owned partition field must be ignored for version < 1 otherwise the serialization fails with an unsupported version exception.\r\n\r\nThis must be merged in 2.7.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9506/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9506/commits",
  "created_at": "2020-10-26T20:42:04Z",
  "diff_url": "https://github.com/apache/kafka/pull/9506.diff",
  "draft": false,
  "head": {
    "label": "dajac:KAFKA-10647",
    "ref": "KAFKA-10647",
    "repo": {
      "archive_url": "https://api.github.com/repos/dajac/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/dajac/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/dajac/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/dajac/kafka/branches{/branch}",
      "clone_url": "https://github.com/dajac/kafka.git",
      "collaborators_url": "https://api.github.com/repos/dajac/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/dajac/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/dajac/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/dajac/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/dajac/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/dajac/kafka/contributors",
      "created_at": "2015-08-01T11:38:46Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/dajac/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/dajac/kafka/downloads",
      "events_url": "https://api.github.com/repos/dajac/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/dajac/kafka/forks",
      "full_name": "dajac/kafka",
      "git_commits_url": "https://api.github.com/repos/dajac/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/dajac/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/dajac/kafka/git/tags{/sha}",
      "git_url": "git://github.com/dajac/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/dajac/kafka/hooks",
      "html_url": "https://github.com/dajac/kafka",
      "id": 40044750,
      "issue_comment_url": "https://api.github.com/repos/dajac/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/dajac/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/dajac/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/dajac/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/dajac/kafka/labels{/name}",
      "language": "Scala",
      "languages_url": "https://api.github.com/repos/dajac/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/dajac/kafka/merges",
      "milestones_url": "https://api.github.com/repos/dajac/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk0MDA0NDc1MA==",
      "notifications_url": "https://api.github.com/repos/dajac/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/157182?v=4",
        "events_url": "https://api.github.com/users/dajac/events{/privacy}",
        "followers_url": "https://api.github.com/users/dajac/followers",
        "following_url": "https://api.github.com/users/dajac/following{/other_user}",
        "gists_url": "https://api.github.com/users/dajac/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dajac",
        "id": 157182,
        "login": "dajac",
        "node_id": "MDQ6VXNlcjE1NzE4Mg==",
        "organizations_url": "https://api.github.com/users/dajac/orgs",
        "received_events_url": "https://api.github.com/users/dajac/received_events",
        "repos_url": "https://api.github.com/users/dajac/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dajac/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dajac/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dajac"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/dajac/kafka/pulls{/number}",
      "pushed_at": "2020-10-26T20:41:39Z",
      "releases_url": "https://api.github.com/repos/dajac/kafka/releases{/id}",
      "size": 97784,
      "ssh_url": "git@github.com:dajac/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/dajac/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/dajac/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/dajac/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/dajac/kafka/subscription",
      "svn_url": "https://github.com/dajac/kafka",
      "tags_url": "https://api.github.com/repos/dajac/kafka/tags",
      "teams_url": "https://api.github.com/repos/dajac/kafka/teams",
      "trees_url": "https://api.github.com/repos/dajac/kafka/git/trees{/sha}",
      "updated_at": "2015-08-01T11:38:49Z",
      "url": "https://api.github.com/repos/dajac/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "e8b70d04e1b600e14dec888b3000626074630703",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/157182?v=4",
      "events_url": "https://api.github.com/users/dajac/events{/privacy}",
      "followers_url": "https://api.github.com/users/dajac/followers",
      "following_url": "https://api.github.com/users/dajac/following{/other_user}",
      "gists_url": "https://api.github.com/users/dajac/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dajac",
      "id": 157182,
      "login": "dajac",
      "node_id": "MDQ6VXNlcjE1NzE4Mg==",
      "organizations_url": "https://api.github.com/users/dajac/orgs",
      "received_events_url": "https://api.github.com/users/dajac/received_events",
      "repos_url": "https://api.github.com/users/dajac/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dajac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dajac/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dajac"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9506",
  "id": 510295386,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9506",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "4e0f677c9abb76bbf4ccd90e44078a8c090f351a",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTEwMjk1Mzg2",
  "number": 9506,
  "patch_url": "https://github.com/apache/kafka/pull/9506.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9506/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/e8b70d04e1b600e14dec888b3000626074630703",
  "title": "KAFKA-10647; Only serialize owned partitions when consumer protocol version >= 1",
  "updated_at": "2020-10-27T00:25:34Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9506",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/157182?v=4",
    "events_url": "https://api.github.com/users/dajac/events{/privacy}",
    "followers_url": "https://api.github.com/users/dajac/followers",
    "following_url": "https://api.github.com/users/dajac/following{/other_user}",
    "gists_url": "https://api.github.com/users/dajac/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/dajac",
    "id": 157182,
    "login": "dajac",
    "node_id": "MDQ6VXNlcjE1NzE4Mg==",
    "organizations_url": "https://api.github.com/users/dajac/orgs",
    "received_events_url": "https://api.github.com/users/dajac/received_events",
    "repos_url": "https://api.github.com/users/dajac/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/dajac/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dajac/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/dajac"
  }
}
json_root is_array: false
json_root is_object: true
number: 9506
title: KAFKA-10647; Only serialize owned partitions when consumer protocol version >= 1
pr body: A regression got introduced by https://github.com/apache/kafka/pull/8897. The owned partition field must be ignored for version < 1 otherwise the serialization fails with an unsupported version exception.

This must be merged in 2.7.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9506/comments
id: 512344373
url: https://api.github.com/repos/apache/kafka/pulls/comments/512344373
body: nit: A better general pattern is to use `assertEquals` comparing against empty list. Then if the assertion fails, the message will show what was in the collection.
diff_hunk: @@ -46,6 +46,30 @@
     private final TopicPartition tp2 = new TopicPartition("bar", 2);
     private final Optional<String> groupInstanceId = Optional.of("instance.id");
 
+    @Test
+    public void serializeDeserializeSubscriptionAllVersions() {
+        List<TopicPartition> ownedPartitions = Arrays.asList(
+            new TopicPartition("foo", 0),
+            new TopicPartition("bar", 0));
+        Subscription subscription = new Subscription(Arrays.asList("foo", "bar"),
+            ByteBuffer.wrap("hello".getBytes()), ownedPartitions);
+
+        for (short version = ConsumerProtocolSubscription.LOWEST_SUPPORTED_VERSION; version <= ConsumerProtocolSubscription.HIGHEST_SUPPORTED_VERSION; version++) {
+            ByteBuffer buffer = ConsumerProtocol.serializeSubscription(subscription, version);
+            Subscription parsedSubscription = ConsumerProtocol.deserializeSubscription(buffer);
+
+            assertEquals(subscription.topics(), parsedSubscription.topics());
+            assertEquals(subscription.userData(), parsedSubscription.userData());
+            assertFalse(parsedSubscription.groupInstanceId().isPresent());
+
+            if (version >= 1) {
+                assertEquals(toSet(subscription.ownedPartitions()), toSet(parsedSubscription.ownedPartitions()));
+            } else {
+                assertTrue(parsedSubscription.ownedPartitions().isEmpty());
path: clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocolTest.java
html: https://github.com/apache/kafka/pull/9506#discussion_r512344373
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9505/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9505/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9505"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9505"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9505/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9505"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/9fef4a1a78676cdd6091155ca25901c1ab4af16e"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "8f02b92fcf1bf33609cbe01ffdec5ba63e1023dc",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Adds the changes to Fetch and FetchSnapshot as describe in KIP-630.\r\n\r\n*More detailed description of your change,\r\nif necessary. The PR title and PR message become\r\nthe squashed commit message, so use a separate\r\ncomment to ping reviewers.*\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9505/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9505/commits",
  "created_at": "2020-10-26T16:29:20Z",
  "diff_url": "https://github.com/apache/kafka/pull/9505.diff",
  "draft": false,
  "head": {
    "label": "jsancio:kafka-10393-kip-630-messages",
    "ref": "kafka-10393-kip-630-messages",
    "repo": {
      "archive_url": "https://api.github.com/repos/jsancio/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/jsancio/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/jsancio/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/jsancio/kafka/branches{/branch}",
      "clone_url": "https://github.com/jsancio/kafka.git",
      "collaborators_url": "https://api.github.com/repos/jsancio/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/jsancio/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/jsancio/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/jsancio/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/jsancio/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/jsancio/kafka/contributors",
      "created_at": "2019-02-07T01:15:40Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/jsancio/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/jsancio/kafka/downloads",
      "events_url": "https://api.github.com/repos/jsancio/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/jsancio/kafka/forks",
      "full_name": "jsancio/kafka",
      "git_commits_url": "https://api.github.com/repos/jsancio/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/jsancio/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/jsancio/kafka/git/tags{/sha}",
      "git_url": "git://github.com/jsancio/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/jsancio/kafka/hooks",
      "html_url": "https://github.com/jsancio/kafka",
      "id": 169502372,
      "issue_comment_url": "https://api.github.com/repos/jsancio/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/jsancio/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/jsancio/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/jsancio/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/jsancio/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/jsancio/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/jsancio/kafka/merges",
      "milestones_url": "https://api.github.com/repos/jsancio/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxNjk1MDIzNzI=",
      "notifications_url": "https://api.github.com/repos/jsancio/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/794394?v=4",
        "events_url": "https://api.github.com/users/jsancio/events{/privacy}",
        "followers_url": "https://api.github.com/users/jsancio/followers",
        "following_url": "https://api.github.com/users/jsancio/following{/other_user}",
        "gists_url": "https://api.github.com/users/jsancio/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jsancio",
        "id": 794394,
        "login": "jsancio",
        "node_id": "MDQ6VXNlcjc5NDM5NA==",
        "organizations_url": "https://api.github.com/users/jsancio/orgs",
        "received_events_url": "https://api.github.com/users/jsancio/received_events",
        "repos_url": "https://api.github.com/users/jsancio/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jsancio/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jsancio/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jsancio"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/jsancio/kafka/pulls{/number}",
      "pushed_at": "2020-10-26T19:34:08Z",
      "releases_url": "https://api.github.com/repos/jsancio/kafka/releases{/id}",
      "size": 103797,
      "ssh_url": "git@github.com:jsancio/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/jsancio/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/jsancio/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/jsancio/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/jsancio/kafka/subscription",
      "svn_url": "https://github.com/jsancio/kafka",
      "tags_url": "https://api.github.com/repos/jsancio/kafka/tags",
      "teams_url": "https://api.github.com/repos/jsancio/kafka/teams",
      "trees_url": "https://api.github.com/repos/jsancio/kafka/git/trees{/sha}",
      "updated_at": "2019-02-07T01:15:53Z",
      "url": "https://api.github.com/repos/jsancio/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "9fef4a1a78676cdd6091155ca25901c1ab4af16e",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/794394?v=4",
      "events_url": "https://api.github.com/users/jsancio/events{/privacy}",
      "followers_url": "https://api.github.com/users/jsancio/followers",
      "following_url": "https://api.github.com/users/jsancio/following{/other_user}",
      "gists_url": "https://api.github.com/users/jsancio/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jsancio",
      "id": 794394,
      "login": "jsancio",
      "node_id": "MDQ6VXNlcjc5NDM5NA==",
      "organizations_url": "https://api.github.com/users/jsancio/orgs",
      "received_events_url": "https://api.github.com/users/jsancio/received_events",
      "repos_url": "https://api.github.com/users/jsancio/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jsancio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jsancio/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jsancio"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9505",
  "id": 510153483,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9505",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "8c99129f71c633df142925aa38d5afbf041e99a1",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTEwMTUzNDgz",
  "number": 9505,
  "patch_url": "https://github.com/apache/kafka/pull/9505.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9505/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/9fef4a1a78676cdd6091155ca25901c1ab4af16e",
  "title": "KAFKA-10393: messages for fetch snapshot and fetch",
  "updated_at": "2020-10-26T19:20:13Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9505",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/794394?v=4",
    "events_url": "https://api.github.com/users/jsancio/events{/privacy}",
    "followers_url": "https://api.github.com/users/jsancio/followers",
    "following_url": "https://api.github.com/users/jsancio/following{/other_user}",
    "gists_url": "https://api.github.com/users/jsancio/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/jsancio",
    "id": 794394,
    "login": "jsancio",
    "node_id": "MDQ6VXNlcjc5NDM5NA==",
    "organizations_url": "https://api.github.com/users/jsancio/orgs",
    "received_events_url": "https://api.github.com/users/jsancio/received_events",
    "repos_url": "https://api.github.com/users/jsancio/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/jsancio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jsancio/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/jsancio"
  }
}
json_root is_array: false
json_root is_object: true
number: 9505
title: KAFKA-10393: messages for fetch snapshot and fetch
pr body: Adds the changes to Fetch and FetchSnapshot as describe in KIP-630.

*More detailed description of your change,
if necessary. The PR title and PR message become
the squashed commit message, so use a separate
comment to ping reviewers.*

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9505/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9503/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9503/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9503"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9503"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9503/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9503"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/379da090d9cce2eeb367ed188b9d8995bd5205fa"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "3bfbe682a2246313d126045f2c5e1a0c2577bbd2",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "\r\nThe method name is VotedToUnattached, but the code is UnattachedToUnattached, just fix it.",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9503/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9503/commits",
  "created_at": "2020-10-26T12:13:15Z",
  "diff_url": "https://github.com/apache/kafka/pull/9503.diff",
  "draft": false,
  "head": {
    "label": "dengziming:KAFKA-10644",
    "ref": "KAFKA-10644",
    "repo": {
      "archive_url": "https://api.github.com/repos/dengziming/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/dengziming/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/dengziming/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/dengziming/kafka/branches{/branch}",
      "clone_url": "https://github.com/dengziming/kafka.git",
      "collaborators_url": "https://api.github.com/repos/dengziming/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/dengziming/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/dengziming/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/dengziming/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/dengziming/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/dengziming/kafka/contributors",
      "created_at": "2019-12-12T04:22:00Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/dengziming/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/dengziming/kafka/downloads",
      "events_url": "https://api.github.com/repos/dengziming/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/dengziming/kafka/forks",
      "full_name": "dengziming/kafka",
      "git_commits_url": "https://api.github.com/repos/dengziming/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/dengziming/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/dengziming/kafka/git/tags{/sha}",
      "git_url": "git://github.com/dengziming/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/dengziming/kafka/hooks",
      "html_url": "https://github.com/dengziming/kafka",
      "id": 227519182,
      "issue_comment_url": "https://api.github.com/repos/dengziming/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/dengziming/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/dengziming/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/dengziming/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/dengziming/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/dengziming/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/dengziming/kafka/merges",
      "milestones_url": "https://api.github.com/repos/dengziming/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjc1MTkxODI=",
      "notifications_url": "https://api.github.com/repos/dengziming/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/26023240?v=4",
        "events_url": "https://api.github.com/users/dengziming/events{/privacy}",
        "followers_url": "https://api.github.com/users/dengziming/followers",
        "following_url": "https://api.github.com/users/dengziming/following{/other_user}",
        "gists_url": "https://api.github.com/users/dengziming/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dengziming",
        "id": 26023240,
        "login": "dengziming",
        "node_id": "MDQ6VXNlcjI2MDIzMjQw",
        "organizations_url": "https://api.github.com/users/dengziming/orgs",
        "received_events_url": "https://api.github.com/users/dengziming/received_events",
        "repos_url": "https://api.github.com/users/dengziming/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dengziming/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dengziming/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dengziming"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/dengziming/kafka/pulls{/number}",
      "pushed_at": "2020-10-26T12:12:08Z",
      "releases_url": "https://api.github.com/repos/dengziming/kafka/releases{/id}",
      "size": 105902,
      "ssh_url": "git@github.com:dengziming/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/dengziming/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/dengziming/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/dengziming/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/dengziming/kafka/subscription",
      "svn_url": "https://github.com/dengziming/kafka",
      "tags_url": "https://api.github.com/repos/dengziming/kafka/tags",
      "teams_url": "https://api.github.com/repos/dengziming/kafka/teams",
      "trees_url": "https://api.github.com/repos/dengziming/kafka/git/trees{/sha}",
      "updated_at": "2020-04-14T01:59:05Z",
      "url": "https://api.github.com/repos/dengziming/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "379da090d9cce2eeb367ed188b9d8995bd5205fa",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/26023240?v=4",
      "events_url": "https://api.github.com/users/dengziming/events{/privacy}",
      "followers_url": "https://api.github.com/users/dengziming/followers",
      "following_url": "https://api.github.com/users/dengziming/following{/other_user}",
      "gists_url": "https://api.github.com/users/dengziming/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dengziming",
      "id": 26023240,
      "login": "dengziming",
      "node_id": "MDQ6VXNlcjI2MDIzMjQw",
      "organizations_url": "https://api.github.com/users/dengziming/orgs",
      "received_events_url": "https://api.github.com/users/dengziming/received_events",
      "repos_url": "https://api.github.com/users/dengziming/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dengziming/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dengziming/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dengziming"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9503",
  "id": 509986689,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9503",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "419b054b22289ed0caa4911078f4131dc074fd59",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5OTg2Njg5",
  "number": 9503,
  "patch_url": "https://github.com/apache/kafka/pull/9503.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9503/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/379da090d9cce2eeb367ed188b9d8995bd5205fa",
  "title": "KAFKA-10644: Fix VotedToUnattached test error",
  "updated_at": "2020-10-26T12:14:29Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9503",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/26023240?v=4",
    "events_url": "https://api.github.com/users/dengziming/events{/privacy}",
    "followers_url": "https://api.github.com/users/dengziming/followers",
    "following_url": "https://api.github.com/users/dengziming/following{/other_user}",
    "gists_url": "https://api.github.com/users/dengziming/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/dengziming",
    "id": 26023240,
    "login": "dengziming",
    "node_id": "MDQ6VXNlcjI2MDIzMjQw",
    "organizations_url": "https://api.github.com/users/dengziming/orgs",
    "received_events_url": "https://api.github.com/users/dengziming/received_events",
    "repos_url": "https://api.github.com/users/dengziming/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/dengziming/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dengziming/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/dengziming"
  }
}
json_root is_array: false
json_root is_object: true
number: 9503
title: KAFKA-10644: Fix VotedToUnattached test error
pr body: 
The method name is VotedToUnattached, but the code is UnattachedToUnattached, just fix it.
review_comments: https://api.github.com/repos/apache/kafka/pulls/9503/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9502/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9502/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9502"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9502"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9502/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9502"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/4f27f001f3cf0afa643363c16503f3cb41998fbb"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "3bfbe682a2246313d126045f2c5e1a0c2577bbd2",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "```StandbyTaskEOSIntegrationTest ```instantiates a ```EmbeddedKafkaCluster``` so it should be an ```IntegrationTest```.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9502/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9502/commits",
  "created_at": "2020-10-26T08:48:55Z",
  "diff_url": "https://github.com/apache/kafka/pull/9502.diff",
  "draft": false,
  "head": {
    "label": "chia7712:MINOR-9502",
    "ref": "MINOR-9502",
    "repo": {
      "archive_url": "https://api.github.com/repos/chia7712/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/chia7712/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/chia7712/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/chia7712/kafka/branches{/branch}",
      "clone_url": "https://github.com/chia7712/kafka.git",
      "collaborators_url": "https://api.github.com/repos/chia7712/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/chia7712/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/chia7712/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/chia7712/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/chia7712/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/chia7712/kafka/contributors",
      "created_at": "2018-03-14T12:43:46Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/chia7712/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/chia7712/kafka/downloads",
      "events_url": "https://api.github.com/repos/chia7712/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/chia7712/kafka/forks",
      "full_name": "chia7712/kafka",
      "git_commits_url": "https://api.github.com/repos/chia7712/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/chia7712/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/chia7712/kafka/git/tags{/sha}",
      "git_url": "git://github.com/chia7712/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/chia7712/kafka/hooks",
      "html_url": "https://github.com/chia7712/kafka",
      "id": 125210946,
      "issue_comment_url": "https://api.github.com/repos/chia7712/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/chia7712/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/chia7712/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/chia7712/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/chia7712/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/chia7712/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/chia7712/kafka/merges",
      "milestones_url": "https://api.github.com/repos/chia7712/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjUyMTA5NDY=",
      "notifications_url": "https://api.github.com/repos/chia7712/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
        "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
        "followers_url": "https://api.github.com/users/chia7712/followers",
        "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
        "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/chia7712",
        "id": 6234750,
        "login": "chia7712",
        "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
        "organizations_url": "https://api.github.com/users/chia7712/orgs",
        "received_events_url": "https://api.github.com/users/chia7712/received_events",
        "repos_url": "https://api.github.com/users/chia7712/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/chia7712"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/chia7712/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:21Z",
      "releases_url": "https://api.github.com/repos/chia7712/kafka/releases{/id}",
      "size": 102740,
      "ssh_url": "git@github.com:chia7712/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/chia7712/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/chia7712/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/chia7712/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/chia7712/kafka/subscription",
      "svn_url": "https://github.com/chia7712/kafka",
      "tags_url": "https://api.github.com/repos/chia7712/kafka/tags",
      "teams_url": "https://api.github.com/repos/chia7712/kafka/teams",
      "trees_url": "https://api.github.com/repos/chia7712/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T01:51:17Z",
      "url": "https://api.github.com/repos/chia7712/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "4f27f001f3cf0afa643363c16503f3cb41998fbb",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
      "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
      "followers_url": "https://api.github.com/users/chia7712/followers",
      "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
      "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chia7712",
      "id": 6234750,
      "login": "chia7712",
      "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
      "organizations_url": "https://api.github.com/users/chia7712/orgs",
      "received_events_url": "https://api.github.com/users/chia7712/received_events",
      "repos_url": "https://api.github.com/users/chia7712/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chia7712"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9502",
  "id": 509874030,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9502",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "001e40c3f14c385af21e3aadcf9101a5022dbc60",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5ODc0MDMw",
  "number": 9502,
  "patch_url": "https://github.com/apache/kafka/pull/9502.patch",
  "requested_reviewers": [
    {
      "avatar_url": "https://avatars3.githubusercontent.com/u/5845561?v=4",
      "events_url": "https://api.github.com/users/abbccdda/events{/privacy}",
      "followers_url": "https://api.github.com/users/abbccdda/followers",
      "following_url": "https://api.github.com/users/abbccdda/following{/other_user}",
      "gists_url": "https://api.github.com/users/abbccdda/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/abbccdda",
      "id": 5845561,
      "login": "abbccdda",
      "node_id": "MDQ6VXNlcjU4NDU1NjE=",
      "organizations_url": "https://api.github.com/users/abbccdda/orgs",
      "received_events_url": "https://api.github.com/users/abbccdda/received_events",
      "repos_url": "https://api.github.com/users/abbccdda/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/abbccdda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abbccdda/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/abbccdda"
    }
  ],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9502/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/4f27f001f3cf0afa643363c16503f3cb41998fbb",
  "title": "MINOR: mark StandbyTaskEOSIntegrationTest as an IntegrationTest",
  "updated_at": "2020-10-26T08:48:59Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9502",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
    "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
    "followers_url": "https://api.github.com/users/chia7712/followers",
    "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
    "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/chia7712",
    "id": 6234750,
    "login": "chia7712",
    "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
    "organizations_url": "https://api.github.com/users/chia7712/orgs",
    "received_events_url": "https://api.github.com/users/chia7712/received_events",
    "repos_url": "https://api.github.com/users/chia7712/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/chia7712"
  }
}
json_root is_array: false
json_root is_object: true
number: 9502
title: MINOR: mark StandbyTaskEOSIntegrationTest as an IntegrationTest
pr body: ```StandbyTaskEOSIntegrationTest ```instantiates a ```EmbeddedKafkaCluster``` so it should be an ```IntegrationTest```.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9502/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9501/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9501/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9501"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9501"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9501/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9501"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/dba4f5782f353050d3b98dc3316403d62dc5d4d3"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "3bfbe682a2246313d126045f2c5e1a0c2577bbd2",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This patch can reduce the elapsed time of testing ```TopicCommandWithAdminClientTest``` (5m19s -> 4m18s on my local)\r\n\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9501/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9501/commits",
  "created_at": "2020-10-26T07:37:12Z",
  "diff_url": "https://github.com/apache/kafka/pull/9501.diff",
  "draft": false,
  "head": {
    "label": "chia7712:MINOR-9501",
    "ref": "MINOR-9501",
    "repo": {
      "archive_url": "https://api.github.com/repos/chia7712/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/chia7712/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/chia7712/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/chia7712/kafka/branches{/branch}",
      "clone_url": "https://github.com/chia7712/kafka.git",
      "collaborators_url": "https://api.github.com/repos/chia7712/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/chia7712/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/chia7712/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/chia7712/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/chia7712/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/chia7712/kafka/contributors",
      "created_at": "2018-03-14T12:43:46Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/chia7712/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/chia7712/kafka/downloads",
      "events_url": "https://api.github.com/repos/chia7712/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/chia7712/kafka/forks",
      "full_name": "chia7712/kafka",
      "git_commits_url": "https://api.github.com/repos/chia7712/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/chia7712/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/chia7712/kafka/git/tags{/sha}",
      "git_url": "git://github.com/chia7712/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/chia7712/kafka/hooks",
      "html_url": "https://github.com/chia7712/kafka",
      "id": 125210946,
      "issue_comment_url": "https://api.github.com/repos/chia7712/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/chia7712/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/chia7712/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/chia7712/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/chia7712/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/chia7712/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/chia7712/kafka/merges",
      "milestones_url": "https://api.github.com/repos/chia7712/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjUyMTA5NDY=",
      "notifications_url": "https://api.github.com/repos/chia7712/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
        "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
        "followers_url": "https://api.github.com/users/chia7712/followers",
        "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
        "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/chia7712",
        "id": 6234750,
        "login": "chia7712",
        "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
        "organizations_url": "https://api.github.com/users/chia7712/orgs",
        "received_events_url": "https://api.github.com/users/chia7712/received_events",
        "repos_url": "https://api.github.com/users/chia7712/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/chia7712"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/chia7712/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:21Z",
      "releases_url": "https://api.github.com/repos/chia7712/kafka/releases{/id}",
      "size": 102740,
      "ssh_url": "git@github.com:chia7712/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/chia7712/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/chia7712/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/chia7712/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/chia7712/kafka/subscription",
      "svn_url": "https://github.com/chia7712/kafka",
      "tags_url": "https://api.github.com/repos/chia7712/kafka/tags",
      "teams_url": "https://api.github.com/repos/chia7712/kafka/teams",
      "trees_url": "https://api.github.com/repos/chia7712/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T01:51:17Z",
      "url": "https://api.github.com/repos/chia7712/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "dba4f5782f353050d3b98dc3316403d62dc5d4d3",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
      "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
      "followers_url": "https://api.github.com/users/chia7712/followers",
      "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
      "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chia7712",
      "id": 6234750,
      "login": "chia7712",
      "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
      "organizations_url": "https://api.github.com/users/chia7712/orgs",
      "received_events_url": "https://api.github.com/users/chia7712/received_events",
      "repos_url": "https://api.github.com/users/chia7712/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chia7712"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9501",
  "id": 509836802,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9501",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "95e9cf2ec74c2c17d20ac2444f46674a8009a02a",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5ODM2ODAy",
  "number": 9501,
  "patch_url": "https://github.com/apache/kafka/pull/9501.patch",
  "requested_reviewers": [
    {
      "avatar_url": "https://avatars2.githubusercontent.com/u/8134545?v=4",
      "events_url": "https://api.github.com/users/omkreddy/events{/privacy}",
      "followers_url": "https://api.github.com/users/omkreddy/followers",
      "following_url": "https://api.github.com/users/omkreddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/omkreddy/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/omkreddy",
      "id": 8134545,
      "login": "omkreddy",
      "node_id": "MDQ6VXNlcjgxMzQ1NDU=",
      "organizations_url": "https://api.github.com/users/omkreddy/orgs",
      "received_events_url": "https://api.github.com/users/omkreddy/received_events",
      "repos_url": "https://api.github.com/users/omkreddy/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/omkreddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/omkreddy/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/omkreddy"
    }
  ],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9501/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/dba4f5782f353050d3b98dc3316403d62dc5d4d3",
  "title": "MINOR: move the test cases which don't need brokers from TopicCommand…",
  "updated_at": "2020-10-26T07:38:14Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9501",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
    "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
    "followers_url": "https://api.github.com/users/chia7712/followers",
    "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
    "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/chia7712",
    "id": 6234750,
    "login": "chia7712",
    "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
    "organizations_url": "https://api.github.com/users/chia7712/orgs",
    "received_events_url": "https://api.github.com/users/chia7712/received_events",
    "repos_url": "https://api.github.com/users/chia7712/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/chia7712"
  }
}
json_root is_array: false
json_root is_object: true
number: 9501
title: MINOR: move the test cases which don't need brokers from TopicCommand…
pr body: This patch can reduce the elapsed time of testing ```TopicCommandWithAdminClientTest``` (5m19s -> 4m18s on my local)


### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9501/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9499/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9499/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9499"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9499"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9499/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9499"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/9d827c512ea72fb786e43071d411bcce07b386b8"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "36493efa59465abee43dcd6d7ec63399947f25d6",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Zstd-jni 1.4.5-6 allocates large internal buffers inside of ZstdInputStream and ZstdOutputStream. This caused a lot of allocation and GC activity when creating and closing the streams. It also does not buffer the reads or writes. This causes inefficiency when DefaultRecord.writeTo() does a series of small single bytes reads using various ByteUtils methods. The JNI is more efficient if the writes of uncompressed data were flushed in large pieces rather than for each byte. This is due to the the expense of context switching between the Java code and the native code. This is also the case when reading as well. Per https://github.com/luben/zstd-jni/issues/141 the maintainer of zstd-jni and I agreed to not buffer reads and writes in favor of having the caller do that, so here we are updating the caller. Here is part of a flame graph of  CPU time spent in the single byte writes from Kafka:\r\n\r\n![image](https://user-images.githubusercontent.com/1082334/97130235-3113cd00-1717-11eb-835c-cc145d549604.png)\r\n\r\nIn this patch, I upgraded to the most recent zstd-jni version with the buffer reuse built-in. This was done in https://github.com/luben/zstd-jni/pull/143 and https://github.com/luben/zstd-jni/pull/146 Since we decided not to add additional buffering of input/output with zstd-jni, I added the BufferedInputStream and BufferedOutputStream to CompressionType.ZSTD just like we currently do for CompressionType.GZIP which also is inefficient for single byte reads and writes. I used the same buffer sizes as that existing implementation.\r\n\r\nNOTE: if so desired we could pass a wrapped BufferSupplier into the Zstd*Stream classes to have Kafka decide how the buffer recycling occurs. This functionality was added in the latter PR linked above. I am holding off on this since based on jmh benchmarking the performance gains were not clear and personally I don't know if it worth the complexity of trying to hack around the reflection at this point in time. The zstd-jni uses a very similar default recycler as snappy does currently which seems to provide decent efficiency. While this PR fixes the defect, I feel that using BufferSupplier in both zstd-jni and snappy is outside of the scope of this bugfix and should be considered a separate improvement. I would prefer this change get merged in on its own since the performance gains here are very significant relative to the more incremental and minor optimizations which could be achieved by doing that separate work.\r\n\r\nThere are some noticeable improvements in the JMH benchmarks (excerpt):\r\n\r\nBEFORE:\r\n```\r\nBenchmark                                                                                                                    (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score     Error   Units\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed                                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   27743.260 ± 673.869   ops/s\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.alloc.rate                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    3399.966 ±  82.608  MB/sec\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.alloc.rate.norm                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  134968.010 ±   0.012    B/op\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Eden_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    3850.985 ±  84.476  MB/sec\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Eden_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  152881.128 ± 942.189    B/op\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Survivor_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     174.241 ±   3.486  MB/sec\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Survivor_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    6917.758 ±  82.522    B/op\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.count                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1689.000            counts\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.time                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   82621.000                ms\r\nJMH benchmarks done\r\n\r\nBenchmark                                                                                                    (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score       Error   Units\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage                                                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   24095.711 ±   895.866   ops/s\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.alloc.rate                                     CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2932.289 ±   109.465  MB/sec\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.alloc.rate.norm                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  134032.012 ±     0.013    B/op\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Eden_Space                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    3282.912 ±   115.042  MB/sec\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Eden_Space.norm                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  150073.914 ±  1342.235    B/op\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Survivor_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     149.697 ±     5.786  MB/sec\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Survivor_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    6842.462 ±    64.515    B/op\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.count                                          CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1449.000              counts\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.time                                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   82518.000                  ms\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize                                                     CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1449.060 ±   230.498   ops/s\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.alloc.rate                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     198.051 ±    31.532  MB/sec\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.alloc.rate.norm                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  150502.519 ±     0.186    B/op\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     200.064 ±    31.879  MB/sec\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space.norm                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  152569.341 ± 13826.686    B/op\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.count                                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15      91.000              counts\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.time                                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   75869.000                  ms\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize                                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2609.660 ±  1145.160   ops/s\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.alloc.rate                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     815.441 ±   357.818  MB/sec\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.alloc.rate.norm                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  344309.097 ±     0.238    B/op\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     808.952 ±   354.975  MB/sec\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  345712.061 ± 51434.034    B/op\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.019 ±     0.042  MB/sec\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen.norm                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15      18.615 ±    42.045    B/op\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Survivor_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15      24.132 ±    12.254  MB/sec\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Survivor_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   13540.960 ± 14649.192    B/op\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.count                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     148.000              counts\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.time                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   23848.000                  ms\r\nJMH benchmarks done\r\n```\r\n\r\nAFTER:\r\n```\r\nBenchmark                                                                                                                (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score      Error   Units\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed                                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  147792.454 ± 2721.318   ops/s\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.alloc.rate                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2708.481 ±   50.012  MB/sec\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.alloc.rate.norm                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   20184.002 ±    0.002    B/op\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Eden_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2732.667 ±   59.258  MB/sec\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Eden_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   20363.460 ±  120.585    B/op\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Old_Gen                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.042 ±    0.033  MB/sec\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Old_Gen.norm                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.316 ±    0.249    B/op\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.count                                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     833.000             counts\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.time                                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    8390.000                 ms\r\nJMH benchmarks done\r\n\r\nBenchmark                                                                                                (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score      Error   Units\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage                                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  166786.092 ± 3285.702   ops/s\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.alloc.rate                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2926.914 ±   57.464  MB/sec\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.alloc.rate.norm                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   19328.002 ±    0.002    B/op\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Eden_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2938.541 ±   66.850  MB/sec\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Eden_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   19404.357 ±  177.485    B/op\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Old_Gen                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.516 ±    0.100  MB/sec\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Old_Gen.norm                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       3.409 ±    0.657    B/op\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Survivor_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.032 ±    0.131  MB/sec\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Survivor_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.207 ±    0.858    B/op\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.count                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     834.000             counts\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.time                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    9370.000                 ms\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize                                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   15988.116 ±  137.427   ops/s\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.alloc.rate                                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     448.636 ±    3.851  MB/sec\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.alloc.rate.norm                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   30907.698 ±    0.020    B/op\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space                         CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     450.905 ±    5.587  MB/sec\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space.norm                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   31064.113 ±  291.190    B/op\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.043 ±    0.007  MB/sec\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen.norm                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       2.931 ±    0.493    B/op\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.count                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     790.000             counts\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.time                                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     999.000                 ms\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize                                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   11345.169 ±  206.528   ops/s\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.alloc.rate                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2314.800 ±   42.094  MB/sec\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.alloc.rate.norm                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  224714.266 ±    0.028    B/op\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2320.213 ±   45.521  MB/sec\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  225235.965 ±  803.309    B/op\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.026 ±    0.005  MB/sec\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen.norm                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       2.551 ±    0.455    B/op\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.count                                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     994.000             counts\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.time                                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1189.000                 ms\r\nJMH benchmarks done\r\n```\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9499/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9499/commits",
  "created_at": "2020-10-26T03:19:44Z",
  "diff_url": "https://github.com/apache/kafka/pull/9499.diff",
  "draft": false,
  "head": {
    "label": "yuzawa-san:zstd-optimizations",
    "ref": "zstd-optimizations",
    "repo": {
      "archive_url": "https://api.github.com/repos/yuzawa-san/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/yuzawa-san/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/yuzawa-san/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/yuzawa-san/kafka/branches{/branch}",
      "clone_url": "https://github.com/yuzawa-san/kafka.git",
      "collaborators_url": "https://api.github.com/repos/yuzawa-san/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/yuzawa-san/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/yuzawa-san/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/yuzawa-san/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/yuzawa-san/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/yuzawa-san/kafka/contributors",
      "created_at": "2020-10-24T02:23:12Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/yuzawa-san/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/yuzawa-san/kafka/downloads",
      "events_url": "https://api.github.com/repos/yuzawa-san/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/yuzawa-san/kafka/forks",
      "full_name": "yuzawa-san/kafka",
      "git_commits_url": "https://api.github.com/repos/yuzawa-san/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/yuzawa-san/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/yuzawa-san/kafka/git/tags{/sha}",
      "git_url": "git://github.com/yuzawa-san/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/yuzawa-san/kafka/hooks",
      "html_url": "https://github.com/yuzawa-san/kafka",
      "id": 306788993,
      "issue_comment_url": "https://api.github.com/repos/yuzawa-san/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/yuzawa-san/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/yuzawa-san/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/yuzawa-san/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/yuzawa-san/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/yuzawa-san/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/yuzawa-san/kafka/merges",
      "milestones_url": "https://api.github.com/repos/yuzawa-san/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDY3ODg5OTM=",
      "notifications_url": "https://api.github.com/repos/yuzawa-san/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/1082334?v=4",
        "events_url": "https://api.github.com/users/yuzawa-san/events{/privacy}",
        "followers_url": "https://api.github.com/users/yuzawa-san/followers",
        "following_url": "https://api.github.com/users/yuzawa-san/following{/other_user}",
        "gists_url": "https://api.github.com/users/yuzawa-san/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/yuzawa-san",
        "id": 1082334,
        "login": "yuzawa-san",
        "node_id": "MDQ6VXNlcjEwODIzMzQ=",
        "organizations_url": "https://api.github.com/users/yuzawa-san/orgs",
        "received_events_url": "https://api.github.com/users/yuzawa-san/received_events",
        "repos_url": "https://api.github.com/users/yuzawa-san/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/yuzawa-san/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/yuzawa-san/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/yuzawa-san"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/yuzawa-san/kafka/pulls{/number}",
      "pushed_at": "2020-10-26T19:35:09Z",
      "releases_url": "https://api.github.com/repos/yuzawa-san/kafka/releases{/id}",
      "size": 107912,
      "ssh_url": "git@github.com:yuzawa-san/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/yuzawa-san/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/yuzawa-san/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/yuzawa-san/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/yuzawa-san/kafka/subscription",
      "svn_url": "https://github.com/yuzawa-san/kafka",
      "tags_url": "https://api.github.com/repos/yuzawa-san/kafka/tags",
      "teams_url": "https://api.github.com/repos/yuzawa-san/kafka/teams",
      "trees_url": "https://api.github.com/repos/yuzawa-san/kafka/git/trees{/sha}",
      "updated_at": "2020-10-24T02:23:14Z",
      "url": "https://api.github.com/repos/yuzawa-san/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "9d827c512ea72fb786e43071d411bcce07b386b8",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/1082334?v=4",
      "events_url": "https://api.github.com/users/yuzawa-san/events{/privacy}",
      "followers_url": "https://api.github.com/users/yuzawa-san/followers",
      "following_url": "https://api.github.com/users/yuzawa-san/following{/other_user}",
      "gists_url": "https://api.github.com/users/yuzawa-san/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yuzawa-san",
      "id": 1082334,
      "login": "yuzawa-san",
      "node_id": "MDQ6VXNlcjEwODIzMzQ=",
      "organizations_url": "https://api.github.com/users/yuzawa-san/orgs",
      "received_events_url": "https://api.github.com/users/yuzawa-san/received_events",
      "repos_url": "https://api.github.com/users/yuzawa-san/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yuzawa-san/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yuzawa-san/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yuzawa-san"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9499",
  "id": 509729757,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9499",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "8a677b00682c77349990604cb6129f9833a2cfd6",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5NzI5NzU3",
  "number": 9499,
  "patch_url": "https://github.com/apache/kafka/pull/9499.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9499/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/9d827c512ea72fb786e43071d411bcce07b386b8",
  "title": "KAFKA-10470: Zstd upgrade and buffering",
  "updated_at": "2020-10-27T02:22:47Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9499",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/1082334?v=4",
    "events_url": "https://api.github.com/users/yuzawa-san/events{/privacy}",
    "followers_url": "https://api.github.com/users/yuzawa-san/followers",
    "following_url": "https://api.github.com/users/yuzawa-san/following{/other_user}",
    "gists_url": "https://api.github.com/users/yuzawa-san/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/yuzawa-san",
    "id": 1082334,
    "login": "yuzawa-san",
    "node_id": "MDQ6VXNlcjEwODIzMzQ=",
    "organizations_url": "https://api.github.com/users/yuzawa-san/orgs",
    "received_events_url": "https://api.github.com/users/yuzawa-san/received_events",
    "repos_url": "https://api.github.com/users/yuzawa-san/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/yuzawa-san/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yuzawa-san/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/yuzawa-san"
  }
}
json_root is_array: false
json_root is_object: true
number: 9499
title: KAFKA-10470: Zstd upgrade and buffering
pr body: Zstd-jni 1.4.5-6 allocates large internal buffers inside of ZstdInputStream and ZstdOutputStream. This caused a lot of allocation and GC activity when creating and closing the streams. It also does not buffer the reads or writes. This causes inefficiency when DefaultRecord.writeTo() does a series of small single bytes reads using various ByteUtils methods. The JNI is more efficient if the writes of uncompressed data were flushed in large pieces rather than for each byte. This is due to the the expense of context switching between the Java code and the native code. This is also the case when reading as well. Per https://github.com/luben/zstd-jni/issues/141 the maintainer of zstd-jni and I agreed to not buffer reads and writes in favor of having the caller do that, so here we are updating the caller. Here is part of a flame graph of  CPU time spent in the single byte writes from Kafka:

![image](https://user-images.githubusercontent.com/1082334/97130235-3113cd00-1717-11eb-835c-cc145d549604.png)

In this patch, I upgraded to the most recent zstd-jni version with the buffer reuse built-in. This was done in https://github.com/luben/zstd-jni/pull/143 and https://github.com/luben/zstd-jni/pull/146 Since we decided not to add additional buffering of input/output with zstd-jni, I added the BufferedInputStream and BufferedOutputStream to CompressionType.ZSTD just like we currently do for CompressionType.GZIP which also is inefficient for single byte reads and writes. I used the same buffer sizes as that existing implementation.

NOTE: if so desired we could pass a wrapped BufferSupplier into the Zstd*Stream classes to have Kafka decide how the buffer recycling occurs. This functionality was added in the latter PR linked above. I am holding off on this since based on jmh benchmarking the performance gains were not clear and personally I don't know if it worth the complexity of trying to hack around the reflection at this point in time. The zstd-jni uses a very similar default recycler as snappy does currently which seems to provide decent efficiency. While this PR fixes the defect, I feel that using BufferSupplier in both zstd-jni and snappy is outside of the scope of this bugfix and should be considered a separate improvement. I would prefer this change get merged in on its own since the performance gains here are very significant relative to the more incremental and minor optimizations which could be achieved by doing that separate work.

There are some noticeable improvements in the JMH benchmarks (excerpt):

BEFORE:
```
Benchmark                                                                                                                    (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score     Error   Units
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed                                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   27743.260 ± 673.869   ops/s
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.alloc.rate                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    3399.966 ±  82.608  MB/sec
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.alloc.rate.norm                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  134968.010 ±   0.012    B/op
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Eden_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    3850.985 ±  84.476  MB/sec
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Eden_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  152881.128 ± 942.189    B/op
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Survivor_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     174.241 ±   3.486  MB/sec
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Survivor_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    6917.758 ±  82.522    B/op
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.count                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1689.000            counts
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.time                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   82621.000                ms
JMH benchmarks done

Benchmark                                                                                                    (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score       Error   Units
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage                                                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   24095.711 ±   895.866   ops/s
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.alloc.rate                                     CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2932.289 ±   109.465  MB/sec
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.alloc.rate.norm                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  134032.012 ±     0.013    B/op
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Eden_Space                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    3282.912 ±   115.042  MB/sec
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Eden_Space.norm                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  150073.914 ±  1342.235    B/op
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Survivor_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     149.697 ±     5.786  MB/sec
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Survivor_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    6842.462 ±    64.515    B/op
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.count                                          CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1449.000              counts
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.time                                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   82518.000                  ms
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize                                                     CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1449.060 ±   230.498   ops/s
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.alloc.rate                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     198.051 ±    31.532  MB/sec
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.alloc.rate.norm                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  150502.519 ±     0.186    B/op
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     200.064 ±    31.879  MB/sec
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space.norm                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  152569.341 ± 13826.686    B/op
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.count                                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15      91.000              counts
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.time                                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   75869.000                  ms
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize                                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2609.660 ±  1145.160   ops/s
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.alloc.rate                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     815.441 ±   357.818  MB/sec
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.alloc.rate.norm                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  344309.097 ±     0.238    B/op
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     808.952 ±   354.975  MB/sec
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  345712.061 ± 51434.034    B/op
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.019 ±     0.042  MB/sec
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen.norm                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15      18.615 ±    42.045    B/op
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Survivor_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15      24.132 ±    12.254  MB/sec
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Survivor_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   13540.960 ± 14649.192    B/op
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.count                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     148.000              counts
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.time                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   23848.000                  ms
JMH benchmarks done
```

AFTER:
```
Benchmark                                                                                                                (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score      Error   Units
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed                                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  147792.454 ± 2721.318   ops/s
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.alloc.rate                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2708.481 ±   50.012  MB/sec
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.alloc.rate.norm                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   20184.002 ±    0.002    B/op
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Eden_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2732.667 ±   59.258  MB/sec
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Eden_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   20363.460 ±  120.585    B/op
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Old_Gen                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.042 ±    0.033  MB/sec
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Old_Gen.norm                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.316 ±    0.249    B/op
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.count                                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     833.000             counts
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.time                                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    8390.000                 ms
JMH benchmarks done

Benchmark                                                                                                (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score      Error   Units
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage                                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  166786.092 ± 3285.702   ops/s
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.alloc.rate                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2926.914 ±   57.464  MB/sec
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.alloc.rate.norm                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   19328.002 ±    0.002    B/op
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Eden_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2938.541 ±   66.850  MB/sec
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Eden_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   19404.357 ±  177.485    B/op
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Old_Gen                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.516 ±    0.100  MB/sec
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Old_Gen.norm                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       3.409 ±    0.657    B/op
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Survivor_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.032 ±    0.131  MB/sec
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Survivor_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.207 ±    0.858    B/op
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.count                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     834.000             counts
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.time                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    9370.000                 ms
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize                                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   15988.116 ±  137.427   ops/s
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.alloc.rate                                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     448.636 ±    3.851  MB/sec
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.alloc.rate.norm                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   30907.698 ±    0.020    B/op
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space                         CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     450.905 ±    5.587  MB/sec
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space.norm                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   31064.113 ±  291.190    B/op
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.043 ±    0.007  MB/sec
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen.norm                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       2.931 ±    0.493    B/op
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.count                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     790.000             counts
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.time                                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     999.000                 ms
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize                                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   11345.169 ±  206.528   ops/s
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.alloc.rate                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2314.800 ±   42.094  MB/sec
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.alloc.rate.norm                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  224714.266 ±    0.028    B/op
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2320.213 ±   45.521  MB/sec
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  225235.965 ±  803.309    B/op
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.026 ±    0.005  MB/sec
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen.norm                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       2.551 ±    0.455    B/op
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.count                                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     994.000             counts
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.time                                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1189.000                 ms
JMH benchmarks done
```

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9499/comments
id: 511726299
url: https://api.github.com/repos/apache/kafka/pulls/comments/511726299
body: Is ```BufferedOutputStream``` good to other compression also?
diff_hunk: @@ -119,7 +119,9 @@ public InputStream wrapForInput(ByteBuffer inputBuffer, byte messageVersion, Buf
         @Override
         public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {
             try {
-                return (OutputStream) ZstdConstructors.OUTPUT.invoke(buffer);
+                // Set input buffer (uncompressed) to 16 KB (none by default) to ensure reasonable performance
+                // in cases where the caller passes a small number of bytes to write (potentially a single byte)
+                return new BufferedOutputStream((OutputStream) ZstdConstructors.OUTPUT.invoke(buffer), 16 * 1024);
path: clients/src/main/java/org/apache/kafka/common/record/CompressionType.java
html: https://github.com/apache/kafka/pull/9499#discussion_r511726299
id: 512045768
url: https://api.github.com/repos/apache/kafka/pulls/comments/512045768
body: This should be safe. It is used already in this file to wrap the GZIPOutputStream which also does not buffer uncompressed data prior to compression.
diff_hunk: @@ -119,7 +119,9 @@ public InputStream wrapForInput(ByteBuffer inputBuffer, byte messageVersion, Buf
         @Override
         public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {
             try {
-                return (OutputStream) ZstdConstructors.OUTPUT.invoke(buffer);
+                // Set input buffer (uncompressed) to 16 KB (none by default) to ensure reasonable performance
+                // in cases where the caller passes a small number of bytes to write (potentially a single byte)
+                return new BufferedOutputStream((OutputStream) ZstdConstructors.OUTPUT.invoke(buffer), 16 * 1024);
path: clients/src/main/java/org/apache/kafka/common/record/CompressionType.java
html: https://github.com/apache/kafka/pull/9499#discussion_r512045768
id: 512054037
url: https://api.github.com/repos/apache/kafka/pulls/comments/512054037
body: This change means we are using the recycling buffer pool, right? I think we should be passing our own buffer pool.
diff_hunk: @@ -116,7 +116,7 @@ versions += [
   testRetryPlugin: "1.1.6",
   zinc: "1.3.5",
   zookeeper: "3.5.8",
-  zstd: "1.4.5-6"
+  zstd: "1.4.5-8"
path: gradle/dependencies.gradle
html: https://github.com/apache/kafka/pull/9499#discussion_r512054037
id: 512056003
url: https://api.github.com/repos/apache/kafka/pulls/comments/512056003
body: Ah, you explained this in the PR description. Let me think about that.
diff_hunk: @@ -116,7 +116,7 @@ versions += [
   testRetryPlugin: "1.1.6",
   zinc: "1.3.5",
   zookeeper: "3.5.8",
-  zstd: "1.4.5-6"
+  zstd: "1.4.5-8"
path: gradle/dependencies.gradle
html: https://github.com/apache/kafka/pull/9499#discussion_r512056003
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9498/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9498/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9498"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9498"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9498/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9498"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/856189bec71567bda29a316ecc2540c087620545"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "36493efa59465abee43dcd6d7ec63399947f25d6",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Call super.close when closing rocksdb options. If we don't, then closing a state\r\nstore will leak the underlying rocksdb options object. This is actually somewhat\r\ncostly, since the default options object allocates it's own cache instance.",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9498/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9498/commits",
  "created_at": "2020-10-25T23:55:33Z",
  "diff_url": "https://github.com/apache/kafka/pull/9498.diff",
  "draft": false,
  "head": {
    "label": "rodesai:close-parent-rocksdb-options",
    "ref": "close-parent-rocksdb-options",
    "repo": {
      "archive_url": "https://api.github.com/repos/rodesai/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/rodesai/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/rodesai/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/rodesai/kafka/branches{/branch}",
      "clone_url": "https://github.com/rodesai/kafka.git",
      "collaborators_url": "https://api.github.com/repos/rodesai/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/rodesai/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/rodesai/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/rodesai/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/rodesai/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/rodesai/kafka/contributors",
      "created_at": "2017-12-19T18:08:34Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/rodesai/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/rodesai/kafka/downloads",
      "events_url": "https://api.github.com/repos/rodesai/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/rodesai/kafka/forks",
      "full_name": "rodesai/kafka",
      "git_commits_url": "https://api.github.com/repos/rodesai/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/rodesai/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/rodesai/kafka/git/tags{/sha}",
      "git_url": "git://github.com/rodesai/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/rodesai/kafka/hooks",
      "html_url": "https://github.com/rodesai/kafka",
      "id": 114796522,
      "issue_comment_url": "https://api.github.com/repos/rodesai/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/rodesai/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/rodesai/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/rodesai/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/rodesai/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/rodesai/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/rodesai/kafka/merges",
      "milestones_url": "https://api.github.com/repos/rodesai/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxMTQ3OTY1MjI=",
      "notifications_url": "https://api.github.com/repos/rodesai/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/2610028?v=4",
        "events_url": "https://api.github.com/users/rodesai/events{/privacy}",
        "followers_url": "https://api.github.com/users/rodesai/followers",
        "following_url": "https://api.github.com/users/rodesai/following{/other_user}",
        "gists_url": "https://api.github.com/users/rodesai/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/rodesai",
        "id": 2610028,
        "login": "rodesai",
        "node_id": "MDQ6VXNlcjI2MTAwMjg=",
        "organizations_url": "https://api.github.com/users/rodesai/orgs",
        "received_events_url": "https://api.github.com/users/rodesai/received_events",
        "repos_url": "https://api.github.com/users/rodesai/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/rodesai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rodesai/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/rodesai"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/rodesai/kafka/pulls{/number}",
      "pushed_at": "2020-10-25T23:53:49Z",
      "releases_url": "https://api.github.com/repos/rodesai/kafka/releases{/id}",
      "size": 100496,
      "ssh_url": "git@github.com:rodesai/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/rodesai/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/rodesai/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/rodesai/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/rodesai/kafka/subscription",
      "svn_url": "https://github.com/rodesai/kafka",
      "tags_url": "https://api.github.com/repos/rodesai/kafka/tags",
      "teams_url": "https://api.github.com/repos/rodesai/kafka/teams",
      "trees_url": "https://api.github.com/repos/rodesai/kafka/git/trees{/sha}",
      "updated_at": "2019-04-19T15:53:42Z",
      "url": "https://api.github.com/repos/rodesai/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "856189bec71567bda29a316ecc2540c087620545",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/2610028?v=4",
      "events_url": "https://api.github.com/users/rodesai/events{/privacy}",
      "followers_url": "https://api.github.com/users/rodesai/followers",
      "following_url": "https://api.github.com/users/rodesai/following{/other_user}",
      "gists_url": "https://api.github.com/users/rodesai/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rodesai",
      "id": 2610028,
      "login": "rodesai",
      "node_id": "MDQ6VXNlcjI2MTAwMjg=",
      "organizations_url": "https://api.github.com/users/rodesai/orgs",
      "received_events_url": "https://api.github.com/users/rodesai/received_events",
      "repos_url": "https://api.github.com/users/rodesai/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rodesai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rodesai/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rodesai"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9498",
  "id": 509685798,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9498",
  "labels": [
    {
      "color": "63edea",
      "default": false,
      "description": null,
      "id": 820747028,
      "name": "streams",
      "node_id": "MDU6TGFiZWw4MjA3NDcwMjg=",
      "url": "https://api.github.com/repos/apache/kafka/labels/streams"
    }
  ],
  "locked": false,
  "merge_commit_sha": "ca0e69d9361251356731cebd2974756e150c5bf1",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5Njg1Nzk4",
  "number": 9498,
  "patch_url": "https://github.com/apache/kafka/pull/9498.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9498/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/856189bec71567bda29a316ecc2540c087620545",
  "title": "fix: call super.close when closing rocksdb options",
  "updated_at": "2020-10-25T23:56:48Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9498",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/2610028?v=4",
    "events_url": "https://api.github.com/users/rodesai/events{/privacy}",
    "followers_url": "https://api.github.com/users/rodesai/followers",
    "following_url": "https://api.github.com/users/rodesai/following{/other_user}",
    "gists_url": "https://api.github.com/users/rodesai/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/rodesai",
    "id": 2610028,
    "login": "rodesai",
    "node_id": "MDQ6VXNlcjI2MTAwMjg=",
    "organizations_url": "https://api.github.com/users/rodesai/orgs",
    "received_events_url": "https://api.github.com/users/rodesai/received_events",
    "repos_url": "https://api.github.com/users/rodesai/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/rodesai/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rodesai/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/rodesai"
  }
}
json_root is_array: false
json_root is_object: true
number: 9498
title: fix: call super.close when closing rocksdb options
pr body: Call super.close when closing rocksdb options. If we don't, then closing a state
store will leak the underlying rocksdb options object. This is actually somewhat
costly, since the default options object allocates it's own cache instance.
review_comments: https://api.github.com/repos/apache/kafka/pulls/9498/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9497/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9497/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9497"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9497"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9497/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9497"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/43f788d0c08c0c81f55b9672e96f1044671a7550"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "36493efa59465abee43dcd6d7ec63399947f25d6",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "In the producer config,\r\n\r\ndefault value of `acks` will change to `all`\r\n`enable.idempotence` will change to `true`\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9497/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9497/commits",
  "created_at": "2020-10-25T17:54:52Z",
  "diff_url": "https://github.com/apache/kafka/pull/9497.diff",
  "draft": false,
  "head": {
    "label": "warrenzhu25:10619",
    "ref": "10619",
    "repo": {
      "archive_url": "https://api.github.com/repos/warrenzhu25/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/warrenzhu25/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/warrenzhu25/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/warrenzhu25/kafka/branches{/branch}",
      "clone_url": "https://github.com/warrenzhu25/kafka.git",
      "collaborators_url": "https://api.github.com/repos/warrenzhu25/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/warrenzhu25/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/warrenzhu25/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/warrenzhu25/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/warrenzhu25/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/warrenzhu25/kafka/contributors",
      "created_at": "2017-04-22T00:59:03Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/warrenzhu25/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/warrenzhu25/kafka/downloads",
      "events_url": "https://api.github.com/repos/warrenzhu25/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/warrenzhu25/kafka/forks",
      "full_name": "warrenzhu25/kafka",
      "git_commits_url": "https://api.github.com/repos/warrenzhu25/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/warrenzhu25/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/warrenzhu25/kafka/git/tags{/sha}",
      "git_url": "git://github.com/warrenzhu25/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/warrenzhu25/kafka/hooks",
      "html_url": "https://github.com/warrenzhu25/kafka",
      "id": 89034933,
      "issue_comment_url": "https://api.github.com/repos/warrenzhu25/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/warrenzhu25/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/warrenzhu25/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/warrenzhu25/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/warrenzhu25/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/warrenzhu25/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/warrenzhu25/kafka/merges",
      "milestones_url": "https://api.github.com/repos/warrenzhu25/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk4OTAzNDkzMw==",
      "notifications_url": "https://api.github.com/repos/warrenzhu25/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/1633312?v=4",
        "events_url": "https://api.github.com/users/warrenzhu25/events{/privacy}",
        "followers_url": "https://api.github.com/users/warrenzhu25/followers",
        "following_url": "https://api.github.com/users/warrenzhu25/following{/other_user}",
        "gists_url": "https://api.github.com/users/warrenzhu25/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/warrenzhu25",
        "id": 1633312,
        "login": "warrenzhu25",
        "node_id": "MDQ6VXNlcjE2MzMzMTI=",
        "organizations_url": "https://api.github.com/users/warrenzhu25/orgs",
        "received_events_url": "https://api.github.com/users/warrenzhu25/received_events",
        "repos_url": "https://api.github.com/users/warrenzhu25/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/warrenzhu25/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/warrenzhu25/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/warrenzhu25"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/warrenzhu25/kafka/pulls{/number}",
      "pushed_at": "2020-10-25T17:53:07Z",
      "releases_url": "https://api.github.com/repos/warrenzhu25/kafka/releases{/id}",
      "size": 99261,
      "ssh_url": "git@github.com:warrenzhu25/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/warrenzhu25/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/warrenzhu25/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/warrenzhu25/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/warrenzhu25/kafka/subscription",
      "svn_url": "https://github.com/warrenzhu25/kafka",
      "tags_url": "https://api.github.com/repos/warrenzhu25/kafka/tags",
      "teams_url": "https://api.github.com/repos/warrenzhu25/kafka/teams",
      "trees_url": "https://api.github.com/repos/warrenzhu25/kafka/git/trees{/sha}",
      "updated_at": "2017-04-22T00:59:11Z",
      "url": "https://api.github.com/repos/warrenzhu25/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "43f788d0c08c0c81f55b9672e96f1044671a7550",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/1633312?v=4",
      "events_url": "https://api.github.com/users/warrenzhu25/events{/privacy}",
      "followers_url": "https://api.github.com/users/warrenzhu25/followers",
      "following_url": "https://api.github.com/users/warrenzhu25/following{/other_user}",
      "gists_url": "https://api.github.com/users/warrenzhu25/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/warrenzhu25",
      "id": 1633312,
      "login": "warrenzhu25",
      "node_id": "MDQ6VXNlcjE2MzMzMTI=",
      "organizations_url": "https://api.github.com/users/warrenzhu25/orgs",
      "received_events_url": "https://api.github.com/users/warrenzhu25/received_events",
      "repos_url": "https://api.github.com/users/warrenzhu25/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/warrenzhu25/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/warrenzhu25/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/warrenzhu25"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9497",
  "id": 509633041,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9497",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "bcd259bd8a08404b1caefbbc7a50f923d059eecd",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5NjMzMDQx",
  "number": 9497,
  "patch_url": "https://github.com/apache/kafka/pull/9497.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9497/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/43f788d0c08c0c81f55b9672e96f1044671a7550",
  "title": "KAFKA-10619: Producer will enable idempotence and acks all by default",
  "updated_at": "2020-10-25T17:54:52Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9497",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/1633312?v=4",
    "events_url": "https://api.github.com/users/warrenzhu25/events{/privacy}",
    "followers_url": "https://api.github.com/users/warrenzhu25/followers",
    "following_url": "https://api.github.com/users/warrenzhu25/following{/other_user}",
    "gists_url": "https://api.github.com/users/warrenzhu25/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/warrenzhu25",
    "id": 1633312,
    "login": "warrenzhu25",
    "node_id": "MDQ6VXNlcjE2MzMzMTI=",
    "organizations_url": "https://api.github.com/users/warrenzhu25/orgs",
    "received_events_url": "https://api.github.com/users/warrenzhu25/received_events",
    "repos_url": "https://api.github.com/users/warrenzhu25/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/warrenzhu25/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/warrenzhu25/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/warrenzhu25"
  }
}
json_root is_array: false
json_root is_object: true
number: 9497
title: KAFKA-10619: Producer will enable idempotence and acks all by default
pr body: In the producer config,

default value of `acks` will change to `all`
`enable.idempotence` will change to `true`

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9497/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9495/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9495/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9495"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9495"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9495/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9495"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/f9ffcd7d925cc9e8a21eb8b03cf1bf047200ecd5"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "If there is any exception occurred in the custom implementation of client trust verification (i.e. using security.provider), the inner exception is suppressed or hidden and not logged to the log file...\r\n\r\n@junrao @mjsax @guozhangwang",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9495/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9495/commits",
  "created_at": "2020-10-24T19:35:49Z",
  "diff_url": "https://github.com/apache/kafka/pull/9495.diff",
  "draft": false,
  "head": {
    "label": "senthilm-ms:issues/ssl_expose_error",
    "ref": "issues/ssl_expose_error",
    "repo": {
      "archive_url": "https://api.github.com/repos/senthilm-ms/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/senthilm-ms/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/senthilm-ms/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/senthilm-ms/kafka/branches{/branch}",
      "clone_url": "https://github.com/senthilm-ms/kafka.git",
      "collaborators_url": "https://api.github.com/repos/senthilm-ms/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/senthilm-ms/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/senthilm-ms/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/senthilm-ms/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/senthilm-ms/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/senthilm-ms/kafka/contributors",
      "created_at": "2019-10-11T18:59:41Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/senthilm-ms/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/senthilm-ms/kafka/downloads",
      "events_url": "https://api.github.com/repos/senthilm-ms/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/senthilm-ms/kafka/forks",
      "full_name": "senthilm-ms/kafka",
      "git_commits_url": "https://api.github.com/repos/senthilm-ms/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/senthilm-ms/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/senthilm-ms/kafka/git/tags{/sha}",
      "git_url": "git://github.com/senthilm-ms/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/senthilm-ms/kafka/hooks",
      "html_url": "https://github.com/senthilm-ms/kafka",
      "id": 214509798,
      "issue_comment_url": "https://api.github.com/repos/senthilm-ms/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/senthilm-ms/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/senthilm-ms/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/senthilm-ms/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/senthilm-ms/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/senthilm-ms/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/senthilm-ms/kafka/merges",
      "milestones_url": "https://api.github.com/repos/senthilm-ms/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMTQ1MDk3OTg=",
      "notifications_url": "https://api.github.com/repos/senthilm-ms/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/55106539?v=4",
        "events_url": "https://api.github.com/users/senthilm-ms/events{/privacy}",
        "followers_url": "https://api.github.com/users/senthilm-ms/followers",
        "following_url": "https://api.github.com/users/senthilm-ms/following{/other_user}",
        "gists_url": "https://api.github.com/users/senthilm-ms/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/senthilm-ms",
        "id": 55106539,
        "login": "senthilm-ms",
        "node_id": "MDQ6VXNlcjU1MTA2NTM5",
        "organizations_url": "https://api.github.com/users/senthilm-ms/orgs",
        "received_events_url": "https://api.github.com/users/senthilm-ms/received_events",
        "repos_url": "https://api.github.com/users/senthilm-ms/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/senthilm-ms/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/senthilm-ms/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/senthilm-ms"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/senthilm-ms/kafka/pulls{/number}",
      "pushed_at": "2020-10-24T19:34:19Z",
      "releases_url": "https://api.github.com/repos/senthilm-ms/kafka/releases{/id}",
      "size": 105456,
      "ssh_url": "git@github.com:senthilm-ms/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/senthilm-ms/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/senthilm-ms/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/senthilm-ms/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/senthilm-ms/kafka/subscription",
      "svn_url": "https://github.com/senthilm-ms/kafka",
      "tags_url": "https://api.github.com/repos/senthilm-ms/kafka/tags",
      "teams_url": "https://api.github.com/repos/senthilm-ms/kafka/teams",
      "trees_url": "https://api.github.com/repos/senthilm-ms/kafka/git/trees{/sha}",
      "updated_at": "2020-10-24T18:43:56Z",
      "url": "https://api.github.com/repos/senthilm-ms/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "f9ffcd7d925cc9e8a21eb8b03cf1bf047200ecd5",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/55106539?v=4",
      "events_url": "https://api.github.com/users/senthilm-ms/events{/privacy}",
      "followers_url": "https://api.github.com/users/senthilm-ms/followers",
      "following_url": "https://api.github.com/users/senthilm-ms/following{/other_user}",
      "gists_url": "https://api.github.com/users/senthilm-ms/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/senthilm-ms",
      "id": 55106539,
      "login": "senthilm-ms",
      "node_id": "MDQ6VXNlcjU1MTA2NTM5",
      "organizations_url": "https://api.github.com/users/senthilm-ms/orgs",
      "received_events_url": "https://api.github.com/users/senthilm-ms/received_events",
      "repos_url": "https://api.github.com/users/senthilm-ms/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/senthilm-ms/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/senthilm-ms/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/senthilm-ms"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9495",
  "id": 509483395,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9495",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "c680fe4b5700eaf79698025d9012a4b6c4cacf8c",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5NDgzMzk1",
  "number": 9495,
  "patch_url": "https://github.com/apache/kafka/pull/9495.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9495/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/f9ffcd7d925cc9e8a21eb8b03cf1bf047200ecd5",
  "title": "KAFKA-10642: Expose the real stack trace if any exception occurred during SSL Client Trust Verification in extension",
  "updated_at": "2020-10-26T23:41:22Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9495",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/55106539?v=4",
    "events_url": "https://api.github.com/users/senthilm-ms/events{/privacy}",
    "followers_url": "https://api.github.com/users/senthilm-ms/followers",
    "following_url": "https://api.github.com/users/senthilm-ms/following{/other_user}",
    "gists_url": "https://api.github.com/users/senthilm-ms/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/senthilm-ms",
    "id": 55106539,
    "login": "senthilm-ms",
    "node_id": "MDQ6VXNlcjU1MTA2NTM5",
    "organizations_url": "https://api.github.com/users/senthilm-ms/orgs",
    "received_events_url": "https://api.github.com/users/senthilm-ms/received_events",
    "repos_url": "https://api.github.com/users/senthilm-ms/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/senthilm-ms/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/senthilm-ms/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/senthilm-ms"
  }
}
json_root is_array: false
json_root is_object: true
number: 9495
title: KAFKA-10642: Expose the real stack trace if any exception occurred during SSL Client Trust Verification in extension
pr body: If there is any exception occurred in the custom implementation of client trust verification (i.e. using security.provider), the inner exception is suppressed or hidden and not logged to the log file...

@junrao @mjsax @guozhangwang
review_comments: https://api.github.com/repos/apache/kafka/pulls/9495/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9494/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9494/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9494"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9494"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9494/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9494"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/6e7b857a39e33884073d5d999b010d0b99f244fb"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "When using ACL Command with SSL mode, the process is not terminating after successful ACL operation.",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9494/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9494/commits",
  "created_at": "2020-10-24T19:05:48Z",
  "diff_url": "https://github.com/apache/kafka/pull/9494.diff",
  "draft": false,
  "head": {
    "label": "senthilm-ms:issues/acl_cmd_exit",
    "ref": "issues/acl_cmd_exit",
    "repo": {
      "archive_url": "https://api.github.com/repos/senthilm-ms/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/senthilm-ms/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/senthilm-ms/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/senthilm-ms/kafka/branches{/branch}",
      "clone_url": "https://github.com/senthilm-ms/kafka.git",
      "collaborators_url": "https://api.github.com/repos/senthilm-ms/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/senthilm-ms/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/senthilm-ms/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/senthilm-ms/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/senthilm-ms/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/senthilm-ms/kafka/contributors",
      "created_at": "2019-10-11T18:59:41Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/senthilm-ms/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/senthilm-ms/kafka/downloads",
      "events_url": "https://api.github.com/repos/senthilm-ms/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/senthilm-ms/kafka/forks",
      "full_name": "senthilm-ms/kafka",
      "git_commits_url": "https://api.github.com/repos/senthilm-ms/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/senthilm-ms/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/senthilm-ms/kafka/git/tags{/sha}",
      "git_url": "git://github.com/senthilm-ms/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/senthilm-ms/kafka/hooks",
      "html_url": "https://github.com/senthilm-ms/kafka",
      "id": 214509798,
      "issue_comment_url": "https://api.github.com/repos/senthilm-ms/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/senthilm-ms/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/senthilm-ms/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/senthilm-ms/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/senthilm-ms/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/senthilm-ms/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/senthilm-ms/kafka/merges",
      "milestones_url": "https://api.github.com/repos/senthilm-ms/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMTQ1MDk3OTg=",
      "notifications_url": "https://api.github.com/repos/senthilm-ms/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/55106539?v=4",
        "events_url": "https://api.github.com/users/senthilm-ms/events{/privacy}",
        "followers_url": "https://api.github.com/users/senthilm-ms/followers",
        "following_url": "https://api.github.com/users/senthilm-ms/following{/other_user}",
        "gists_url": "https://api.github.com/users/senthilm-ms/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/senthilm-ms",
        "id": 55106539,
        "login": "senthilm-ms",
        "node_id": "MDQ6VXNlcjU1MTA2NTM5",
        "organizations_url": "https://api.github.com/users/senthilm-ms/orgs",
        "received_events_url": "https://api.github.com/users/senthilm-ms/received_events",
        "repos_url": "https://api.github.com/users/senthilm-ms/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/senthilm-ms/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/senthilm-ms/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/senthilm-ms"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/senthilm-ms/kafka/pulls{/number}",
      "pushed_at": "2020-10-24T19:34:19Z",
      "releases_url": "https://api.github.com/repos/senthilm-ms/kafka/releases{/id}",
      "size": 105456,
      "ssh_url": "git@github.com:senthilm-ms/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/senthilm-ms/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/senthilm-ms/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/senthilm-ms/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/senthilm-ms/kafka/subscription",
      "svn_url": "https://github.com/senthilm-ms/kafka",
      "tags_url": "https://api.github.com/repos/senthilm-ms/kafka/tags",
      "teams_url": "https://api.github.com/repos/senthilm-ms/kafka/teams",
      "trees_url": "https://api.github.com/repos/senthilm-ms/kafka/git/trees{/sha}",
      "updated_at": "2020-10-24T18:43:56Z",
      "url": "https://api.github.com/repos/senthilm-ms/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "6e7b857a39e33884073d5d999b010d0b99f244fb",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/55106539?v=4",
      "events_url": "https://api.github.com/users/senthilm-ms/events{/privacy}",
      "followers_url": "https://api.github.com/users/senthilm-ms/followers",
      "following_url": "https://api.github.com/users/senthilm-ms/following{/other_user}",
      "gists_url": "https://api.github.com/users/senthilm-ms/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/senthilm-ms",
      "id": 55106539,
      "login": "senthilm-ms",
      "node_id": "MDQ6VXNlcjU1MTA2NTM5",
      "organizations_url": "https://api.github.com/users/senthilm-ms/orgs",
      "received_events_url": "https://api.github.com/users/senthilm-ms/received_events",
      "repos_url": "https://api.github.com/users/senthilm-ms/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/senthilm-ms/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/senthilm-ms/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/senthilm-ms"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9494",
  "id": 509479363,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9494",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "f884da97b7dc3eadf4af903ec992e622537e4845",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5NDc5MzYz",
  "number": 9494,
  "patch_url": "https://github.com/apache/kafka/pull/9494.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9494/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/6e7b857a39e33884073d5d999b010d0b99f244fb",
  "title": "KAFKA-10641: ACL Command Exit properly always with error code",
  "updated_at": "2020-10-24T19:07:28Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9494",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/55106539?v=4",
    "events_url": "https://api.github.com/users/senthilm-ms/events{/privacy}",
    "followers_url": "https://api.github.com/users/senthilm-ms/followers",
    "following_url": "https://api.github.com/users/senthilm-ms/following{/other_user}",
    "gists_url": "https://api.github.com/users/senthilm-ms/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/senthilm-ms",
    "id": 55106539,
    "login": "senthilm-ms",
    "node_id": "MDQ6VXNlcjU1MTA2NTM5",
    "organizations_url": "https://api.github.com/users/senthilm-ms/orgs",
    "received_events_url": "https://api.github.com/users/senthilm-ms/received_events",
    "repos_url": "https://api.github.com/users/senthilm-ms/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/senthilm-ms/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/senthilm-ms/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/senthilm-ms"
  }
}
json_root is_array: false
json_root is_object: true
number: 9494
title: KAFKA-10641: ACL Command Exit properly always with error code
pr body: When using ACL Command with SSL mode, the process is not terminating after successful ACL operation.
review_comments: https://api.github.com/repos/apache/kafka/pulls/9494/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9493/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9493/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9493"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9493"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9493/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9493"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/13d94762a0dc2ec545117dc2cd55df1947f616fc"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This PR replaces #9470 as I needed to do some cleanup of my repo and break this into its own branch so it did not block everything else. Also I have created Jira request [KAFKA-10640](https://issues.apache.org/jira/browse/KAFKA-10640) to cover a requirement for this change.\r\n\r\n---\r\n\r\nI have added support for the `Cast` and `ReplaceField` transformations to recursively traverse the structure of messages (both with and without a schema) and perform the Cast or Replace operations on matching child primitive fields if they are found at any level nested within the structure.  Nested parents of all currently-supported Connect complex types should be supported (Map, Array, or Struct) but most of the primitive field handling is still similar to before (the lowest level within the nesting would normally be a Struct when using Schema or Map when schemaless).\r\n\r\nThis behavior can be controlled by a new configuration parameter called `recursive` for both transformations.  The default setting is **false** so any existing connectors would not be impacted -- you must set the parameter to **true** in order for the child complex types to be traversed.  Otherwise, the default behavior should be the same as before.\r\n\r\nI have also cleaned up the Config names a bit to match some of the other transformations (namely, using a class interface called `ConfigName` which can be accessed statically), it is a bit nicer to work with and brings a little more consistency across the different built-in transforms.\r\n\r\nSince this is more than just a trivial change, I have created a few new unit tests, some of them quite complex, to try and make sure that everything is working ok compared to before.  I have also been running both of these as custom SMTs against data in our production kafka cluster and used some learnings there to iron out a few issues.  I have had tens of millions of events actually using this updated code so I think/hope the changes are pretty well-tested but welcome if there is some kind of feedback or concern with them!\r\n\r\nHere is a full list of everything that I have changed:\r\n\r\n### Cast\r\n\r\n#### Added new Config Parameters:\r\n- `recursive` optional boolean, default = `false`\r\n- `complex.string.as.json` optional boolean, default = `false`\r\n\r\n#### Changes:\r\n\r\n- Created new public static interface `ConfigName` and marked the old public static string `SPEC_CONFIG` as deprecated (so it can still be used for a while until it is removed later).\r\n- Added new `ConfigName` for `SPEC`, `RECURSIVE`, and `COMPLEX_STRING_AS_JSON`\r\n- Created new interface `ConfigDefault` to provide an easy way to set and consume default values for these two new optional configuration parameters.\r\n- And then of course defined and set up the config parameters for usage within the rest of the class.\r\n- Added ARRAY, MAP, and STRUCT as valid types to convert FROM (but the only thing they can convert TO is STRING, otherwise if your `SPEC` tries to convert them to something else it will throw a `DataException`).  Before you would receive a `DataException` if you tried to include a complex type in the `SPEC` but now at least you are given the option to Cast them to a string!\r\n- Refactored the `apply...` methods so that they will call a child method that recursively builds the structure of the schema or value depending if the user sets the `recursive` config parameter to true (otherwise it should basically work the same as before -- look at everything that is at the top level of the structure and then return).  There are new methods for recursively handling different type of structures but in the end the same basic flow happens at each child level as what was happening before (`for each field in fields...`). \r\n   - However, one change in the design is that when building the new Value, instead of looping through each field from the new schema and performing an `oldstruct.get(oldfield)`, it instead will loop again through each field in the old schema.  This is so that nested primitive conversions happen correctly and what happens in the Value should be exactly the same thing that happened in the Schema.\r\n- When a child schema is created as part of the recursion, it is also added to the `schemaUpdateCache`, and the recursive methods call `getOrBuildUpdatedSchema` so they should fetch it from the cast in case it has already been converted.  This is the same when child values are converted -- they should fetch their new child schemas from the cache instead of building them again.\r\n- Added usage of an instance of `JsonConverter` and `JsonDeserializer` if you wish to have the complex types toString come out in a JSON text format instead of the Java object's toString() implementation.  This is helpful for scenarios for example like using a JdbcSinkConnector where you have an array of structs as one field in your source, you can put these values into a database table as a blob of JSON text, then parse these values as JSON (for example PostgreSQL has loads of really good JSON parsing).  This behavior is controlled by the new configuration parameter `complex.string.as.json` but again by default it is set to false (so you have to set to true in order to use this).\r\n- I also changed `castValueToType` from `private static` to `private`.  This was so that we can allow a check in this method on the instance value of our new `complex.string.as.json` configuration parameter and decide to call `castToJsonString` instead of the old `castToString` method.\r\n  - I realize this one can maybe be a bit controversial, and there were several options I considered.  First, however, I tried to examine any public static method or property of any kind and see if anything ever makes use of `castValueToType` and could not see any (please mention if you see something I missed).  So a change from private static to private in this case seems very minor and should not impact any functionality -- nothing else can see or use it anyway outside of this class itself.\r\n  - Another option is possibly a bit more like the `TimestampConverter` transform, where they have created a private instance of a `Config` subclass and then pass the entire instance to some of the static methods.  But I think that change would have to \"touch\"  a lot more places, and given the point above (I did not see where it was actually used anywhere from anything public static ) this seemed like a bit too much of a rebuild.\r\n  - Also usage of this `castToJsonString` with using the `JsonConverter` and `JsonDeserializer` could be done a few other ways... but this was the one that I felt tried to use existing functionalities within Connect and was the \"cleanest\" looking that I could initially come up with from a code perspective.  And the reason to use a single private instance of the classes was to try and save a bit on resources -- it is possible that you will have multiple Json string conversions even within one record so I thought it was better to only have one instance we can re-use over and over.\r\n- Changed the log level for the Cast log message from Trace to Debug (this seems like something you definitely want to see in Debug and not just Trace!).\r\n- Added new test cases for casting Arrays and Maps to string, to JSON Strings, as well as for working with different types of recursive records (both with and without schema).  In these tests, I found that a lot of the weird issues only happen once you go a few levels deep so I have made the tests a little more complicated to ensure that everything was working properly even with multiple nested levels.\r\n\r\n#### Example Usage\r\n\r\n```\r\ncurl -X PUT -H \"Content-Type: application/json\" --data '{\r\n  \"connector.class\": \"FileStreamSink\",\r\n  \"topics\": \"test\",\r\n  \"file\": \"/tmp/cast.txt\",\r\n  \"transforms\": \"cast\",\r\n  \"transforms.cast.type\": \"org.apache.kafka.connect.transforms.Cast$Value\",\r\n  \"transforms.cast.spec\": \"child_int:string,child_array_of_structs:string\",\r\n  \"transforms.cast.recursive\": \"true\",\r\n  \"transforms.cast.complex.string.as.json\": \"true\"\r\n}' http://localhost:8083/connectors/filestreamsink_cast_test/config\r\n```\r\n\r\n\r\n### ReplaceField\r\n\r\n#### Added new Config Parameters:\r\n- `recursive` optional boolean, default = `false`\r\n\r\n#### Changes:\r\n\r\n- A lot of the changes here are very similar to what was done in `Cast`.  In fact, even before my changes, the flow of these two transforms was actually almost identical, so it worked quite well to do them both like this at the same time and they are easily used together in transform chains within Connect.\r\n- Namely, there is a new `recursive` configuration parameter and the `apply...` methods have been updated to recursively call methods to build the new target schema and values.  A lot of the code is exactly the same so you should even find direct copy-paste from `Cast` to here and using a lot of the same private object names, methods, etc.\r\n   - Note also that the pattern follows the same as with `Cast` -- looping through the old schema and converted child values based on the old structure instead of first creating a new schema and then getting the old field.  This new flow also means that the `reverseRenamed` method and its `reverseRenames` map are no longer needed either (but I left them in for now).\r\n- Added a logger instance and added Debug-level logging for a few different events, such as when a field is excluded or included, or when it is renamed.  So some of the methods were refactored a bit in order to provide this logging (for example the `filter` and `renamed` methods).\r\n- I also added support when using `renames` for a \"contains exactly one of\" kind of scenario.  What I mean by this is that in your schema, you have several fields which you know by design that only one of them will have a value, and when that one has a value, all of the rest within that group will be null.  The change to this transform now allows you to specify a target name more than one time, but when the value transform is occurring, if more than one of them have a value then it will throw a `DataException`.  Before, the transform would throw a `DataException` when building the new schema based on the `renames` config (trying to add a duplicate field to the schema) but instead now this check happens when building the updated value instead.\r\n- Also added a few unit tests to handle new scenarios and recursive operation (both with and without schemas).\r\n\r\n#### Example Usage\r\n\r\n```\r\ncurl -X PUT -H \"Content-Type: application/json\" --data '{\r\n  \"connector.class\": \"FileStreamSink\",\r\n  \"topics\": \"test\",\r\n  \"file\": \"/tmp/replace.txt\",\r\n  \"transforms\": \"replace\",\r\n  \"transforms.replace.type\": \"org.apache.kafka.connect.transforms.ReplaceField$Value\",\r\n  \"transforms.replace.renames\": \"child_value_one:child_value,child_value_two:child_value\",\r\n  \"transforms.replace.recursive\": \"true\",\r\n}' http://localhost:8083/connectors/filestreamsink_replace_test/config\r\n```\r\n\r\nI hope this covers everything but if you have any questions or concerns then please feel free to ask!\r\n\r\n\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9493/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9493/commits",
  "created_at": "2020-10-24T17:45:21Z",
  "diff_url": "https://github.com/apache/kafka/pull/9493.diff",
  "draft": false,
  "head": {
    "label": "joshuagrisham:KAFKA-10640",
    "ref": "KAFKA-10640",
    "repo": {
      "archive_url": "https://api.github.com/repos/joshuagrisham/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/joshuagrisham/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/joshuagrisham/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/joshuagrisham/kafka/branches{/branch}",
      "clone_url": "https://github.com/joshuagrisham/kafka.git",
      "collaborators_url": "https://api.github.com/repos/joshuagrisham/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/joshuagrisham/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/joshuagrisham/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/joshuagrisham/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/joshuagrisham/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/joshuagrisham/kafka/contributors",
      "created_at": "2020-10-24T13:49:37Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/joshuagrisham/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/joshuagrisham/kafka/downloads",
      "events_url": "https://api.github.com/repos/joshuagrisham/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/joshuagrisham/kafka/forks",
      "full_name": "joshuagrisham/kafka",
      "git_commits_url": "https://api.github.com/repos/joshuagrisham/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/joshuagrisham/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/joshuagrisham/kafka/git/tags{/sha}",
      "git_url": "git://github.com/joshuagrisham/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/joshuagrisham/kafka/hooks",
      "html_url": "https://github.com/joshuagrisham/kafka",
      "id": 306893753,
      "issue_comment_url": "https://api.github.com/repos/joshuagrisham/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/joshuagrisham/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/joshuagrisham/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/joshuagrisham/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/joshuagrisham/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/joshuagrisham/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/joshuagrisham/kafka/merges",
      "milestones_url": "https://api.github.com/repos/joshuagrisham/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDY4OTM3NTM=",
      "notifications_url": "https://api.github.com/repos/joshuagrisham/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/18266314?v=4",
        "events_url": "https://api.github.com/users/joshuagrisham/events{/privacy}",
        "followers_url": "https://api.github.com/users/joshuagrisham/followers",
        "following_url": "https://api.github.com/users/joshuagrisham/following{/other_user}",
        "gists_url": "https://api.github.com/users/joshuagrisham/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/joshuagrisham",
        "id": 18266314,
        "login": "joshuagrisham",
        "node_id": "MDQ6VXNlcjE4MjY2MzE0",
        "organizations_url": "https://api.github.com/users/joshuagrisham/orgs",
        "received_events_url": "https://api.github.com/users/joshuagrisham/received_events",
        "repos_url": "https://api.github.com/users/joshuagrisham/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/joshuagrisham/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/joshuagrisham/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/joshuagrisham"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/joshuagrisham/kafka/pulls{/number}",
      "pushed_at": "2020-10-26T12:58:21Z",
      "releases_url": "https://api.github.com/repos/joshuagrisham/kafka/releases{/id}",
      "size": 107932,
      "ssh_url": "git@github.com:joshuagrisham/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/joshuagrisham/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/joshuagrisham/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/joshuagrisham/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/joshuagrisham/kafka/subscription",
      "svn_url": "https://github.com/joshuagrisham/kafka",
      "tags_url": "https://api.github.com/repos/joshuagrisham/kafka/tags",
      "teams_url": "https://api.github.com/repos/joshuagrisham/kafka/teams",
      "trees_url": "https://api.github.com/repos/joshuagrisham/kafka/git/trees{/sha}",
      "updated_at": "2020-10-24T13:49:39Z",
      "url": "https://api.github.com/repos/joshuagrisham/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "13d94762a0dc2ec545117dc2cd55df1947f616fc",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/18266314?v=4",
      "events_url": "https://api.github.com/users/joshuagrisham/events{/privacy}",
      "followers_url": "https://api.github.com/users/joshuagrisham/followers",
      "following_url": "https://api.github.com/users/joshuagrisham/following{/other_user}",
      "gists_url": "https://api.github.com/users/joshuagrisham/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/joshuagrisham",
      "id": 18266314,
      "login": "joshuagrisham",
      "node_id": "MDQ6VXNlcjE4MjY2MzE0",
      "organizations_url": "https://api.github.com/users/joshuagrisham/orgs",
      "received_events_url": "https://api.github.com/users/joshuagrisham/received_events",
      "repos_url": "https://api.github.com/users/joshuagrisham/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/joshuagrisham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joshuagrisham/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/joshuagrisham"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9493",
  "id": 509468126,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9493",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "73e86177b578017d73f1d9dced3efec8696dc47d",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5NDY4MTI2",
  "number": 9493,
  "patch_url": "https://github.com/apache/kafka/pull/9493.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9493/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/13d94762a0dc2ec545117dc2cd55df1947f616fc",
  "title": "KAFKA-10640: Add recursive support to Connect Cast and ReplaceField transforms, and support for casting complex types to either a native or JSON string.",
  "updated_at": "2020-10-26T09:37:54Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9493",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/18266314?v=4",
    "events_url": "https://api.github.com/users/joshuagrisham/events{/privacy}",
    "followers_url": "https://api.github.com/users/joshuagrisham/followers",
    "following_url": "https://api.github.com/users/joshuagrisham/following{/other_user}",
    "gists_url": "https://api.github.com/users/joshuagrisham/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/joshuagrisham",
    "id": 18266314,
    "login": "joshuagrisham",
    "node_id": "MDQ6VXNlcjE4MjY2MzE0",
    "organizations_url": "https://api.github.com/users/joshuagrisham/orgs",
    "received_events_url": "https://api.github.com/users/joshuagrisham/received_events",
    "repos_url": "https://api.github.com/users/joshuagrisham/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/joshuagrisham/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/joshuagrisham/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/joshuagrisham"
  }
}
json_root is_array: false
json_root is_object: true
number: 9493
title: KAFKA-10640: Add recursive support to Connect Cast and ReplaceField transforms, and support for casting complex types to either a native or JSON string.
pr body: This PR replaces #9470 as I needed to do some cleanup of my repo and break this into its own branch so it did not block everything else. Also I have created Jira request [KAFKA-10640](https://issues.apache.org/jira/browse/KAFKA-10640) to cover a requirement for this change.

---

I have added support for the `Cast` and `ReplaceField` transformations to recursively traverse the structure of messages (both with and without a schema) and perform the Cast or Replace operations on matching child primitive fields if they are found at any level nested within the structure.  Nested parents of all currently-supported Connect complex types should be supported (Map, Array, or Struct) but most of the primitive field handling is still similar to before (the lowest level within the nesting would normally be a Struct when using Schema or Map when schemaless).

This behavior can be controlled by a new configuration parameter called `recursive` for both transformations.  The default setting is **false** so any existing connectors would not be impacted -- you must set the parameter to **true** in order for the child complex types to be traversed.  Otherwise, the default behavior should be the same as before.

I have also cleaned up the Config names a bit to match some of the other transformations (namely, using a class interface called `ConfigName` which can be accessed statically), it is a bit nicer to work with and brings a little more consistency across the different built-in transforms.

Since this is more than just a trivial change, I have created a few new unit tests, some of them quite complex, to try and make sure that everything is working ok compared to before.  I have also been running both of these as custom SMTs against data in our production kafka cluster and used some learnings there to iron out a few issues.  I have had tens of millions of events actually using this updated code so I think/hope the changes are pretty well-tested but welcome if there is some kind of feedback or concern with them!

Here is a full list of everything that I have changed:

### Cast

#### Added new Config Parameters:
- `recursive` optional boolean, default = `false`
- `complex.string.as.json` optional boolean, default = `false`

#### Changes:

- Created new public static interface `ConfigName` and marked the old public static string `SPEC_CONFIG` as deprecated (so it can still be used for a while until it is removed later).
- Added new `ConfigName` for `SPEC`, `RECURSIVE`, and `COMPLEX_STRING_AS_JSON`
- Created new interface `ConfigDefault` to provide an easy way to set and consume default values for these two new optional configuration parameters.
- And then of course defined and set up the config parameters for usage within the rest of the class.
- Added ARRAY, MAP, and STRUCT as valid types to convert FROM (but the only thing they can convert TO is STRING, otherwise if your `SPEC` tries to convert them to something else it will throw a `DataException`).  Before you would receive a `DataException` if you tried to include a complex type in the `SPEC` but now at least you are given the option to Cast them to a string!
- Refactored the `apply...` methods so that they will call a child method that recursively builds the structure of the schema or value depending if the user sets the `recursive` config parameter to true (otherwise it should basically work the same as before -- look at everything that is at the top level of the structure and then return).  There are new methods for recursively handling different type of structures but in the end the same basic flow happens at each child level as what was happening before (`for each field in fields...`). 
   - However, one change in the design is that when building the new Value, instead of looping through each field from the new schema and performing an `oldstruct.get(oldfield)`, it instead will loop again through each field in the old schema.  This is so that nested primitive conversions happen correctly and what happens in the Value should be exactly the same thing that happened in the Schema.
- When a child schema is created as part of the recursion, it is also added to the `schemaUpdateCache`, and the recursive methods call `getOrBuildUpdatedSchema` so they should fetch it from the cast in case it has already been converted.  This is the same when child values are converted -- they should fetch their new child schemas from the cache instead of building them again.
- Added usage of an instance of `JsonConverter` and `JsonDeserializer` if you wish to have the complex types toString come out in a JSON text format instead of the Java object's toString() implementation.  This is helpful for scenarios for example like using a JdbcSinkConnector where you have an array of structs as one field in your source, you can put these values into a database table as a blob of JSON text, then parse these values as JSON (for example PostgreSQL has loads of really good JSON parsing).  This behavior is controlled by the new configuration parameter `complex.string.as.json` but again by default it is set to false (so you have to set to true in order to use this).
- I also changed `castValueToType` from `private static` to `private`.  This was so that we can allow a check in this method on the instance value of our new `complex.string.as.json` configuration parameter and decide to call `castToJsonString` instead of the old `castToString` method.
  - I realize this one can maybe be a bit controversial, and there were several options I considered.  First, however, I tried to examine any public static method or property of any kind and see if anything ever makes use of `castValueToType` and could not see any (please mention if you see something I missed).  So a change from private static to private in this case seems very minor and should not impact any functionality -- nothing else can see or use it anyway outside of this class itself.
  - Another option is possibly a bit more like the `TimestampConverter` transform, where they have created a private instance of a `Config` subclass and then pass the entire instance to some of the static methods.  But I think that change would have to "touch"  a lot more places, and given the point above (I did not see where it was actually used anywhere from anything public static ) this seemed like a bit too much of a rebuild.
  - Also usage of this `castToJsonString` with using the `JsonConverter` and `JsonDeserializer` could be done a few other ways... but this was the one that I felt tried to use existing functionalities within Connect and was the "cleanest" looking that I could initially come up with from a code perspective.  And the reason to use a single private instance of the classes was to try and save a bit on resources -- it is possible that you will have multiple Json string conversions even within one record so I thought it was better to only have one instance we can re-use over and over.
- Changed the log level for the Cast log message from Trace to Debug (this seems like something you definitely want to see in Debug and not just Trace!).
- Added new test cases for casting Arrays and Maps to string, to JSON Strings, as well as for working with different types of recursive records (both with and without schema).  In these tests, I found that a lot of the weird issues only happen once you go a few levels deep so I have made the tests a little more complicated to ensure that everything was working properly even with multiple nested levels.

#### Example Usage

```
curl -X PUT -H "Content-Type: application/json" --data '{
  "connector.class": "FileStreamSink",
  "topics": "test",
  "file": "/tmp/cast.txt",
  "transforms": "cast",
  "transforms.cast.type": "org.apache.kafka.connect.transforms.Cast$Value",
  "transforms.cast.spec": "child_int:string,child_array_of_structs:string",
  "transforms.cast.recursive": "true",
  "transforms.cast.complex.string.as.json": "true"
}' http://localhost:8083/connectors/filestreamsink_cast_test/config
```


### ReplaceField

#### Added new Config Parameters:
- `recursive` optional boolean, default = `false`

#### Changes:

- A lot of the changes here are very similar to what was done in `Cast`.  In fact, even before my changes, the flow of these two transforms was actually almost identical, so it worked quite well to do them both like this at the same time and they are easily used together in transform chains within Connect.
- Namely, there is a new `recursive` configuration parameter and the `apply...` methods have been updated to recursively call methods to build the new target schema and values.  A lot of the code is exactly the same so you should even find direct copy-paste from `Cast` to here and using a lot of the same private object names, methods, etc.
   - Note also that the pattern follows the same as with `Cast` -- looping through the old schema and converted child values based on the old structure instead of first creating a new schema and then getting the old field.  This new flow also means that the `reverseRenamed` method and its `reverseRenames` map are no longer needed either (but I left them in for now).
- Added a logger instance and added Debug-level logging for a few different events, such as when a field is excluded or included, or when it is renamed.  So some of the methods were refactored a bit in order to provide this logging (for example the `filter` and `renamed` methods).
- I also added support when using `renames` for a "contains exactly one of" kind of scenario.  What I mean by this is that in your schema, you have several fields which you know by design that only one of them will have a value, and when that one has a value, all of the rest within that group will be null.  The change to this transform now allows you to specify a target name more than one time, but when the value transform is occurring, if more than one of them have a value then it will throw a `DataException`.  Before, the transform would throw a `DataException` when building the new schema based on the `renames` config (trying to add a duplicate field to the schema) but instead now this check happens when building the updated value instead.
- Also added a few unit tests to handle new scenarios and recursive operation (both with and without schemas).

#### Example Usage

```
curl -X PUT -H "Content-Type: application/json" --data '{
  "connector.class": "FileStreamSink",
  "topics": "test",
  "file": "/tmp/replace.txt",
  "transforms": "replace",
  "transforms.replace.type": "org.apache.kafka.connect.transforms.ReplaceField$Value",
  "transforms.replace.renames": "child_value_one:child_value,child_value_two:child_value",
  "transforms.replace.recursive": "true",
}' http://localhost:8083/connectors/filestreamsink_replace_test/config
```

I hope this covers everything but if you have any questions or concerns then please feel free to ask!



### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9493/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9492/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9492/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9492"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9492"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9492/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9492"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/60b6506098baa7bc69192c00e8f6f42a6670744d"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "I have made an update to **TimestampConverter** Connect transform to address the main issues that I logged in [KAFKA-10627](https://issues.apache.org/jira/browse/KAFKA-10627).\r\n\r\nI realized that kafka is using `java.util.Date` everywhere and as part of its core types (including in Schemas, values, etc).  In theory it would be good over time to upgrade to `java.time` classes but on first reflection it seems like quite a big overhaul to do this.\r\n\r\nSo instead I focused on the specific problem at hand: parsing strings into `Date` where the strings can come in different formats.  So for this part alone I changed to use `DateTimeFormatter` so we can use multiple patterns to match input strings and convert them to a `java.util.Date` after.\r\n\r\nI also updated some of the way the Config parameters and values work, to bring in line with the other classes and similar to what I did with #9470.\r\n\r\n#### String Input and Output Timestamp Format updates\r\n\r\nBecause now for input formats we allow multiple different possibilities using pattern matching, this does not work for the output format of a Timestamp to a String (which was another possibility of this transform).  So I have changed the configuration a bit... now there are three parameters:\r\n\r\n- `format` which is the original one. You can still use this one, and it will set both input (parsing) and output (Date/Timestamp to string format) based on this format.\r\n- `format.input` is a new parameter, where you can specify a DateTimeFormatter-compatible pattern string that supports multiple different formats in case you have a mix in your data.  For just one example, now you can use something like this as `format.input` and it will catch a lot of different variations which you might see in one timestamp field: `\"[yyyy-MM-dd[['T'][ ]HH:mm:ss[.SSSSSSSz][.SSS[XXX][X]]]]\"`\r\n- `format.output` is a new parameter which only controls the output of a Date/Timestamp to target type of `string`. This is the same as before and still uses `SimpleDateFormat` to create the output string, it is just controlled in a separate parameter now.\r\n\r\nI also added some code which checks the value of each of these three.  Basically it forces you to use either `format`, or one or both of the new parameters -- you cannot mix the old and new together.  In the end, `format.input` and `format.output` are the ones used in the rest of the logic, but the code first compares `format` against these values and sets the value for both of the new parameters depending on what was sent in the config.\r\n\r\n#### Support for multiple fields instead of one single field\r\n\r\nI changed the `field` parameter to now be called `fields` and supports multiple values as a comma-separated list.  I used this new `ConfigUtils.translateDeprecatedConfigs` method to provide automatic translation of of the old parameter to the new one as well.\r\n\r\nWith this change I also updated the `apply` methods so that they loop through each field and check against the list of `fields`.  Now you can specify a comma-separated list of multiple fields to have the same input format/output type applied.\r\n\r\n\r\nUnit tests have been added for both new updates (string formatting and multiple field support).\r\n\r\nAs I looked at this one then I realized that maybe it would be good to add `recursive` support similar to what I have done in #9470 but I guess that can come at another day!\r\n\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9492/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9492/commits",
  "created_at": "2020-10-24T17:31:21Z",
  "diff_url": "https://github.com/apache/kafka/pull/9492.diff",
  "draft": false,
  "head": {
    "label": "joshuagrisham:KAFKA-10627",
    "ref": "KAFKA-10627",
    "repo": {
      "archive_url": "https://api.github.com/repos/joshuagrisham/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/joshuagrisham/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/joshuagrisham/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/joshuagrisham/kafka/branches{/branch}",
      "clone_url": "https://github.com/joshuagrisham/kafka.git",
      "collaborators_url": "https://api.github.com/repos/joshuagrisham/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/joshuagrisham/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/joshuagrisham/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/joshuagrisham/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/joshuagrisham/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/joshuagrisham/kafka/contributors",
      "created_at": "2020-10-24T13:49:37Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/joshuagrisham/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/joshuagrisham/kafka/downloads",
      "events_url": "https://api.github.com/repos/joshuagrisham/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/joshuagrisham/kafka/forks",
      "full_name": "joshuagrisham/kafka",
      "git_commits_url": "https://api.github.com/repos/joshuagrisham/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/joshuagrisham/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/joshuagrisham/kafka/git/tags{/sha}",
      "git_url": "git://github.com/joshuagrisham/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/joshuagrisham/kafka/hooks",
      "html_url": "https://github.com/joshuagrisham/kafka",
      "id": 306893753,
      "issue_comment_url": "https://api.github.com/repos/joshuagrisham/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/joshuagrisham/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/joshuagrisham/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/joshuagrisham/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/joshuagrisham/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/joshuagrisham/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/joshuagrisham/kafka/merges",
      "milestones_url": "https://api.github.com/repos/joshuagrisham/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDY4OTM3NTM=",
      "notifications_url": "https://api.github.com/repos/joshuagrisham/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/18266314?v=4",
        "events_url": "https://api.github.com/users/joshuagrisham/events{/privacy}",
        "followers_url": "https://api.github.com/users/joshuagrisham/followers",
        "following_url": "https://api.github.com/users/joshuagrisham/following{/other_user}",
        "gists_url": "https://api.github.com/users/joshuagrisham/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/joshuagrisham",
        "id": 18266314,
        "login": "joshuagrisham",
        "node_id": "MDQ6VXNlcjE4MjY2MzE0",
        "organizations_url": "https://api.github.com/users/joshuagrisham/orgs",
        "received_events_url": "https://api.github.com/users/joshuagrisham/received_events",
        "repos_url": "https://api.github.com/users/joshuagrisham/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/joshuagrisham/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/joshuagrisham/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/joshuagrisham"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/joshuagrisham/kafka/pulls{/number}",
      "pushed_at": "2020-10-26T12:58:21Z",
      "releases_url": "https://api.github.com/repos/joshuagrisham/kafka/releases{/id}",
      "size": 107932,
      "ssh_url": "git@github.com:joshuagrisham/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/joshuagrisham/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/joshuagrisham/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/joshuagrisham/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/joshuagrisham/kafka/subscription",
      "svn_url": "https://github.com/joshuagrisham/kafka",
      "tags_url": "https://api.github.com/repos/joshuagrisham/kafka/tags",
      "teams_url": "https://api.github.com/repos/joshuagrisham/kafka/teams",
      "trees_url": "https://api.github.com/repos/joshuagrisham/kafka/git/trees{/sha}",
      "updated_at": "2020-10-24T13:49:39Z",
      "url": "https://api.github.com/repos/joshuagrisham/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "60b6506098baa7bc69192c00e8f6f42a6670744d",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/18266314?v=4",
      "events_url": "https://api.github.com/users/joshuagrisham/events{/privacy}",
      "followers_url": "https://api.github.com/users/joshuagrisham/followers",
      "following_url": "https://api.github.com/users/joshuagrisham/following{/other_user}",
      "gists_url": "https://api.github.com/users/joshuagrisham/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/joshuagrisham",
      "id": 18266314,
      "login": "joshuagrisham",
      "node_id": "MDQ6VXNlcjE4MjY2MzE0",
      "organizations_url": "https://api.github.com/users/joshuagrisham/orgs",
      "received_events_url": "https://api.github.com/users/joshuagrisham/received_events",
      "repos_url": "https://api.github.com/users/joshuagrisham/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/joshuagrisham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joshuagrisham/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/joshuagrisham"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9492",
  "id": 509466103,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9492",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "f5fbb1ffce5d57a820e46d0194838db2926f1bde",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5NDY2MTAz",
  "number": 9492,
  "patch_url": "https://github.com/apache/kafka/pull/9492.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9492/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/60b6506098baa7bc69192c00e8f6f42a6670744d",
  "title": "KAFKA-10627: Added support for Connect TimestampConverter to convert multiple fields using a comma-separated list, and changed the String input parser to use DateTimeFormatter instead of SimpleDateFormat.",
  "updated_at": "2020-10-26T12:58:28Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9492",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/18266314?v=4",
    "events_url": "https://api.github.com/users/joshuagrisham/events{/privacy}",
    "followers_url": "https://api.github.com/users/joshuagrisham/followers",
    "following_url": "https://api.github.com/users/joshuagrisham/following{/other_user}",
    "gists_url": "https://api.github.com/users/joshuagrisham/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/joshuagrisham",
    "id": 18266314,
    "login": "joshuagrisham",
    "node_id": "MDQ6VXNlcjE4MjY2MzE0",
    "organizations_url": "https://api.github.com/users/joshuagrisham/orgs",
    "received_events_url": "https://api.github.com/users/joshuagrisham/received_events",
    "repos_url": "https://api.github.com/users/joshuagrisham/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/joshuagrisham/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/joshuagrisham/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/joshuagrisham"
  }
}
json_root is_array: false
json_root is_object: true
number: 9492
title: KAFKA-10627: Added support for Connect TimestampConverter to convert multiple fields using a comma-separated list, and changed the String input parser to use DateTimeFormatter instead of SimpleDateFormat.
pr body: I have made an update to **TimestampConverter** Connect transform to address the main issues that I logged in [KAFKA-10627](https://issues.apache.org/jira/browse/KAFKA-10627).

I realized that kafka is using `java.util.Date` everywhere and as part of its core types (including in Schemas, values, etc).  In theory it would be good over time to upgrade to `java.time` classes but on first reflection it seems like quite a big overhaul to do this.

So instead I focused on the specific problem at hand: parsing strings into `Date` where the strings can come in different formats.  So for this part alone I changed to use `DateTimeFormatter` so we can use multiple patterns to match input strings and convert them to a `java.util.Date` after.

I also updated some of the way the Config parameters and values work, to bring in line with the other classes and similar to what I did with #9470.

#### String Input and Output Timestamp Format updates

Because now for input formats we allow multiple different possibilities using pattern matching, this does not work for the output format of a Timestamp to a String (which was another possibility of this transform).  So I have changed the configuration a bit... now there are three parameters:

- `format` which is the original one. You can still use this one, and it will set both input (parsing) and output (Date/Timestamp to string format) based on this format.
- `format.input` is a new parameter, where you can specify a DateTimeFormatter-compatible pattern string that supports multiple different formats in case you have a mix in your data.  For just one example, now you can use something like this as `format.input` and it will catch a lot of different variations which you might see in one timestamp field: `"[yyyy-MM-dd[['T'][ ]HH:mm:ss[.SSSSSSSz][.SSS[XXX][X]]]]"`
- `format.output` is a new parameter which only controls the output of a Date/Timestamp to target type of `string`. This is the same as before and still uses `SimpleDateFormat` to create the output string, it is just controlled in a separate parameter now.

I also added some code which checks the value of each of these three.  Basically it forces you to use either `format`, or one or both of the new parameters -- you cannot mix the old and new together.  In the end, `format.input` and `format.output` are the ones used in the rest of the logic, but the code first compares `format` against these values and sets the value for both of the new parameters depending on what was sent in the config.

#### Support for multiple fields instead of one single field

I changed the `field` parameter to now be called `fields` and supports multiple values as a comma-separated list.  I used this new `ConfigUtils.translateDeprecatedConfigs` method to provide automatic translation of of the old parameter to the new one as well.

With this change I also updated the `apply` methods so that they loop through each field and check against the list of `fields`.  Now you can specify a comma-separated list of multiple fields to have the same input format/output type applied.


Unit tests have been added for both new updates (string formatting and multiple field support).

As I looked at this one then I realized that maybe it would be good to add `recursive` support similar to what I have done in #9470 but I guess that can come at another day!


### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9492/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9491/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9491/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9491"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9491"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9491/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9491"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/d05e6394f9214b46a6c897352e7d83b3b4d8d49a"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Rename admin.VersionRange into admin.Versions to avoid discovery conflicts\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9491/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9491/commits",
  "created_at": "2020-10-24T02:08:49Z",
  "diff_url": "https://github.com/apache/kafka/pull/9491.diff",
  "draft": false,
  "head": {
    "label": "warrenzhu25:10623",
    "ref": "10623",
    "repo": {
      "archive_url": "https://api.github.com/repos/warrenzhu25/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/warrenzhu25/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/warrenzhu25/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/warrenzhu25/kafka/branches{/branch}",
      "clone_url": "https://github.com/warrenzhu25/kafka.git",
      "collaborators_url": "https://api.github.com/repos/warrenzhu25/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/warrenzhu25/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/warrenzhu25/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/warrenzhu25/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/warrenzhu25/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/warrenzhu25/kafka/contributors",
      "created_at": "2017-04-22T00:59:03Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/warrenzhu25/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/warrenzhu25/kafka/downloads",
      "events_url": "https://api.github.com/repos/warrenzhu25/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/warrenzhu25/kafka/forks",
      "full_name": "warrenzhu25/kafka",
      "git_commits_url": "https://api.github.com/repos/warrenzhu25/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/warrenzhu25/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/warrenzhu25/kafka/git/tags{/sha}",
      "git_url": "git://github.com/warrenzhu25/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/warrenzhu25/kafka/hooks",
      "html_url": "https://github.com/warrenzhu25/kafka",
      "id": 89034933,
      "issue_comment_url": "https://api.github.com/repos/warrenzhu25/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/warrenzhu25/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/warrenzhu25/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/warrenzhu25/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/warrenzhu25/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/warrenzhu25/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/warrenzhu25/kafka/merges",
      "milestones_url": "https://api.github.com/repos/warrenzhu25/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk4OTAzNDkzMw==",
      "notifications_url": "https://api.github.com/repos/warrenzhu25/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/1633312?v=4",
        "events_url": "https://api.github.com/users/warrenzhu25/events{/privacy}",
        "followers_url": "https://api.github.com/users/warrenzhu25/followers",
        "following_url": "https://api.github.com/users/warrenzhu25/following{/other_user}",
        "gists_url": "https://api.github.com/users/warrenzhu25/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/warrenzhu25",
        "id": 1633312,
        "login": "warrenzhu25",
        "node_id": "MDQ6VXNlcjE2MzMzMTI=",
        "organizations_url": "https://api.github.com/users/warrenzhu25/orgs",
        "received_events_url": "https://api.github.com/users/warrenzhu25/received_events",
        "repos_url": "https://api.github.com/users/warrenzhu25/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/warrenzhu25/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/warrenzhu25/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/warrenzhu25"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/warrenzhu25/kafka/pulls{/number}",
      "pushed_at": "2020-10-25T17:53:07Z",
      "releases_url": "https://api.github.com/repos/warrenzhu25/kafka/releases{/id}",
      "size": 99261,
      "ssh_url": "git@github.com:warrenzhu25/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/warrenzhu25/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/warrenzhu25/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/warrenzhu25/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/warrenzhu25/kafka/subscription",
      "svn_url": "https://github.com/warrenzhu25/kafka",
      "tags_url": "https://api.github.com/repos/warrenzhu25/kafka/tags",
      "teams_url": "https://api.github.com/repos/warrenzhu25/kafka/teams",
      "trees_url": "https://api.github.com/repos/warrenzhu25/kafka/git/trees{/sha}",
      "updated_at": "2017-04-22T00:59:11Z",
      "url": "https://api.github.com/repos/warrenzhu25/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "d05e6394f9214b46a6c897352e7d83b3b4d8d49a",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/1633312?v=4",
      "events_url": "https://api.github.com/users/warrenzhu25/events{/privacy}",
      "followers_url": "https://api.github.com/users/warrenzhu25/followers",
      "following_url": "https://api.github.com/users/warrenzhu25/following{/other_user}",
      "gists_url": "https://api.github.com/users/warrenzhu25/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/warrenzhu25",
      "id": 1633312,
      "login": "warrenzhu25",
      "node_id": "MDQ6VXNlcjE2MzMzMTI=",
      "organizations_url": "https://api.github.com/users/warrenzhu25/orgs",
      "received_events_url": "https://api.github.com/users/warrenzhu25/received_events",
      "repos_url": "https://api.github.com/users/warrenzhu25/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/warrenzhu25/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/warrenzhu25/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/warrenzhu25"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9491",
  "id": 509307886,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9491",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "0134eeb47856744fdd880f9aad9a7bd44ca1d212",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5MzA3ODg2",
  "number": 9491,
  "patch_url": "https://github.com/apache/kafka/pull/9491.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9491/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/d05e6394f9214b46a6c897352e7d83b3b4d8d49a",
  "title": "KAFKA-10623: Refactor code to avoid discovery conflicts for admin.VersionRange",
  "updated_at": "2020-10-24T02:08:49Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9491",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/1633312?v=4",
    "events_url": "https://api.github.com/users/warrenzhu25/events{/privacy}",
    "followers_url": "https://api.github.com/users/warrenzhu25/followers",
    "following_url": "https://api.github.com/users/warrenzhu25/following{/other_user}",
    "gists_url": "https://api.github.com/users/warrenzhu25/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/warrenzhu25",
    "id": 1633312,
    "login": "warrenzhu25",
    "node_id": "MDQ6VXNlcjE2MzMzMTI=",
    "organizations_url": "https://api.github.com/users/warrenzhu25/orgs",
    "received_events_url": "https://api.github.com/users/warrenzhu25/received_events",
    "repos_url": "https://api.github.com/users/warrenzhu25/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/warrenzhu25/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/warrenzhu25/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/warrenzhu25"
  }
}
json_root is_array: false
json_root is_object: true
number: 9491
title: KAFKA-10623: Refactor code to avoid discovery conflicts for admin.VersionRange
pr body: Rename admin.VersionRange into admin.Versions to avoid discovery conflicts

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9491/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9489/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9489/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9489"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9489"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9489/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9489"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/9e6a4162ef8ac911c272d9e33231ff785e29261c"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This message absolutely floods the logs, especially in an eos application where the commit interval is just 100ms. It's definitely a useful message but I don't think there's any justification for it being at the INFO level when it's logged 10 times a second. ",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9489/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9489/commits",
  "created_at": "2020-10-24T00:02:47Z",
  "diff_url": "https://github.com/apache/kafka/pull/9489.diff",
  "draft": false,
  "head": {
    "label": "ableegoldman:MINOR-demote-task-commit-logging",
    "ref": "MINOR-demote-task-commit-logging",
    "repo": {
      "archive_url": "https://api.github.com/repos/ableegoldman/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/ableegoldman/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/ableegoldman/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/ableegoldman/kafka/branches{/branch}",
      "clone_url": "https://github.com/ableegoldman/kafka.git",
      "collaborators_url": "https://api.github.com/repos/ableegoldman/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/ableegoldman/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/ableegoldman/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/ableegoldman/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/ableegoldman/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/ableegoldman/kafka/contributors",
      "created_at": "2019-01-18T01:48:43Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/ableegoldman/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/ableegoldman/kafka/downloads",
      "events_url": "https://api.github.com/repos/ableegoldman/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/ableegoldman/kafka/forks",
      "full_name": "ableegoldman/kafka",
      "git_commits_url": "https://api.github.com/repos/ableegoldman/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/ableegoldman/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/ableegoldman/kafka/git/tags{/sha}",
      "git_url": "git://github.com/ableegoldman/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/ableegoldman/kafka/hooks",
      "html_url": "https://github.com/ableegoldman/kafka",
      "id": 166325386,
      "issue_comment_url": "https://api.github.com/repos/ableegoldman/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/ableegoldman/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/ableegoldman/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/ableegoldman/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/ableegoldman/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/ableegoldman/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/ableegoldman/kafka/merges",
      "milestones_url": "https://api.github.com/repos/ableegoldman/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxNjYzMjUzODY=",
      "notifications_url": "https://api.github.com/repos/ableegoldman/kafka/notifications{?since,all,participating}",
      "open_issues": 1,
      "open_issues_count": 1,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/4843099?v=4",
        "events_url": "https://api.github.com/users/ableegoldman/events{/privacy}",
        "followers_url": "https://api.github.com/users/ableegoldman/followers",
        "following_url": "https://api.github.com/users/ableegoldman/following{/other_user}",
        "gists_url": "https://api.github.com/users/ableegoldman/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ableegoldman",
        "id": 4843099,
        "login": "ableegoldman",
        "node_id": "MDQ6VXNlcjQ4NDMwOTk=",
        "organizations_url": "https://api.github.com/users/ableegoldman/orgs",
        "received_events_url": "https://api.github.com/users/ableegoldman/received_events",
        "repos_url": "https://api.github.com/users/ableegoldman/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ableegoldman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ableegoldman/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ableegoldman"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/ableegoldman/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T01:28:49Z",
      "releases_url": "https://api.github.com/repos/ableegoldman/kafka/releases{/id}",
      "size": 105950,
      "ssh_url": "git@github.com:ableegoldman/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/ableegoldman/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/ableegoldman/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/ableegoldman/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/ableegoldman/kafka/subscription",
      "svn_url": "https://github.com/ableegoldman/kafka",
      "tags_url": "https://api.github.com/repos/ableegoldman/kafka/tags",
      "teams_url": "https://api.github.com/repos/ableegoldman/kafka/teams",
      "trees_url": "https://api.github.com/repos/ableegoldman/kafka/git/trees{/sha}",
      "updated_at": "2020-10-21T23:14:10Z",
      "url": "https://api.github.com/repos/ableegoldman/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "9e6a4162ef8ac911c272d9e33231ff785e29261c",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/4843099?v=4",
      "events_url": "https://api.github.com/users/ableegoldman/events{/privacy}",
      "followers_url": "https://api.github.com/users/ableegoldman/followers",
      "following_url": "https://api.github.com/users/ableegoldman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ableegoldman/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ableegoldman",
      "id": 4843099,
      "login": "ableegoldman",
      "node_id": "MDQ6VXNlcjQ4NDMwOTk=",
      "organizations_url": "https://api.github.com/users/ableegoldman/orgs",
      "received_events_url": "https://api.github.com/users/ableegoldman/received_events",
      "repos_url": "https://api.github.com/users/ableegoldman/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ableegoldman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ableegoldman/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ableegoldman"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9489",
  "id": 509287846,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9489",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "72248abf1337048cabd2fc06697dab106c692378",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5Mjg3ODQ2",
  "number": 9489,
  "patch_url": "https://github.com/apache/kafka/pull/9489.patch",
  "requested_reviewers": [
    {
      "avatar_url": "https://avatars0.githubusercontent.com/u/832787?v=4",
      "events_url": "https://api.github.com/users/vvcephei/events{/privacy}",
      "followers_url": "https://api.github.com/users/vvcephei/followers",
      "following_url": "https://api.github.com/users/vvcephei/following{/other_user}",
      "gists_url": "https://api.github.com/users/vvcephei/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vvcephei",
      "id": 832787,
      "login": "vvcephei",
      "node_id": "MDQ6VXNlcjgzMjc4Nw==",
      "organizations_url": "https://api.github.com/users/vvcephei/orgs",
      "received_events_url": "https://api.github.com/users/vvcephei/received_events",
      "repos_url": "https://api.github.com/users/vvcephei/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vvcephei/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vvcephei/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vvcephei"
    },
    {
      "avatar_url": "https://avatars0.githubusercontent.com/u/10729597?v=4",
      "events_url": "https://api.github.com/users/guozhangwang/events{/privacy}",
      "followers_url": "https://api.github.com/users/guozhangwang/followers",
      "following_url": "https://api.github.com/users/guozhangwang/following{/other_user}",
      "gists_url": "https://api.github.com/users/guozhangwang/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/guozhangwang",
      "id": 10729597,
      "login": "guozhangwang",
      "node_id": "MDQ6VXNlcjEwNzI5NTk3",
      "organizations_url": "https://api.github.com/users/guozhangwang/orgs",
      "received_events_url": "https://api.github.com/users/guozhangwang/received_events",
      "repos_url": "https://api.github.com/users/guozhangwang/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/guozhangwang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/guozhangwang/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/guozhangwang"
    }
  ],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9489/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/9e6a4162ef8ac911c272d9e33231ff785e29261c",
  "title": "MINOR: demote \"Committing task offsets\" log to DEBUG",
  "updated_at": "2020-10-24T00:08:05Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9489",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/4843099?v=4",
    "events_url": "https://api.github.com/users/ableegoldman/events{/privacy}",
    "followers_url": "https://api.github.com/users/ableegoldman/followers",
    "following_url": "https://api.github.com/users/ableegoldman/following{/other_user}",
    "gists_url": "https://api.github.com/users/ableegoldman/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ableegoldman",
    "id": 4843099,
    "login": "ableegoldman",
    "node_id": "MDQ6VXNlcjQ4NDMwOTk=",
    "organizations_url": "https://api.github.com/users/ableegoldman/orgs",
    "received_events_url": "https://api.github.com/users/ableegoldman/received_events",
    "repos_url": "https://api.github.com/users/ableegoldman/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ableegoldman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ableegoldman/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ableegoldman"
  }
}
json_root is_array: false
json_root is_object: true
number: 9489
title: MINOR: demote "Committing task offsets" log to DEBUG
pr body: This message absolutely floods the logs, especially in an eos application where the commit interval is just 100ms. It's definitely a useful message but I don't think there's any justification for it being at the INFO level when it's logged 10 times a second. 
review_comments: https://api.github.com/repos/apache/kafka/pulls/9489/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9487/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9487/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9487"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9487"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9487/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9487"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/b85a81304b78e5e54310082de7f3a4c7ca2a8320"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "f1a7097ccd79ecba2c0640766d64ba0f1e3e313d",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "*More detailed description of your change,\r\nif necessary. The PR title and PR message become\r\nthe squashed commit message, so use a separate\r\ncomment to ping reviewers.*\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9487/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9487/commits",
  "created_at": "2020-10-23T20:45:51Z",
  "diff_url": "https://github.com/apache/kafka/pull/9487.diff",
  "draft": false,
  "head": {
    "label": "wcarlson5:wcarlson-streams-handler",
    "ref": "wcarlson-streams-handler",
    "repo": {
      "archive_url": "https://api.github.com/repos/wcarlson5/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/wcarlson5/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/wcarlson5/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/wcarlson5/kafka/branches{/branch}",
      "clone_url": "https://github.com/wcarlson5/kafka.git",
      "collaborators_url": "https://api.github.com/repos/wcarlson5/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/wcarlson5/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/wcarlson5/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/wcarlson5/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/wcarlson5/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/wcarlson5/kafka/contributors",
      "created_at": "2019-09-23T22:54:50Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/wcarlson5/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/wcarlson5/kafka/downloads",
      "events_url": "https://api.github.com/repos/wcarlson5/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/wcarlson5/kafka/forks",
      "full_name": "wcarlson5/kafka",
      "git_commits_url": "https://api.github.com/repos/wcarlson5/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/wcarlson5/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/wcarlson5/kafka/git/tags{/sha}",
      "git_url": "git://github.com/wcarlson5/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/wcarlson5/kafka/hooks",
      "html_url": "https://github.com/wcarlson5/kafka",
      "id": 210466651,
      "issue_comment_url": "https://api.github.com/repos/wcarlson5/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/wcarlson5/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/wcarlson5/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/wcarlson5/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/wcarlson5/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/wcarlson5/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/wcarlson5/kafka/merges",
      "milestones_url": "https://api.github.com/repos/wcarlson5/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMTA0NjY2NTE=",
      "notifications_url": "https://api.github.com/repos/wcarlson5/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/18128741?v=4",
        "events_url": "https://api.github.com/users/wcarlson5/events{/privacy}",
        "followers_url": "https://api.github.com/users/wcarlson5/followers",
        "following_url": "https://api.github.com/users/wcarlson5/following{/other_user}",
        "gists_url": "https://api.github.com/users/wcarlson5/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/wcarlson5",
        "id": 18128741,
        "login": "wcarlson5",
        "node_id": "MDQ6VXNlcjE4MTI4NzQx",
        "organizations_url": "https://api.github.com/users/wcarlson5/orgs",
        "received_events_url": "https://api.github.com/users/wcarlson5/received_events",
        "repos_url": "https://api.github.com/users/wcarlson5/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/wcarlson5/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wcarlson5/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/wcarlson5"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/wcarlson5/kafka/pulls{/number}",
      "pushed_at": "2020-10-26T23:10:52Z",
      "releases_url": "https://api.github.com/repos/wcarlson5/kafka/releases{/id}",
      "size": 103174,
      "ssh_url": "git@github.com:wcarlson5/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/wcarlson5/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/wcarlson5/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/wcarlson5/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/wcarlson5/kafka/subscription",
      "svn_url": "https://github.com/wcarlson5/kafka",
      "tags_url": "https://api.github.com/repos/wcarlson5/kafka/tags",
      "teams_url": "https://api.github.com/repos/wcarlson5/kafka/teams",
      "trees_url": "https://api.github.com/repos/wcarlson5/kafka/git/trees{/sha}",
      "updated_at": "2020-10-23T14:24:31Z",
      "url": "https://api.github.com/repos/wcarlson5/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "b85a81304b78e5e54310082de7f3a4c7ca2a8320",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/18128741?v=4",
      "events_url": "https://api.github.com/users/wcarlson5/events{/privacy}",
      "followers_url": "https://api.github.com/users/wcarlson5/followers",
      "following_url": "https://api.github.com/users/wcarlson5/following{/other_user}",
      "gists_url": "https://api.github.com/users/wcarlson5/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/wcarlson5",
      "id": 18128741,
      "login": "wcarlson5",
      "node_id": "MDQ6VXNlcjE4MTI4NzQx",
      "organizations_url": "https://api.github.com/users/wcarlson5/orgs",
      "received_events_url": "https://api.github.com/users/wcarlson5/received_events",
      "repos_url": "https://api.github.com/users/wcarlson5/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/wcarlson5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wcarlson5/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/wcarlson5"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9487",
  "id": 509208862,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9487",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "db0926e1d0d9dd747e868c9e84034b1ae0783104",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5MjA4ODYy",
  "number": 9487,
  "patch_url": "https://github.com/apache/kafka/pull/9487.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9487/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/b85a81304b78e5e54310082de7f3a4c7ca2a8320",
  "title": "KAFKA-9331 add a streams handler",
  "updated_at": "2020-10-26T23:12:39Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9487",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/18128741?v=4",
    "events_url": "https://api.github.com/users/wcarlson5/events{/privacy}",
    "followers_url": "https://api.github.com/users/wcarlson5/followers",
    "following_url": "https://api.github.com/users/wcarlson5/following{/other_user}",
    "gists_url": "https://api.github.com/users/wcarlson5/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/wcarlson5",
    "id": 18128741,
    "login": "wcarlson5",
    "node_id": "MDQ6VXNlcjE4MTI4NzQx",
    "organizations_url": "https://api.github.com/users/wcarlson5/orgs",
    "received_events_url": "https://api.github.com/users/wcarlson5/received_events",
    "repos_url": "https://api.github.com/users/wcarlson5/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/wcarlson5/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wcarlson5/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/wcarlson5"
  }
}
json_root is_array: false
json_root is_object: true
number: 9487
title: KAFKA-9331 add a streams handler
pr body: *More detailed description of your change,
if necessary. The PR title and PR message become
the squashed commit message, so use a separate
comment to ping reviewers.*

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9487/comments
id: 511148601
url: https://api.github.com/repos/apache/kafka/pulls/comments/511148601
body: This will call closeToError but I am testing if that has a problem. So far it does not
diff_hunk: @@ -782,7 +849,12 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,
                 cacheSizePerThread,
                 stateDirectory,
                 delegatingStateRestoreListener,
-                i + 1);
+                i + 1,
+                KafkaStreams.this::close,
path: streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java
html: https://github.com/apache/kafka/pull/9487#discussion_r511148601
id: 511149017
url: https://api.github.com/repos/apache/kafka/pulls/comments/511149017
body: moved into stream thread because of a concurrent operation exception that appeared
diff_hunk: @@ -346,26 +351,92 @@ public void setStateListener(final KafkaStreams.StateListener listener) {
      * Set the handler invoked when a {@link StreamsConfig#NUM_STREAM_THREADS_CONFIG internal thread} abruptly
      * terminates due to an uncaught exception.
      *
-     * @param eh the uncaught exception handler for all internal threads; {@code null} deletes the current handler
+     * @param uncaughtExceptionHandler the uncaught exception handler for all internal threads; {@code null} deletes the current handler
      * @throws IllegalStateException if this {@code KafkaStreams} instance is not in state {@link State#CREATED CREATED}.
+     *
+     * @Deprecated Since 2.7.0. Use {@link KafkaStreams#setUncaughtExceptionHandler(StreamsUncaughtExceptionHandler)} instead.
+     *
      */
-    public void setUncaughtExceptionHandler(final Thread.UncaughtExceptionHandler eh) {
+    public void setUncaughtExceptionHandler(final Thread.UncaughtExceptionHandler uncaughtExceptionHandler) {
         synchronized (stateLock) {
             if (state == State.CREATED) {
                 for (final StreamThread thread : threads) {
-                    thread.setUncaughtExceptionHandler(eh);
+                    thread.setUncaughtExceptionHandler(uncaughtExceptionHandler);
                 }
 
                 if (globalStreamThread != null) {
-                    globalStreamThread.setUncaughtExceptionHandler(eh);
+                    globalStreamThread.setUncaughtExceptionHandler(uncaughtExceptionHandler);
                 }
             } else {
                 throw new IllegalStateException("Can only set UncaughtExceptionHandler in CREATED state. " +
-                    "Current state is: " + state);
+                        "Current state is: " + state);
+            }
+        }
+    }
+
+    /**
+     * Set the handler invoked when a {@link StreamsConfig#NUM_STREAM_THREADS_CONFIG internal thread}
+     * throws an unexpected exception.
+     * These might be exceptions indicating rare bugs in Kafka Streams, or they
+     * might be exceptions thrown by your code, for example a NullPointerException thrown from your processor
+     * logic.
+     * <p>
+     * Note, this handler must be threadsafe, since it will be shared among all threads, and invoked from any
+     * thread that encounters such an exception.
+     *
+     * @param streamsUncaughtExceptionHandler the uncaught exception handler of type {@link StreamsUncaughtExceptionHandler} for all internal threads; {@code null} deletes the current handler
+     * @throws IllegalStateException if this {@code KafkaStreams} instance is not in state {@link State#CREATED CREATED}.
+     * @throws NullPointerException @NotNull if streamsUncaughtExceptionHandler is null.
+     */
+    public void setUncaughtExceptionHandler(final StreamsUncaughtExceptionHandler streamsUncaughtExceptionHandler) {
+        final StreamsUncaughtExceptionHandler handler = exception -> handleStreamsUncaughtException(exception, streamsUncaughtExceptionHandler);
+        synchronized (stateLock) {
+            if (state == State.CREATED) {
+                Objects.requireNonNull(streamsUncaughtExceptionHandler);
+                for (final StreamThread thread : threads) {
+                    thread.setStreamsUncaughtExceptionHandler(handler);
+                }
+                if (globalStreamThread != null) {
+                    globalStreamThread.setUncaughtExceptionHandler(handler);
+                }
+            } else {
+                throw new IllegalStateException("Can only set UncaughtExceptionHandler in CREATED state. " +
+                        "Current state is: " + state);
             }
         }
     }
 
+    private StreamsUncaughtExceptionHandler.StreamThreadExceptionResponse handleStreamsUncaughtException(final Throwable e,
+                                                                                                         final StreamsUncaughtExceptionHandler streamsUncaughtExceptionHandler) {
+        final StreamsUncaughtExceptionHandler.StreamThreadExceptionResponse action = streamsUncaughtExceptionHandler.handle(e);
+        switch (action) {
+//            case REPLACE_STREAM_THREAD:
+//                log.error("Encountered the following exception during processing " +
+//                        "and the the stream thread will be replaced: ", e);
+//            this.addStreamsThread();
+//                break;
+            case SHUTDOWN_CLIENT:
+                log.error("Encountered the following exception during processing " +
+                        "and the client is going to shut down: ", e);
+                close(Duration.ZERO);
+                break;
+            case SHUTDOWN_APPLICATION:
+                if (e instanceof Error) {
+                    log.error("This option requires the thread to stay running to start the shutdown." +
+                            "Therefore it is not suitable for Error types.");
+                }
+//                for (final StreamThread streamThread: threads) {
path: streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java
html: https://github.com/apache/kafka/pull/9487#discussion_r511149017
id: 512320447
url: https://api.github.com/repos/apache/kafka/pulls/comments/512320447
body: Method was a few lines too long
diff_hunk: @@ -659,7 +727,6 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,
                          final Time time) throws StreamsException {
         this.config = config;
         this.time = time;
-
path: streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java
html: https://github.com/apache/kafka/pull/9487#discussion_r512320447
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9485/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9485/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9485"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9485"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9485/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9485"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/a91a5bc32f614b09c65cb416df4e23f73aa9dbe8"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "*More detailed description of your change,\r\nif necessary. The PR title and PR message become\r\nthe squashed commit message, so use a separate\r\ncomment to ping reviewers.*\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9485/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9485/commits",
  "created_at": "2020-10-23T05:23:25Z",
  "diff_url": "https://github.com/apache/kafka/pull/9485.diff",
  "draft": true,
  "head": {
    "label": "d8tltanc:SUGGEST_DEFAULT",
    "ref": "SUGGEST_DEFAULT",
    "repo": {
      "archive_url": "https://api.github.com/repos/d8tltanc/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/d8tltanc/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/d8tltanc/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/d8tltanc/kafka/branches{/branch}",
      "clone_url": "https://github.com/d8tltanc/kafka.git",
      "collaborators_url": "https://api.github.com/repos/d8tltanc/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/d8tltanc/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/d8tltanc/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/d8tltanc/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/d8tltanc/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/d8tltanc/kafka/contributors",
      "created_at": "2020-02-20T21:41:39Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/d8tltanc/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/d8tltanc/kafka/downloads",
      "events_url": "https://api.github.com/repos/d8tltanc/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/d8tltanc/kafka/forks",
      "full_name": "d8tltanc/kafka",
      "git_commits_url": "https://api.github.com/repos/d8tltanc/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/d8tltanc/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/d8tltanc/kafka/git/tags{/sha}",
      "git_url": "git://github.com/d8tltanc/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/d8tltanc/kafka/hooks",
      "html_url": "https://github.com/d8tltanc/kafka",
      "id": 241996119,
      "issue_comment_url": "https://api.github.com/repos/d8tltanc/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/d8tltanc/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/d8tltanc/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/d8tltanc/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/d8tltanc/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/d8tltanc/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/d8tltanc/kafka/merges",
      "milestones_url": "https://api.github.com/repos/d8tltanc/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyNDE5OTYxMTk=",
      "notifications_url": "https://api.github.com/repos/d8tltanc/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/31675100?v=4",
        "events_url": "https://api.github.com/users/d8tltanc/events{/privacy}",
        "followers_url": "https://api.github.com/users/d8tltanc/followers",
        "following_url": "https://api.github.com/users/d8tltanc/following{/other_user}",
        "gists_url": "https://api.github.com/users/d8tltanc/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/d8tltanc",
        "id": 31675100,
        "login": "d8tltanc",
        "node_id": "MDQ6VXNlcjMxNjc1MTAw",
        "organizations_url": "https://api.github.com/users/d8tltanc/orgs",
        "received_events_url": "https://api.github.com/users/d8tltanc/received_events",
        "repos_url": "https://api.github.com/users/d8tltanc/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/d8tltanc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/d8tltanc/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/d8tltanc"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/d8tltanc/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T01:53:49Z",
      "releases_url": "https://api.github.com/repos/d8tltanc/kafka/releases{/id}",
      "size": 106424,
      "ssh_url": "git@github.com:d8tltanc/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/d8tltanc/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/d8tltanc/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/d8tltanc/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/d8tltanc/kafka/subscription",
      "svn_url": "https://github.com/d8tltanc/kafka",
      "tags_url": "https://api.github.com/repos/d8tltanc/kafka/tags",
      "teams_url": "https://api.github.com/repos/d8tltanc/kafka/teams",
      "trees_url": "https://api.github.com/repos/d8tltanc/kafka/git/trees{/sha}",
      "updated_at": "2020-03-30T04:36:15Z",
      "url": "https://api.github.com/repos/d8tltanc/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "a91a5bc32f614b09c65cb416df4e23f73aa9dbe8",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/31675100?v=4",
      "events_url": "https://api.github.com/users/d8tltanc/events{/privacy}",
      "followers_url": "https://api.github.com/users/d8tltanc/followers",
      "following_url": "https://api.github.com/users/d8tltanc/following{/other_user}",
      "gists_url": "https://api.github.com/users/d8tltanc/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/d8tltanc",
      "id": 31675100,
      "login": "d8tltanc",
      "node_id": "MDQ6VXNlcjMxNjc1MTAw",
      "organizations_url": "https://api.github.com/users/d8tltanc/orgs",
      "received_events_url": "https://api.github.com/users/d8tltanc/received_events",
      "repos_url": "https://api.github.com/users/d8tltanc/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/d8tltanc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/d8tltanc/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/d8tltanc"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9485",
  "id": 508725536,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9485",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "66f6a9d8bc752860b5b7d1f096d92c5501c93739",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA4NzI1NTM2",
  "number": 9485,
  "patch_url": "https://github.com/apache/kafka/pull/9485.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9485/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/a91a5bc32f614b09c65cb416df4e23f73aa9dbe8",
  "title": "[WIP] KAKFA-10619: Producer will enable EOS by default",
  "updated_at": "2020-10-27T01:53:53Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9485",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/31675100?v=4",
    "events_url": "https://api.github.com/users/d8tltanc/events{/privacy}",
    "followers_url": "https://api.github.com/users/d8tltanc/followers",
    "following_url": "https://api.github.com/users/d8tltanc/following{/other_user}",
    "gists_url": "https://api.github.com/users/d8tltanc/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/d8tltanc",
    "id": 31675100,
    "login": "d8tltanc",
    "node_id": "MDQ6VXNlcjMxNjc1MTAw",
    "organizations_url": "https://api.github.com/users/d8tltanc/orgs",
    "received_events_url": "https://api.github.com/users/d8tltanc/received_events",
    "repos_url": "https://api.github.com/users/d8tltanc/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/d8tltanc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/d8tltanc/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/d8tltanc"
  }
}
json_root is_array: false
json_root is_object: true
number: 9485
title: [WIP] KAKFA-10619: Producer will enable EOS by default
pr body: *More detailed description of your change,
if necessary. The PR title and PR message become
the squashed commit message, so use a separate
comment to ping reviewers.*

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9485/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9482/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9482/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9482"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9482"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9482/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9482"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/7b6292d49b3cc7ac086d721519d82cda94bf4881"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "7ca299b8c0f2f3256c40b694078e422350c20d19",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "In #9418, we add a listener to the `RaftClient` interface. In that patch, we used it only to send commit notifications for writes from the leader. In this PR, we extend the `handleCommit` API to accept all committed data and we remove the pull-based `read` API. Additionally, we add two new callbacks to the listener interface in order to notify the state machine when the raft client has claimed or resigned leadership.\r\n\r\nFinally, this patch allows the `RaftClient` to support multiple listeners. This is necessary for KIP-500 because we will have one listener for the controller role and one for the broker role.\r\n\r\nNote this patch builds on top of #9418. Once merged, I will rebase this patch and remove draft status.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9482/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9482/commits",
  "created_at": "2020-10-22T18:32:33Z",
  "diff_url": "https://github.com/apache/kafka/pull/9482.diff",
  "draft": true,
  "head": {
    "label": "hachikuji:raft-read-refactor",
    "ref": "raft-read-refactor",
    "repo": {
      "archive_url": "https://api.github.com/repos/hachikuji/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/hachikuji/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/hachikuji/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/hachikuji/kafka/branches{/branch}",
      "clone_url": "https://github.com/hachikuji/kafka.git",
      "collaborators_url": "https://api.github.com/repos/hachikuji/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/hachikuji/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/hachikuji/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/hachikuji/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/hachikuji/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/hachikuji/kafka/contributors",
      "created_at": "2015-05-18T20:54:26Z",
      "default_branch": "0.8.2",
      "deployments_url": "https://api.github.com/repos/hachikuji/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/hachikuji/kafka/downloads",
      "events_url": "https://api.github.com/repos/hachikuji/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/hachikuji/kafka/forks",
      "full_name": "hachikuji/kafka",
      "git_commits_url": "https://api.github.com/repos/hachikuji/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/hachikuji/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/hachikuji/kafka/git/tags{/sha}",
      "git_url": "git://github.com/hachikuji/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/hachikuji/kafka/hooks",
      "html_url": "https://github.com/hachikuji/kafka",
      "id": 35842084,
      "issue_comment_url": "https://api.github.com/repos/hachikuji/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/hachikuji/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/hachikuji/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/hachikuji/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/hachikuji/kafka/labels{/name}",
      "language": "Scala",
      "languages_url": "https://api.github.com/repos/hachikuji/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/hachikuji/kafka/merges",
      "milestones_url": "https://api.github.com/repos/hachikuji/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzNTg0MjA4NA==",
      "notifications_url": "https://api.github.com/repos/hachikuji/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/12502538?v=4",
        "events_url": "https://api.github.com/users/hachikuji/events{/privacy}",
        "followers_url": "https://api.github.com/users/hachikuji/followers",
        "following_url": "https://api.github.com/users/hachikuji/following{/other_user}",
        "gists_url": "https://api.github.com/users/hachikuji/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/hachikuji",
        "id": 12502538,
        "login": "hachikuji",
        "node_id": "MDQ6VXNlcjEyNTAyNTM4",
        "organizations_url": "https://api.github.com/users/hachikuji/orgs",
        "received_events_url": "https://api.github.com/users/hachikuji/received_events",
        "repos_url": "https://api.github.com/users/hachikuji/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/hachikuji/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hachikuji/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/hachikuji"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/hachikuji/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T01:36:35Z",
      "releases_url": "https://api.github.com/repos/hachikuji/kafka/releases{/id}",
      "size": 111508,
      "ssh_url": "git@github.com:hachikuji/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/hachikuji/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/hachikuji/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/hachikuji/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/hachikuji/kafka/subscription",
      "svn_url": "https://github.com/hachikuji/kafka",
      "tags_url": "https://api.github.com/repos/hachikuji/kafka/tags",
      "teams_url": "https://api.github.com/repos/hachikuji/kafka/teams",
      "trees_url": "https://api.github.com/repos/hachikuji/kafka/git/trees{/sha}",
      "updated_at": "2018-12-20T09:55:26Z",
      "url": "https://api.github.com/repos/hachikuji/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "7b6292d49b3cc7ac086d721519d82cda94bf4881",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/12502538?v=4",
      "events_url": "https://api.github.com/users/hachikuji/events{/privacy}",
      "followers_url": "https://api.github.com/users/hachikuji/followers",
      "following_url": "https://api.github.com/users/hachikuji/following{/other_user}",
      "gists_url": "https://api.github.com/users/hachikuji/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/hachikuji",
      "id": 12502538,
      "login": "hachikuji",
      "node_id": "MDQ6VXNlcjEyNTAyNTM4",
      "organizations_url": "https://api.github.com/users/hachikuji/orgs",
      "received_events_url": "https://api.github.com/users/hachikuji/received_events",
      "repos_url": "https://api.github.com/users/hachikuji/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/hachikuji/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hachikuji/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/hachikuji"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9482",
  "id": 508481774,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9482",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "f7ea2b5aef06a76a3589b3916b367063d40c413f",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA4NDgxNzc0",
  "number": 9482,
  "patch_url": "https://github.com/apache/kafka/pull/9482.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9482/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/7b6292d49b3cc7ac086d721519d82cda94bf4881",
  "title": "KAFKA-10632; Raft client should push all committed data to state machines",
  "updated_at": "2020-10-22T23:33:00Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9482",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/12502538?v=4",
    "events_url": "https://api.github.com/users/hachikuji/events{/privacy}",
    "followers_url": "https://api.github.com/users/hachikuji/followers",
    "following_url": "https://api.github.com/users/hachikuji/following{/other_user}",
    "gists_url": "https://api.github.com/users/hachikuji/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/hachikuji",
    "id": 12502538,
    "login": "hachikuji",
    "node_id": "MDQ6VXNlcjEyNTAyNTM4",
    "organizations_url": "https://api.github.com/users/hachikuji/orgs",
    "received_events_url": "https://api.github.com/users/hachikuji/received_events",
    "repos_url": "https://api.github.com/users/hachikuji/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/hachikuji/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hachikuji/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/hachikuji"
  }
}
json_root is_array: false
json_root is_object: true
number: 9482
title: KAFKA-10632; Raft client should push all committed data to state machines
pr body: In #9418, we add a listener to the `RaftClient` interface. In that patch, we used it only to send commit notifications for writes from the leader. In this PR, we extend the `handleCommit` API to accept all committed data and we remove the pull-based `read` API. Additionally, we add two new callbacks to the listener interface in order to notify the state machine when the raft client has claimed or resigned leadership.

Finally, this patch allows the `RaftClient` to support multiple listeners. This is necessary for KIP-500 because we will have one listener for the controller role and one for the broker role.

Note this patch builds on top of #9418. Once merged, I will rebase this patch and remove draft status.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9482/comments
id: 510385486
url: https://api.github.com/repos/apache/kafka/pulls/comments/510385486
body: I would remove this comment. We ca file an issue and fix it if this becomes a performance issue.
diff_hunk: @@ -206,30 +234,77 @@ private void updateLeaderEndOffsetAndTimestamp(
         final LogOffsetMetadata endOffsetMetadata = log.endOffset();
 
         if (state.updateLocalState(currentTimeMs, endOffsetMetadata)) {
-            updateHighWatermark(state, currentTimeMs);
+            onUpdateLeaderHighWatermark(state, currentTimeMs);
         }
 
-        LogOffset endOffset = new LogOffset(endOffsetMetadata.offset, Isolation.UNCOMMITTED);
-        fetchPurgatory.maybeComplete(endOffset, currentTimeMs);
+        fetchPurgatory.maybeComplete(endOffsetMetadata.offset, currentTimeMs);
     }
 
-    private void updateHighWatermark(
-        EpochState state,
+    private void onUpdateLeaderHighWatermark(
+        LeaderState state,
         long currentTimeMs
     ) {
         state.highWatermark().ifPresent(highWatermark -> {
-            logger.debug("High watermark updated to {}", highWatermark);
+            logger.debug("Leader high watermark updated to {}", highWatermark);
             log.updateHighWatermark(highWatermark);
-
-            LogOffset offset = new LogOffset(highWatermark.offset, Isolation.COMMITTED);
-            appendPurgatory.maybeComplete(offset, currentTimeMs);
-            fetchPurgatory.maybeComplete(offset, currentTimeMs);
+            appendPurgatory.maybeComplete(highWatermark.offset, currentTimeMs);
+            maybeFireHandleCommit(highWatermark.offset);
         });
     }
 
-    @Override
-    public LeaderAndEpoch currentLeaderAndEpoch() {
-        return quorum.leaderAndEpoch();
+    private void maybeFireHandleCommit(long highWatermark) {
+        maybeFireHandleCommit(listenerContexts, highWatermark);
+    }
+
+    private void maybeFireHandleCommit(List<ListenerContext> listenerContexts, long highWatermark) {
+        // TODO: When there are multiple listeners, we can cache reads to save some work
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510385486
id: 510387597
url: https://api.github.com/repos/apache/kafka/pulls/comments/510387597
body: Why a `return`? Did you mean to use `continue`? If this is suppose to be a `continue` then maybe we can `Optional.ifPresent`.

Same comment for one of the other overloaded `maybeFireHandleCommit`.
diff_hunk: @@ -206,30 +234,77 @@ private void updateLeaderEndOffsetAndTimestamp(
         final LogOffsetMetadata endOffsetMetadata = log.endOffset();
 
         if (state.updateLocalState(currentTimeMs, endOffsetMetadata)) {
-            updateHighWatermark(state, currentTimeMs);
+            onUpdateLeaderHighWatermark(state, currentTimeMs);
         }
 
-        LogOffset endOffset = new LogOffset(endOffsetMetadata.offset, Isolation.UNCOMMITTED);
-        fetchPurgatory.maybeComplete(endOffset, currentTimeMs);
+        fetchPurgatory.maybeComplete(endOffsetMetadata.offset, currentTimeMs);
     }
 
-    private void updateHighWatermark(
-        EpochState state,
+    private void onUpdateLeaderHighWatermark(
+        LeaderState state,
         long currentTimeMs
     ) {
         state.highWatermark().ifPresent(highWatermark -> {
-            logger.debug("High watermark updated to {}", highWatermark);
+            logger.debug("Leader high watermark updated to {}", highWatermark);
             log.updateHighWatermark(highWatermark);
-
-            LogOffset offset = new LogOffset(highWatermark.offset, Isolation.COMMITTED);
-            appendPurgatory.maybeComplete(offset, currentTimeMs);
-            fetchPurgatory.maybeComplete(offset, currentTimeMs);
+            appendPurgatory.maybeComplete(highWatermark.offset, currentTimeMs);
+            maybeFireHandleCommit(highWatermark.offset);
         });
     }
 
-    @Override
-    public LeaderAndEpoch currentLeaderAndEpoch() {
-        return quorum.leaderAndEpoch();
+    private void maybeFireHandleCommit(long highWatermark) {
+        maybeFireHandleCommit(listenerContexts, highWatermark);
+    }
+
+    private void maybeFireHandleCommit(List<ListenerContext> listenerContexts, long highWatermark) {
+        // TODO: When there are multiple listeners, we can cache reads to save some work
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510387597
id: 510397179
url: https://api.github.com/repos/apache/kafka/pulls/comments/510397179
body: Interesting. It is good to hide this logic from the state machine. Looking at the epoch and not at the LEO is okay because at this point we guarantee that the only records with that epoch are control records (e.g. LeaderChangedMessage).

I am wondering if the state machine may want to know this before it can process state machine requests. Maybe this is okay because the brokers/replicas will learn about the new leader through the `Fetch` and `BeginQuorum` protocol and not from the state machine (Kafka Controller) itself.

It is possible that the leader will receive Kafka Controller message from replicas/broker before it knows that it is leader. Most likely the Kafka Controller will reject them but the replicas/brokers need to keep retrying. This is specially important for heartbeat messages.
diff_hunk: @@ -206,30 +234,77 @@ private void updateLeaderEndOffsetAndTimestamp(
         final LogOffsetMetadata endOffsetMetadata = log.endOffset();
 
         if (state.updateLocalState(currentTimeMs, endOffsetMetadata)) {
-            updateHighWatermark(state, currentTimeMs);
+            onUpdateLeaderHighWatermark(state, currentTimeMs);
         }
 
-        LogOffset endOffset = new LogOffset(endOffsetMetadata.offset, Isolation.UNCOMMITTED);
-        fetchPurgatory.maybeComplete(endOffset, currentTimeMs);
+        fetchPurgatory.maybeComplete(endOffsetMetadata.offset, currentTimeMs);
     }
 
-    private void updateHighWatermark(
-        EpochState state,
+    private void onUpdateLeaderHighWatermark(
+        LeaderState state,
         long currentTimeMs
     ) {
         state.highWatermark().ifPresent(highWatermark -> {
-            logger.debug("High watermark updated to {}", highWatermark);
+            logger.debug("Leader high watermark updated to {}", highWatermark);
             log.updateHighWatermark(highWatermark);
-
-            LogOffset offset = new LogOffset(highWatermark.offset, Isolation.COMMITTED);
-            appendPurgatory.maybeComplete(offset, currentTimeMs);
-            fetchPurgatory.maybeComplete(offset, currentTimeMs);
+            appendPurgatory.maybeComplete(highWatermark.offset, currentTimeMs);
+            maybeFireHandleCommit(highWatermark.offset);
         });
     }
 
-    @Override
-    public LeaderAndEpoch currentLeaderAndEpoch() {
-        return quorum.leaderAndEpoch();
+    private void maybeFireHandleCommit(long highWatermark) {
+        maybeFireHandleCommit(listenerContexts, highWatermark);
+    }
+
+    private void maybeFireHandleCommit(List<ListenerContext> listenerContexts, long highWatermark) {
+        // TODO: When there are multiple listeners, we can cache reads to save some work
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
+            }
+
+            long nextExpectedOffset = nextExpectedOffsetOpt.getAsLong();
+            if (nextExpectedOffset < highWatermark) {
+                LogFetchInfo readInfo = log.read(nextExpectedOffset, Isolation.COMMITTED);
+                listenerContext.fireHandleCommit(nextExpectedOffset, readInfo.records);
+            }
+        }
+    }
+
+    private void maybeFireHandleCommit(long baseOffset, int epoch, List<T> records) {
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
+            }
+
+            long nextExpectedOffset = nextExpectedOffsetOpt.getAsLong();
+            if (nextExpectedOffset == baseOffset) {
+                listenerContext.fireHandleCommit(baseOffset, epoch, records);
+            }
+        }
+    }
+
+    private void maybeFireHandleClaim(LeaderState state) {
+        for (ListenerContext listenerContext : listenerContexts) {
+            int leaderEpoch = state.epoch();
+
+            // We can fire `handleClaim` as soon as the listener has caught
+            // up to the start of the leader epoch. This guarantees that the
+            // state machine has seen the full committed state before it becomes
+            // leader and begins writing to the log.
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510397179
id: 510398902
url: https://api.github.com/repos/apache/kafka/pulls/comments/510398902
body: Incomplete sentence.
diff_hunk: @@ -975,12 +1029,9 @@ private boolean handleFetchResponse(
                 log.truncateToEndOffset(divergingOffsetAndEpoch).ifPresent(truncationOffset -> {
                     logger.info("Truncated to offset {} from Fetch response from leader {}",
                         truncationOffset, quorum.leaderIdOrNil());
-
-                    // Since the end offset has been updated, we should complete any delayed
-                    // reads at the end offset.
-                    fetchPurgatory.maybeComplete(
-                        new LogOffset(Long.MAX_VALUE, Isolation.UNCOMMITTED),
-                        currentTimeMs);
+                    // After truncation, we complete all pending reads in order to
+                    // ensure that fetches account for the
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510398902
id: 510404596
url: https://api.github.com/repos/apache/kafka/pulls/comments/510404596
body: Does this mean that in practice, follower will have at most two batches in flight?
1. The one that they are currently processing
2. If they read the last message/record in the batch then the next batch in the log?
diff_hunk: @@ -1757,35 +1809,86 @@ public void complete() {
         }
     }
 
-    private static class UnwrittenAppend {
-        private final Records records;
-        private final long createTimeMs;
-        private final long requestTimeoutMs;
-        private final AckMode ackMode;
-        private final CompletableFuture<OffsetAndEpoch> future;
+    private final class ListenerContext implements CloseListener<BatchReader<T>> {
+        private final RaftClient.Listener<T> listener;
+        private BatchReader<T> lastSent = null;
+        private long lastAckedOffset = 0;
+        private int claimedEpoch = 0;
+
+        private ListenerContext(Listener<T> listener) {
+            this.listener = listener;
+        }
+
+        /**
+         * Get the last acked offset, which is one greater than the offset of the
+         * last record which was acked by the state machine.
+         */
+        public synchronized long lastAckedOffset() {
+            return lastAckedOffset;
+        }
+
+        /**
+         * Get the next expected offset, which might be larger than the last acked
+         * offset if there are inflight batches which have not been acked yet.
+         * Note that when fetching from disk, we may not know the last offset of
+         * inflight data until it has been processed by the state machine. In this case,
+         * we delay sending additional data until the state machine has read to the
+         * end and the last offset is determined.
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510404596
id: 510408362
url: https://api.github.com/repos/apache/kafka/pulls/comments/510408362
body: What is "this" in this sentence? epochStartOffset?
diff_hunk: @@ -369,6 +379,17 @@ public void transitionToLeader(long epochStartOffset) throws IOException {
         if (!candidateState.isVoteGranted())
             throw new IllegalStateException("Cannot become leader without majority votes granted");
 
+        // Note that the leader does not retain the high watermark that was known
+        // in the previous state. The purpose of this is to protect the monotonicity
path: raft/src/main/java/org/apache/kafka/raft/QuorumState.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510408362
id: 510409063
url: https://api.github.com/repos/apache/kafka/pulls/comments/510409063
body: nit: "... must be iterated and closed".
diff_hunk: @@ -16,57 +16,75 @@
  */
 package org.apache.kafka.raft;
 
-import org.apache.kafka.common.record.Records;
-
 import java.io.IOException;
+import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
-public interface RaftClient {
+public interface RaftClient<T> {
+
+    interface Listener<T> {
+        /**
+         * Callback which is invoked for all records committed to the log.
+         * It is the responsibility of the caller to invoke {@link BatchReader#close()}
+         * after consuming the reader.
+         *
+         * Note that there is not a one-to-one correspondence between writes through
+         * {@link #scheduleAppend(int, List)} and this callback. The Raft implementation
+         * is free to batch together the records from multiple append calls provided
+         * that batch boundaries are respected. This means that each batch specified
+         * through {@link #scheduleAppend(int, List)} is guaranteed to be a subset of
+         * a batch provided by the {@link BatchReader}.
+         *
+         * @param reader reader instance which must be iterated
path: raft/src/main/java/org/apache/kafka/raft/RaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510409063
id: 510411603
url: https://api.github.com/repos/apache/kafka/pulls/comments/510411603
body: We should also mention that `MAX_VALUE` is return if the RaftClient is not the leader.
diff_hunk: @@ -16,57 +16,75 @@
  */
 package org.apache.kafka.raft;
 
-import org.apache.kafka.common.record.Records;
-
 import java.io.IOException;
+import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
-public interface RaftClient {
+public interface RaftClient<T> {
+
+    interface Listener<T> {
+        /**
+         * Callback which is invoked for all records committed to the log.
+         * It is the responsibility of the caller to invoke {@link BatchReader#close()}
+         * after consuming the reader.
+         *
+         * Note that there is not a one-to-one correspondence between writes through
+         * {@link #scheduleAppend(int, List)} and this callback. The Raft implementation
+         * is free to batch together the records from multiple append calls provided
+         * that batch boundaries are respected. This means that each batch specified
+         * through {@link #scheduleAppend(int, List)} is guaranteed to be a subset of
+         * a batch provided by the {@link BatchReader}.
+         *
+         * @param reader reader instance which must be iterated
+         */
+        void handleCommit(BatchReader<T> reader);
+
+        /**
+         * Invoked after this node has become a leader. This is only called after
+         * all commits up to the start of the leader's epoch have been sent to
+         * {@link #handleCommit(BatchReader)}.
+         *
+         * After becoming a leader, the client is eligible to write to the log
+         * using {@link #scheduleAppend(int, List)}.
+         *
+         * @param epoch the claimed leader epoch
+         */
+        default void handleClaim(int epoch) {}
+
+        /**
+         * Invoked after a leader has stepped down. This callback may or may not
+         * fire before the next leader has been elected.
+         */
+        default void handleResign() {}
+    }
 
     /**
-     * Initialize the client. This should only be called once and it must be
-     * called before any of the other APIs can be invoked.
+     * Initialize the client. This should only be called once on startup.
      *
      * @throws IOException For any IO errors during initialization
      */
     void initialize() throws IOException;
 
     /**
-     * Append a new entry to the log. The client must be in the leader state to
-     * accept an append: it is up to the state machine implementation
-     * to ensure this using {@link #currentLeaderAndEpoch()}.
-     *
-     * TODO: One improvement we can make here is to allow the caller to specify
-     * the current leader epoch in the record set. That would ensure that each
-     * leader change must be "observed" by the state machine before new appends
-     * are accepted.
-     *
-     * @param records The records to append to the log
-     * @param timeoutMs Maximum time to wait for the append to complete
-     * @return A future containing the last offset and epoch of the appended records (if successful)
-     */
-    CompletableFuture<OffsetAndEpoch> append(Records records, AckMode ackMode, long timeoutMs);
-
-    /**
-     * Read a set of records from the log. Note that it is the responsibility of the state machine
-     * to filter control records added by the Raft client itself.
-     *
-     * If the fetch offset is no longer valid, then the future will be completed exceptionally
-     * with a {@link LogTruncationException}.
+     * Register a listener to get commit/leader notifications.
      *
-     * @param position The position to fetch from
-     * @param isolation The isolation level to apply to the read
-     * @param maxWaitTimeMs The maximum time to wait for new data to become available before completion
-     * @return The record set, which may be empty if fetching from the end of the log
+     * @param listener the listener
      */
-    CompletableFuture<Records> read(OffsetAndEpoch position, Isolation isolation, long maxWaitTimeMs);
+    void register(Listener<T> listener);
 
     /**
-     * Get the current leader (if known) and the current epoch.
+     * Append a list of records to the log. The write will be scheduled for some time
+     * in the future. There is no guarantee that appended records will be written to
+     * the log and eventually committed. However, it is guaranteed that if any of the
+     * records become committed, then all of them will be.
      *
-     * @return Current leader and epoch information
+     * @param epoch the current leader epoch
+     * @param records the list of records to append
+     * @return the offset within the current epoch that the log entries will be appended,
+     *         or null if the leader was unable to accept the write (e.g. due to memory
+     *         being reached).
path: raft/src/main/java/org/apache/kafka/raft/RaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510411603
id: 510412505
url: https://api.github.com/repos/apache/kafka/pulls/comments/510412505
body: I think it is okay as the fix may be non-trivial but technically `scheduleAppend` will accept records even if no `Listener` has received a `handleClaim`.
diff_hunk: @@ -16,57 +16,75 @@
  */
 package org.apache.kafka.raft;
 
-import org.apache.kafka.common.record.Records;
-
 import java.io.IOException;
+import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
-public interface RaftClient {
+public interface RaftClient<T> {
+
+    interface Listener<T> {
+        /**
+         * Callback which is invoked for all records committed to the log.
+         * It is the responsibility of the caller to invoke {@link BatchReader#close()}
+         * after consuming the reader.
+         *
+         * Note that there is not a one-to-one correspondence between writes through
+         * {@link #scheduleAppend(int, List)} and this callback. The Raft implementation
+         * is free to batch together the records from multiple append calls provided
+         * that batch boundaries are respected. This means that each batch specified
+         * through {@link #scheduleAppend(int, List)} is guaranteed to be a subset of
+         * a batch provided by the {@link BatchReader}.
+         *
+         * @param reader reader instance which must be iterated
+         */
+        void handleCommit(BatchReader<T> reader);
+
+        /**
+         * Invoked after this node has become a leader. This is only called after
+         * all commits up to the start of the leader's epoch have been sent to
+         * {@link #handleCommit(BatchReader)}.
+         *
+         * After becoming a leader, the client is eligible to write to the log
+         * using {@link #scheduleAppend(int, List)}.
+         *
+         * @param epoch the claimed leader epoch
+         */
+        default void handleClaim(int epoch) {}
+
+        /**
+         * Invoked after a leader has stepped down. This callback may or may not
+         * fire before the next leader has been elected.
+         */
+        default void handleResign() {}
+    }
 
     /**
-     * Initialize the client. This should only be called once and it must be
-     * called before any of the other APIs can be invoked.
+     * Initialize the client. This should only be called once on startup.
      *
      * @throws IOException For any IO errors during initialization
      */
     void initialize() throws IOException;
 
     /**
-     * Append a new entry to the log. The client must be in the leader state to
-     * accept an append: it is up to the state machine implementation
-     * to ensure this using {@link #currentLeaderAndEpoch()}.
-     *
-     * TODO: One improvement we can make here is to allow the caller to specify
-     * the current leader epoch in the record set. That would ensure that each
-     * leader change must be "observed" by the state machine before new appends
-     * are accepted.
-     *
-     * @param records The records to append to the log
-     * @param timeoutMs Maximum time to wait for the append to complete
-     * @return A future containing the last offset and epoch of the appended records (if successful)
-     */
-    CompletableFuture<OffsetAndEpoch> append(Records records, AckMode ackMode, long timeoutMs);
-
-    /**
-     * Read a set of records from the log. Note that it is the responsibility of the state machine
-     * to filter control records added by the Raft client itself.
-     *
-     * If the fetch offset is no longer valid, then the future will be completed exceptionally
-     * with a {@link LogTruncationException}.
+     * Register a listener to get commit/leader notifications.
      *
-     * @param position The position to fetch from
-     * @param isolation The isolation level to apply to the read
-     * @param maxWaitTimeMs The maximum time to wait for new data to become available before completion
-     * @return The record set, which may be empty if fetching from the end of the log
+     * @param listener the listener
      */
-    CompletableFuture<Records> read(OffsetAndEpoch position, Isolation isolation, long maxWaitTimeMs);
+    void register(Listener<T> listener);
 
     /**
-     * Get the current leader (if known) and the current epoch.
+     * Append a list of records to the log. The write will be scheduled for some time
+     * in the future. There is no guarantee that appended records will be written to
+     * the log and eventually committed. However, it is guaranteed that if any of the
+     * records become committed, then all of them will be.
      *
-     * @return Current leader and epoch information
+     * @param epoch the current leader epoch
+     * @param records the list of records to append
+     * @return the offset within the current epoch that the log entries will be appended,
+     *         or null if the leader was unable to accept the write (e.g. due to memory
+     *         being reached).
      */
-    LeaderAndEpoch currentLeaderAndEpoch();
+    Long scheduleAppend(int epoch, List<T> records);
path: raft/src/main/java/org/apache/kafka/raft/RaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510412505
id: 510413244
url: https://api.github.com/repos/apache/kafka/pulls/comments/510413244
body: TODO: missing comments.
diff_hunk: @@ -0,0 +1,63 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.raft;
+
+import org.apache.kafka.common.protocol.DataOutputStreamWritable;
+import org.apache.kafka.common.protocol.Readable;
+
+public interface RecordSerde<T> {
+    /**
+     * Create a new context object for to be used when serializing a batch of records.
+     * This allows for state to be shared between {@link #recordSize(Object, Object)}
+     * and {@link #write(Object, Object, DataOutputStreamWritable)}, which is useful
+     * in order to avoid redundant work (see e.g.
+     * {@link org.apache.kafka.common.protocol.ObjectSerializationCache}).
+     *
+     * @return context object or null if none is needed
+     */
+    default Object newWriteContext() {
+        return null;
+    }
+
+    /**
+     * Get the size of a record.
+     *
+     * @param data the record that will be serialized
+     * @param context context object created by {@link #newWriteContext()}
+     * @return the size in bytes of the serialized record
+     */
+    int recordSize(T data, Object context);
+
+
+    /**
+     * Write the record to the output stream.
+     *
+     * @param data the record to serialize and write
+     * @param context context object created by {@link #newWriteContext()}
+     * @param out the output stream to write the record to
+     */
+    void write(T data, Object context, DataOutputStreamWritable out);
+
+    /**
+     *
+     * @param input
+     * @param size
+     * @return
+     */
path: raft/src/main/java/org/apache/kafka/raft/RecordSerde.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510413244
id: 510426714
url: https://api.github.com/repos/apache/kafka/pulls/comments/510426714
body: Agreed. I added this here: https://github.com/apache/kafka/pull/9418/files#diff-ac850e29114f9b5a03aaf3ccb8f07feda8b48e5de6912f4c527b8477aa3d6cbcR60.
diff_hunk: @@ -16,57 +16,75 @@
  */
 package org.apache.kafka.raft;
 
-import org.apache.kafka.common.record.Records;
-
 import java.io.IOException;
+import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
-public interface RaftClient {
+public interface RaftClient<T> {
+
+    interface Listener<T> {
+        /**
+         * Callback which is invoked for all records committed to the log.
+         * It is the responsibility of the caller to invoke {@link BatchReader#close()}
+         * after consuming the reader.
+         *
+         * Note that there is not a one-to-one correspondence between writes through
+         * {@link #scheduleAppend(int, List)} and this callback. The Raft implementation
+         * is free to batch together the records from multiple append calls provided
+         * that batch boundaries are respected. This means that each batch specified
+         * through {@link #scheduleAppend(int, List)} is guaranteed to be a subset of
+         * a batch provided by the {@link BatchReader}.
+         *
+         * @param reader reader instance which must be iterated
+         */
+        void handleCommit(BatchReader<T> reader);
+
+        /**
+         * Invoked after this node has become a leader. This is only called after
+         * all commits up to the start of the leader's epoch have been sent to
+         * {@link #handleCommit(BatchReader)}.
+         *
+         * After becoming a leader, the client is eligible to write to the log
+         * using {@link #scheduleAppend(int, List)}.
+         *
+         * @param epoch the claimed leader epoch
+         */
+        default void handleClaim(int epoch) {}
+
+        /**
+         * Invoked after a leader has stepped down. This callback may or may not
+         * fire before the next leader has been elected.
+         */
+        default void handleResign() {}
+    }
 
     /**
-     * Initialize the client. This should only be called once and it must be
-     * called before any of the other APIs can be invoked.
+     * Initialize the client. This should only be called once on startup.
      *
      * @throws IOException For any IO errors during initialization
      */
     void initialize() throws IOException;
 
     /**
-     * Append a new entry to the log. The client must be in the leader state to
-     * accept an append: it is up to the state machine implementation
-     * to ensure this using {@link #currentLeaderAndEpoch()}.
-     *
-     * TODO: One improvement we can make here is to allow the caller to specify
-     * the current leader epoch in the record set. That would ensure that each
-     * leader change must be "observed" by the state machine before new appends
-     * are accepted.
-     *
-     * @param records The records to append to the log
-     * @param timeoutMs Maximum time to wait for the append to complete
-     * @return A future containing the last offset and epoch of the appended records (if successful)
-     */
-    CompletableFuture<OffsetAndEpoch> append(Records records, AckMode ackMode, long timeoutMs);
-
-    /**
-     * Read a set of records from the log. Note that it is the responsibility of the state machine
-     * to filter control records added by the Raft client itself.
-     *
-     * If the fetch offset is no longer valid, then the future will be completed exceptionally
-     * with a {@link LogTruncationException}.
+     * Register a listener to get commit/leader notifications.
      *
-     * @param position The position to fetch from
-     * @param isolation The isolation level to apply to the read
-     * @param maxWaitTimeMs The maximum time to wait for new data to become available before completion
-     * @return The record set, which may be empty if fetching from the end of the log
+     * @param listener the listener
      */
-    CompletableFuture<Records> read(OffsetAndEpoch position, Isolation isolation, long maxWaitTimeMs);
+    void register(Listener<T> listener);
 
     /**
-     * Get the current leader (if known) and the current epoch.
+     * Append a list of records to the log. The write will be scheduled for some time
+     * in the future. There is no guarantee that appended records will be written to
+     * the log and eventually committed. However, it is guaranteed that if any of the
+     * records become committed, then all of them will be.
      *
-     * @return Current leader and epoch information
+     * @param epoch the current leader epoch
+     * @param records the list of records to append
+     * @return the offset within the current epoch that the log entries will be appended,
+     *         or null if the leader was unable to accept the write (e.g. due to memory
+     *         being reached).
path: raft/src/main/java/org/apache/kafka/raft/RaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510426714
id: 510432303
url: https://api.github.com/repos/apache/kafka/pulls/comments/510432303
body: Yeah, I don't see a strong need to be too strict about this for now.
diff_hunk: @@ -16,57 +16,75 @@
  */
 package org.apache.kafka.raft;
 
-import org.apache.kafka.common.record.Records;
-
 import java.io.IOException;
+import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
-public interface RaftClient {
+public interface RaftClient<T> {
+
+    interface Listener<T> {
+        /**
+         * Callback which is invoked for all records committed to the log.
+         * It is the responsibility of the caller to invoke {@link BatchReader#close()}
+         * after consuming the reader.
+         *
+         * Note that there is not a one-to-one correspondence between writes through
+         * {@link #scheduleAppend(int, List)} and this callback. The Raft implementation
+         * is free to batch together the records from multiple append calls provided
+         * that batch boundaries are respected. This means that each batch specified
+         * through {@link #scheduleAppend(int, List)} is guaranteed to be a subset of
+         * a batch provided by the {@link BatchReader}.
+         *
+         * @param reader reader instance which must be iterated
+         */
+        void handleCommit(BatchReader<T> reader);
+
+        /**
+         * Invoked after this node has become a leader. This is only called after
+         * all commits up to the start of the leader's epoch have been sent to
+         * {@link #handleCommit(BatchReader)}.
+         *
+         * After becoming a leader, the client is eligible to write to the log
+         * using {@link #scheduleAppend(int, List)}.
+         *
+         * @param epoch the claimed leader epoch
+         */
+        default void handleClaim(int epoch) {}
+
+        /**
+         * Invoked after a leader has stepped down. This callback may or may not
+         * fire before the next leader has been elected.
+         */
+        default void handleResign() {}
+    }
 
     /**
-     * Initialize the client. This should only be called once and it must be
-     * called before any of the other APIs can be invoked.
+     * Initialize the client. This should only be called once on startup.
      *
      * @throws IOException For any IO errors during initialization
      */
     void initialize() throws IOException;
 
     /**
-     * Append a new entry to the log. The client must be in the leader state to
-     * accept an append: it is up to the state machine implementation
-     * to ensure this using {@link #currentLeaderAndEpoch()}.
-     *
-     * TODO: One improvement we can make here is to allow the caller to specify
-     * the current leader epoch in the record set. That would ensure that each
-     * leader change must be "observed" by the state machine before new appends
-     * are accepted.
-     *
-     * @param records The records to append to the log
-     * @param timeoutMs Maximum time to wait for the append to complete
-     * @return A future containing the last offset and epoch of the appended records (if successful)
-     */
-    CompletableFuture<OffsetAndEpoch> append(Records records, AckMode ackMode, long timeoutMs);
-
-    /**
-     * Read a set of records from the log. Note that it is the responsibility of the state machine
-     * to filter control records added by the Raft client itself.
-     *
-     * If the fetch offset is no longer valid, then the future will be completed exceptionally
-     * with a {@link LogTruncationException}.
+     * Register a listener to get commit/leader notifications.
      *
-     * @param position The position to fetch from
-     * @param isolation The isolation level to apply to the read
-     * @param maxWaitTimeMs The maximum time to wait for new data to become available before completion
-     * @return The record set, which may be empty if fetching from the end of the log
+     * @param listener the listener
      */
-    CompletableFuture<Records> read(OffsetAndEpoch position, Isolation isolation, long maxWaitTimeMs);
+    void register(Listener<T> listener);
 
     /**
-     * Get the current leader (if known) and the current epoch.
+     * Append a list of records to the log. The write will be scheduled for some time
+     * in the future. There is no guarantee that appended records will be written to
+     * the log and eventually committed. However, it is guaranteed that if any of the
+     * records become committed, then all of them will be.
      *
-     * @return Current leader and epoch information
+     * @param epoch the current leader epoch
+     * @param records the list of records to append
+     * @return the offset within the current epoch that the log entries will be appended,
+     *         or null if the leader was unable to accept the write (e.g. due to memory
+     *         being reached).
      */
-    LeaderAndEpoch currentLeaderAndEpoch();
+    Long scheduleAppend(int epoch, List<T> records);
path: raft/src/main/java/org/apache/kafka/raft/RaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510432303
id: 510433916
url: https://api.github.com/repos/apache/kafka/pulls/comments/510433916
body: When catching up from the log, yes. However, I have implemented an optimization for writes from the leader. We save the original batch in memory so that it can be sent back to the state machine after the write is committed. In this case, we know the last offset of the batch, so we can have multiple inflight batches sent to the controller. This is nice because it means the elected controller will not have to read from disk.
diff_hunk: @@ -1757,35 +1809,86 @@ public void complete() {
         }
     }
 
-    private static class UnwrittenAppend {
-        private final Records records;
-        private final long createTimeMs;
-        private final long requestTimeoutMs;
-        private final AckMode ackMode;
-        private final CompletableFuture<OffsetAndEpoch> future;
+    private final class ListenerContext implements CloseListener<BatchReader<T>> {
+        private final RaftClient.Listener<T> listener;
+        private BatchReader<T> lastSent = null;
+        private long lastAckedOffset = 0;
+        private int claimedEpoch = 0;
+
+        private ListenerContext(Listener<T> listener) {
+            this.listener = listener;
+        }
+
+        /**
+         * Get the last acked offset, which is one greater than the offset of the
+         * last record which was acked by the state machine.
+         */
+        public synchronized long lastAckedOffset() {
+            return lastAckedOffset;
+        }
+
+        /**
+         * Get the next expected offset, which might be larger than the last acked
+         * offset if there are inflight batches which have not been acked yet.
+         * Note that when fetching from disk, we may not know the last offset of
+         * inflight data until it has been processed by the state machine. In this case,
+         * we delay sending additional data until the state machine has read to the
+         * end and the last offset is determined.
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510433916
id: 510437477
url: https://api.github.com/repos/apache/kafka/pulls/comments/510437477
body: It was intended to refer to the behavior of not retaining the high watermark from the previous sentence. I will attempt to clarify.
diff_hunk: @@ -369,6 +379,17 @@ public void transitionToLeader(long epochStartOffset) throws IOException {
         if (!candidateState.isVoteGranted())
             throw new IllegalStateException("Cannot become leader without majority votes granted");
 
+        // Note that the leader does not retain the high watermark that was known
+        // in the previous state. The purpose of this is to protect the monotonicity
path: raft/src/main/java/org/apache/kafka/raft/QuorumState.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510437477
id: 510438318
url: https://api.github.com/repos/apache/kafka/pulls/comments/510438318
body: Good catch. I think that I forgot to update this when moving from a single listener to multiple listeners.
diff_hunk: @@ -206,30 +234,77 @@ private void updateLeaderEndOffsetAndTimestamp(
         final LogOffsetMetadata endOffsetMetadata = log.endOffset();
 
         if (state.updateLocalState(currentTimeMs, endOffsetMetadata)) {
-            updateHighWatermark(state, currentTimeMs);
+            onUpdateLeaderHighWatermark(state, currentTimeMs);
         }
 
-        LogOffset endOffset = new LogOffset(endOffsetMetadata.offset, Isolation.UNCOMMITTED);
-        fetchPurgatory.maybeComplete(endOffset, currentTimeMs);
+        fetchPurgatory.maybeComplete(endOffsetMetadata.offset, currentTimeMs);
     }
 
-    private void updateHighWatermark(
-        EpochState state,
+    private void onUpdateLeaderHighWatermark(
+        LeaderState state,
         long currentTimeMs
     ) {
         state.highWatermark().ifPresent(highWatermark -> {
-            logger.debug("High watermark updated to {}", highWatermark);
+            logger.debug("Leader high watermark updated to {}", highWatermark);
             log.updateHighWatermark(highWatermark);
-
-            LogOffset offset = new LogOffset(highWatermark.offset, Isolation.COMMITTED);
-            appendPurgatory.maybeComplete(offset, currentTimeMs);
-            fetchPurgatory.maybeComplete(offset, currentTimeMs);
+            appendPurgatory.maybeComplete(highWatermark.offset, currentTimeMs);
+            maybeFireHandleCommit(highWatermark.offset);
         });
     }
 
-    @Override
-    public LeaderAndEpoch currentLeaderAndEpoch() {
-        return quorum.leaderAndEpoch();
+    private void maybeFireHandleCommit(long highWatermark) {
+        maybeFireHandleCommit(listenerContexts, highWatermark);
+    }
+
+    private void maybeFireHandleCommit(List<ListenerContext> listenerContexts, long highWatermark) {
+        // TODO: When there are multiple listeners, we can cache reads to save some work
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510438318
id: 510455713
url: https://api.github.com/repos/apache/kafka/pulls/comments/510455713
body: I thought a little about it. Right now the state machine has just two states: 1) i am not a leader, and 2) i am a leader and have caught up with all committed data from previous epochs.  An alternative design is to fire `handleClaim` immediately and provide the starting offset of the leader epoch. Then the controller can wait until its state machine has caught up to that offset before starting to write data. In the end, I decided not to do it because it adds a third state and I did not expect the controller would be able to do anything useful in the additional state. The point about heartbeats is interesting, but even that seems tricky since the controller would not know if a broker had been fenced until it has caught up. I think the only thing the controller could do is hold the requests in purgatory, which might be better than letting them retry, but not sure it's worth it.
diff_hunk: @@ -206,30 +234,77 @@ private void updateLeaderEndOffsetAndTimestamp(
         final LogOffsetMetadata endOffsetMetadata = log.endOffset();
 
         if (state.updateLocalState(currentTimeMs, endOffsetMetadata)) {
-            updateHighWatermark(state, currentTimeMs);
+            onUpdateLeaderHighWatermark(state, currentTimeMs);
         }
 
-        LogOffset endOffset = new LogOffset(endOffsetMetadata.offset, Isolation.UNCOMMITTED);
-        fetchPurgatory.maybeComplete(endOffset, currentTimeMs);
+        fetchPurgatory.maybeComplete(endOffsetMetadata.offset, currentTimeMs);
     }
 
-    private void updateHighWatermark(
-        EpochState state,
+    private void onUpdateLeaderHighWatermark(
+        LeaderState state,
         long currentTimeMs
     ) {
         state.highWatermark().ifPresent(highWatermark -> {
-            logger.debug("High watermark updated to {}", highWatermark);
+            logger.debug("Leader high watermark updated to {}", highWatermark);
             log.updateHighWatermark(highWatermark);
-
-            LogOffset offset = new LogOffset(highWatermark.offset, Isolation.COMMITTED);
-            appendPurgatory.maybeComplete(offset, currentTimeMs);
-            fetchPurgatory.maybeComplete(offset, currentTimeMs);
+            appendPurgatory.maybeComplete(highWatermark.offset, currentTimeMs);
+            maybeFireHandleCommit(highWatermark.offset);
         });
     }
 
-    @Override
-    public LeaderAndEpoch currentLeaderAndEpoch() {
-        return quorum.leaderAndEpoch();
+    private void maybeFireHandleCommit(long highWatermark) {
+        maybeFireHandleCommit(listenerContexts, highWatermark);
+    }
+
+    private void maybeFireHandleCommit(List<ListenerContext> listenerContexts, long highWatermark) {
+        // TODO: When there are multiple listeners, we can cache reads to save some work
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
+            }
+
+            long nextExpectedOffset = nextExpectedOffsetOpt.getAsLong();
+            if (nextExpectedOffset < highWatermark) {
+                LogFetchInfo readInfo = log.read(nextExpectedOffset, Isolation.COMMITTED);
+                listenerContext.fireHandleCommit(nextExpectedOffset, readInfo.records);
+            }
+        }
+    }
+
+    private void maybeFireHandleCommit(long baseOffset, int epoch, List<T> records) {
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
+            }
+
+            long nextExpectedOffset = nextExpectedOffsetOpt.getAsLong();
+            if (nextExpectedOffset == baseOffset) {
+                listenerContext.fireHandleCommit(baseOffset, epoch, records);
+            }
+        }
+    }
+
+    private void maybeFireHandleClaim(LeaderState state) {
+        for (ListenerContext listenerContext : listenerContexts) {
+            int leaderEpoch = state.epoch();
+
+            // We can fire `handleClaim` as soon as the listener has caught
+            // up to the start of the leader epoch. This guarantees that the
+            // state machine has seen the full committed state before it becomes
+            // leader and begins writing to the log.
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510455713
id: 510469742
url: https://api.github.com/repos/apache/kafka/pulls/comments/510469742
body: Yeah. I was thinking of the same thing, "hold the requests in purgatory". But like you said, maybe this optimization is not worth the added complexity.
diff_hunk: @@ -206,30 +234,77 @@ private void updateLeaderEndOffsetAndTimestamp(
         final LogOffsetMetadata endOffsetMetadata = log.endOffset();
 
         if (state.updateLocalState(currentTimeMs, endOffsetMetadata)) {
-            updateHighWatermark(state, currentTimeMs);
+            onUpdateLeaderHighWatermark(state, currentTimeMs);
         }
 
-        LogOffset endOffset = new LogOffset(endOffsetMetadata.offset, Isolation.UNCOMMITTED);
-        fetchPurgatory.maybeComplete(endOffset, currentTimeMs);
+        fetchPurgatory.maybeComplete(endOffsetMetadata.offset, currentTimeMs);
     }
 
-    private void updateHighWatermark(
-        EpochState state,
+    private void onUpdateLeaderHighWatermark(
+        LeaderState state,
         long currentTimeMs
     ) {
         state.highWatermark().ifPresent(highWatermark -> {
-            logger.debug("High watermark updated to {}", highWatermark);
+            logger.debug("Leader high watermark updated to {}", highWatermark);
             log.updateHighWatermark(highWatermark);
-
-            LogOffset offset = new LogOffset(highWatermark.offset, Isolation.COMMITTED);
-            appendPurgatory.maybeComplete(offset, currentTimeMs);
-            fetchPurgatory.maybeComplete(offset, currentTimeMs);
+            appendPurgatory.maybeComplete(highWatermark.offset, currentTimeMs);
+            maybeFireHandleCommit(highWatermark.offset);
         });
     }
 
-    @Override
-    public LeaderAndEpoch currentLeaderAndEpoch() {
-        return quorum.leaderAndEpoch();
+    private void maybeFireHandleCommit(long highWatermark) {
+        maybeFireHandleCommit(listenerContexts, highWatermark);
+    }
+
+    private void maybeFireHandleCommit(List<ListenerContext> listenerContexts, long highWatermark) {
+        // TODO: When there are multiple listeners, we can cache reads to save some work
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
+            }
+
+            long nextExpectedOffset = nextExpectedOffsetOpt.getAsLong();
+            if (nextExpectedOffset < highWatermark) {
+                LogFetchInfo readInfo = log.read(nextExpectedOffset, Isolation.COMMITTED);
+                listenerContext.fireHandleCommit(nextExpectedOffset, readInfo.records);
+            }
+        }
+    }
+
+    private void maybeFireHandleCommit(long baseOffset, int epoch, List<T> records) {
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
+            }
+
+            long nextExpectedOffset = nextExpectedOffsetOpt.getAsLong();
+            if (nextExpectedOffset == baseOffset) {
+                listenerContext.fireHandleCommit(baseOffset, epoch, records);
+            }
+        }
+    }
+
+    private void maybeFireHandleClaim(LeaderState state) {
+        for (ListenerContext listenerContext : listenerContexts) {
+            int leaderEpoch = state.epoch();
+
+            // We can fire `handleClaim` as soon as the listener has caught
+            // up to the start of the leader epoch. This guarantees that the
+            // state machine has seen the full committed state before it becomes
+            // leader and begins writing to the log.
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510469742
id: 510513954
url: https://api.github.com/repos/apache/kafka/pulls/comments/510513954
body: I guess let's keep this option in our back pocket for now.
diff_hunk: @@ -206,30 +234,77 @@ private void updateLeaderEndOffsetAndTimestamp(
         final LogOffsetMetadata endOffsetMetadata = log.endOffset();
 
         if (state.updateLocalState(currentTimeMs, endOffsetMetadata)) {
-            updateHighWatermark(state, currentTimeMs);
+            onUpdateLeaderHighWatermark(state, currentTimeMs);
         }
 
-        LogOffset endOffset = new LogOffset(endOffsetMetadata.offset, Isolation.UNCOMMITTED);
-        fetchPurgatory.maybeComplete(endOffset, currentTimeMs);
+        fetchPurgatory.maybeComplete(endOffsetMetadata.offset, currentTimeMs);
     }
 
-    private void updateHighWatermark(
-        EpochState state,
+    private void onUpdateLeaderHighWatermark(
+        LeaderState state,
         long currentTimeMs
     ) {
         state.highWatermark().ifPresent(highWatermark -> {
-            logger.debug("High watermark updated to {}", highWatermark);
+            logger.debug("Leader high watermark updated to {}", highWatermark);
             log.updateHighWatermark(highWatermark);
-
-            LogOffset offset = new LogOffset(highWatermark.offset, Isolation.COMMITTED);
-            appendPurgatory.maybeComplete(offset, currentTimeMs);
-            fetchPurgatory.maybeComplete(offset, currentTimeMs);
+            appendPurgatory.maybeComplete(highWatermark.offset, currentTimeMs);
+            maybeFireHandleCommit(highWatermark.offset);
         });
     }
 
-    @Override
-    public LeaderAndEpoch currentLeaderAndEpoch() {
-        return quorum.leaderAndEpoch();
+    private void maybeFireHandleCommit(long highWatermark) {
+        maybeFireHandleCommit(listenerContexts, highWatermark);
+    }
+
+    private void maybeFireHandleCommit(List<ListenerContext> listenerContexts, long highWatermark) {
+        // TODO: When there are multiple listeners, we can cache reads to save some work
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
+            }
+
+            long nextExpectedOffset = nextExpectedOffsetOpt.getAsLong();
+            if (nextExpectedOffset < highWatermark) {
+                LogFetchInfo readInfo = log.read(nextExpectedOffset, Isolation.COMMITTED);
+                listenerContext.fireHandleCommit(nextExpectedOffset, readInfo.records);
+            }
+        }
+    }
+
+    private void maybeFireHandleCommit(long baseOffset, int epoch, List<T> records) {
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
+            }
+
+            long nextExpectedOffset = nextExpectedOffsetOpt.getAsLong();
+            if (nextExpectedOffset == baseOffset) {
+                listenerContext.fireHandleCommit(baseOffset, epoch, records);
+            }
+        }
+    }
+
+    private void maybeFireHandleClaim(LeaderState state) {
+        for (ListenerContext listenerContext : listenerContexts) {
+            int leaderEpoch = state.epoch();
+
+            // We can fire `handleClaim` as soon as the listener has caught
+            // up to the start of the leader epoch. This guarantees that the
+            // state machine has seen the full committed state before it becomes
+            // leader and begins writing to the log.
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510513954
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9473/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9473/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9473"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9473"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9473/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9473"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/87d8331dbf47eb149870a4553e7867a6ceb38087"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Topic IDs must be created for all new topics and all existing topics that do not yet have a topic ID. In ZooKeeper, the ID is written to the TopicZNode, and in the controller, it is stored in a map. \r\n\r\nThis is a preliminary change before the second part of KAFKA-10545, which will propagate these IDs to brokers.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9473/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9473/commits",
  "created_at": "2020-10-21T17:23:28Z",
  "diff_url": "https://github.com/apache/kafka/pull/9473.diff",
  "draft": false,
  "head": {
    "label": "jolshan:KIP516_Controller_and_ZK",
    "ref": "KIP516_Controller_and_ZK",
    "repo": {
      "archive_url": "https://api.github.com/repos/jolshan/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/jolshan/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/jolshan/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/jolshan/kafka/branches{/branch}",
      "clone_url": "https://github.com/jolshan/kafka.git",
      "collaborators_url": "https://api.github.com/repos/jolshan/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/jolshan/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/jolshan/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/jolshan/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/jolshan/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/jolshan/kafka/contributors",
      "created_at": "2020-08-21T16:50:35Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/jolshan/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/jolshan/kafka/downloads",
      "events_url": "https://api.github.com/repos/jolshan/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/jolshan/kafka/forks",
      "full_name": "jolshan/kafka",
      "git_commits_url": "https://api.github.com/repos/jolshan/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/jolshan/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/jolshan/kafka/git/tags{/sha}",
      "git_url": "git://github.com/jolshan/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/jolshan/kafka/hooks",
      "html_url": "https://github.com/jolshan/kafka",
      "id": 289319790,
      "issue_comment_url": "https://api.github.com/repos/jolshan/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/jolshan/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/jolshan/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/jolshan/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/jolshan/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/jolshan/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/jolshan/kafka/merges",
      "milestones_url": "https://api.github.com/repos/jolshan/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyODkzMTk3OTA=",
      "notifications_url": "https://api.github.com/repos/jolshan/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/25566826?v=4",
        "events_url": "https://api.github.com/users/jolshan/events{/privacy}",
        "followers_url": "https://api.github.com/users/jolshan/followers",
        "following_url": "https://api.github.com/users/jolshan/following{/other_user}",
        "gists_url": "https://api.github.com/users/jolshan/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jolshan",
        "id": 25566826,
        "login": "jolshan",
        "node_id": "MDQ6VXNlcjI1NTY2ODI2",
        "organizations_url": "https://api.github.com/users/jolshan/orgs",
        "received_events_url": "https://api.github.com/users/jolshan/received_events",
        "repos_url": "https://api.github.com/users/jolshan/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jolshan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jolshan/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jolshan"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/jolshan/kafka/pulls{/number}",
      "pushed_at": "2020-10-26T23:38:57Z",
      "releases_url": "https://api.github.com/repos/jolshan/kafka/releases{/id}",
      "size": 108018,
      "ssh_url": "git@github.com:jolshan/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/jolshan/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/jolshan/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/jolshan/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/jolshan/kafka/subscription",
      "svn_url": "https://github.com/jolshan/kafka",
      "tags_url": "https://api.github.com/repos/jolshan/kafka/tags",
      "teams_url": "https://api.github.com/repos/jolshan/kafka/teams",
      "trees_url": "https://api.github.com/repos/jolshan/kafka/git/trees{/sha}",
      "updated_at": "2020-10-02T20:37:35Z",
      "url": "https://api.github.com/repos/jolshan/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "87d8331dbf47eb149870a4553e7867a6ceb38087",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/25566826?v=4",
      "events_url": "https://api.github.com/users/jolshan/events{/privacy}",
      "followers_url": "https://api.github.com/users/jolshan/followers",
      "following_url": "https://api.github.com/users/jolshan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jolshan/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jolshan",
      "id": 25566826,
      "login": "jolshan",
      "node_id": "MDQ6VXNlcjI1NTY2ODI2",
      "organizations_url": "https://api.github.com/users/jolshan/orgs",
      "received_events_url": "https://api.github.com/users/jolshan/received_events",
      "repos_url": "https://api.github.com/users/jolshan/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jolshan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jolshan/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jolshan"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9473",
  "id": 507728049,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9473",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "f04406df1b64e168b9af1ef6da7072d5ed8758e9",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA3NzI4MDQ5",
  "number": 9473,
  "patch_url": "https://github.com/apache/kafka/pull/9473.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9473/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/87d8331dbf47eb149870a4553e7867a6ceb38087",
  "title": "KAFKA-10545: Create topic IDs in ZooKeeper and Controller",
  "updated_at": "2020-10-26T18:07:34Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9473",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/25566826?v=4",
    "events_url": "https://api.github.com/users/jolshan/events{/privacy}",
    "followers_url": "https://api.github.com/users/jolshan/followers",
    "following_url": "https://api.github.com/users/jolshan/following{/other_user}",
    "gists_url": "https://api.github.com/users/jolshan/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/jolshan",
    "id": 25566826,
    "login": "jolshan",
    "node_id": "MDQ6VXNlcjI1NTY2ODI2",
    "organizations_url": "https://api.github.com/users/jolshan/orgs",
    "received_events_url": "https://api.github.com/users/jolshan/received_events",
    "repos_url": "https://api.github.com/users/jolshan/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/jolshan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jolshan/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/jolshan"
  }
}
json_root is_array: false
json_root is_object: true
number: 9473
title: KAFKA-10545: Create topic IDs in ZooKeeper and Controller
pr body: Topic IDs must be created for all new topics and all existing topics that do not yet have a topic ID. In ZooKeeper, the ID is written to the TopicZNode, and in the controller, it is stored in a map. 

This is a preliminary change before the second part of KAFKA-10545, which will propagate these IDs to brokers.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9473/comments
id: 511880256
url: https://api.github.com/repos/apache/kafka/pulls/comments/511880256
body: Do we want to do both checks first and update the two maps together at the end? We may also want to check that the topic exists in `allTopics`.
diff_hunk: @@ -126,6 +130,23 @@ class ControllerContext {
     replicaStates.clear()
   }
 
+  def addTopicId(topic: String, id: UUID): Unit = {
+    topicIds.get(topic).foreach { existingId =>
+      if (!existingId.equals(id))
+        throw new IllegalStateException("topic ID map already contained ID for topic "
+          + topic + " and new ID " + id + " did not match existing ID "
+          + existingId)
+    }
+    topicIds.put(topic, id)
path: core/src/main/scala/kafka/controller/ControllerContext.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511880256
id: 511882563
url: https://api.github.com/repos/apache/kafka/pulls/comments/511882563
body: We could do:
```
topicIds.remove(topic).foreach { topicId =>
  topicNames.remove(topicId)
}
```
diff_hunk: @@ -295,6 +316,10 @@ class ControllerContext {
     topicsToBeDeleted -= topic
     topicsWithDeletionStarted -= topic
     allTopics -= topic
+    if (topicIds.get(topic)!= None) {
+      topicNames.remove(topicIds.get(topic).get)
+      topicIds.remove(topic)
+    }
path: core/src/main/scala/kafka/controller/ControllerContext.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511882563
id: 511886842
url: https://api.github.com/repos/apache/kafka/pulls/comments/511886842
body: Can use `controllerContext.topicIds(topicPartition.topic)`
diff_hunk: @@ -1027,7 +1032,9 @@ class KafkaController(val config: KafkaConfig,
       controllerContext.partitionFullReplicaAssignmentForTopic(topicPartition.topic) +=
       (topicPartition -> assignment)
 
-    val setDataResponse = zkClient.setTopicAssignmentRaw(topicPartition.topic, topicAssignment, controllerContext.epochZkVersion)
+    val setDataResponse = zkClient.setTopicAssignmentRaw(topicPartition.topic,
+      controllerContext.topicIds.get(topicPartition.topic).get,
path: core/src/main/scala/kafka/controller/KafkaController.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511886842
id: 511888172
url: https://api.github.com/repos/apache/kafka/pulls/comments/511888172
body: As before: `controllerContext.topicIds(topic)`
diff_hunk: @@ -1670,6 +1691,7 @@ class KafkaController(val config: KafkaConfig,
       }.toMap
 
       zkClient.setTopicAssignment(topic,
+        controllerContext.topicIds.get(topic).get,
path: core/src/main/scala/kafka/controller/KafkaController.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511888172
id: 511889829
url: https://api.github.com/repos/apache/kafka/pulls/comments/511889829
body: `topicIds(topic)`
diff_hunk: @@ -158,9 +158,11 @@ class AdminZkClient(zkClient: KafkaZkClient) extends Logging {
       val assignment = replicaAssignment.map { case (partitionId, replicas) => (new TopicPartition(topic,partitionId), replicas) }.toMap
 
       if (!isUpdate) {
-        zkClient.createTopicAssignment(topic, assignment.map { case (k, v) => k -> v.replicas })
+        val topicId = UUID.randomUUID()
+        zkClient.createTopicAssignment(topic, topicId, assignment.map { case (k, v) => k -> v.replicas })
       } else {
-        zkClient.setTopicAssignment(topic, assignment)
+        val topicIds = zkClient.getTopicIdsForTopics(Set(topic))
+        zkClient.setTopicAssignment(topic, topicIds.get(topic).get, assignment)
path: core/src/main/scala/kafka/zk/AdminZkClient.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511889829
id: 511891101
url: https://api.github.com/repos/apache/kafka/pulls/comments/511891101
body: Is topicId optional?
diff_hunk: @@ -481,43 +482,70 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo
     pathExists(TopicZNode.path(topicName))
   }
 
+  /**
+   * Adds a topic ID to existing topic and replica assignments
+   * @param topicIdReplicaAssignments the TopicIDReplicaAssignments to add a topic ID to
+   * @return the updated TopicIdReplicaAssigments including the newly created topic IDs
+   */
+  def setTopicIds(topicIdReplicaAssignments: collection.Set[TopicIdReplicaAssignment],
+                  expectedControllerEpochZkVersion: Int): Set[TopicIdReplicaAssignment] = {
+    val updatedAssignments = topicIdReplicaAssignments.map {
+      case TopicIdReplicaAssignment(topic, None, assignments) =>
+        TopicIdReplicaAssignment(topic, Some(UUID.randomUUID()), assignments)
+      case TopicIdReplicaAssignment(topic, Some(_), _) =>
+        throw new IllegalArgumentException("TopicIdReplicaAssignment for " + topic + " already contains a topic ID.")
+    }.toSet
+
+    val setDataRequests = updatedAssignments.map { case TopicIdReplicaAssignment(topic, topicIdOpt, assignments) =>
+      SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(topicIdOpt.get, assignments), ZkVersion.MatchAnyVersion)
+    }.toSeq
+
+    retryRequestsUntilConnected(setDataRequests, expectedControllerEpochZkVersion)
+    updatedAssignments
+  }
+
   /**
    * Sets the topic znode with the given assignment.
    * @param topic the topic whose assignment is being set.
+   * @param topicId optional topic ID if the topic has one
    * @param assignment the partition to replica mapping to set for the given topic
    * @param expectedControllerEpochZkVersion expected controller epoch zkVersion.
    * @return SetDataResponse
    */
   def setTopicAssignmentRaw(topic: String,
+                            topicId: UUID,
                             assignment: collection.Map[TopicPartition, ReplicaAssignment],
                             expectedControllerEpochZkVersion: Int): SetDataResponse = {
-    val setDataRequest = SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(assignment), ZkVersion.MatchAnyVersion)
+    val setDataRequest = SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(topicId, assignment), ZkVersion.MatchAnyVersion)
     retryRequestUntilConnected(setDataRequest, expectedControllerEpochZkVersion)
   }
 
   /**
    * Sets the topic znode with the given assignment.
    * @param topic the topic whose assignment is being set.
+   * @param topicId optional topic ID if the topic has one
path: core/src/main/scala/kafka/zk/KafkaZkClient.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511891101
id: 511891201
url: https://api.github.com/repos/apache/kafka/pulls/comments/511891201
body: Is topicId optional?
diff_hunk: @@ -481,43 +482,70 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo
     pathExists(TopicZNode.path(topicName))
   }
 
+  /**
+   * Adds a topic ID to existing topic and replica assignments
+   * @param topicIdReplicaAssignments the TopicIDReplicaAssignments to add a topic ID to
+   * @return the updated TopicIdReplicaAssigments including the newly created topic IDs
+   */
+  def setTopicIds(topicIdReplicaAssignments: collection.Set[TopicIdReplicaAssignment],
+                  expectedControllerEpochZkVersion: Int): Set[TopicIdReplicaAssignment] = {
+    val updatedAssignments = topicIdReplicaAssignments.map {
+      case TopicIdReplicaAssignment(topic, None, assignments) =>
+        TopicIdReplicaAssignment(topic, Some(UUID.randomUUID()), assignments)
+      case TopicIdReplicaAssignment(topic, Some(_), _) =>
+        throw new IllegalArgumentException("TopicIdReplicaAssignment for " + topic + " already contains a topic ID.")
+    }.toSet
+
+    val setDataRequests = updatedAssignments.map { case TopicIdReplicaAssignment(topic, topicIdOpt, assignments) =>
+      SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(topicIdOpt.get, assignments), ZkVersion.MatchAnyVersion)
+    }.toSeq
+
+    retryRequestsUntilConnected(setDataRequests, expectedControllerEpochZkVersion)
+    updatedAssignments
+  }
+
   /**
    * Sets the topic znode with the given assignment.
    * @param topic the topic whose assignment is being set.
+   * @param topicId optional topic ID if the topic has one
    * @param assignment the partition to replica mapping to set for the given topic
    * @param expectedControllerEpochZkVersion expected controller epoch zkVersion.
    * @return SetDataResponse
    */
   def setTopicAssignmentRaw(topic: String,
+                            topicId: UUID,
                             assignment: collection.Map[TopicPartition, ReplicaAssignment],
                             expectedControllerEpochZkVersion: Int): SetDataResponse = {
-    val setDataRequest = SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(assignment), ZkVersion.MatchAnyVersion)
+    val setDataRequest = SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(topicId, assignment), ZkVersion.MatchAnyVersion)
     retryRequestUntilConnected(setDataRequest, expectedControllerEpochZkVersion)
   }
 
   /**
    * Sets the topic znode with the given assignment.
    * @param topic the topic whose assignment is being set.
+   * @param topicId optional topic ID if the topic has one
    * @param assignment the partition to replica mapping to set for the given topic
    * @param expectedControllerEpochZkVersion expected controller epoch zkVersion.
    * @throws KeeperException if there is an error while setting assignment
    */
   def setTopicAssignment(topic: String,
+                         topicId: UUID,
                          assignment: Map[TopicPartition, ReplicaAssignment],
                          expectedControllerEpochZkVersion: Int = ZkVersion.MatchAnyVersion) = {
-    val setDataResponse = setTopicAssignmentRaw(topic, assignment, expectedControllerEpochZkVersion)
+    val setDataResponse = setTopicAssignmentRaw(topic, topicId, assignment, expectedControllerEpochZkVersion)
     setDataResponse.maybeThrow()
   }
 
   /**
    * Create the topic znode with the given assignment.
    * @param topic the topic whose assignment is being set.
+   * @param topicId optional topic ID if the topic has one
path: core/src/main/scala/kafka/zk/KafkaZkClient.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511891201
id: 511893263
url: https://api.github.com/repos/apache/kafka/pulls/comments/511893263
body: Do we expect cases where topicId is not defined? If so, do we need to distinguish between topics that don't exist and topics that don't have topic ids? Either way, we should update javadoc (unless we throw an IllegalStateException here for topic id not set).
diff_hunk: @@ -577,6 +605,27 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo
     retryRequestsUntilConnected(deleteRequests, expectedControllerEpochZkVersion)
   }
 
+  /**
+   * Gets the topic IDs for the given topics.
+   * @param topics the topics we wish to retrieve the Topic IDs for
+   * @return the Topic IDs
+   */
+  def getTopicIdsForTopics(topics: Set[String]): Map[String, UUID] = {
+    val getDataRequests = topics.map(topic => GetDataRequest(TopicZNode.path(topic), ctx = Some(topic)))
+    val getDataResponses = retryRequestsUntilConnected(getDataRequests.toSeq)
+    getDataResponses.map { getDataResponse =>
+      val topic = getDataResponse.ctx.get.asInstanceOf[String]
+      getDataResponse.resultCode match {
+        case Code.OK => Some(TopicZNode.decode(topic, getDataResponse.data))
+        case Code.NONODE => None
+        case _ => throw getDataResponse.resultException.get
+      }
+    }.filter(_.flatMap(_.topicId).isDefined)
path: core/src/main/scala/kafka/zk/KafkaZkClient.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511893263
id: 511894444
url: https://api.github.com/repos/apache/kafka/pulls/comments/511894444
body: nit: indentation - looks like the indentation of the `if` statement above is off.
diff_hunk: @@ -616,7 +683,7 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo
     getDataResponses.flatMap { getDataResponse =>
       val topic = getDataResponse.ctx.get.asInstanceOf[String]
        if (getDataResponse.resultCode == Code.OK) {
-        val partitionMap = TopicZNode.decode(topic, getDataResponse.data).map { case (k, v) => (k.partition, v) }
+         val partitionMap = TopicZNode.decode(topic, getDataResponse.data).assignment.map { case (k, v) => (k.partition, v) }
path: core/src/main/scala/kafka/zk/KafkaZkClient.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511894444
id: 511895940
url: https://api.github.com/repos/apache/kafka/pulls/comments/511895940
body: `assertNotEquals`?
diff_hunk: @@ -848,6 +848,110 @@ class ControllerIntegrationTest extends ZooKeeperTestHarness {
     latch.await()
   }
 
+  @Test
+  def testTopicIdsAreAdded(): Unit = {
+    servers = makeServers(1)
+    TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp1 = new TopicPartition("t1", 0)
+    val assignment1 = Map(tp1.partition -> Seq(0))
+
+    // Before adding the topic, an attempt to get the ID should result in None.
+    assertTrue(controller.controllerContext.topicIds.get("t1") == None)
+
+    TestUtils.createTopic(zkClient, tp1.topic(), assignment1, servers)
+
+    // Test that the first topic has its ID added correctly
+    waitForPartitionState(tp1, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t1") != None)
path: core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511895940
id: 511896386
url: https://api.github.com/repos/apache/kafka/pulls/comments/511896386
body: `.topicIds("t1")`
diff_hunk: @@ -848,6 +848,110 @@ class ControllerIntegrationTest extends ZooKeeperTestHarness {
     latch.await()
   }
 
+  @Test
+  def testTopicIdsAreAdded(): Unit = {
+    servers = makeServers(1)
+    TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp1 = new TopicPartition("t1", 0)
+    val assignment1 = Map(tp1.partition -> Seq(0))
+
+    // Before adding the topic, an attempt to get the ID should result in None.
+    assertTrue(controller.controllerContext.topicIds.get("t1") == None)
+
+    TestUtils.createTopic(zkClient, tp1.topic(), assignment1, servers)
+
+    // Test that the first topic has its ID added correctly
+    waitForPartitionState(tp1, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t1") != None)
+    val topicId1 = controller.controllerContext.topicIds.get("t1").get
path: core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511896386
id: 511896770
url: https://api.github.com/repos/apache/kafka/pulls/comments/511896770
body: Reverse the arguments since expected value comes first?
diff_hunk: @@ -848,6 +848,110 @@ class ControllerIntegrationTest extends ZooKeeperTestHarness {
     latch.await()
   }
 
+  @Test
+  def testTopicIdsAreAdded(): Unit = {
+    servers = makeServers(1)
+    TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp1 = new TopicPartition("t1", 0)
+    val assignment1 = Map(tp1.partition -> Seq(0))
+
+    // Before adding the topic, an attempt to get the ID should result in None.
+    assertTrue(controller.controllerContext.topicIds.get("t1") == None)
+
+    TestUtils.createTopic(zkClient, tp1.topic(), assignment1, servers)
+
+    // Test that the first topic has its ID added correctly
+    waitForPartitionState(tp1, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t1") != None)
+    val topicId1 = controller.controllerContext.topicIds.get("t1").get
+    assertEquals(controller.controllerContext.topicNames(topicId1), "t1")
path: core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511896770
id: 511897141
url: https://api.github.com/repos/apache/kafka/pulls/comments/511897141
body: Same comments as earlier for this block.
diff_hunk: @@ -848,6 +848,110 @@ class ControllerIntegrationTest extends ZooKeeperTestHarness {
     latch.await()
   }
 
+  @Test
+  def testTopicIdsAreAdded(): Unit = {
+    servers = makeServers(1)
+    TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp1 = new TopicPartition("t1", 0)
+    val assignment1 = Map(tp1.partition -> Seq(0))
+
+    // Before adding the topic, an attempt to get the ID should result in None.
+    assertTrue(controller.controllerContext.topicIds.get("t1") == None)
+
+    TestUtils.createTopic(zkClient, tp1.topic(), assignment1, servers)
+
+    // Test that the first topic has its ID added correctly
+    waitForPartitionState(tp1, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t1") != None)
+    val topicId1 = controller.controllerContext.topicIds.get("t1").get
+    assertEquals(controller.controllerContext.topicNames(topicId1), "t1")
+
+    val tp2 = new TopicPartition("t2", 0)
+    val assignment2 = Map(tp2.partition -> Seq(0))
+    TestUtils.createTopic(zkClient, tp2.topic(), assignment2, servers)
+
+    // Test that the second topic has its ID added correctly
+    waitForPartitionState(tp2, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t2") != None)
+    val topicId2 = controller.controllerContext.topicIds.get("t2").get
+    assertEquals(controller.controllerContext.topicNames(topicId2), "t2")
path: core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511897141
id: 511897277
url: https://api.github.com/repos/apache/kafka/pulls/comments/511897277
body: `assertNotEquals`
diff_hunk: @@ -848,6 +848,110 @@ class ControllerIntegrationTest extends ZooKeeperTestHarness {
     latch.await()
   }
 
+  @Test
+  def testTopicIdsAreAdded(): Unit = {
+    servers = makeServers(1)
+    TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp1 = new TopicPartition("t1", 0)
+    val assignment1 = Map(tp1.partition -> Seq(0))
+
+    // Before adding the topic, an attempt to get the ID should result in None.
+    assertTrue(controller.controllerContext.topicIds.get("t1") == None)
+
+    TestUtils.createTopic(zkClient, tp1.topic(), assignment1, servers)
+
+    // Test that the first topic has its ID added correctly
+    waitForPartitionState(tp1, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t1") != None)
+    val topicId1 = controller.controllerContext.topicIds.get("t1").get
+    assertEquals(controller.controllerContext.topicNames(topicId1), "t1")
+
+    val tp2 = new TopicPartition("t2", 0)
+    val assignment2 = Map(tp2.partition -> Seq(0))
+    TestUtils.createTopic(zkClient, tp2.topic(), assignment2, servers)
+
+    // Test that the second topic has its ID added correctly
+    waitForPartitionState(tp2, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t2") != None)
+    val topicId2 = controller.controllerContext.topicIds.get("t2").get
+    assertEquals(controller.controllerContext.topicNames(topicId2), "t2")
+
+    // The first topic ID has not changed
+    assertEquals(topicId1, controller.controllerContext.topicIds.get("t1").get)
+    assertTrue(!topicId1.equals(topicId2))
path: core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511897277
id: 511898587
url: https://api.github.com/repos/apache/kafka/pulls/comments/511898587
body: nit: unnecessary newline
diff_hunk: @@ -848,6 +848,110 @@ class ControllerIntegrationTest extends ZooKeeperTestHarness {
     latch.await()
   }
 
+  @Test
+  def testTopicIdsAreAdded(): Unit = {
+    servers = makeServers(1)
+    TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp1 = new TopicPartition("t1", 0)
+    val assignment1 = Map(tp1.partition -> Seq(0))
+
+    // Before adding the topic, an attempt to get the ID should result in None.
+    assertTrue(controller.controllerContext.topicIds.get("t1") == None)
+
+    TestUtils.createTopic(zkClient, tp1.topic(), assignment1, servers)
+
+    // Test that the first topic has its ID added correctly
+    waitForPartitionState(tp1, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t1") != None)
+    val topicId1 = controller.controllerContext.topicIds.get("t1").get
+    assertEquals(controller.controllerContext.topicNames(topicId1), "t1")
+
+    val tp2 = new TopicPartition("t2", 0)
+    val assignment2 = Map(tp2.partition -> Seq(0))
+    TestUtils.createTopic(zkClient, tp2.topic(), assignment2, servers)
+
+    // Test that the second topic has its ID added correctly
+    waitForPartitionState(tp2, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t2") != None)
+    val topicId2 = controller.controllerContext.topicIds.get("t2").get
+    assertEquals(controller.controllerContext.topicNames(topicId2), "t2")
+
+    // The first topic ID has not changed
+    assertEquals(topicId1, controller.controllerContext.topicIds.get("t1").get)
+    assertTrue(!topicId1.equals(topicId2))
+  }
+
+
+  @Test
+  def testTopicIdMigrationAndHandling(): Unit = {
+    val tp = new TopicPartition("t", 0)
+    val assignment = Map(tp.partition -> ReplicaAssignment(Seq(0), List(), List()))
+    val adminZkClient = new AdminZkClient(zkClient)
+
+    servers = makeServers(1)
+    adminZkClient.createTopic(tp.topic, 1, 1)
+    waitForPartitionState(tp, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    val topicIdAfterCreate = zkClient.getTopicIdsForTopics(Set(tp.topic())).get(tp.topic())
+    assertTrue(topicIdAfterCreate.isDefined)
+    assertEquals("correct topic ID cannot be found in the controller context",
+      topicIdAfterCreate, servers.head.kafkaController.controllerContext.topicIds.get(tp.topic))
+
+    adminZkClient.addPartitions(tp.topic, assignment, adminZkClient.getBrokerMetadatas(), 2)
+    val topicIdAfterAddition = zkClient.getTopicIdsForTopics(Set(tp.topic())).get(tp.topic())
+    assertEquals(topicIdAfterCreate, topicIdAfterAddition)
+    assertEquals("topic ID changed after partition additions",
+      topicIdAfterCreate, servers.head.kafkaController.controllerContext.topicIds.get(tp.topic))
+
+    adminZkClient.deleteTopic(tp.topic)
+    TestUtils.waitUntilTrue(() => servers.head.kafkaController.controllerContext.topicIds.get(tp.topic).isEmpty,
+      "topic ID for topic should have been removed from controller context after deletion")
+  }
+
+  @Test
+  def testTopicIdPersistsThroughControllerReelection(): Unit = {
+    servers = makeServers(2)
+    val controllerId = TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp = new TopicPartition("t", 0)
+    val assignment = Map(tp.partition -> Seq(controllerId))
+    TestUtils.createTopic(zkClient, tp.topic, partitionReplicaAssignment = assignment, servers = servers)
+    waitForPartitionState(tp, firstControllerEpoch, controllerId, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    val topicId = controller.controllerContext.topicIds.get("t").get
+
+
path: core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511898587
id: 511899119
url: https://api.github.com/repos/apache/kafka/pulls/comments/511899119
body: nit: unnecessary newline (just one required)?
diff_hunk: @@ -848,6 +848,110 @@ class ControllerIntegrationTest extends ZooKeeperTestHarness {
     latch.await()
   }
 
+  @Test
+  def testTopicIdsAreAdded(): Unit = {
+    servers = makeServers(1)
+    TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp1 = new TopicPartition("t1", 0)
+    val assignment1 = Map(tp1.partition -> Seq(0))
+
+    // Before adding the topic, an attempt to get the ID should result in None.
+    assertTrue(controller.controllerContext.topicIds.get("t1") == None)
+
+    TestUtils.createTopic(zkClient, tp1.topic(), assignment1, servers)
+
+    // Test that the first topic has its ID added correctly
+    waitForPartitionState(tp1, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t1") != None)
+    val topicId1 = controller.controllerContext.topicIds.get("t1").get
+    assertEquals(controller.controllerContext.topicNames(topicId1), "t1")
+
+    val tp2 = new TopicPartition("t2", 0)
+    val assignment2 = Map(tp2.partition -> Seq(0))
+    TestUtils.createTopic(zkClient, tp2.topic(), assignment2, servers)
+
+    // Test that the second topic has its ID added correctly
+    waitForPartitionState(tp2, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t2") != None)
+    val topicId2 = controller.controllerContext.topicIds.get("t2").get
+    assertEquals(controller.controllerContext.topicNames(topicId2), "t2")
+
+    // The first topic ID has not changed
+    assertEquals(topicId1, controller.controllerContext.topicIds.get("t1").get)
+    assertTrue(!topicId1.equals(topicId2))
+  }
+
+
+  @Test
+  def testTopicIdMigrationAndHandling(): Unit = {
+    val tp = new TopicPartition("t", 0)
+    val assignment = Map(tp.partition -> ReplicaAssignment(Seq(0), List(), List()))
+    val adminZkClient = new AdminZkClient(zkClient)
+
+    servers = makeServers(1)
+    adminZkClient.createTopic(tp.topic, 1, 1)
+    waitForPartitionState(tp, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    val topicIdAfterCreate = zkClient.getTopicIdsForTopics(Set(tp.topic())).get(tp.topic())
+    assertTrue(topicIdAfterCreate.isDefined)
+    assertEquals("correct topic ID cannot be found in the controller context",
+      topicIdAfterCreate, servers.head.kafkaController.controllerContext.topicIds.get(tp.topic))
+
+    adminZkClient.addPartitions(tp.topic, assignment, adminZkClient.getBrokerMetadatas(), 2)
+    val topicIdAfterAddition = zkClient.getTopicIdsForTopics(Set(tp.topic())).get(tp.topic())
+    assertEquals(topicIdAfterCreate, topicIdAfterAddition)
+    assertEquals("topic ID changed after partition additions",
+      topicIdAfterCreate, servers.head.kafkaController.controllerContext.topicIds.get(tp.topic))
+
+    adminZkClient.deleteTopic(tp.topic)
+    TestUtils.waitUntilTrue(() => servers.head.kafkaController.controllerContext.topicIds.get(tp.topic).isEmpty,
+      "topic ID for topic should have been removed from controller context after deletion")
+  }
+
+  @Test
+  def testTopicIdPersistsThroughControllerReelection(): Unit = {
+    servers = makeServers(2)
+    val controllerId = TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp = new TopicPartition("t", 0)
+    val assignment = Map(tp.partition -> Seq(controllerId))
+    TestUtils.createTopic(zkClient, tp.topic, partitionReplicaAssignment = assignment, servers = servers)
+    waitForPartitionState(tp, firstControllerEpoch, controllerId, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    val topicId = controller.controllerContext.topicIds.get("t").get
+
+
+    servers(controllerId).shutdown()
+    servers(controllerId).awaitShutdown()
+    TestUtils.waitUntilTrue(() => zkClient.getControllerId.isDefined, "failed to elect a controller")
+    val controller2 = getController().kafkaController
+    assertEquals(topicId, controller2.controllerContext.topicIds.get("t").get)
+  }
+
+  @Test
+  def testTopicIdPersistsThroughControllerRestart(): Unit = {
+    servers = makeServers(1)
+    val controllerId = TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp = new TopicPartition("t", 0)
+    val assignment = Map(tp.partition -> Seq(controllerId))
+    TestUtils.createTopic(zkClient, tp.topic, partitionReplicaAssignment = assignment, servers = servers)
+    waitForPartitionState(tp, firstControllerEpoch, controllerId, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    val topicId = controller.controllerContext.topicIds.get("t").get
+
+
path: core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511899119
id: 511899926
url: https://api.github.com/repos/apache/kafka/pulls/comments/511899926
body: `topicIds(topic1)` instead of .get().get() - multiple places
diff_hunk: @@ -194,7 +195,7 @@ class KafkaZkClientTest extends ZooKeeperTestHarness {
     )
 
     // create a topic assignment
-    zkClient.createTopicAssignment(topic1, assignment)
+    zkClient.createTopicAssignment(topic1, topicIds.get(topic1).get, assignment)
path: core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511899926
id: 512054701
url: https://api.github.com/repos/apache/kafka/pulls/comments/512054701
body: Yeah. That makes sense to me.
diff_hunk: @@ -126,6 +130,23 @@ class ControllerContext {
     replicaStates.clear()
   }
 
+  def addTopicId(topic: String, id: UUID): Unit = {
+    topicIds.get(topic).foreach { existingId =>
+      if (!existingId.equals(id))
+        throw new IllegalStateException("topic ID map already contained ID for topic "
+          + topic + " and new ID " + id + " did not match existing ID "
+          + existingId)
+    }
+    topicIds.put(topic, id)
path: core/src/main/scala/kafka/controller/ControllerContext.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r512054701
id: 512056578
url: https://api.github.com/repos/apache/kafka/pulls/comments/512056578
body: I meant to fix this. Thanks for catching.
diff_hunk: @@ -481,43 +482,70 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo
     pathExists(TopicZNode.path(topicName))
   }
 
+  /**
+   * Adds a topic ID to existing topic and replica assignments
+   * @param topicIdReplicaAssignments the TopicIDReplicaAssignments to add a topic ID to
+   * @return the updated TopicIdReplicaAssigments including the newly created topic IDs
+   */
+  def setTopicIds(topicIdReplicaAssignments: collection.Set[TopicIdReplicaAssignment],
+                  expectedControllerEpochZkVersion: Int): Set[TopicIdReplicaAssignment] = {
+    val updatedAssignments = topicIdReplicaAssignments.map {
+      case TopicIdReplicaAssignment(topic, None, assignments) =>
+        TopicIdReplicaAssignment(topic, Some(UUID.randomUUID()), assignments)
+      case TopicIdReplicaAssignment(topic, Some(_), _) =>
+        throw new IllegalArgumentException("TopicIdReplicaAssignment for " + topic + " already contains a topic ID.")
+    }.toSet
+
+    val setDataRequests = updatedAssignments.map { case TopicIdReplicaAssignment(topic, topicIdOpt, assignments) =>
+      SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(topicIdOpt.get, assignments), ZkVersion.MatchAnyVersion)
+    }.toSeq
+
+    retryRequestsUntilConnected(setDataRequests, expectedControllerEpochZkVersion)
+    updatedAssignments
+  }
+
   /**
    * Sets the topic znode with the given assignment.
    * @param topic the topic whose assignment is being set.
+   * @param topicId optional topic ID if the topic has one
    * @param assignment the partition to replica mapping to set for the given topic
    * @param expectedControllerEpochZkVersion expected controller epoch zkVersion.
    * @return SetDataResponse
    */
   def setTopicAssignmentRaw(topic: String,
+                            topicId: UUID,
                             assignment: collection.Map[TopicPartition, ReplicaAssignment],
                             expectedControllerEpochZkVersion: Int): SetDataResponse = {
-    val setDataRequest = SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(assignment), ZkVersion.MatchAnyVersion)
+    val setDataRequest = SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(topicId, assignment), ZkVersion.MatchAnyVersion)
     retryRequestUntilConnected(setDataRequest, expectedControllerEpochZkVersion)
   }
 
   /**
    * Sets the topic znode with the given assignment.
    * @param topic the topic whose assignment is being set.
+   * @param topicId optional topic ID if the topic has one
path: core/src/main/scala/kafka/zk/KafkaZkClient.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r512056578
id: 512068125
url: https://api.github.com/repos/apache/kafka/pulls/comments/512068125
body: In the case where the topic was created on an older version (where there are no topic IDs yet, we will have the case where topic IDs are not defined. However, I believe in the case where this is used, we should have topic IDs defined. (I'm expecting a topic ID on the following line, so an error would occur there if it was missing.) I'm thinking it would make sense to remove the filter line and maybe throw an error here (earlier) if it is not set.
diff_hunk: @@ -577,6 +605,27 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo
     retryRequestsUntilConnected(deleteRequests, expectedControllerEpochZkVersion)
   }
 
+  /**
+   * Gets the topic IDs for the given topics.
+   * @param topics the topics we wish to retrieve the Topic IDs for
+   * @return the Topic IDs
+   */
+  def getTopicIdsForTopics(topics: Set[String]): Map[String, UUID] = {
+    val getDataRequests = topics.map(topic => GetDataRequest(TopicZNode.path(topic), ctx = Some(topic)))
+    val getDataResponses = retryRequestsUntilConnected(getDataRequests.toSeq)
+    getDataResponses.map { getDataResponse =>
+      val topic = getDataResponse.ctx.get.asInstanceOf[String]
+      getDataResponse.resultCode match {
+        case Code.OK => Some(TopicZNode.decode(topic, getDataResponse.data))
+        case Code.NONODE => None
+        case _ => throw getDataResponse.resultException.get
+      }
+    }.filter(_.flatMap(_.topicId).isDefined)
path: core/src/main/scala/kafka/zk/KafkaZkClient.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r512068125
id: 512069339
url: https://api.github.com/repos/apache/kafka/pulls/comments/512069339
body: I've found a few style errors while working on this and I wasn't sure the protocol. I guess it makes sense to fix the style in the block of code I'm working on. (But it's a little confusing when its not the areas of code I'm working on)
diff_hunk: @@ -616,7 +683,7 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo
     getDataResponses.flatMap { getDataResponse =>
       val topic = getDataResponse.ctx.get.asInstanceOf[String]
        if (getDataResponse.resultCode == Code.OK) {
-        val partitionMap = TopicZNode.decode(topic, getDataResponse.data).map { case (k, v) => (k.partition, v) }
+         val partitionMap = TopicZNode.decode(topic, getDataResponse.data).assignment.map { case (k, v) => (k.partition, v) }
path: core/src/main/scala/kafka/zk/KafkaZkClient.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r512069339
id: 512081744
url: https://api.github.com/repos/apache/kafka/pulls/comments/512081744
body: I was thinking about this some more, and I don't think we will have a case where the topic ID is not in the map (the if conditional is not needed.) However, the suggestion you gave is still good because it prevents the extra lookup.
diff_hunk: @@ -295,6 +316,10 @@ class ControllerContext {
     topicsToBeDeleted -= topic
     topicsWithDeletionStarted -= topic
     allTopics -= topic
+    if (topicIds.get(topic)!= None) {
+      topicNames.remove(topicIds.get(topic).get)
+      topicIds.remove(topic)
+    }
path: core/src/main/scala/kafka/controller/ControllerContext.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r512081744
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9471/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9471/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9471"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9471"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9471/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9471"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/dc41db6ac815c9300735a39d68e34534be652f4a"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:2.6",
    "ref": "2.6",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "c4b41bc725a635906ca6c400871a1c9de5dc4f26",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Add a Jenkinsfile for the 2.6 branch so PRs can be built.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9471/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9471/commits",
  "created_at": "2020-10-21T16:59:25Z",
  "diff_url": "https://github.com/apache/kafka/pull/9471.diff",
  "draft": false,
  "head": {
    "label": "vvcephei:2.6-jenkinsfile",
    "ref": "2.6-jenkinsfile",
    "repo": {
      "archive_url": "https://api.github.com/repos/vvcephei/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/vvcephei/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/vvcephei/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/vvcephei/kafka/branches{/branch}",
      "clone_url": "https://github.com/vvcephei/kafka.git",
      "collaborators_url": "https://api.github.com/repos/vvcephei/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/vvcephei/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/vvcephei/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/vvcephei/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/vvcephei/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/vvcephei/kafka/contributors",
      "created_at": "2020-10-13T02:33:37Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/vvcephei/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/vvcephei/kafka/downloads",
      "events_url": "https://api.github.com/repos/vvcephei/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/vvcephei/kafka/forks",
      "full_name": "vvcephei/kafka",
      "git_commits_url": "https://api.github.com/repos/vvcephei/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/vvcephei/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/vvcephei/kafka/git/tags{/sha}",
      "git_url": "git://github.com/vvcephei/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/vvcephei/kafka/hooks",
      "html_url": "https://github.com/vvcephei/kafka",
      "id": 303567113,
      "issue_comment_url": "https://api.github.com/repos/vvcephei/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/vvcephei/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/vvcephei/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/vvcephei/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/vvcephei/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/vvcephei/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/vvcephei/kafka/merges",
      "milestones_url": "https://api.github.com/repos/vvcephei/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDM1NjcxMTM=",
      "notifications_url": "https://api.github.com/repos/vvcephei/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/832787?v=4",
        "events_url": "https://api.github.com/users/vvcephei/events{/privacy}",
        "followers_url": "https://api.github.com/users/vvcephei/followers",
        "following_url": "https://api.github.com/users/vvcephei/following{/other_user}",
        "gists_url": "https://api.github.com/users/vvcephei/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vvcephei",
        "id": 832787,
        "login": "vvcephei",
        "node_id": "MDQ6VXNlcjgzMjc4Nw==",
        "organizations_url": "https://api.github.com/users/vvcephei/orgs",
        "received_events_url": "https://api.github.com/users/vvcephei/received_events",
        "repos_url": "https://api.github.com/users/vvcephei/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vvcephei/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vvcephei/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vvcephei"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/vvcephei/kafka/pulls{/number}",
      "pushed_at": "2020-10-23T18:53:14Z",
      "releases_url": "https://api.github.com/repos/vvcephei/kafka/releases{/id}",
      "size": 108580,
      "ssh_url": "git@github.com:vvcephei/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/vvcephei/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/vvcephei/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/vvcephei/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/vvcephei/kafka/subscription",
      "svn_url": "https://github.com/vvcephei/kafka",
      "tags_url": "https://api.github.com/repos/vvcephei/kafka/tags",
      "teams_url": "https://api.github.com/repos/vvcephei/kafka/teams",
      "trees_url": "https://api.github.com/repos/vvcephei/kafka/git/trees{/sha}",
      "updated_at": "2020-10-13T02:33:40Z",
      "url": "https://api.github.com/repos/vvcephei/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "dc41db6ac815c9300735a39d68e34534be652f4a",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/832787?v=4",
      "events_url": "https://api.github.com/users/vvcephei/events{/privacy}",
      "followers_url": "https://api.github.com/users/vvcephei/followers",
      "following_url": "https://api.github.com/users/vvcephei/following{/other_user}",
      "gists_url": "https://api.github.com/users/vvcephei/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vvcephei",
      "id": 832787,
      "login": "vvcephei",
      "node_id": "MDQ6VXNlcjgzMjc4Nw==",
      "organizations_url": "https://api.github.com/users/vvcephei/orgs",
      "received_events_url": "https://api.github.com/users/vvcephei/received_events",
      "repos_url": "https://api.github.com/users/vvcephei/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vvcephei/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vvcephei/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vvcephei"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9471",
  "id": 507715330,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9471",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "f5636c1dd0825d90f200ca2c6054fbdb89bc4f71",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA3NzE1MzMw",
  "number": 9471,
  "patch_url": "https://github.com/apache/kafka/pull/9471.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9471/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/dc41db6ac815c9300735a39d68e34534be652f4a",
  "title": "MINOR: Add Jenkinsfile to 2.6",
  "updated_at": "2020-10-22T21:37:03Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9471",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/832787?v=4",
    "events_url": "https://api.github.com/users/vvcephei/events{/privacy}",
    "followers_url": "https://api.github.com/users/vvcephei/followers",
    "following_url": "https://api.github.com/users/vvcephei/following{/other_user}",
    "gists_url": "https://api.github.com/users/vvcephei/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/vvcephei",
    "id": 832787,
    "login": "vvcephei",
    "node_id": "MDQ6VXNlcjgzMjc4Nw==",
    "organizations_url": "https://api.github.com/users/vvcephei/orgs",
    "received_events_url": "https://api.github.com/users/vvcephei/received_events",
    "repos_url": "https://api.github.com/users/vvcephei/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/vvcephei/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vvcephei/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/vvcephei"
  }
}
json_root is_array: false
json_root is_object: true
number: 9471
title: MINOR: Add Jenkinsfile to 2.6
pr body: Add a Jenkinsfile for the 2.6 branch so PRs can be built.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9471/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9469/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9469/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9469"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9469"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9469/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9469"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/39bc3dc228b191baf81a7982f8df919b43cd2785"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "67bc4f08feb50ac135a4d8e1d469747102aad3a6",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This PR includes two changes.\r\n\r\n1. replace FetchRequest.TopicAndPartitionData by Map.Entry (to reduce duplicate code)\r\n1. move ```batchByTopic``` to ```FetchResponse``` \r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9469/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9469/commits",
  "created_at": "2020-10-21T09:42:41Z",
  "diff_url": "https://github.com/apache/kafka/pull/9469.diff",
  "draft": false,
  "head": {
    "label": "chia7712:MINOR-9469",
    "ref": "MINOR-9469",
    "repo": {
      "archive_url": "https://api.github.com/repos/chia7712/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/chia7712/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/chia7712/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/chia7712/kafka/branches{/branch}",
      "clone_url": "https://github.com/chia7712/kafka.git",
      "collaborators_url": "https://api.github.com/repos/chia7712/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/chia7712/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/chia7712/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/chia7712/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/chia7712/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/chia7712/kafka/contributors",
      "created_at": "2018-03-14T12:43:46Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/chia7712/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/chia7712/kafka/downloads",
      "events_url": "https://api.github.com/repos/chia7712/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/chia7712/kafka/forks",
      "full_name": "chia7712/kafka",
      "git_commits_url": "https://api.github.com/repos/chia7712/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/chia7712/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/chia7712/kafka/git/tags{/sha}",
      "git_url": "git://github.com/chia7712/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/chia7712/kafka/hooks",
      "html_url": "https://github.com/chia7712/kafka",
      "id": 125210946,
      "issue_comment_url": "https://api.github.com/repos/chia7712/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/chia7712/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/chia7712/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/chia7712/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/chia7712/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/chia7712/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/chia7712/kafka/merges",
      "milestones_url": "https://api.github.com/repos/chia7712/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjUyMTA5NDY=",
      "notifications_url": "https://api.github.com/repos/chia7712/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
        "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
        "followers_url": "https://api.github.com/users/chia7712/followers",
        "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
        "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/chia7712",
        "id": 6234750,
        "login": "chia7712",
        "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
        "organizations_url": "https://api.github.com/users/chia7712/orgs",
        "received_events_url": "https://api.github.com/users/chia7712/received_events",
        "repos_url": "https://api.github.com/users/chia7712/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/chia7712"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/chia7712/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:21Z",
      "releases_url": "https://api.github.com/repos/chia7712/kafka/releases{/id}",
      "size": 102740,
      "ssh_url": "git@github.com:chia7712/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/chia7712/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/chia7712/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/chia7712/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/chia7712/kafka/subscription",
      "svn_url": "https://github.com/chia7712/kafka",
      "tags_url": "https://api.github.com/repos/chia7712/kafka/tags",
      "teams_url": "https://api.github.com/repos/chia7712/kafka/teams",
      "trees_url": "https://api.github.com/repos/chia7712/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T01:51:17Z",
      "url": "https://api.github.com/repos/chia7712/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "39bc3dc228b191baf81a7982f8df919b43cd2785",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
      "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
      "followers_url": "https://api.github.com/users/chia7712/followers",
      "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
      "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chia7712",
      "id": 6234750,
      "login": "chia7712",
      "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
      "organizations_url": "https://api.github.com/users/chia7712/orgs",
      "received_events_url": "https://api.github.com/users/chia7712/received_events",
      "repos_url": "https://api.github.com/users/chia7712/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chia7712"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9469",
  "id": 507399513,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9469",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "dc9fa3eeeab3ba2c786e6353accb9406262d7855",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA3Mzk5NTEz",
  "number": 9469,
  "patch_url": "https://github.com/apache/kafka/pull/9469.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9469/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/39bc3dc228b191baf81a7982f8df919b43cd2785",
  "title": "MINOR: replace FetchRequest.TopicAndPartitionData by Map.Entry",
  "updated_at": "2020-10-22T20:01:22Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9469",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
    "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
    "followers_url": "https://api.github.com/users/chia7712/followers",
    "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
    "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/chia7712",
    "id": 6234750,
    "login": "chia7712",
    "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
    "organizations_url": "https://api.github.com/users/chia7712/orgs",
    "received_events_url": "https://api.github.com/users/chia7712/received_events",
    "repos_url": "https://api.github.com/users/chia7712/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/chia7712"
  }
}
json_root is_array: false
json_root is_object: true
number: 9469
title: MINOR: replace FetchRequest.TopicAndPartitionData by Map.Entry
pr body: This PR includes two changes.

1. replace FetchRequest.TopicAndPartitionData by Map.Entry (to reduce duplicate code)
1. move ```batchByTopic``` to ```FetchResponse``` 

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9469/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9468/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9468/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9468"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9468"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9468/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9468"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/fbf5d5703cc6180258ede2f4b26abbab7bca69bf"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:2.6",
    "ref": "2.6",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "c4b41bc725a635906ca6c400871a1c9de5dc4f26",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "cherry-picking https://github.com/apache/kafka/pull/9237 on 2.6 branch\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9468/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9468/commits",
  "created_at": "2020-10-21T06:52:13Z",
  "diff_url": "https://github.com/apache/kafka/pull/9468.diff",
  "draft": false,
  "head": {
    "label": "lkokhreidze:2.6",
    "ref": "2.6",
    "repo": {
      "archive_url": "https://api.github.com/repos/lkokhreidze/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/lkokhreidze/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/lkokhreidze/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/lkokhreidze/kafka/branches{/branch}",
      "clone_url": "https://github.com/lkokhreidze/kafka.git",
      "collaborators_url": "https://api.github.com/repos/lkokhreidze/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/lkokhreidze/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/lkokhreidze/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/lkokhreidze/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/lkokhreidze/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/lkokhreidze/kafka/contributors",
      "created_at": "2019-07-14T20:20:09Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/lkokhreidze/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/lkokhreidze/kafka/downloads",
      "events_url": "https://api.github.com/repos/lkokhreidze/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/lkokhreidze/kafka/forks",
      "full_name": "lkokhreidze/kafka",
      "git_commits_url": "https://api.github.com/repos/lkokhreidze/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/lkokhreidze/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/lkokhreidze/kafka/git/tags{/sha}",
      "git_url": "git://github.com/lkokhreidze/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": "https://cwiki.apache.org/confluence/display/KAFKA/KIP-221%3A+Enhance+DSL+with+Connecting+Topic+Creation+and+Repartition+Hint",
      "hooks_url": "https://api.github.com/repos/lkokhreidze/kafka/hooks",
      "html_url": "https://github.com/lkokhreidze/kafka",
      "id": 196879641,
      "issue_comment_url": "https://api.github.com/repos/lkokhreidze/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/lkokhreidze/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/lkokhreidze/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/lkokhreidze/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/lkokhreidze/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/lkokhreidze/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/lkokhreidze/kafka/merges",
      "milestones_url": "https://api.github.com/repos/lkokhreidze/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxOTY4Nzk2NDE=",
      "notifications_url": "https://api.github.com/repos/lkokhreidze/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/8927925?v=4",
        "events_url": "https://api.github.com/users/lkokhreidze/events{/privacy}",
        "followers_url": "https://api.github.com/users/lkokhreidze/followers",
        "following_url": "https://api.github.com/users/lkokhreidze/following{/other_user}",
        "gists_url": "https://api.github.com/users/lkokhreidze/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lkokhreidze",
        "id": 8927925,
        "login": "lkokhreidze",
        "node_id": "MDQ6VXNlcjg5Mjc5MjU=",
        "organizations_url": "https://api.github.com/users/lkokhreidze/orgs",
        "received_events_url": "https://api.github.com/users/lkokhreidze/received_events",
        "repos_url": "https://api.github.com/users/lkokhreidze/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lkokhreidze/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lkokhreidze/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lkokhreidze"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/lkokhreidze/kafka/pulls{/number}",
      "pushed_at": "2020-10-21T06:46:45Z",
      "releases_url": "https://api.github.com/repos/lkokhreidze/kafka/releases{/id}",
      "size": 105581,
      "ssh_url": "git@github.com:lkokhreidze/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/lkokhreidze/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/lkokhreidze/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/lkokhreidze/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/lkokhreidze/kafka/subscription",
      "svn_url": "https://github.com/lkokhreidze/kafka",
      "tags_url": "https://api.github.com/repos/lkokhreidze/kafka/tags",
      "teams_url": "https://api.github.com/repos/lkokhreidze/kafka/teams",
      "trees_url": "https://api.github.com/repos/lkokhreidze/kafka/git/trees{/sha}",
      "updated_at": "2020-10-22T06:14:48Z",
      "url": "https://api.github.com/repos/lkokhreidze/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "fbf5d5703cc6180258ede2f4b26abbab7bca69bf",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/8927925?v=4",
      "events_url": "https://api.github.com/users/lkokhreidze/events{/privacy}",
      "followers_url": "https://api.github.com/users/lkokhreidze/followers",
      "following_url": "https://api.github.com/users/lkokhreidze/following{/other_user}",
      "gists_url": "https://api.github.com/users/lkokhreidze/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lkokhreidze",
      "id": 8927925,
      "login": "lkokhreidze",
      "node_id": "MDQ6VXNlcjg5Mjc5MjU=",
      "organizations_url": "https://api.github.com/users/lkokhreidze/orgs",
      "received_events_url": "https://api.github.com/users/lkokhreidze/received_events",
      "repos_url": "https://api.github.com/users/lkokhreidze/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lkokhreidze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lkokhreidze/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lkokhreidze"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9468",
  "id": 507300862,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9468",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "19cdaf1f981879e39f77bfee04ee97fdd54d4f68",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA3MzAwODYy",
  "number": 9468,
  "patch_url": "https://github.com/apache/kafka/pull/9468.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9468/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/fbf5d5703cc6180258ede2f4b26abbab7bca69bf",
  "title": "KAFKA-10454 / (2.6) Update copartitionSourceGroups when optimization algorithm is triggered",
  "updated_at": "2020-10-21T18:17:57Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9468",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/8927925?v=4",
    "events_url": "https://api.github.com/users/lkokhreidze/events{/privacy}",
    "followers_url": "https://api.github.com/users/lkokhreidze/followers",
    "following_url": "https://api.github.com/users/lkokhreidze/following{/other_user}",
    "gists_url": "https://api.github.com/users/lkokhreidze/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/lkokhreidze",
    "id": 8927925,
    "login": "lkokhreidze",
    "node_id": "MDQ6VXNlcjg5Mjc5MjU=",
    "organizations_url": "https://api.github.com/users/lkokhreidze/orgs",
    "received_events_url": "https://api.github.com/users/lkokhreidze/received_events",
    "repos_url": "https://api.github.com/users/lkokhreidze/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/lkokhreidze/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lkokhreidze/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/lkokhreidze"
  }
}
json_root is_array: false
json_root is_object: true
number: 9468
title: KAFKA-10454 / (2.6) Update copartitionSourceGroups when optimization algorithm is triggered
pr body: cherry-picking https://github.com/apache/kafka/pull/9237 on 2.6 branch

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9468/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9467/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9467/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9467"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9467"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9467/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9467"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/3466b90cc95c1e07e86d74a44a330890e346c48b"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:2.6",
    "ref": "2.6",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "c4b41bc725a635906ca6c400871a1c9de5dc4f26",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This is a cherry pick of PR #9338 on branch 2.6.\r\n\r\nAlso introduced the notion of WrappingNullableSerdes (aligned to the concept\r\nof WrappingNullableSerializer and WrappingNullableDeserializer) and centralized\r\ninitialization in WrappingNullables.\r\n\r\nThe added integeration test KTableKTableForeignKeyJoinDistributedTest tests\r\nwhether all serdes are now correctly set on all stream clients.\r\n\r\nReviewers: John Roesler <vvcephei@apache.org>\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9467/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9467/commits",
  "created_at": "2020-10-21T04:39:17Z",
  "diff_url": "https://github.com/apache/kafka/pull/9467.diff",
  "draft": false,
  "head": {
    "label": "thake:fixNpe-2.6",
    "ref": "fixNpe-2.6",
    "repo": {
      "archive_url": "https://api.github.com/repos/thake/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/thake/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/thake/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/thake/kafka/branches{/branch}",
      "clone_url": "https://github.com/thake/kafka.git",
      "collaborators_url": "https://api.github.com/repos/thake/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/thake/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/thake/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/thake/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/thake/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/thake/kafka/contributors",
      "created_at": "2020-09-25T04:58:17Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/thake/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/thake/kafka/downloads",
      "events_url": "https://api.github.com/repos/thake/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/thake/kafka/forks",
      "full_name": "thake/kafka",
      "git_commits_url": "https://api.github.com/repos/thake/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/thake/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/thake/kafka/git/tags{/sha}",
      "git_url": "git://github.com/thake/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/thake/kafka/hooks",
      "html_url": "https://github.com/thake/kafka",
      "id": 298471556,
      "issue_comment_url": "https://api.github.com/repos/thake/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/thake/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/thake/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/thake/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/thake/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/thake/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/thake/kafka/merges",
      "milestones_url": "https://api.github.com/repos/thake/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyOTg0NzE1NTY=",
      "notifications_url": "https://api.github.com/repos/thake/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/12547985?v=4",
        "events_url": "https://api.github.com/users/thake/events{/privacy}",
        "followers_url": "https://api.github.com/users/thake/followers",
        "following_url": "https://api.github.com/users/thake/following{/other_user}",
        "gists_url": "https://api.github.com/users/thake/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/thake",
        "id": 12547985,
        "login": "thake",
        "node_id": "MDQ6VXNlcjEyNTQ3OTg1",
        "organizations_url": "https://api.github.com/users/thake/orgs",
        "received_events_url": "https://api.github.com/users/thake/received_events",
        "repos_url": "https://api.github.com/users/thake/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/thake/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thake/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/thake"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/thake/kafka/pulls{/number}",
      "pushed_at": "2020-10-22T17:20:00Z",
      "releases_url": "https://api.github.com/repos/thake/kafka/releases{/id}",
      "size": 107789,
      "ssh_url": "git@github.com:thake/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/thake/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/thake/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/thake/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/thake/kafka/subscription",
      "svn_url": "https://github.com/thake/kafka",
      "tags_url": "https://api.github.com/repos/thake/kafka/tags",
      "teams_url": "https://api.github.com/repos/thake/kafka/teams",
      "trees_url": "https://api.github.com/repos/thake/kafka/git/trees{/sha}",
      "updated_at": "2020-10-20T18:51:58Z",
      "url": "https://api.github.com/repos/thake/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "3466b90cc95c1e07e86d74a44a330890e346c48b",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/12547985?v=4",
      "events_url": "https://api.github.com/users/thake/events{/privacy}",
      "followers_url": "https://api.github.com/users/thake/followers",
      "following_url": "https://api.github.com/users/thake/following{/other_user}",
      "gists_url": "https://api.github.com/users/thake/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/thake",
      "id": 12547985,
      "login": "thake",
      "node_id": "MDQ6VXNlcjEyNTQ3OTg1",
      "organizations_url": "https://api.github.com/users/thake/orgs",
      "received_events_url": "https://api.github.com/users/thake/received_events",
      "repos_url": "https://api.github.com/users/thake/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/thake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thake/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/thake"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9467",
  "id": 507243020,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9467",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "2b8d29409d656cf789d706c68ad85edaa5a62516",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA3MjQzMDIw",
  "number": 9467,
  "patch_url": "https://github.com/apache/kafka/pull/9467.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9467/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/3466b90cc95c1e07e86d74a44a330890e346c48b",
  "title": "KAFKA-10515: Properly initialize nullable Serdes with default values",
  "updated_at": "2020-10-22T17:20:25Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9467",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/12547985?v=4",
    "events_url": "https://api.github.com/users/thake/events{/privacy}",
    "followers_url": "https://api.github.com/users/thake/followers",
    "following_url": "https://api.github.com/users/thake/following{/other_user}",
    "gists_url": "https://api.github.com/users/thake/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/thake",
    "id": 12547985,
    "login": "thake",
    "node_id": "MDQ6VXNlcjEyNTQ3OTg1",
    "organizations_url": "https://api.github.com/users/thake/orgs",
    "received_events_url": "https://api.github.com/users/thake/received_events",
    "repos_url": "https://api.github.com/users/thake/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/thake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/thake/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/thake"
  }
}
json_root is_array: false
json_root is_object: true
number: 9467
title: KAFKA-10515: Properly initialize nullable Serdes with default values
pr body: This is a cherry pick of PR #9338 on branch 2.6.

Also introduced the notion of WrappingNullableSerdes (aligned to the concept
of WrappingNullableSerializer and WrappingNullableDeserializer) and centralized
initialization in WrappingNullables.

The added integeration test KTableKTableForeignKeyJoinDistributedTest tests
whether all serdes are now correctly set on all stream clients.

Reviewers: John Roesler <vvcephei@apache.org>

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9467/comments
id: 509366502
url: https://api.github.com/repos/apache/kafka/pulls/comments/509366502
body: ```suggestion
```

Let's not backport these methods, which are unused in 2.6. If we need them later, we can backport them at that time.
diff_hunk: @@ -0,0 +1,83 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.streams.processor.internals;
+
+import org.apache.kafka.common.serialization.Deserializer;
+import org.apache.kafka.common.serialization.Serde;
+import org.apache.kafka.common.serialization.Serializer;
+import org.apache.kafka.streams.processor.ProcessorContext;
+import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;
+
+/**
+ * This class bridges the gap for components that _should_ be compatible with
+ * the public ProcessorContext interface, but have come to depend on features
+ * in InternalProcessorContext. In theory, all the features adapted here could
+ * migrate to the public interface, so each method in this class should reference
+ * the ticket that would ultimately obviate it.
+ */
+public final class ProcessorContextUtils {
+
+    private ProcessorContextUtils() {}
+
+    /**
+     * Note that KIP-622 would move currentSystemTimeMs to ProcessorContext,
+     * removing the need for this method.
+     */
+    public static long getCurrentSystemTime(final ProcessorContext context) {
+        return context instanceof InternalProcessorContext
+            ? ((InternalProcessorContext) context).currentSystemTimeMs()
+            : System.currentTimeMillis();
+    }
+
+    /**
+     * Should be removed as part of KAFKA-10217
+     */
+    public static StreamsMetricsImpl getMetricsImpl(final ProcessorContext context) {
+        return (StreamsMetricsImpl) context.metrics();
+    }
+
+    public static InternalProcessorContext asInternalProcessorContext(final ProcessorContext context) {
+        if (context instanceof InternalProcessorContext) {
+            return (InternalProcessorContext) context;
+        } else {
+            throw new IllegalArgumentException(
+                "This component requires internal features of Kafka Streams and must be disabled for unit tests."
+            );
+        }
+    }
path: streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextUtils.java
html: https://github.com/apache/kafka/pull/9467#discussion_r509366502
id: 509373215
url: https://api.github.com/repos/apache/kafka/pulls/comments/509373215
body: Note, there will also be an unused import after removing these methods. I don't know if you know, but you can run `./gradlew :streams:testAll` to fully run all the verifications locally.
diff_hunk: @@ -0,0 +1,83 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.streams.processor.internals;
+
+import org.apache.kafka.common.serialization.Deserializer;
+import org.apache.kafka.common.serialization.Serde;
+import org.apache.kafka.common.serialization.Serializer;
+import org.apache.kafka.streams.processor.ProcessorContext;
+import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;
+
+/**
+ * This class bridges the gap for components that _should_ be compatible with
+ * the public ProcessorContext interface, but have come to depend on features
+ * in InternalProcessorContext. In theory, all the features adapted here could
+ * migrate to the public interface, so each method in this class should reference
+ * the ticket that would ultimately obviate it.
+ */
+public final class ProcessorContextUtils {
+
+    private ProcessorContextUtils() {}
+
+    /**
+     * Note that KIP-622 would move currentSystemTimeMs to ProcessorContext,
+     * removing the need for this method.
+     */
+    public static long getCurrentSystemTime(final ProcessorContext context) {
+        return context instanceof InternalProcessorContext
+            ? ((InternalProcessorContext) context).currentSystemTimeMs()
+            : System.currentTimeMillis();
+    }
+
+    /**
+     * Should be removed as part of KAFKA-10217
+     */
+    public static StreamsMetricsImpl getMetricsImpl(final ProcessorContext context) {
+        return (StreamsMetricsImpl) context.metrics();
+    }
+
+    public static InternalProcessorContext asInternalProcessorContext(final ProcessorContext context) {
+        if (context instanceof InternalProcessorContext) {
+            return (InternalProcessorContext) context;
+        } else {
+            throw new IllegalArgumentException(
+                "This component requires internal features of Kafka Streams and must be disabled for unit tests."
+            );
+        }
+    }
path: streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextUtils.java
html: https://github.com/apache/kafka/pull/9467#discussion_r509373215
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9457/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9457/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9457"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9457"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9457/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9457"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/ed685bbec9cd9b78b1ba6e6ec1cea332477559f3"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "e3d6344ed7feadae119a57ce658fe7dc0505ca06",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Remove unused variables, methods, parameters, unthrown exceptions, and fixing typos.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9457/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9457/commits",
  "created_at": "2020-10-20T08:11:26Z",
  "diff_url": "https://github.com/apache/kafka/pull/9457.diff",
  "draft": false,
  "head": {
    "label": "dongjinleekr:cleanup/202009",
    "ref": "cleanup/202009",
    "repo": {
      "archive_url": "https://api.github.com/repos/dongjinleekr/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/dongjinleekr/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/dongjinleekr/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/dongjinleekr/kafka/branches{/branch}",
      "clone_url": "https://github.com/dongjinleekr/kafka.git",
      "collaborators_url": "https://api.github.com/repos/dongjinleekr/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/dongjinleekr/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/dongjinleekr/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/dongjinleekr/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/dongjinleekr/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/dongjinleekr/kafka/contributors",
      "created_at": "2016-09-23T15:16:20Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/dongjinleekr/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/dongjinleekr/kafka/downloads",
      "events_url": "https://api.github.com/repos/dongjinleekr/kafka/events",
      "fork": true,
      "forks": 1,
      "forks_count": 1,
      "forks_url": "https://api.github.com/repos/dongjinleekr/kafka/forks",
      "full_name": "dongjinleekr/kafka",
      "git_commits_url": "https://api.github.com/repos/dongjinleekr/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/dongjinleekr/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/dongjinleekr/kafka/git/tags{/sha}",
      "git_url": "git://github.com/dongjinleekr/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/dongjinleekr/kafka/hooks",
      "html_url": "https://github.com/dongjinleekr/kafka",
      "id": 69036305,
      "issue_comment_url": "https://api.github.com/repos/dongjinleekr/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/dongjinleekr/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/dongjinleekr/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/dongjinleekr/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/dongjinleekr/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/dongjinleekr/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/dongjinleekr/kafka/merges",
      "milestones_url": "https://api.github.com/repos/dongjinleekr/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk2OTAzNjMwNQ==",
      "notifications_url": "https://api.github.com/repos/dongjinleekr/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/2375128?v=4",
        "events_url": "https://api.github.com/users/dongjinleekr/events{/privacy}",
        "followers_url": "https://api.github.com/users/dongjinleekr/followers",
        "following_url": "https://api.github.com/users/dongjinleekr/following{/other_user}",
        "gists_url": "https://api.github.com/users/dongjinleekr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dongjinleekr",
        "id": 2375128,
        "login": "dongjinleekr",
        "node_id": "MDQ6VXNlcjIzNzUxMjg=",
        "organizations_url": "https://api.github.com/users/dongjinleekr/orgs",
        "received_events_url": "https://api.github.com/users/dongjinleekr/received_events",
        "repos_url": "https://api.github.com/users/dongjinleekr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dongjinleekr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dongjinleekr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dongjinleekr"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/dongjinleekr/kafka/pulls{/number}",
      "pushed_at": "2020-10-26T09:34:22Z",
      "releases_url": "https://api.github.com/repos/dongjinleekr/kafka/releases{/id}",
      "size": 97789,
      "ssh_url": "git@github.com:dongjinleekr/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/dongjinleekr/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/dongjinleekr/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/dongjinleekr/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/dongjinleekr/kafka/subscription",
      "svn_url": "https://github.com/dongjinleekr/kafka",
      "tags_url": "https://api.github.com/repos/dongjinleekr/kafka/tags",
      "teams_url": "https://api.github.com/repos/dongjinleekr/kafka/teams",
      "trees_url": "https://api.github.com/repos/dongjinleekr/kafka/git/trees{/sha}",
      "updated_at": "2020-10-26T09:34:27Z",
      "url": "https://api.github.com/repos/dongjinleekr/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "ed685bbec9cd9b78b1ba6e6ec1cea332477559f3",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/2375128?v=4",
      "events_url": "https://api.github.com/users/dongjinleekr/events{/privacy}",
      "followers_url": "https://api.github.com/users/dongjinleekr/followers",
      "following_url": "https://api.github.com/users/dongjinleekr/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongjinleekr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dongjinleekr",
      "id": 2375128,
      "login": "dongjinleekr",
      "node_id": "MDQ6VXNlcjIzNzUxMjg=",
      "organizations_url": "https://api.github.com/users/dongjinleekr/orgs",
      "received_events_url": "https://api.github.com/users/dongjinleekr/received_events",
      "repos_url": "https://api.github.com/users/dongjinleekr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dongjinleekr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongjinleekr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dongjinleekr"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9457",
  "id": 506576552,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9457",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "4410812874a0af1a3f47df56085fb53bf2d35256",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA2NTc2NTUy",
  "number": 9457,
  "patch_url": "https://github.com/apache/kafka/pull/9457.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9457/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/ed685bbec9cd9b78b1ba6e6ec1cea332477559f3",
  "title": "MINOR: Trivial Cleanups",
  "updated_at": "2020-10-20T08:13:48Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9457",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/2375128?v=4",
    "events_url": "https://api.github.com/users/dongjinleekr/events{/privacy}",
    "followers_url": "https://api.github.com/users/dongjinleekr/followers",
    "following_url": "https://api.github.com/users/dongjinleekr/following{/other_user}",
    "gists_url": "https://api.github.com/users/dongjinleekr/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/dongjinleekr",
    "id": 2375128,
    "login": "dongjinleekr",
    "node_id": "MDQ6VXNlcjIzNzUxMjg=",
    "organizations_url": "https://api.github.com/users/dongjinleekr/orgs",
    "received_events_url": "https://api.github.com/users/dongjinleekr/received_events",
    "repos_url": "https://api.github.com/users/dongjinleekr/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/dongjinleekr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dongjinleekr/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/dongjinleekr"
  }
}
json_root is_array: false
json_root is_object: true
number: 9457
title: MINOR: Trivial Cleanups
pr body: Remove unused variables, methods, parameters, unthrown exceptions, and fixing typos.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9457/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9451/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9451/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9451"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9451"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9451/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9451"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/72cf7a36cf2799452771904e425f4fcdf8ce1779"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "cf202cb6acf38c64a3e8b9e541673a12ee55eaaa",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "KIP: https://cwiki.apache.org/confluence/display/KAFKA/KIP-656%3A+MirrorMaker2+Exactly-once+Semantics\r\n\r\nconfig to enable exactly-once (aka. transaction producer)\r\n```\r\nprimary->backup.transaction.producer.enabled: true\r\nprimary->backup.topics: foo,bar,heartbeats\r\ntopics: foo,bar,heartbeats\r\nprimary.consumer.isolation.level: read_committed\r\n```\r\nvalidation tool on k8s: https://github.com/ning2008wisc/kafka-producer-consumer-test\r\n\r\nTODO: (1) add unit test, (2) switch between `MirrorSinkConnector` and `MirrorSourceConnector` by config",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9451/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9451/commits",
  "created_at": "2020-10-18T00:46:53Z",
  "diff_url": "https://github.com/apache/kafka/pull/9451.diff",
  "draft": false,
  "head": {
    "label": "ning2008wisc:KAFKA-10339",
    "ref": "KAFKA-10339",
    "repo": {
      "archive_url": "https://api.github.com/repos/ning2008wisc/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/ning2008wisc/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/ning2008wisc/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/ning2008wisc/kafka/branches{/branch}",
      "clone_url": "https://github.com/ning2008wisc/kafka.git",
      "collaborators_url": "https://api.github.com/repos/ning2008wisc/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/ning2008wisc/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/ning2008wisc/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/ning2008wisc/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/ning2008wisc/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/ning2008wisc/kafka/contributors",
      "created_at": "2020-08-07T16:36:54Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/ning2008wisc/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/ning2008wisc/kafka/downloads",
      "events_url": "https://api.github.com/repos/ning2008wisc/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/ning2008wisc/kafka/forks",
      "full_name": "ning2008wisc/kafka",
      "git_commits_url": "https://api.github.com/repos/ning2008wisc/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/ning2008wisc/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/ning2008wisc/kafka/git/tags{/sha}",
      "git_url": "git://github.com/ning2008wisc/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/ning2008wisc/kafka/hooks",
      "html_url": "https://github.com/ning2008wisc/kafka",
      "id": 285876041,
      "issue_comment_url": "https://api.github.com/repos/ning2008wisc/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/ning2008wisc/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/ning2008wisc/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/ning2008wisc/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/ning2008wisc/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/ning2008wisc/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/ning2008wisc/kafka/merges",
      "milestones_url": "https://api.github.com/repos/ning2008wisc/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyODU4NzYwNDE=",
      "notifications_url": "https://api.github.com/repos/ning2008wisc/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/32080381?v=4",
        "events_url": "https://api.github.com/users/ning2008wisc/events{/privacy}",
        "followers_url": "https://api.github.com/users/ning2008wisc/followers",
        "following_url": "https://api.github.com/users/ning2008wisc/following{/other_user}",
        "gists_url": "https://api.github.com/users/ning2008wisc/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ning2008wisc",
        "id": 32080381,
        "login": "ning2008wisc",
        "node_id": "MDQ6VXNlcjMyMDgwMzgx",
        "organizations_url": "https://api.github.com/users/ning2008wisc/orgs",
        "received_events_url": "https://api.github.com/users/ning2008wisc/received_events",
        "repos_url": "https://api.github.com/users/ning2008wisc/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ning2008wisc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ning2008wisc/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ning2008wisc"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/ning2008wisc/kafka/pulls{/number}",
      "pushed_at": "2020-10-23T06:09:47Z",
      "releases_url": "https://api.github.com/repos/ning2008wisc/kafka/releases{/id}",
      "size": 107417,
      "ssh_url": "git@github.com:ning2008wisc/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/ning2008wisc/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/ning2008wisc/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/ning2008wisc/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/ning2008wisc/kafka/subscription",
      "svn_url": "https://github.com/ning2008wisc/kafka",
      "tags_url": "https://api.github.com/repos/ning2008wisc/kafka/tags",
      "teams_url": "https://api.github.com/repos/ning2008wisc/kafka/teams",
      "trees_url": "https://api.github.com/repos/ning2008wisc/kafka/git/trees{/sha}",
      "updated_at": "2020-10-17T07:34:53Z",
      "url": "https://api.github.com/repos/ning2008wisc/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "72cf7a36cf2799452771904e425f4fcdf8ce1779",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/32080381?v=4",
      "events_url": "https://api.github.com/users/ning2008wisc/events{/privacy}",
      "followers_url": "https://api.github.com/users/ning2008wisc/followers",
      "following_url": "https://api.github.com/users/ning2008wisc/following{/other_user}",
      "gists_url": "https://api.github.com/users/ning2008wisc/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ning2008wisc",
      "id": 32080381,
      "login": "ning2008wisc",
      "node_id": "MDQ6VXNlcjMyMDgwMzgx",
      "organizations_url": "https://api.github.com/users/ning2008wisc/orgs",
      "received_events_url": "https://api.github.com/users/ning2008wisc/received_events",
      "repos_url": "https://api.github.com/users/ning2008wisc/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ning2008wisc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ning2008wisc/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ning2008wisc"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9451",
  "id": 505369736,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9451",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "295685b26d8badacb83ce2276b58e74109973d44",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA1MzY5NzM2",
  "number": 9451,
  "patch_url": "https://github.com/apache/kafka/pull/9451.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9451/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/72cf7a36cf2799452771904e425f4fcdf8ce1779",
  "title": "MirrorMaker2 Exactly-once Semantics",
  "updated_at": "2020-10-18T00:46:53Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9451",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/32080381?v=4",
    "events_url": "https://api.github.com/users/ning2008wisc/events{/privacy}",
    "followers_url": "https://api.github.com/users/ning2008wisc/followers",
    "following_url": "https://api.github.com/users/ning2008wisc/following{/other_user}",
    "gists_url": "https://api.github.com/users/ning2008wisc/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ning2008wisc",
    "id": 32080381,
    "login": "ning2008wisc",
    "node_id": "MDQ6VXNlcjMyMDgwMzgx",
    "organizations_url": "https://api.github.com/users/ning2008wisc/orgs",
    "received_events_url": "https://api.github.com/users/ning2008wisc/received_events",
    "repos_url": "https://api.github.com/users/ning2008wisc/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ning2008wisc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ning2008wisc/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ning2008wisc"
  }
}
json_root is_array: false
json_root is_object: true
number: 9451
title: MirrorMaker2 Exactly-once Semantics
pr body: KIP: https://cwiki.apache.org/confluence/display/KAFKA/KIP-656%3A+MirrorMaker2+Exactly-once+Semantics

config to enable exactly-once (aka. transaction producer)
```
primary->backup.transaction.producer.enabled: true
primary->backup.topics: foo,bar,heartbeats
topics: foo,bar,heartbeats
primary.consumer.isolation.level: read_committed
```
validation tool on k8s: https://github.com/ning2008wisc/kafka-producer-consumer-test

TODO: (1) add unit test, (2) switch between `MirrorSinkConnector` and `MirrorSourceConnector` by config
review_comments: https://api.github.com/repos/apache/kafka/pulls/9451/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9445/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9445/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9445"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9445"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9445/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9445"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/8a727ca02406495051e88fbae50358d9c552403b"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "b752097f849cef17d5ffcbaec1d56f32825167da",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Improve broker logs when a client authenticates using Plain mechanism and wrong password. \r\nThis helps identifying wihich client is misconfigured.",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9445/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9445/commits",
  "created_at": "2020-10-15T18:11:28Z",
  "diff_url": "https://github.com/apache/kafka/pull/9445.diff",
  "draft": false,
  "head": {
    "label": "gquintana:pr-plain-auth-failed-log",
    "ref": "pr-plain-auth-failed-log",
    "repo": {
      "archive_url": "https://api.github.com/repos/gquintana/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/gquintana/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/gquintana/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/gquintana/kafka/branches{/branch}",
      "clone_url": "https://github.com/gquintana/kafka.git",
      "collaborators_url": "https://api.github.com/repos/gquintana/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/gquintana/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/gquintana/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/gquintana/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/gquintana/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/gquintana/kafka/contributors",
      "created_at": "2020-10-15T18:04:00Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/gquintana/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/gquintana/kafka/downloads",
      "events_url": "https://api.github.com/repos/gquintana/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/gquintana/kafka/forks",
      "full_name": "gquintana/kafka",
      "git_commits_url": "https://api.github.com/repos/gquintana/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/gquintana/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/gquintana/kafka/git/tags{/sha}",
      "git_url": "git://github.com/gquintana/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/gquintana/kafka/hooks",
      "html_url": "https://github.com/gquintana/kafka",
      "id": 304409268,
      "issue_comment_url": "https://api.github.com/repos/gquintana/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/gquintana/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/gquintana/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/gquintana/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/gquintana/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/gquintana/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/gquintana/kafka/merges",
      "milestones_url": "https://api.github.com/repos/gquintana/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDQ0MDkyNjg=",
      "notifications_url": "https://api.github.com/repos/gquintana/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/755587?v=4",
        "events_url": "https://api.github.com/users/gquintana/events{/privacy}",
        "followers_url": "https://api.github.com/users/gquintana/followers",
        "following_url": "https://api.github.com/users/gquintana/following{/other_user}",
        "gists_url": "https://api.github.com/users/gquintana/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gquintana",
        "id": 755587,
        "login": "gquintana",
        "node_id": "MDQ6VXNlcjc1NTU4Nw==",
        "organizations_url": "https://api.github.com/users/gquintana/orgs",
        "received_events_url": "https://api.github.com/users/gquintana/received_events",
        "repos_url": "https://api.github.com/users/gquintana/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gquintana/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gquintana/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gquintana"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/gquintana/kafka/pulls{/number}",
      "pushed_at": "2020-10-15T18:06:00Z",
      "releases_url": "https://api.github.com/repos/gquintana/kafka/releases{/id}",
      "size": 107475,
      "ssh_url": "git@github.com:gquintana/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/gquintana/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/gquintana/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/gquintana/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/gquintana/kafka/subscription",
      "svn_url": "https://github.com/gquintana/kafka",
      "tags_url": "https://api.github.com/repos/gquintana/kafka/tags",
      "teams_url": "https://api.github.com/repos/gquintana/kafka/teams",
      "trees_url": "https://api.github.com/repos/gquintana/kafka/git/trees{/sha}",
      "updated_at": "2020-10-15T18:04:04Z",
      "url": "https://api.github.com/repos/gquintana/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "8a727ca02406495051e88fbae50358d9c552403b",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/755587?v=4",
      "events_url": "https://api.github.com/users/gquintana/events{/privacy}",
      "followers_url": "https://api.github.com/users/gquintana/followers",
      "following_url": "https://api.github.com/users/gquintana/following{/other_user}",
      "gists_url": "https://api.github.com/users/gquintana/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/gquintana",
      "id": 755587,
      "login": "gquintana",
      "node_id": "MDQ6VXNlcjc1NTU4Nw==",
      "organizations_url": "https://api.github.com/users/gquintana/orgs",
      "received_events_url": "https://api.github.com/users/gquintana/received_events",
      "repos_url": "https://api.github.com/users/gquintana/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/gquintana/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gquintana/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/gquintana"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9445",
  "id": 504287668,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9445",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "6d9c1ba635d0420d8fcc5b6adf7636abf247d1ee",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA0Mjg3NjY4",
  "number": 9445,
  "patch_url": "https://github.com/apache/kafka/pull/9445.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9445/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/8a727ca02406495051e88fbae50358d9c552403b",
  "title": "KAFKA-10615 Detail plain authentication failure log",
  "updated_at": "2020-10-15T18:11:28Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9445",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/755587?v=4",
    "events_url": "https://api.github.com/users/gquintana/events{/privacy}",
    "followers_url": "https://api.github.com/users/gquintana/followers",
    "following_url": "https://api.github.com/users/gquintana/following{/other_user}",
    "gists_url": "https://api.github.com/users/gquintana/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/gquintana",
    "id": 755587,
    "login": "gquintana",
    "node_id": "MDQ6VXNlcjc1NTU4Nw==",
    "organizations_url": "https://api.github.com/users/gquintana/orgs",
    "received_events_url": "https://api.github.com/users/gquintana/received_events",
    "repos_url": "https://api.github.com/users/gquintana/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/gquintana/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gquintana/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/gquintana"
  }
}
json_root is_array: false
json_root is_object: true
number: 9445
title: KAFKA-10615 Detail plain authentication failure log
pr body: Improve broker logs when a client authenticates using Plain mechanism and wrong password. 
This helps identifying wihich client is misconfigured.
review_comments: https://api.github.com/repos/apache/kafka/pulls/9445/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9444/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9444/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9444"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9444"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9444/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9444"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/076d3c4cc13d611a62b2fbe5751bba17db563b97"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "b752097f849cef17d5ffcbaec1d56f32825167da",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Doc fix for KAFKA-8305; mention its alternate use.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9444/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9444/commits",
  "created_at": "2020-10-15T17:52:03Z",
  "diff_url": "https://github.com/apache/kafka/pull/9444.diff",
  "draft": false,
  "head": {
    "label": "garyrussell:docfix",
    "ref": "docfix",
    "repo": {
      "archive_url": "https://api.github.com/repos/garyrussell/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/garyrussell/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/garyrussell/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/garyrussell/kafka/branches{/branch}",
      "clone_url": "https://github.com/garyrussell/kafka.git",
      "collaborators_url": "https://api.github.com/repos/garyrussell/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/garyrussell/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/garyrussell/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/garyrussell/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/garyrussell/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/garyrussell/kafka/contributors",
      "created_at": "2017-02-28T19:56:35Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/garyrussell/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/garyrussell/kafka/downloads",
      "events_url": "https://api.github.com/repos/garyrussell/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/garyrussell/kafka/forks",
      "full_name": "garyrussell/kafka",
      "git_commits_url": "https://api.github.com/repos/garyrussell/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/garyrussell/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/garyrussell/kafka/git/tags{/sha}",
      "git_url": "git://github.com/garyrussell/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/garyrussell/kafka/hooks",
      "html_url": "https://github.com/garyrussell/kafka",
      "id": 83473519,
      "issue_comment_url": "https://api.github.com/repos/garyrussell/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/garyrussell/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/garyrussell/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/garyrussell/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/garyrussell/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/garyrussell/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/garyrussell/kafka/merges",
      "milestones_url": "https://api.github.com/repos/garyrussell/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk4MzQ3MzUxOQ==",
      "notifications_url": "https://api.github.com/repos/garyrussell/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/483832?v=4",
        "events_url": "https://api.github.com/users/garyrussell/events{/privacy}",
        "followers_url": "https://api.github.com/users/garyrussell/followers",
        "following_url": "https://api.github.com/users/garyrussell/following{/other_user}",
        "gists_url": "https://api.github.com/users/garyrussell/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/garyrussell",
        "id": 483832,
        "login": "garyrussell",
        "node_id": "MDQ6VXNlcjQ4MzgzMg==",
        "organizations_url": "https://api.github.com/users/garyrussell/orgs",
        "received_events_url": "https://api.github.com/users/garyrussell/received_events",
        "repos_url": "https://api.github.com/users/garyrussell/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/garyrussell/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/garyrussell/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/garyrussell"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/garyrussell/kafka/pulls{/number}",
      "pushed_at": "2020-10-15T17:50:07Z",
      "releases_url": "https://api.github.com/repos/garyrussell/kafka/releases{/id}",
      "size": 43670,
      "ssh_url": "git@github.com:garyrussell/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/garyrussell/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/garyrussell/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/garyrussell/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/garyrussell/kafka/subscription",
      "svn_url": "https://github.com/garyrussell/kafka",
      "tags_url": "https://api.github.com/repos/garyrussell/kafka/tags",
      "teams_url": "https://api.github.com/repos/garyrussell/kafka/teams",
      "trees_url": "https://api.github.com/repos/garyrussell/kafka/git/trees{/sha}",
      "updated_at": "2017-02-28T19:56:43Z",
      "url": "https://api.github.com/repos/garyrussell/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "076d3c4cc13d611a62b2fbe5751bba17db563b97",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/483832?v=4",
      "events_url": "https://api.github.com/users/garyrussell/events{/privacy}",
      "followers_url": "https://api.github.com/users/garyrussell/followers",
      "following_url": "https://api.github.com/users/garyrussell/following{/other_user}",
      "gists_url": "https://api.github.com/users/garyrussell/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/garyrussell",
      "id": 483832,
      "login": "garyrussell",
      "node_id": "MDQ6VXNlcjQ4MzgzMg==",
      "organizations_url": "https://api.github.com/users/garyrussell/orgs",
      "received_events_url": "https://api.github.com/users/garyrussell/received_events",
      "repos_url": "https://api.github.com/users/garyrussell/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/garyrussell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/garyrussell/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/garyrussell"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9444",
  "id": 504276292,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9444",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "1903e79a0d71cb536b47916c5090c1489ba06f57",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA0Mjc2Mjky",
  "number": 9444,
  "patch_url": "https://github.com/apache/kafka/pull/9444.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9444/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/076d3c4cc13d611a62b2fbe5751bba17db563b97",
  "title": "KAFKA-8305: Doc Fix default.replication.factor",
  "updated_at": "2020-10-15T17:52:03Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9444",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/483832?v=4",
    "events_url": "https://api.github.com/users/garyrussell/events{/privacy}",
    "followers_url": "https://api.github.com/users/garyrussell/followers",
    "following_url": "https://api.github.com/users/garyrussell/following{/other_user}",
    "gists_url": "https://api.github.com/users/garyrussell/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/garyrussell",
    "id": 483832,
    "login": "garyrussell",
    "node_id": "MDQ6VXNlcjQ4MzgzMg==",
    "organizations_url": "https://api.github.com/users/garyrussell/orgs",
    "received_events_url": "https://api.github.com/users/garyrussell/received_events",
    "repos_url": "https://api.github.com/users/garyrussell/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/garyrussell/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/garyrussell/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/garyrussell"
  }
}
json_root is_array: false
json_root is_object: true
number: 9444
title: KAFKA-8305: Doc Fix default.replication.factor
pr body: Doc fix for KAFKA-8305; mention its alternate use.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9444/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9441/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9441/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9441"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9441"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9441/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9441"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/41d4546304d99a1b7a51df5d4c9274beeb1dec0f"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "fcc7c2de391cadad8edecb108d978ea50afd428d",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Implements the single thread with FIFO approach suggested in https://issues.apache.org/jira/browse/KAFKA-10614",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9441/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9441/commits",
  "created_at": "2020-10-15T11:33:16Z",
  "diff_url": "https://github.com/apache/kafka/pull/9441.diff",
  "draft": true,
  "head": {
    "label": "tombentley:KAFKA-10614-group-coordinator-election-resignation",
    "ref": "KAFKA-10614-group-coordinator-election-resignation",
    "repo": {
      "archive_url": "https://api.github.com/repos/tombentley/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/tombentley/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/tombentley/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/tombentley/kafka/branches{/branch}",
      "clone_url": "https://github.com/tombentley/kafka.git",
      "collaborators_url": "https://api.github.com/repos/tombentley/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/tombentley/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/tombentley/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/tombentley/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/tombentley/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/tombentley/kafka/contributors",
      "created_at": "2017-06-09T11:08:28Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/tombentley/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/tombentley/kafka/downloads",
      "events_url": "https://api.github.com/repos/tombentley/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/tombentley/kafka/forks",
      "full_name": "tombentley/kafka",
      "git_commits_url": "https://api.github.com/repos/tombentley/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/tombentley/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/tombentley/kafka/git/tags{/sha}",
      "git_url": "git://github.com/tombentley/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/tombentley/kafka/hooks",
      "html_url": "https://github.com/tombentley/kafka",
      "id": 93850932,
      "issue_comment_url": "https://api.github.com/repos/tombentley/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/tombentley/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/tombentley/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/tombentley/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/tombentley/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/tombentley/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/tombentley/kafka/merges",
      "milestones_url": "https://api.github.com/repos/tombentley/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk5Mzg1MDkzMg==",
      "notifications_url": "https://api.github.com/repos/tombentley/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/879487?v=4",
        "events_url": "https://api.github.com/users/tombentley/events{/privacy}",
        "followers_url": "https://api.github.com/users/tombentley/followers",
        "following_url": "https://api.github.com/users/tombentley/following{/other_user}",
        "gists_url": "https://api.github.com/users/tombentley/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tombentley",
        "id": 879487,
        "login": "tombentley",
        "node_id": "MDQ6VXNlcjg3OTQ4Nw==",
        "organizations_url": "https://api.github.com/users/tombentley/orgs",
        "received_events_url": "https://api.github.com/users/tombentley/received_events",
        "repos_url": "https://api.github.com/users/tombentley/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tombentley/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tombentley/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tombentley"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/tombentley/kafka/pulls{/number}",
      "pushed_at": "2020-10-23T15:12:00Z",
      "releases_url": "https://api.github.com/repos/tombentley/kafka/releases{/id}",
      "size": 100102,
      "ssh_url": "git@github.com:tombentley/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/tombentley/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/tombentley/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/tombentley/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/tombentley/kafka/subscription",
      "svn_url": "https://github.com/tombentley/kafka",
      "tags_url": "https://api.github.com/repos/tombentley/kafka/tags",
      "teams_url": "https://api.github.com/repos/tombentley/kafka/teams",
      "trees_url": "https://api.github.com/repos/tombentley/kafka/git/trees{/sha}",
      "updated_at": "2017-06-09T11:08:37Z",
      "url": "https://api.github.com/repos/tombentley/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "41d4546304d99a1b7a51df5d4c9274beeb1dec0f",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/879487?v=4",
      "events_url": "https://api.github.com/users/tombentley/events{/privacy}",
      "followers_url": "https://api.github.com/users/tombentley/followers",
      "following_url": "https://api.github.com/users/tombentley/following{/other_user}",
      "gists_url": "https://api.github.com/users/tombentley/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/tombentley",
      "id": 879487,
      "login": "tombentley",
      "node_id": "MDQ6VXNlcjg3OTQ4Nw==",
      "organizations_url": "https://api.github.com/users/tombentley/orgs",
      "received_events_url": "https://api.github.com/users/tombentley/received_events",
      "repos_url": "https://api.github.com/users/tombentley/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/tombentley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tombentley/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/tombentley"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9441",
  "id": 504032720,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9441",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "fd7616ae49c4cbe1af482ff2721f2e4ea1928ae5",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA0MDMyNzIw",
  "number": 9441,
  "patch_url": "https://github.com/apache/kafka/pull/9441.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9441/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/41d4546304d99a1b7a51df5d4c9274beeb1dec0f",
  "title": "KAFKA-10614: Ensure group state (un)load is executed in the submitted order",
  "updated_at": "2020-10-21T15:33:11Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9441",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/879487?v=4",
    "events_url": "https://api.github.com/users/tombentley/events{/privacy}",
    "followers_url": "https://api.github.com/users/tombentley/followers",
    "following_url": "https://api.github.com/users/tombentley/following{/other_user}",
    "gists_url": "https://api.github.com/users/tombentley/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/tombentley",
    "id": 879487,
    "login": "tombentley",
    "node_id": "MDQ6VXNlcjg3OTQ4Nw==",
    "organizations_url": "https://api.github.com/users/tombentley/orgs",
    "received_events_url": "https://api.github.com/users/tombentley/received_events",
    "repos_url": "https://api.github.com/users/tombentley/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/tombentley/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tombentley/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/tombentley"
  }
}
json_root is_array: false
json_root is_object: true
number: 9441
title: KAFKA-10614: Ensure group state (un)load is executed in the submitted order
pr body: Implements the single thread with FIFO approach suggested in https://issues.apache.org/jira/browse/KAFKA-10614
review_comments: https://api.github.com/repos/apache/kafka/pulls/9441/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9439/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9439/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9439"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9439"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9439/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9439"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/a788048936bb256b0764f5094a6900f5be389ae9"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "MEMBER",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "7f9beeaaafdb1bc74a5f0c1386f7e01f5f831d6b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9439/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9439/commits",
  "created_at": "2020-10-14T23:49:37Z",
  "diff_url": "https://github.com/apache/kafka/pull/9439.diff",
  "draft": true,
  "head": {
    "label": "xvrl:kafka-10587",
    "ref": "kafka-10587",
    "repo": {
      "archive_url": "https://api.github.com/repos/xvrl/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/xvrl/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/xvrl/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/xvrl/kafka/branches{/branch}",
      "clone_url": "https://github.com/xvrl/kafka.git",
      "collaborators_url": "https://api.github.com/repos/xvrl/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/xvrl/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/xvrl/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/xvrl/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/xvrl/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/xvrl/kafka/contributors",
      "created_at": "2016-10-04T18:42:23Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/xvrl/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/xvrl/kafka/downloads",
      "events_url": "https://api.github.com/repos/xvrl/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/xvrl/kafka/forks",
      "full_name": "xvrl/kafka",
      "git_commits_url": "https://api.github.com/repos/xvrl/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/xvrl/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/xvrl/kafka/git/tags{/sha}",
      "git_url": "git://github.com/xvrl/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/xvrl/kafka/hooks",
      "html_url": "https://github.com/xvrl/kafka",
      "id": 69995142,
      "issue_comment_url": "https://api.github.com/repos/xvrl/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/xvrl/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/xvrl/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/xvrl/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/xvrl/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/xvrl/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/xvrl/kafka/merges",
      "milestones_url": "https://api.github.com/repos/xvrl/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk2OTk5NTE0Mg==",
      "notifications_url": "https://api.github.com/repos/xvrl/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/815147?v=4",
        "events_url": "https://api.github.com/users/xvrl/events{/privacy}",
        "followers_url": "https://api.github.com/users/xvrl/followers",
        "following_url": "https://api.github.com/users/xvrl/following{/other_user}",
        "gists_url": "https://api.github.com/users/xvrl/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/xvrl",
        "id": 815147,
        "login": "xvrl",
        "node_id": "MDQ6VXNlcjgxNTE0Nw==",
        "organizations_url": "https://api.github.com/users/xvrl/orgs",
        "received_events_url": "https://api.github.com/users/xvrl/received_events",
        "repos_url": "https://api.github.com/users/xvrl/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/xvrl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xvrl/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/xvrl"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/xvrl/kafka/pulls{/number}",
      "pushed_at": "2020-10-19T18:40:28Z",
      "releases_url": "https://api.github.com/repos/xvrl/kafka/releases{/id}",
      "size": 99134,
      "ssh_url": "git@github.com:xvrl/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/xvrl/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/xvrl/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/xvrl/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/xvrl/kafka/subscription",
      "svn_url": "https://github.com/xvrl/kafka",
      "tags_url": "https://api.github.com/repos/xvrl/kafka/tags",
      "teams_url": "https://api.github.com/repos/xvrl/kafka/teams",
      "trees_url": "https://api.github.com/repos/xvrl/kafka/git/trees{/sha}",
      "updated_at": "2016-10-04T18:42:29Z",
      "url": "https://api.github.com/repos/xvrl/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "a788048936bb256b0764f5094a6900f5be389ae9",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/815147?v=4",
      "events_url": "https://api.github.com/users/xvrl/events{/privacy}",
      "followers_url": "https://api.github.com/users/xvrl/followers",
      "following_url": "https://api.github.com/users/xvrl/following{/other_user}",
      "gists_url": "https://api.github.com/users/xvrl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/xvrl",
      "id": 815147,
      "login": "xvrl",
      "node_id": "MDQ6VXNlcjgxNTE0Nw==",
      "organizations_url": "https://api.github.com/users/xvrl/orgs",
      "received_events_url": "https://api.github.com/users/xvrl/received_events",
      "repos_url": "https://api.github.com/users/xvrl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/xvrl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xvrl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/xvrl"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9439",
  "id": 503716043,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9439",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "c57ceeb2b53fc4370c58035d0af9854330eb78d9",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAzNzE2MDQz",
  "number": 9439,
  "patch_url": "https://github.com/apache/kafka/pull/9439.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9439/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/a788048936bb256b0764f5094a6900f5be389ae9",
  "title": "KAFKA-10587 MirrorMaker CLI change for KIP-629",
  "updated_at": "2020-10-14T23:49:37Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9439",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/815147?v=4",
    "events_url": "https://api.github.com/users/xvrl/events{/privacy}",
    "followers_url": "https://api.github.com/users/xvrl/followers",
    "following_url": "https://api.github.com/users/xvrl/following{/other_user}",
    "gists_url": "https://api.github.com/users/xvrl/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/xvrl",
    "id": 815147,
    "login": "xvrl",
    "node_id": "MDQ6VXNlcjgxNTE0Nw==",
    "organizations_url": "https://api.github.com/users/xvrl/orgs",
    "received_events_url": "https://api.github.com/users/xvrl/received_events",
    "repos_url": "https://api.github.com/users/xvrl/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/xvrl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/xvrl/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/xvrl"
  }
}
json_root is_array: false
json_root is_object: true
number: 9439
title: KAFKA-10587 MirrorMaker CLI change for KIP-629
pr body: 
review_comments: https://api.github.com/repos/apache/kafka/pulls/9439/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9437/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9437/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9437"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9437"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9437/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9437"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/a17daf4d50c68a2140adff522fce0b21a7db9757"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "7e9dec707dab344ceabf36346d1611bae1f20a8e",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Additional logging, no functional changes.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9437/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9437/commits",
  "created_at": "2020-10-14T20:14:18Z",
  "diff_url": "https://github.com/apache/kafka/pull/9437.diff",
  "draft": false,
  "head": {
    "label": "belugabehr:KAFKA-10612",
    "ref": "KAFKA-10612",
    "repo": {
      "archive_url": "https://api.github.com/repos/belugabehr/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/belugabehr/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/belugabehr/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/belugabehr/kafka/branches{/branch}",
      "clone_url": "https://github.com/belugabehr/kafka.git",
      "collaborators_url": "https://api.github.com/repos/belugabehr/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/belugabehr/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/belugabehr/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/belugabehr/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/belugabehr/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/belugabehr/kafka/contributors",
      "created_at": "2020-01-07T21:05:47Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/belugabehr/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/belugabehr/kafka/downloads",
      "events_url": "https://api.github.com/repos/belugabehr/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/belugabehr/kafka/forks",
      "full_name": "belugabehr/kafka",
      "git_commits_url": "https://api.github.com/repos/belugabehr/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/belugabehr/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/belugabehr/kafka/git/tags{/sha}",
      "git_url": "git://github.com/belugabehr/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/belugabehr/kafka/hooks",
      "html_url": "https://github.com/belugabehr/kafka",
      "id": 232417321,
      "issue_comment_url": "https://api.github.com/repos/belugabehr/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/belugabehr/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/belugabehr/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/belugabehr/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/belugabehr/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/belugabehr/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/belugabehr/kafka/merges",
      "milestones_url": "https://api.github.com/repos/belugabehr/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMzI0MTczMjE=",
      "notifications_url": "https://api.github.com/repos/belugabehr/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/12578579?v=4",
        "events_url": "https://api.github.com/users/belugabehr/events{/privacy}",
        "followers_url": "https://api.github.com/users/belugabehr/followers",
        "following_url": "https://api.github.com/users/belugabehr/following{/other_user}",
        "gists_url": "https://api.github.com/users/belugabehr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/belugabehr",
        "id": 12578579,
        "login": "belugabehr",
        "node_id": "MDQ6VXNlcjEyNTc4NTc5",
        "organizations_url": "https://api.github.com/users/belugabehr/orgs",
        "received_events_url": "https://api.github.com/users/belugabehr/received_events",
        "repos_url": "https://api.github.com/users/belugabehr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/belugabehr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/belugabehr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/belugabehr"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/belugabehr/kafka/pulls{/number}",
      "pushed_at": "2020-10-14T20:13:05Z",
      "releases_url": "https://api.github.com/repos/belugabehr/kafka/releases{/id}",
      "size": 105963,
      "ssh_url": "git@github.com:belugabehr/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/belugabehr/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/belugabehr/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/belugabehr/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/belugabehr/kafka/subscription",
      "svn_url": "https://github.com/belugabehr/kafka",
      "tags_url": "https://api.github.com/repos/belugabehr/kafka/tags",
      "teams_url": "https://api.github.com/repos/belugabehr/kafka/teams",
      "trees_url": "https://api.github.com/repos/belugabehr/kafka/git/trees{/sha}",
      "updated_at": "2020-10-14T19:33:35Z",
      "url": "https://api.github.com/repos/belugabehr/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "a17daf4d50c68a2140adff522fce0b21a7db9757",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/12578579?v=4",
      "events_url": "https://api.github.com/users/belugabehr/events{/privacy}",
      "followers_url": "https://api.github.com/users/belugabehr/followers",
      "following_url": "https://api.github.com/users/belugabehr/following{/other_user}",
      "gists_url": "https://api.github.com/users/belugabehr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/belugabehr",
      "id": 12578579,
      "login": "belugabehr",
      "node_id": "MDQ6VXNlcjEyNTc4NTc5",
      "organizations_url": "https://api.github.com/users/belugabehr/orgs",
      "received_events_url": "https://api.github.com/users/belugabehr/received_events",
      "repos_url": "https://api.github.com/users/belugabehr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/belugabehr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/belugabehr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/belugabehr"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9437",
  "id": 503614651,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9437",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "50b95521991f487140300ffc4f3b420b267df752",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAzNjE0NjUx",
  "number": 9437,
  "patch_url": "https://github.com/apache/kafka/pull/9437.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9437/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/a17daf4d50c68a2140adff522fce0b21a7db9757",
  "title": "KAFKA-10612: Log When SSL Authentication is in Unexpected State",
  "updated_at": "2020-10-14T20:14:18Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9437",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/12578579?v=4",
    "events_url": "https://api.github.com/users/belugabehr/events{/privacy}",
    "followers_url": "https://api.github.com/users/belugabehr/followers",
    "following_url": "https://api.github.com/users/belugabehr/following{/other_user}",
    "gists_url": "https://api.github.com/users/belugabehr/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/belugabehr",
    "id": 12578579,
    "login": "belugabehr",
    "node_id": "MDQ6VXNlcjEyNTc4NTc5",
    "organizations_url": "https://api.github.com/users/belugabehr/orgs",
    "received_events_url": "https://api.github.com/users/belugabehr/received_events",
    "repos_url": "https://api.github.com/users/belugabehr/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/belugabehr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/belugabehr/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/belugabehr"
  }
}
json_root is_array: false
json_root is_object: true
number: 9437
title: KAFKA-10612: Log When SSL Authentication is in Unexpected State
pr body: Additional logging, no functional changes.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9437/comments
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9435/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9435/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9435"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9435"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9435/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9435"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/c877b329c1f2112ccd7cb2530c6d745cb87aca13"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9166,
      "forks_count": 9166,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 757,
      "open_issues_count": 757,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T02:23:31Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 107980,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17147,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T02:42:19Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17147,
      "watchers_count": 17147
    },
    "sha": "fc4710e2da81dae4becbfa5ff0f43d82250870fe",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "\r\nThere is a bug that causes fetch-all-topic-metadata requests triggering\r\nauto topic creation. Details are described in KAFKA-10606. This is the\r\nsimplest way to fix this bug on the broker side.",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9435/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9435/commits",
  "created_at": "2020-10-14T18:18:31Z",
  "diff_url": "https://github.com/apache/kafka/pull/9435.diff",
  "draft": false,
  "head": {
    "label": "Lincong:disable-atc-bug",
    "ref": "disable-atc-bug",
    "repo": {
      "archive_url": "https://api.github.com/repos/Lincong/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/Lincong/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/Lincong/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/Lincong/kafka/branches{/branch}",
      "clone_url": "https://github.com/Lincong/kafka.git",
      "collaborators_url": "https://api.github.com/repos/Lincong/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/Lincong/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/Lincong/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/Lincong/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/Lincong/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/Lincong/kafka/contributors",
      "created_at": "2019-03-23T16:30:05Z",
      "default_branch": "2.0-li",
      "deployments_url": "https://api.github.com/repos/Lincong/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/Lincong/kafka/downloads",
      "events_url": "https://api.github.com/repos/Lincong/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/Lincong/kafka/forks",
      "full_name": "Lincong/kafka",
      "git_commits_url": "https://api.github.com/repos/Lincong/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/Lincong/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/Lincong/kafka/git/tags{/sha}",
      "git_url": "git://github.com/Lincong/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/Lincong/kafka/hooks",
      "html_url": "https://github.com/Lincong/kafka",
      "id": 177313021,
      "issue_comment_url": "https://api.github.com/repos/Lincong/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/Lincong/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/Lincong/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/Lincong/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/Lincong/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/Lincong/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/Lincong/kafka/merges",
      "milestones_url": "https://api.github.com/repos/Lincong/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxNzczMTMwMjE=",
      "notifications_url": "https://api.github.com/repos/Lincong/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/9780681?v=4",
        "events_url": "https://api.github.com/users/Lincong/events{/privacy}",
        "followers_url": "https://api.github.com/users/Lincong/followers",
        "following_url": "https://api.github.com/users/Lincong/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lincong/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Lincong",
        "id": 9780681,
        "login": "Lincong",
        "node_id": "MDQ6VXNlcjk3ODA2ODE=",
        "organizations_url": "https://api.github.com/users/Lincong/orgs",
        "received_events_url": "https://api.github.com/users/Lincong/received_events",
        "repos_url": "https://api.github.com/users/Lincong/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Lincong/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lincong/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Lincong"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/Lincong/kafka/pulls{/number}",
      "pushed_at": "2020-10-21T07:16:06Z",
      "releases_url": "https://api.github.com/repos/Lincong/kafka/releases{/id}",
      "size": 105217,
      "ssh_url": "git@github.com:Lincong/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/Lincong/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/Lincong/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/Lincong/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/Lincong/kafka/subscription",
      "svn_url": "https://github.com/Lincong/kafka",
      "tags_url": "https://api.github.com/repos/Lincong/kafka/tags",
      "teams_url": "https://api.github.com/repos/Lincong/kafka/teams",
      "trees_url": "https://api.github.com/repos/Lincong/kafka/git/trees{/sha}",
      "updated_at": "2019-08-27T23:51:03Z",
      "url": "https://api.github.com/repos/Lincong/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "c877b329c1f2112ccd7cb2530c6d745cb87aca13",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/9780681?v=4",
      "events_url": "https://api.github.com/users/Lincong/events{/privacy}",
      "followers_url": "https://api.github.com/users/Lincong/followers",
      "following_url": "https://api.github.com/users/Lincong/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lincong/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Lincong",
      "id": 9780681,
      "login": "Lincong",
      "node_id": "MDQ6VXNlcjk3ODA2ODE=",
      "organizations_url": "https://api.github.com/users/Lincong/orgs",
      "received_events_url": "https://api.github.com/users/Lincong/received_events",
      "repos_url": "https://api.github.com/users/Lincong/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Lincong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lincong/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Lincong"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9435",
  "id": 503556249,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9435",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "2cac340b4f827447e023e14dd54c007afb39074d",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAzNTU2MjQ5",
  "number": 9435,
  "patch_url": "https://github.com/apache/kafka/pull/9435.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9435/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/c877b329c1f2112ccd7cb2530c6d745cb87aca13",
  "title": "KAFKA-10606: Disable auto topic creation for fetch-all-topic-metadata request",
  "updated_at": "2020-10-21T07:40:06Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9435",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/9780681?v=4",
    "events_url": "https://api.github.com/users/Lincong/events{/privacy}",
    "followers_url": "https://api.github.com/users/Lincong/followers",
    "following_url": "https://api.github.com/users/Lincong/following{/other_user}",
    "gists_url": "https://api.github.com/users/Lincong/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/Lincong",
    "id": 9780681,
    "login": "Lincong",
    "node_id": "MDQ6VXNlcjk3ODA2ODE=",
    "organizations_url": "https://api.github.com/users/Lincong/orgs",
    "received_events_url": "https://api.github.com/users/Lincong/received_events",
    "repos_url": "https://api.github.com/users/Lincong/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/Lincong/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Lincong/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/Lincong"
  }
}
json_root is_array: false
json_root is_object: true
number: 9435
title: KAFKA-10606: Disable auto topic creation for fetch-all-topic-metadata request
pr body: 
There is a bug that causes fetch-all-topic-metadata requests triggering
auto topic creation. Details are described in KAFKA-10606. This is the
simplest way to fix this bug on the broker side.
review_comments: https://api.github.com/repos/apache/kafka/pulls/9435/comments
id: 509055559
url: https://api.github.com/repos/apache/kafka/pulls/comments/509055559
body: If we pass ```false``` to getTopicMetadata, it generates ```UNKNOWN_TOPIC_OR_PARTITION``` when the topic is removed, right? If so, does client-side need to handle such error? For example, KafkaAdminClient#listTopics should filter out those "nonexistent" topics (https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java#L1717). Otherwise, users want to get all "existent" topics but response say a_topic is "nonexistent".
diff_hunk: @@ -1236,9 +1236,19 @@ class KafkaApis(val requestChannel: RequestChannel,
     val topicMetadata =
       if (authorizedTopics.isEmpty)
         Seq.empty[MetadataResponseTopic]
-      else
-        getTopicMetadata(metadataRequest.allowAutoTopicCreation, authorizedTopics, request.context.listenerName,
-          errorUnavailableEndpoints, errorUnavailableListeners)
+      else {
+        // KAFKA-10606: If this request is to get metadata for all topics, auto topic creation should not be allowed
+        // The special handling is necessary on broker side because allowAutoTopicCreation is hard coded to true
+        // for backward compatibility on client side.
+        val allowAutoTopicCreation = (!metadataRequest.isAllTopics) && metadataRequest.allowAutoTopicCreation
path: core/src/main/scala/kafka/server/KafkaApis.scala
html: https://github.com/apache/kafka/pull/9435#discussion_r509055559
