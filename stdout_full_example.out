owner: apache, repository: kafka
is_array: true
is_object: false
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9515/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9515/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9515"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9515"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9515/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9515"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/c8018b0b94bb295b5a547d83d2bb536f18312763"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "b4100d4b2898df070450b7326f32303f834f8e09",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Uninitialized tasks just return an empty collection in `changelogOffsets()` and are indistinguishable from genuinely stateless (or un-logged) tasks. We should just skip over these tasks and read directly from the checkpoint file when computing offset sums for a JoinGroup subscription",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9515/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9515/commits",
  "created_at": "2020-10-28T00:44:51Z",
  "diff_url": "https://github.com/apache/kafka/pull/9515.diff",
  "draft": false,
  "head": {
    "label": "ableegoldman:10651-read-offsets-from-checkpoint-for-uninitialized-tasks",
    "ref": "10651-read-offsets-from-checkpoint-for-uninitialized-tasks",
    "repo": {
      "archive_url": "https://api.github.com/repos/ableegoldman/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/ableegoldman/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/ableegoldman/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/ableegoldman/kafka/branches{/branch}",
      "clone_url": "https://github.com/ableegoldman/kafka.git",
      "collaborators_url": "https://api.github.com/repos/ableegoldman/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/ableegoldman/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/ableegoldman/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/ableegoldman/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/ableegoldman/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/ableegoldman/kafka/contributors",
      "created_at": "2019-01-18T01:48:43Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/ableegoldman/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/ableegoldman/kafka/downloads",
      "events_url": "https://api.github.com/repos/ableegoldman/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/ableegoldman/kafka/forks",
      "full_name": "ableegoldman/kafka",
      "git_commits_url": "https://api.github.com/repos/ableegoldman/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/ableegoldman/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/ableegoldman/kafka/git/tags{/sha}",
      "git_url": "git://github.com/ableegoldman/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/ableegoldman/kafka/hooks",
      "html_url": "https://github.com/ableegoldman/kafka",
      "id": 166325386,
      "issue_comment_url": "https://api.github.com/repos/ableegoldman/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/ableegoldman/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/ableegoldman/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/ableegoldman/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/ableegoldman/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/ableegoldman/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/ableegoldman/kafka/merges",
      "milestones_url": "https://api.github.com/repos/ableegoldman/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxNjYzMjUzODY=",
      "notifications_url": "https://api.github.com/repos/ableegoldman/kafka/notifications{?since,all,participating}",
      "open_issues": 1,
      "open_issues_count": 1,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/4843099?v=4",
        "events_url": "https://api.github.com/users/ableegoldman/events{/privacy}",
        "followers_url": "https://api.github.com/users/ableegoldman/followers",
        "following_url": "https://api.github.com/users/ableegoldman/following{/other_user}",
        "gists_url": "https://api.github.com/users/ableegoldman/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ableegoldman",
        "id": 4843099,
        "login": "ableegoldman",
        "node_id": "MDQ6VXNlcjQ4NDMwOTk=",
        "organizations_url": "https://api.github.com/users/ableegoldman/orgs",
        "received_events_url": "https://api.github.com/users/ableegoldman/received_events",
        "repos_url": "https://api.github.com/users/ableegoldman/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ableegoldman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ableegoldman/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ableegoldman"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/ableegoldman/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T00:46:04Z",
      "releases_url": "https://api.github.com/repos/ableegoldman/kafka/releases{/id}",
      "size": 106147,
      "ssh_url": "git@github.com:ableegoldman/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/ableegoldman/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/ableegoldman/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/ableegoldman/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/ableegoldman/kafka/subscription",
      "svn_url": "https://github.com/ableegoldman/kafka",
      "tags_url": "https://api.github.com/repos/ableegoldman/kafka/tags",
      "teams_url": "https://api.github.com/repos/ableegoldman/kafka/teams",
      "trees_url": "https://api.github.com/repos/ableegoldman/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T23:10:01Z",
      "url": "https://api.github.com/repos/ableegoldman/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "c8018b0b94bb295b5a547d83d2bb536f18312763",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/4843099?v=4",
      "events_url": "https://api.github.com/users/ableegoldman/events{/privacy}",
      "followers_url": "https://api.github.com/users/ableegoldman/followers",
      "following_url": "https://api.github.com/users/ableegoldman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ableegoldman/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ableegoldman",
      "id": 4843099,
      "login": "ableegoldman",
      "node_id": "MDQ6VXNlcjQ4NDMwOTk=",
      "organizations_url": "https://api.github.com/users/ableegoldman/orgs",
      "received_events_url": "https://api.github.com/users/ableegoldman/received_events",
      "repos_url": "https://api.github.com/users/ableegoldman/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ableegoldman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ableegoldman/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ableegoldman"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9515",
  "id": 511200424,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9515",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "1e030d54b070849892b35de43f9ecb8452d144af",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTExMjAwNDI0",
  "number": 9515,
  "patch_url": "https://github.com/apache/kafka/pull/9515.patch",
  "requested_reviewers": [
    {
      "avatar_url": "https://avatars0.githubusercontent.com/u/832787?v=4",
      "events_url": "https://api.github.com/users/vvcephei/events{/privacy}",
      "followers_url": "https://api.github.com/users/vvcephei/followers",
      "following_url": "https://api.github.com/users/vvcephei/following{/other_user}",
      "gists_url": "https://api.github.com/users/vvcephei/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vvcephei",
      "id": 832787,
      "login": "vvcephei",
      "node_id": "MDQ6VXNlcjgzMjc4Nw==",
      "organizations_url": "https://api.github.com/users/vvcephei/orgs",
      "received_events_url": "https://api.github.com/users/vvcephei/received_events",
      "repos_url": "https://api.github.com/users/vvcephei/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vvcephei/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vvcephei/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vvcephei"
    },
    {
      "avatar_url": "https://avatars0.githubusercontent.com/u/10729597?v=4",
      "events_url": "https://api.github.com/users/guozhangwang/events{/privacy}",
      "followers_url": "https://api.github.com/users/guozhangwang/followers",
      "following_url": "https://api.github.com/users/guozhangwang/following{/other_user}",
      "gists_url": "https://api.github.com/users/guozhangwang/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/guozhangwang",
      "id": 10729597,
      "login": "guozhangwang",
      "node_id": "MDQ6VXNlcjEwNzI5NTk3",
      "organizations_url": "https://api.github.com/users/guozhangwang/orgs",
      "received_events_url": "https://api.github.com/users/guozhangwang/received_events",
      "repos_url": "https://api.github.com/users/guozhangwang/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/guozhangwang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/guozhangwang/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/guozhangwang"
    }
  ],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9515/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/c8018b0b94bb295b5a547d83d2bb536f18312763",
  "title": "KAFKA-10561: read  offsets directly from checkpoint for uninitialized tasks",
  "updated_at": "2020-10-28T00:47:32Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9515",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/4843099?v=4",
    "events_url": "https://api.github.com/users/ableegoldman/events{/privacy}",
    "followers_url": "https://api.github.com/users/ableegoldman/followers",
    "following_url": "https://api.github.com/users/ableegoldman/following{/other_user}",
    "gists_url": "https://api.github.com/users/ableegoldman/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ableegoldman",
    "id": 4843099,
    "login": "ableegoldman",
    "node_id": "MDQ6VXNlcjQ4NDMwOTk=",
    "organizations_url": "https://api.github.com/users/ableegoldman/orgs",
    "received_events_url": "https://api.github.com/users/ableegoldman/received_events",
    "repos_url": "https://api.github.com/users/ableegoldman/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ableegoldman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ableegoldman/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ableegoldman"
  }
}
json_root is_array: false
json_root is_object: true
number: 9515
url: https://api.github.com/repos/apache/kafka/pulls/9515
title: KAFKA-10561: read  offsets directly from checkpoint for uninitialized tasks
body: Uninitialized tasks just return an empty collection in `changelogOffsets()` and are indistinguishable from genuinely stateless (or un-logged) tasks. We should just skip over these tasks and read directly from the checkpoint file when computing offset sums for a JoinGroup subscription
review_comments: https://api.github.com/repos/apache/kafka/pulls/9515/comments
id: 513114972
url: https://api.github.com/repos/apache/kafka/pulls/comments/513114972
body: Nothing really changed here, but we use to just leave tasks in CREATED and call them "restoring" so I had to fix this up so they really were RESTORING
diff_hunk: @@ -2479,7 +2502,7 @@ public void shouldTransmitProducerMetrics() {
             allTasks.put(task.id(), (StateMachineTask) task);
         }
         for (final Task task : restoringTasks) {
-            assertThat(task.state(), not(Task.State.RUNNING));
path: streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java
html: https://github.com/apache/kafka/pull/9515#discussion_r513114972
pull_request_number: 9515
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9513/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9513/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9513"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9513"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9513/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9513"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/0676096e87095a3efab3cd7d9f8a2909b5590ecc"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "MEMBER",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "927edfece3db8aab7d01850955f9a65e5c110da5",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Headers are not allowed to be `null`, and thus the code does not check for `null` headers. However, we don't have proper guards in place and had NPE in the past if a header was `null`. This PR adds additional `null` checks to avoid that users create corrupted headers.\r\n\r\nCf https://issues.apache.org/jira/browse/KAFKA-8142 and https://issues.apache.org/jira/browse/KAFKA-10645\r\n\r\nCall for review @mimaison",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9513/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9513/commits",
  "created_at": "2020-10-27T20:46:23Z",
  "diff_url": "https://github.com/apache/kafka/pull/9513.diff",
  "draft": false,
  "head": {
    "label": "mjsax:minor-add-null-header-guards",
    "ref": "minor-add-null-header-guards",
    "repo": {
      "archive_url": "https://api.github.com/repos/mjsax/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/mjsax/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/mjsax/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/mjsax/kafka/branches{/branch}",
      "clone_url": "https://github.com/mjsax/kafka.git",
      "collaborators_url": "https://api.github.com/repos/mjsax/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/mjsax/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/mjsax/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/mjsax/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/mjsax/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/mjsax/kafka/contributors",
      "created_at": "2016-02-01T12:57:30Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/mjsax/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/mjsax/kafka/downloads",
      "events_url": "https://api.github.com/repos/mjsax/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/mjsax/kafka/forks",
      "full_name": "mjsax/kafka",
      "git_commits_url": "https://api.github.com/repos/mjsax/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/mjsax/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/mjsax/kafka/git/tags{/sha}",
      "git_url": "git://github.com/mjsax/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/mjsax/kafka/hooks",
      "html_url": "https://github.com/mjsax/kafka",
      "id": 50839421,
      "issue_comment_url": "https://api.github.com/repos/mjsax/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/mjsax/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/mjsax/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/mjsax/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/mjsax/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/mjsax/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/mjsax/kafka/merges",
      "milestones_url": "https://api.github.com/repos/mjsax/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk1MDgzOTQyMQ==",
      "notifications_url": "https://api.github.com/repos/mjsax/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/8959638?v=4",
        "events_url": "https://api.github.com/users/mjsax/events{/privacy}",
        "followers_url": "https://api.github.com/users/mjsax/followers",
        "following_url": "https://api.github.com/users/mjsax/following{/other_user}",
        "gists_url": "https://api.github.com/users/mjsax/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mjsax",
        "id": 8959638,
        "login": "mjsax",
        "node_id": "MDQ6VXNlcjg5NTk2Mzg=",
        "organizations_url": "https://api.github.com/users/mjsax/orgs",
        "received_events_url": "https://api.github.com/users/mjsax/received_events",
        "repos_url": "https://api.github.com/users/mjsax/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mjsax/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mjsax/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mjsax"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/mjsax/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T20:41:19Z",
      "releases_url": "https://api.github.com/repos/mjsax/kafka/releases{/id}",
      "size": 97883,
      "ssh_url": "git@github.com:mjsax/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/mjsax/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/mjsax/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/mjsax/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/mjsax/kafka/subscription",
      "svn_url": "https://github.com/mjsax/kafka",
      "tags_url": "https://api.github.com/repos/mjsax/kafka/tags",
      "teams_url": "https://api.github.com/repos/mjsax/kafka/teams",
      "trees_url": "https://api.github.com/repos/mjsax/kafka/git/trees{/sha}",
      "updated_at": "2020-10-13T18:20:14Z",
      "url": "https://api.github.com/repos/mjsax/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "0676096e87095a3efab3cd7d9f8a2909b5590ecc",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/8959638?v=4",
      "events_url": "https://api.github.com/users/mjsax/events{/privacy}",
      "followers_url": "https://api.github.com/users/mjsax/followers",
      "following_url": "https://api.github.com/users/mjsax/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjsax/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mjsax",
      "id": 8959638,
      "login": "mjsax",
      "node_id": "MDQ6VXNlcjg5NTk2Mzg=",
      "organizations_url": "https://api.github.com/users/mjsax/orgs",
      "received_events_url": "https://api.github.com/users/mjsax/received_events",
      "repos_url": "https://api.github.com/users/mjsax/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mjsax/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjsax/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mjsax"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9513",
  "id": 511051584,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9513",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "4597952dc43feed0e7c6742ea18134159a3770e9",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTExMDUxNTg0",
  "number": 9513,
  "patch_url": "https://github.com/apache/kafka/pull/9513.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9513/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/0676096e87095a3efab3cd7d9f8a2909b5590ecc",
  "title": "MINOR: improve `null` checks for headers",
  "updated_at": "2020-10-28T02:42:38Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9513",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/8959638?v=4",
    "events_url": "https://api.github.com/users/mjsax/events{/privacy}",
    "followers_url": "https://api.github.com/users/mjsax/followers",
    "following_url": "https://api.github.com/users/mjsax/following{/other_user}",
    "gists_url": "https://api.github.com/users/mjsax/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/mjsax",
    "id": 8959638,
    "login": "mjsax",
    "node_id": "MDQ6VXNlcjg5NTk2Mzg=",
    "organizations_url": "https://api.github.com/users/mjsax/orgs",
    "received_events_url": "https://api.github.com/users/mjsax/received_events",
    "repos_url": "https://api.github.com/users/mjsax/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/mjsax/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mjsax/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/mjsax"
  }
}
json_root is_array: false
json_root is_object: true
number: 9513
url: https://api.github.com/repos/apache/kafka/pulls/9513
title: MINOR: improve `null` checks for headers
body: Headers are not allowed to be `null`, and thus the code does not check for `null` headers. However, we don't have proper guards in place and had NPE in the past if a header was `null`. This PR adds additional `null` checks to avoid that users create corrupted headers.

Cf https://issues.apache.org/jira/browse/KAFKA-8142 and https://issues.apache.org/jira/browse/KAFKA-10645

Call for review @mimaison
review_comments: https://api.github.com/repos/apache/kafka/pulls/9513/comments
pull_request_number: 9513
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9512/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9512/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9512"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9512"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9512/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9512"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/63b0b1d25a35d92bd3ae842df9f5a9f9913cf4d6"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "aa287acb2eed07cf6d75c10e71f051f538a57872",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This PR depends on https://github.com/apache/kafka/pull/9505. I will rebase this PR once https://github.com/apache/kafka/pull/9505 has been merged.\r\n\r\nThis PR adds support for generating snapshot for KIP-630.\r\n\r\n1. It introduces the interface `SnapshotWriter` and implementation `KafkaSnapshotWriter` for creating snapshots on disk.\r\n2. It introduces the interface `SnapshotReader` and implementation `KafkaSnapshotReader for reading snapshot from disk.\r\n\r\n\r\n*More detailed description of your change,\r\nif necessary. The PR title and PR message become\r\nthe squashed commit message, so use a separate\r\ncomment to ping reviewers.*\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9512/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9512/commits",
  "created_at": "2020-10-27T17:12:43Z",
  "diff_url": "https://github.com/apache/kafka/pull/9512.diff",
  "draft": false,
  "head": {
    "label": "jsancio:kafka-10394-generate-snapshot",
    "ref": "kafka-10394-generate-snapshot",
    "repo": {
      "archive_url": "https://api.github.com/repos/jsancio/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/jsancio/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/jsancio/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/jsancio/kafka/branches{/branch}",
      "clone_url": "https://github.com/jsancio/kafka.git",
      "collaborators_url": "https://api.github.com/repos/jsancio/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/jsancio/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/jsancio/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/jsancio/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/jsancio/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/jsancio/kafka/contributors",
      "created_at": "2019-02-07T01:15:40Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/jsancio/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/jsancio/kafka/downloads",
      "events_url": "https://api.github.com/repos/jsancio/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/jsancio/kafka/forks",
      "full_name": "jsancio/kafka",
      "git_commits_url": "https://api.github.com/repos/jsancio/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/jsancio/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/jsancio/kafka/git/tags{/sha}",
      "git_url": "git://github.com/jsancio/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/jsancio/kafka/hooks",
      "html_url": "https://github.com/jsancio/kafka",
      "id": 169502372,
      "issue_comment_url": "https://api.github.com/repos/jsancio/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/jsancio/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/jsancio/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/jsancio/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/jsancio/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/jsancio/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/jsancio/kafka/merges",
      "milestones_url": "https://api.github.com/repos/jsancio/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxNjk1MDIzNzI=",
      "notifications_url": "https://api.github.com/repos/jsancio/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/794394?v=4",
        "events_url": "https://api.github.com/users/jsancio/events{/privacy}",
        "followers_url": "https://api.github.com/users/jsancio/followers",
        "following_url": "https://api.github.com/users/jsancio/following{/other_user}",
        "gists_url": "https://api.github.com/users/jsancio/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jsancio",
        "id": 794394,
        "login": "jsancio",
        "node_id": "MDQ6VXNlcjc5NDM5NA==",
        "organizations_url": "https://api.github.com/users/jsancio/orgs",
        "received_events_url": "https://api.github.com/users/jsancio/received_events",
        "repos_url": "https://api.github.com/users/jsancio/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jsancio/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jsancio/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jsancio"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/jsancio/kafka/pulls{/number}",
      "pushed_at": "2020-10-26T19:34:08Z",
      "releases_url": "https://api.github.com/repos/jsancio/kafka/releases{/id}",
      "size": 103797,
      "ssh_url": "git@github.com:jsancio/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/jsancio/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/jsancio/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/jsancio/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/jsancio/kafka/subscription",
      "svn_url": "https://github.com/jsancio/kafka",
      "tags_url": "https://api.github.com/repos/jsancio/kafka/tags",
      "teams_url": "https://api.github.com/repos/jsancio/kafka/teams",
      "trees_url": "https://api.github.com/repos/jsancio/kafka/git/trees{/sha}",
      "updated_at": "2019-02-07T01:15:53Z",
      "url": "https://api.github.com/repos/jsancio/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "63b0b1d25a35d92bd3ae842df9f5a9f9913cf4d6",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/794394?v=4",
      "events_url": "https://api.github.com/users/jsancio/events{/privacy}",
      "followers_url": "https://api.github.com/users/jsancio/followers",
      "following_url": "https://api.github.com/users/jsancio/following{/other_user}",
      "gists_url": "https://api.github.com/users/jsancio/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jsancio",
      "id": 794394,
      "login": "jsancio",
      "node_id": "MDQ6VXNlcjc5NDM5NA==",
      "organizations_url": "https://api.github.com/users/jsancio/orgs",
      "received_events_url": "https://api.github.com/users/jsancio/received_events",
      "repos_url": "https://api.github.com/users/jsancio/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jsancio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jsancio/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jsancio"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9512",
  "id": 510922604,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9512",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "794c6ca3aec66db26c3adf02296d2e9f34459e4e",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTEwOTIyNjA0",
  "number": 9512,
  "patch_url": "https://github.com/apache/kafka/pull/9512.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9512/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/63b0b1d25a35d92bd3ae842df9f5a9f9913cf4d6",
  "title": "[DRAFT] - KAFKA-10394: generate snapshot",
  "updated_at": "2020-10-27T17:12:43Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9512",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/794394?v=4",
    "events_url": "https://api.github.com/users/jsancio/events{/privacy}",
    "followers_url": "https://api.github.com/users/jsancio/followers",
    "following_url": "https://api.github.com/users/jsancio/following{/other_user}",
    "gists_url": "https://api.github.com/users/jsancio/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/jsancio",
    "id": 794394,
    "login": "jsancio",
    "node_id": "MDQ6VXNlcjc5NDM5NA==",
    "organizations_url": "https://api.github.com/users/jsancio/orgs",
    "received_events_url": "https://api.github.com/users/jsancio/received_events",
    "repos_url": "https://api.github.com/users/jsancio/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/jsancio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jsancio/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/jsancio"
  }
}
json_root is_array: false
json_root is_object: true
number: 9512
url: https://api.github.com/repos/apache/kafka/pulls/9512
title: [DRAFT] - KAFKA-10394: generate snapshot
body: This PR depends on https://github.com/apache/kafka/pull/9505. I will rebase this PR once https://github.com/apache/kafka/pull/9505 has been merged.

This PR adds support for generating snapshot for KIP-630.

1. It introduces the interface `SnapshotWriter` and implementation `KafkaSnapshotWriter` for creating snapshots on disk.
2. It introduces the interface `SnapshotReader` and implementation `KafkaSnapshotReader for reading snapshot from disk.


*More detailed description of your change,
if necessary. The PR title and PR message become
the squashed commit message, so use a separate
comment to ping reviewers.*

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9512/comments
pull_request_number: 9512
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9508/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9508/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9508"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9508"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9508/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9508"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/d49a0af749d3afd372d25e535ec1521dba35012f"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "94d21e3f8a64ea09449d7c4ce0e3eb4423dec369",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "*More detailed description of your change,\r\nif necessary. The PR title and PR message become\r\nthe squashed commit message, so use a separate\r\ncomment to ping reviewers.*\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9508/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9508/commits",
  "created_at": "2020-10-27T05:18:06Z",
  "diff_url": "https://github.com/apache/kafka/pull/9508.diff",
  "draft": false,
  "head": {
    "label": "vamossagar12:kip-614",
    "ref": "kip-614",
    "repo": {
      "archive_url": "https://api.github.com/repos/vamossagar12/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/vamossagar12/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/vamossagar12/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/vamossagar12/kafka/branches{/branch}",
      "clone_url": "https://github.com/vamossagar12/kafka.git",
      "collaborators_url": "https://api.github.com/repos/vamossagar12/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/vamossagar12/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/vamossagar12/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/vamossagar12/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/vamossagar12/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/vamossagar12/kafka/contributors",
      "created_at": "2019-11-16T18:57:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/vamossagar12/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/vamossagar12/kafka/downloads",
      "events_url": "https://api.github.com/repos/vamossagar12/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/vamossagar12/kafka/forks",
      "full_name": "vamossagar12/kafka",
      "git_commits_url": "https://api.github.com/repos/vamossagar12/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/vamossagar12/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/vamossagar12/kafka/git/tags{/sha}",
      "git_url": "git://github.com/vamossagar12/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/vamossagar12/kafka/hooks",
      "html_url": "https://github.com/vamossagar12/kafka",
      "id": 222145451,
      "issue_comment_url": "https://api.github.com/repos/vamossagar12/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/vamossagar12/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/vamossagar12/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/vamossagar12/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/vamossagar12/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/vamossagar12/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/vamossagar12/kafka/merges",
      "milestones_url": "https://api.github.com/repos/vamossagar12/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjIxNDU0NTE=",
      "notifications_url": "https://api.github.com/repos/vamossagar12/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/10499430?v=4",
        "events_url": "https://api.github.com/users/vamossagar12/events{/privacy}",
        "followers_url": "https://api.github.com/users/vamossagar12/followers",
        "following_url": "https://api.github.com/users/vamossagar12/following{/other_user}",
        "gists_url": "https://api.github.com/users/vamossagar12/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vamossagar12",
        "id": 10499430,
        "login": "vamossagar12",
        "node_id": "MDQ6VXNlcjEwNDk5NDMw",
        "organizations_url": "https://api.github.com/users/vamossagar12/orgs",
        "received_events_url": "https://api.github.com/users/vamossagar12/received_events",
        "repos_url": "https://api.github.com/users/vamossagar12/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vamossagar12/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vamossagar12/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vamossagar12"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/vamossagar12/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T05:17:37Z",
      "releases_url": "https://api.github.com/repos/vamossagar12/kafka/releases{/id}",
      "size": 106369,
      "ssh_url": "git@github.com:vamossagar12/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/vamossagar12/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/vamossagar12/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/vamossagar12/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/vamossagar12/kafka/subscription",
      "svn_url": "https://github.com/vamossagar12/kafka",
      "tags_url": "https://api.github.com/repos/vamossagar12/kafka/tags",
      "teams_url": "https://api.github.com/repos/vamossagar12/kafka/teams",
      "trees_url": "https://api.github.com/repos/vamossagar12/kafka/git/trees{/sha}",
      "updated_at": "2019-11-16T18:57:19Z",
      "url": "https://api.github.com/repos/vamossagar12/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "d49a0af749d3afd372d25e535ec1521dba35012f",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/10499430?v=4",
      "events_url": "https://api.github.com/users/vamossagar12/events{/privacy}",
      "followers_url": "https://api.github.com/users/vamossagar12/followers",
      "following_url": "https://api.github.com/users/vamossagar12/following{/other_user}",
      "gists_url": "https://api.github.com/users/vamossagar12/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vamossagar12",
      "id": 10499430,
      "login": "vamossagar12",
      "node_id": "MDQ6VXNlcjEwNDk5NDMw",
      "organizations_url": "https://api.github.com/users/vamossagar12/orgs",
      "received_events_url": "https://api.github.com/users/vamossagar12/received_events",
      "repos_url": "https://api.github.com/users/vamossagar12/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vamossagar12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vamossagar12/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vamossagar12"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9508",
  "id": 510476621,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9508",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "f16ff7d77128134c78e9fed964fc656e918f7da9",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTEwNDc2NjIx",
  "number": 9508,
  "patch_url": "https://github.com/apache/kafka/pull/9508.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9508/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/d49a0af749d3afd372d25e535ec1521dba35012f",
  "title": "KAFKA-10648: Add Prefix Scan support to State Stores",
  "updated_at": "2020-10-27T05:18:06Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9508",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/10499430?v=4",
    "events_url": "https://api.github.com/users/vamossagar12/events{/privacy}",
    "followers_url": "https://api.github.com/users/vamossagar12/followers",
    "following_url": "https://api.github.com/users/vamossagar12/following{/other_user}",
    "gists_url": "https://api.github.com/users/vamossagar12/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/vamossagar12",
    "id": 10499430,
    "login": "vamossagar12",
    "node_id": "MDQ6VXNlcjEwNDk5NDMw",
    "organizations_url": "https://api.github.com/users/vamossagar12/orgs",
    "received_events_url": "https://api.github.com/users/vamossagar12/received_events",
    "repos_url": "https://api.github.com/users/vamossagar12/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/vamossagar12/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vamossagar12/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/vamossagar12"
  }
}
json_root is_array: false
json_root is_object: true
number: 9508
url: https://api.github.com/repos/apache/kafka/pulls/9508
title: KAFKA-10648: Add Prefix Scan support to State Stores
body: *More detailed description of your change,
if necessary. The PR title and PR message become
the squashed commit message, so use a separate
comment to ping reviewers.*

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9508/comments
pull_request_number: 9508
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9507/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9507/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9507"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9507"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9507/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9507"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/5a03f5993987ab341cd14e3708190aefa6ad7f0a"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "94d21e3f8a64ea09449d7c4ce0e3eb4423dec369",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "1. remove unneeded javadoc content.\r\n2. Replace containsKey/setProperty with `putIfAbsent` (good refactor)\r\n3. refactor the constructor of `TopologyTestDriverTest`\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9507/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9507/commits",
  "created_at": "2020-10-27T05:10:27Z",
  "diff_url": "https://github.com/apache/kafka/pull/9507.diff",
  "draft": false,
  "head": {
    "label": "showuon:KAFKA-10628",
    "ref": "KAFKA-10628",
    "repo": {
      "archive_url": "https://api.github.com/repos/showuon/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/showuon/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/showuon/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/showuon/kafka/branches{/branch}",
      "clone_url": "https://github.com/showuon/kafka.git",
      "collaborators_url": "https://api.github.com/repos/showuon/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/showuon/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/showuon/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/showuon/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/showuon/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/showuon/kafka/contributors",
      "created_at": "2020-03-24T11:29:55Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/showuon/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/showuon/kafka/downloads",
      "events_url": "https://api.github.com/repos/showuon/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/showuon/kafka/forks",
      "full_name": "showuon/kafka",
      "git_commits_url": "https://api.github.com/repos/showuon/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/showuon/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/showuon/kafka/git/tags{/sha}",
      "git_url": "git://github.com/showuon/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/showuon/kafka/hooks",
      "html_url": "https://github.com/showuon/kafka",
      "id": 249690395,
      "issue_comment_url": "https://api.github.com/repos/showuon/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/showuon/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/showuon/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/showuon/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/showuon/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/showuon/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/showuon/kafka/merges",
      "milestones_url": "https://api.github.com/repos/showuon/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyNDk2OTAzOTU=",
      "notifications_url": "https://api.github.com/repos/showuon/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/43372967?v=4",
        "events_url": "https://api.github.com/users/showuon/events{/privacy}",
        "followers_url": "https://api.github.com/users/showuon/followers",
        "following_url": "https://api.github.com/users/showuon/following{/other_user}",
        "gists_url": "https://api.github.com/users/showuon/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/showuon",
        "id": 43372967,
        "login": "showuon",
        "node_id": "MDQ6VXNlcjQzMzcyOTY3",
        "organizations_url": "https://api.github.com/users/showuon/orgs",
        "received_events_url": "https://api.github.com/users/showuon/received_events",
        "repos_url": "https://api.github.com/users/showuon/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/showuon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/showuon/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/showuon"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/showuon/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T09:47:14Z",
      "releases_url": "https://api.github.com/repos/showuon/kafka/releases{/id}",
      "size": 106722,
      "ssh_url": "git@github.com:showuon/kafka.git",
      "stargazers_count": 1,
      "stargazers_url": "https://api.github.com/repos/showuon/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/showuon/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/showuon/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/showuon/kafka/subscription",
      "svn_url": "https://github.com/showuon/kafka",
      "tags_url": "https://api.github.com/repos/showuon/kafka/tags",
      "teams_url": "https://api.github.com/repos/showuon/kafka/teams",
      "trees_url": "https://api.github.com/repos/showuon/kafka/git/trees{/sha}",
      "updated_at": "2020-09-07T07:02:17Z",
      "url": "https://api.github.com/repos/showuon/kafka",
      "watchers": 1,
      "watchers_count": 1
    },
    "sha": "5a03f5993987ab341cd14e3708190aefa6ad7f0a",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/43372967?v=4",
      "events_url": "https://api.github.com/users/showuon/events{/privacy}",
      "followers_url": "https://api.github.com/users/showuon/followers",
      "following_url": "https://api.github.com/users/showuon/following{/other_user}",
      "gists_url": "https://api.github.com/users/showuon/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/showuon",
      "id": 43372967,
      "login": "showuon",
      "node_id": "MDQ6VXNlcjQzMzcyOTY3",
      "organizations_url": "https://api.github.com/users/showuon/orgs",
      "received_events_url": "https://api.github.com/users/showuon/received_events",
      "repos_url": "https://api.github.com/users/showuon/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/showuon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/showuon/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/showuon"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9507",
  "id": 510473662,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9507",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "feac39c1691f0036f4aed30b2ec54838788cf8bf",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTEwNDczNjYy",
  "number": 9507,
  "patch_url": "https://github.com/apache/kafka/pull/9507.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9507/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/5a03f5993987ab341cd14e3708190aefa6ad7f0a",
  "title": "KAFKA-10628: remove unneeded javadoc for TopologyTestDriver and some refactor",
  "updated_at": "2020-10-27T12:55:40Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9507",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/43372967?v=4",
    "events_url": "https://api.github.com/users/showuon/events{/privacy}",
    "followers_url": "https://api.github.com/users/showuon/followers",
    "following_url": "https://api.github.com/users/showuon/following{/other_user}",
    "gists_url": "https://api.github.com/users/showuon/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/showuon",
    "id": 43372967,
    "login": "showuon",
    "node_id": "MDQ6VXNlcjQzMzcyOTY3",
    "organizations_url": "https://api.github.com/users/showuon/orgs",
    "received_events_url": "https://api.github.com/users/showuon/received_events",
    "repos_url": "https://api.github.com/users/showuon/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/showuon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/showuon/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/showuon"
  }
}
json_root is_array: false
json_root is_object: true
number: 9507
url: https://api.github.com/repos/apache/kafka/pulls/9507
title: KAFKA-10628: remove unneeded javadoc for TopologyTestDriver and some refactor
body: 1. remove unneeded javadoc content.
2. Replace containsKey/setProperty with `putIfAbsent` (good refactor)
3. refactor the constructor of `TopologyTestDriverTest`

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9507/comments
pull_request_number: 9507
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9505/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9505/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9505"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9505"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9505/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9505"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/9fef4a1a78676cdd6091155ca25901c1ab4af16e"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "8f02b92fcf1bf33609cbe01ffdec5ba63e1023dc",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Adds the changes to Fetch and FetchSnapshot as describe in KIP-630.\r\n\r\n*More detailed description of your change,\r\nif necessary. The PR title and PR message become\r\nthe squashed commit message, so use a separate\r\ncomment to ping reviewers.*\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9505/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9505/commits",
  "created_at": "2020-10-26T16:29:20Z",
  "diff_url": "https://github.com/apache/kafka/pull/9505.diff",
  "draft": false,
  "head": {
    "label": "jsancio:kafka-10393-kip-630-messages",
    "ref": "kafka-10393-kip-630-messages",
    "repo": {
      "archive_url": "https://api.github.com/repos/jsancio/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/jsancio/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/jsancio/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/jsancio/kafka/branches{/branch}",
      "clone_url": "https://github.com/jsancio/kafka.git",
      "collaborators_url": "https://api.github.com/repos/jsancio/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/jsancio/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/jsancio/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/jsancio/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/jsancio/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/jsancio/kafka/contributors",
      "created_at": "2019-02-07T01:15:40Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/jsancio/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/jsancio/kafka/downloads",
      "events_url": "https://api.github.com/repos/jsancio/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/jsancio/kafka/forks",
      "full_name": "jsancio/kafka",
      "git_commits_url": "https://api.github.com/repos/jsancio/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/jsancio/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/jsancio/kafka/git/tags{/sha}",
      "git_url": "git://github.com/jsancio/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/jsancio/kafka/hooks",
      "html_url": "https://github.com/jsancio/kafka",
      "id": 169502372,
      "issue_comment_url": "https://api.github.com/repos/jsancio/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/jsancio/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/jsancio/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/jsancio/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/jsancio/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/jsancio/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/jsancio/kafka/merges",
      "milestones_url": "https://api.github.com/repos/jsancio/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxNjk1MDIzNzI=",
      "notifications_url": "https://api.github.com/repos/jsancio/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/794394?v=4",
        "events_url": "https://api.github.com/users/jsancio/events{/privacy}",
        "followers_url": "https://api.github.com/users/jsancio/followers",
        "following_url": "https://api.github.com/users/jsancio/following{/other_user}",
        "gists_url": "https://api.github.com/users/jsancio/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jsancio",
        "id": 794394,
        "login": "jsancio",
        "node_id": "MDQ6VXNlcjc5NDM5NA==",
        "organizations_url": "https://api.github.com/users/jsancio/orgs",
        "received_events_url": "https://api.github.com/users/jsancio/received_events",
        "repos_url": "https://api.github.com/users/jsancio/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jsancio/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jsancio/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jsancio"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/jsancio/kafka/pulls{/number}",
      "pushed_at": "2020-10-26T19:34:08Z",
      "releases_url": "https://api.github.com/repos/jsancio/kafka/releases{/id}",
      "size": 103797,
      "ssh_url": "git@github.com:jsancio/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/jsancio/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/jsancio/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/jsancio/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/jsancio/kafka/subscription",
      "svn_url": "https://github.com/jsancio/kafka",
      "tags_url": "https://api.github.com/repos/jsancio/kafka/tags",
      "teams_url": "https://api.github.com/repos/jsancio/kafka/teams",
      "trees_url": "https://api.github.com/repos/jsancio/kafka/git/trees{/sha}",
      "updated_at": "2019-02-07T01:15:53Z",
      "url": "https://api.github.com/repos/jsancio/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "9fef4a1a78676cdd6091155ca25901c1ab4af16e",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/794394?v=4",
      "events_url": "https://api.github.com/users/jsancio/events{/privacy}",
      "followers_url": "https://api.github.com/users/jsancio/followers",
      "following_url": "https://api.github.com/users/jsancio/following{/other_user}",
      "gists_url": "https://api.github.com/users/jsancio/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jsancio",
      "id": 794394,
      "login": "jsancio",
      "node_id": "MDQ6VXNlcjc5NDM5NA==",
      "organizations_url": "https://api.github.com/users/jsancio/orgs",
      "received_events_url": "https://api.github.com/users/jsancio/received_events",
      "repos_url": "https://api.github.com/users/jsancio/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jsancio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jsancio/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jsancio"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9505",
  "id": 510153483,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9505",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "2e39475dd118a1d41db99d03428df5e4f64819fa",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTEwMTUzNDgz",
  "number": 9505,
  "patch_url": "https://github.com/apache/kafka/pull/9505.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9505/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/9fef4a1a78676cdd6091155ca25901c1ab4af16e",
  "title": "KAFKA-10393: messages for fetch snapshot and fetch",
  "updated_at": "2020-10-27T10:17:35Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9505",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/794394?v=4",
    "events_url": "https://api.github.com/users/jsancio/events{/privacy}",
    "followers_url": "https://api.github.com/users/jsancio/followers",
    "following_url": "https://api.github.com/users/jsancio/following{/other_user}",
    "gists_url": "https://api.github.com/users/jsancio/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/jsancio",
    "id": 794394,
    "login": "jsancio",
    "node_id": "MDQ6VXNlcjc5NDM5NA==",
    "organizations_url": "https://api.github.com/users/jsancio/orgs",
    "received_events_url": "https://api.github.com/users/jsancio/received_events",
    "repos_url": "https://api.github.com/users/jsancio/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/jsancio/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jsancio/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/jsancio"
  }
}
json_root is_array: false
json_root is_object: true
number: 9505
url: https://api.github.com/repos/apache/kafka/pulls/9505
title: KAFKA-10393: messages for fetch snapshot and fetch
body: Adds the changes to Fetch and FetchSnapshot as describe in KIP-630.

*More detailed description of your change,
if necessary. The PR title and PR message become
the squashed commit message, so use a separate
comment to ping reviewers.*

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9505/comments
id: 512566562
url: https://api.github.com/repos/apache/kafka/pulls/comments/512566562
body: it seems to me ```PartitionIndex``` is a more common name in protocol.
diff_hunk: @@ -0,0 +1,46 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "apiKey": 58,
+  "type": "request",
+  "name": "FetchSnapshotRequest",
+  "validVersions": "0",
+  "flexibleVersions": "0+",
+  "fields": [
+    { "name": "ReplicaId", "type": "int32", "versions": "0+",
+      "about": "The broker ID of the follower." },
+    { "name": "MaxBytes", "type": "int32", "versions": "0+",
+      "about": "The maximum bytes to fetch from all of the snapshots." },
+    { "name": "Topics", "type": "[]TopicSnapshot", "versions": "0+",
+      "about": "The topics to fetch.", "fields": [
+      { "name": "Name", "type": "string", "versions": "0+", "entityType": "topicName",
+        "about": "The name of the topic to fetch." },
+      { "name": "Partitions", "type": "[]PartitionSnapshot", "versions": "0+",
+        "about": "The partitions to fetch.", "fields": [
+        { "name": "Index", "type": "int32", "versions": "0+",
path: clients/src/main/resources/common/message/FetchSnapshotRequest.json
html: https://github.com/apache/kafka/pull/9505#discussion_r512566562
id: 512566722
url: https://api.github.com/repos/apache/kafka/pulls/comments/512566722
body: ditto
diff_hunk: @@ -0,0 +1,59 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "apiKey": 58,
+  "type": "response",
+  "name": "FetchSnapshotResponse",
+  "validVersions": "0",
+  "flexibleVersions": "0+",
+  "fields": [
+    { "name": "ThrottleTimeMs", "type": "int32", "versions": "0+", "ignorable": true,
+      "about": "The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota." },
+    { "name": "ErrorCode", "type": "int16", "versions": "0+", "ignorable": false,
+      "about": "The top level response error code." },
+    { "name": "Topics", "type": "[]TopicSnapshot", "versions": "0+",
+      "about": "The topics to fetch.", "fields": [
+      { "name": "Name", "type": "string", "versions": "0+", "entityType": "topicName",
+        "about": "The name of the topic to fetch." },
+      { "name": "Partitions", "type": "[]PartitionSnapshot", "versions": "0+",
+        "about": "The partitions to fetch.", "fields": [
+        { "name": "Index", "type": "int32", "versions": "0+",
path: clients/src/main/resources/common/message/FetchSnapshotResponse.json
html: https://github.com/apache/kafka/pull/9505#discussion_r512566722
pull_request_number: 9505
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9502/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9502/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9502"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9502"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9502/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9502"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/4f27f001f3cf0afa643363c16503f3cb41998fbb"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "3bfbe682a2246313d126045f2c5e1a0c2577bbd2",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "```StandbyTaskEOSIntegrationTest ```instantiates a ```EmbeddedKafkaCluster``` so it should be an ```IntegrationTest```.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9502/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9502/commits",
  "created_at": "2020-10-26T08:48:55Z",
  "diff_url": "https://github.com/apache/kafka/pull/9502.diff",
  "draft": false,
  "head": {
    "label": "chia7712:MINOR-9502",
    "ref": "MINOR-9502",
    "repo": {
      "archive_url": "https://api.github.com/repos/chia7712/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/chia7712/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/chia7712/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/chia7712/kafka/branches{/branch}",
      "clone_url": "https://github.com/chia7712/kafka.git",
      "collaborators_url": "https://api.github.com/repos/chia7712/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/chia7712/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/chia7712/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/chia7712/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/chia7712/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/chia7712/kafka/contributors",
      "created_at": "2018-03-14T12:43:46Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/chia7712/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/chia7712/kafka/downloads",
      "events_url": "https://api.github.com/repos/chia7712/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/chia7712/kafka/forks",
      "full_name": "chia7712/kafka",
      "git_commits_url": "https://api.github.com/repos/chia7712/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/chia7712/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/chia7712/kafka/git/tags{/sha}",
      "git_url": "git://github.com/chia7712/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/chia7712/kafka/hooks",
      "html_url": "https://github.com/chia7712/kafka",
      "id": 125210946,
      "issue_comment_url": "https://api.github.com/repos/chia7712/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/chia7712/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/chia7712/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/chia7712/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/chia7712/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/chia7712/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/chia7712/kafka/merges",
      "milestones_url": "https://api.github.com/repos/chia7712/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjUyMTA5NDY=",
      "notifications_url": "https://api.github.com/repos/chia7712/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
        "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
        "followers_url": "https://api.github.com/users/chia7712/followers",
        "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
        "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/chia7712",
        "id": 6234750,
        "login": "chia7712",
        "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
        "organizations_url": "https://api.github.com/users/chia7712/orgs",
        "received_events_url": "https://api.github.com/users/chia7712/received_events",
        "repos_url": "https://api.github.com/users/chia7712/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/chia7712"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/chia7712/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T03:45:34Z",
      "releases_url": "https://api.github.com/repos/chia7712/kafka/releases{/id}",
      "size": 102819,
      "ssh_url": "git@github.com:chia7712/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/chia7712/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/chia7712/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/chia7712/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/chia7712/kafka/subscription",
      "svn_url": "https://github.com/chia7712/kafka",
      "tags_url": "https://api.github.com/repos/chia7712/kafka/tags",
      "teams_url": "https://api.github.com/repos/chia7712/kafka/teams",
      "trees_url": "https://api.github.com/repos/chia7712/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:44:24Z",
      "url": "https://api.github.com/repos/chia7712/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "4f27f001f3cf0afa643363c16503f3cb41998fbb",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
      "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
      "followers_url": "https://api.github.com/users/chia7712/followers",
      "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
      "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chia7712",
      "id": 6234750,
      "login": "chia7712",
      "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
      "organizations_url": "https://api.github.com/users/chia7712/orgs",
      "received_events_url": "https://api.github.com/users/chia7712/received_events",
      "repos_url": "https://api.github.com/users/chia7712/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chia7712"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9502",
  "id": 509874030,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9502",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "8d2ed92af1618a1219ccedaa3bb261e64261b324",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5ODc0MDMw",
  "number": 9502,
  "patch_url": "https://github.com/apache/kafka/pull/9502.patch",
  "requested_reviewers": [
    {
      "avatar_url": "https://avatars3.githubusercontent.com/u/5845561?v=4",
      "events_url": "https://api.github.com/users/abbccdda/events{/privacy}",
      "followers_url": "https://api.github.com/users/abbccdda/followers",
      "following_url": "https://api.github.com/users/abbccdda/following{/other_user}",
      "gists_url": "https://api.github.com/users/abbccdda/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/abbccdda",
      "id": 5845561,
      "login": "abbccdda",
      "node_id": "MDQ6VXNlcjU4NDU1NjE=",
      "organizations_url": "https://api.github.com/users/abbccdda/orgs",
      "received_events_url": "https://api.github.com/users/abbccdda/received_events",
      "repos_url": "https://api.github.com/users/abbccdda/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/abbccdda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abbccdda/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/abbccdda"
    }
  ],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9502/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/4f27f001f3cf0afa643363c16503f3cb41998fbb",
  "title": "MINOR: mark StandbyTaskEOSIntegrationTest as an IntegrationTest",
  "updated_at": "2020-10-26T08:48:59Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9502",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
    "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
    "followers_url": "https://api.github.com/users/chia7712/followers",
    "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
    "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/chia7712",
    "id": 6234750,
    "login": "chia7712",
    "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
    "organizations_url": "https://api.github.com/users/chia7712/orgs",
    "received_events_url": "https://api.github.com/users/chia7712/received_events",
    "repos_url": "https://api.github.com/users/chia7712/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/chia7712"
  }
}
json_root is_array: false
json_root is_object: true
number: 9502
url: https://api.github.com/repos/apache/kafka/pulls/9502
title: MINOR: mark StandbyTaskEOSIntegrationTest as an IntegrationTest
body: ```StandbyTaskEOSIntegrationTest ```instantiates a ```EmbeddedKafkaCluster``` so it should be an ```IntegrationTest```.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9502/comments
pull_request_number: 9502
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9501/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9501/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9501"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9501"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9501/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9501"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/dba4f5782f353050d3b98dc3316403d62dc5d4d3"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "3bfbe682a2246313d126045f2c5e1a0c2577bbd2",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This patch can reduce the elapsed time of testing ```TopicCommandWithAdminClientTest``` (5m19s -> 4m18s on my local)\r\n\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9501/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9501/commits",
  "created_at": "2020-10-26T07:37:12Z",
  "diff_url": "https://github.com/apache/kafka/pull/9501.diff",
  "draft": false,
  "head": {
    "label": "chia7712:MINOR-9501",
    "ref": "MINOR-9501",
    "repo": {
      "archive_url": "https://api.github.com/repos/chia7712/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/chia7712/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/chia7712/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/chia7712/kafka/branches{/branch}",
      "clone_url": "https://github.com/chia7712/kafka.git",
      "collaborators_url": "https://api.github.com/repos/chia7712/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/chia7712/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/chia7712/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/chia7712/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/chia7712/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/chia7712/kafka/contributors",
      "created_at": "2018-03-14T12:43:46Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/chia7712/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/chia7712/kafka/downloads",
      "events_url": "https://api.github.com/repos/chia7712/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/chia7712/kafka/forks",
      "full_name": "chia7712/kafka",
      "git_commits_url": "https://api.github.com/repos/chia7712/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/chia7712/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/chia7712/kafka/git/tags{/sha}",
      "git_url": "git://github.com/chia7712/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/chia7712/kafka/hooks",
      "html_url": "https://github.com/chia7712/kafka",
      "id": 125210946,
      "issue_comment_url": "https://api.github.com/repos/chia7712/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/chia7712/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/chia7712/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/chia7712/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/chia7712/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/chia7712/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/chia7712/kafka/merges",
      "milestones_url": "https://api.github.com/repos/chia7712/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjUyMTA5NDY=",
      "notifications_url": "https://api.github.com/repos/chia7712/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
        "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
        "followers_url": "https://api.github.com/users/chia7712/followers",
        "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
        "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/chia7712",
        "id": 6234750,
        "login": "chia7712",
        "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
        "organizations_url": "https://api.github.com/users/chia7712/orgs",
        "received_events_url": "https://api.github.com/users/chia7712/received_events",
        "repos_url": "https://api.github.com/users/chia7712/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/chia7712"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/chia7712/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T03:45:34Z",
      "releases_url": "https://api.github.com/repos/chia7712/kafka/releases{/id}",
      "size": 102819,
      "ssh_url": "git@github.com:chia7712/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/chia7712/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/chia7712/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/chia7712/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/chia7712/kafka/subscription",
      "svn_url": "https://github.com/chia7712/kafka",
      "tags_url": "https://api.github.com/repos/chia7712/kafka/tags",
      "teams_url": "https://api.github.com/repos/chia7712/kafka/teams",
      "trees_url": "https://api.github.com/repos/chia7712/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:44:24Z",
      "url": "https://api.github.com/repos/chia7712/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "dba4f5782f353050d3b98dc3316403d62dc5d4d3",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
      "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
      "followers_url": "https://api.github.com/users/chia7712/followers",
      "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
      "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chia7712",
      "id": 6234750,
      "login": "chia7712",
      "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
      "organizations_url": "https://api.github.com/users/chia7712/orgs",
      "received_events_url": "https://api.github.com/users/chia7712/received_events",
      "repos_url": "https://api.github.com/users/chia7712/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chia7712"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9501",
  "id": 509836802,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9501",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "633a797b69b8a95a7c302053df4e3879ca50af60",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5ODM2ODAy",
  "number": 9501,
  "patch_url": "https://github.com/apache/kafka/pull/9501.patch",
  "requested_reviewers": [
    {
      "avatar_url": "https://avatars2.githubusercontent.com/u/8134545?v=4",
      "events_url": "https://api.github.com/users/omkreddy/events{/privacy}",
      "followers_url": "https://api.github.com/users/omkreddy/followers",
      "following_url": "https://api.github.com/users/omkreddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/omkreddy/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/omkreddy",
      "id": 8134545,
      "login": "omkreddy",
      "node_id": "MDQ6VXNlcjgxMzQ1NDU=",
      "organizations_url": "https://api.github.com/users/omkreddy/orgs",
      "received_events_url": "https://api.github.com/users/omkreddy/received_events",
      "repos_url": "https://api.github.com/users/omkreddy/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/omkreddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/omkreddy/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/omkreddy"
    }
  ],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9501/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/dba4f5782f353050d3b98dc3316403d62dc5d4d3",
  "title": "MINOR: move the test cases which don't need brokers from TopicCommand…",
  "updated_at": "2020-10-26T07:38:14Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9501",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
    "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
    "followers_url": "https://api.github.com/users/chia7712/followers",
    "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
    "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/chia7712",
    "id": 6234750,
    "login": "chia7712",
    "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
    "organizations_url": "https://api.github.com/users/chia7712/orgs",
    "received_events_url": "https://api.github.com/users/chia7712/received_events",
    "repos_url": "https://api.github.com/users/chia7712/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/chia7712"
  }
}
json_root is_array: false
json_root is_object: true
number: 9501
url: https://api.github.com/repos/apache/kafka/pulls/9501
title: MINOR: move the test cases which don't need brokers from TopicCommand…
body: This patch can reduce the elapsed time of testing ```TopicCommandWithAdminClientTest``` (5m19s -> 4m18s on my local)


### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9501/comments
pull_request_number: 9501
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9499/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9499/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9499"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9499"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9499/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9499"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/ba2ae15b6b3ecad33d1805bd24d9bb34c4965e4e"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "aa287acb2eed07cf6d75c10e71f051f538a57872",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Zstd-jni 1.4.5-6 allocates large internal buffers inside of ZstdInputStream and ZstdOutputStream. This caused a lot of allocation and GC activity when creating and closing the streams. It also does not buffer the reads or writes. This causes inefficiency when DefaultRecord.writeTo() does a series of small single bytes reads using various ByteUtils methods. The JNI is more efficient if the writes of uncompressed data were flushed in large pieces rather than for each byte. This is due to the the expense of context switching between the Java code and the native code. This is also the case when reading as well. Per https://github.com/luben/zstd-jni/issues/141 the maintainer of zstd-jni and I agreed to not buffer reads and writes in favor of having the caller do that, so here we are updating the caller. Here is part of a flame graph of  CPU time spent in the single byte writes from Kafka:\r\n\r\n![image](https://user-images.githubusercontent.com/1082334/97130235-3113cd00-1717-11eb-835c-cc145d549604.png)\r\n\r\nIn this patch, I upgraded to the most recent zstd-jni version with the buffer reuse built-in. This was done in https://github.com/luben/zstd-jni/pull/143 and https://github.com/luben/zstd-jni/pull/146 Since we decided not to add additional buffering of input/output with zstd-jni, I added the BufferedInputStream and BufferedOutputStream to CompressionType.ZSTD just like we currently do for CompressionType.GZIP which also is inefficient for single byte reads and writes. I used the same buffer sizes as that existing implementation.\r\n\r\nNOTE: if so desired we could pass a wrapped BufferSupplier into the Zstd*Stream classes to have Kafka decide how the buffer recycling occurs. This functionality was added in the latter PR linked above. I am holding off on this since based on jmh benchmarking the performance gains were not clear and personally I don't know if it worth the complexity of trying to hack around the reflection at this point in time. The zstd-jni uses a very similar default recycler as snappy does currently which seems to provide decent efficiency. While this PR fixes the defect, I feel that using BufferSupplier in both zstd-jni and snappy is outside of the scope of this bugfix and should be considered a separate improvement. I would prefer this change get merged in on its own since the performance gains here are very significant relative to the more incremental and minor optimizations which could be achieved by doing that separate work.\r\n\r\nThere are some noticeable improvements in the JMH benchmarks (excerpt):\r\n\r\nBEFORE:\r\n```\r\nBenchmark                                                                                                                    (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score     Error   Units\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed                                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   27743.260 ± 673.869   ops/s\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.alloc.rate                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    3399.966 ±  82.608  MB/sec\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.alloc.rate.norm                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  134968.010 ±   0.012    B/op\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Eden_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    3850.985 ±  84.476  MB/sec\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Eden_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  152881.128 ± 942.189    B/op\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Survivor_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     174.241 ±   3.486  MB/sec\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Survivor_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    6917.758 ±  82.522    B/op\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.count                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1689.000            counts\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.time                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   82621.000                ms\r\nJMH benchmarks done\r\n\r\nBenchmark                                                                                                    (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score       Error   Units\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage                                                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   24095.711 ±   895.866   ops/s\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.alloc.rate                                     CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2932.289 ±   109.465  MB/sec\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.alloc.rate.norm                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  134032.012 ±     0.013    B/op\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Eden_Space                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    3282.912 ±   115.042  MB/sec\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Eden_Space.norm                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  150073.914 ±  1342.235    B/op\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Survivor_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     149.697 ±     5.786  MB/sec\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Survivor_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    6842.462 ±    64.515    B/op\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.count                                          CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1449.000              counts\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.time                                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   82518.000                  ms\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize                                                     CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1449.060 ±   230.498   ops/s\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.alloc.rate                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     198.051 ±    31.532  MB/sec\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.alloc.rate.norm                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  150502.519 ±     0.186    B/op\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     200.064 ±    31.879  MB/sec\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space.norm                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  152569.341 ± 13826.686    B/op\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.count                                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15      91.000              counts\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.time                                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   75869.000                  ms\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize                                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2609.660 ±  1145.160   ops/s\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.alloc.rate                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     815.441 ±   357.818  MB/sec\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.alloc.rate.norm                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  344309.097 ±     0.238    B/op\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     808.952 ±   354.975  MB/sec\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  345712.061 ± 51434.034    B/op\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.019 ±     0.042  MB/sec\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen.norm                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15      18.615 ±    42.045    B/op\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Survivor_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15      24.132 ±    12.254  MB/sec\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Survivor_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   13540.960 ± 14649.192    B/op\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.count                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     148.000              counts\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.time                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   23848.000                  ms\r\nJMH benchmarks done\r\n```\r\n\r\nAFTER:\r\n```\r\nBenchmark                                                                                                                (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score      Error   Units\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed                                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  147792.454 ± 2721.318   ops/s\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.alloc.rate                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2708.481 ±   50.012  MB/sec\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.alloc.rate.norm                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   20184.002 ±    0.002    B/op\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Eden_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2732.667 ±   59.258  MB/sec\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Eden_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   20363.460 ±  120.585    B/op\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Old_Gen                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.042 ±    0.033  MB/sec\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Old_Gen.norm                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.316 ±    0.249    B/op\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.count                                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     833.000             counts\r\nCompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.time                                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    8390.000                 ms\r\nJMH benchmarks done\r\n\r\nBenchmark                                                                                                (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score      Error   Units\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage                                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  166786.092 ± 3285.702   ops/s\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.alloc.rate                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2926.914 ±   57.464  MB/sec\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.alloc.rate.norm                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   19328.002 ±    0.002    B/op\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Eden_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2938.541 ±   66.850  MB/sec\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Eden_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   19404.357 ±  177.485    B/op\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Old_Gen                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.516 ±    0.100  MB/sec\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Old_Gen.norm                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       3.409 ±    0.657    B/op\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Survivor_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.032 ±    0.131  MB/sec\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Survivor_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.207 ±    0.858    B/op\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.count                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     834.000             counts\r\nRecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.time                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    9370.000                 ms\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize                                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   15988.116 ±  137.427   ops/s\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.alloc.rate                                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     448.636 ±    3.851  MB/sec\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.alloc.rate.norm                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   30907.698 ±    0.020    B/op\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space                         CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     450.905 ±    5.587  MB/sec\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space.norm                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   31064.113 ±  291.190    B/op\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.043 ±    0.007  MB/sec\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen.norm                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       2.931 ±    0.493    B/op\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.count                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     790.000             counts\r\nRecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.time                                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     999.000                 ms\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize                                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   11345.169 ±  206.528   ops/s\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.alloc.rate                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2314.800 ±   42.094  MB/sec\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.alloc.rate.norm                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  224714.266 ±    0.028    B/op\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2320.213 ±   45.521  MB/sec\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  225235.965 ±  803.309    B/op\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.026 ±    0.005  MB/sec\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen.norm                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       2.551 ±    0.455    B/op\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.count                                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     994.000             counts\r\nRecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.time                                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1189.000                 ms\r\nJMH benchmarks done\r\n```\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9499/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9499/commits",
  "created_at": "2020-10-26T03:19:44Z",
  "diff_url": "https://github.com/apache/kafka/pull/9499.diff",
  "draft": false,
  "head": {
    "label": "yuzawa-san:zstd-optimizations",
    "ref": "zstd-optimizations",
    "repo": {
      "archive_url": "https://api.github.com/repos/yuzawa-san/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/yuzawa-san/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/yuzawa-san/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/yuzawa-san/kafka/branches{/branch}",
      "clone_url": "https://github.com/yuzawa-san/kafka.git",
      "collaborators_url": "https://api.github.com/repos/yuzawa-san/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/yuzawa-san/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/yuzawa-san/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/yuzawa-san/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/yuzawa-san/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/yuzawa-san/kafka/contributors",
      "created_at": "2020-10-24T02:23:12Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/yuzawa-san/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/yuzawa-san/kafka/downloads",
      "events_url": "https://api.github.com/repos/yuzawa-san/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/yuzawa-san/kafka/forks",
      "full_name": "yuzawa-san/kafka",
      "git_commits_url": "https://api.github.com/repos/yuzawa-san/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/yuzawa-san/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/yuzawa-san/kafka/git/tags{/sha}",
      "git_url": "git://github.com/yuzawa-san/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/yuzawa-san/kafka/hooks",
      "html_url": "https://github.com/yuzawa-san/kafka",
      "id": 306788993,
      "issue_comment_url": "https://api.github.com/repos/yuzawa-san/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/yuzawa-san/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/yuzawa-san/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/yuzawa-san/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/yuzawa-san/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/yuzawa-san/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/yuzawa-san/kafka/merges",
      "milestones_url": "https://api.github.com/repos/yuzawa-san/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDY3ODg5OTM=",
      "notifications_url": "https://api.github.com/repos/yuzawa-san/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/1082334?v=4",
        "events_url": "https://api.github.com/users/yuzawa-san/events{/privacy}",
        "followers_url": "https://api.github.com/users/yuzawa-san/followers",
        "following_url": "https://api.github.com/users/yuzawa-san/following{/other_user}",
        "gists_url": "https://api.github.com/users/yuzawa-san/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/yuzawa-san",
        "id": 1082334,
        "login": "yuzawa-san",
        "node_id": "MDQ6VXNlcjEwODIzMzQ=",
        "organizations_url": "https://api.github.com/users/yuzawa-san/orgs",
        "received_events_url": "https://api.github.com/users/yuzawa-san/received_events",
        "repos_url": "https://api.github.com/users/yuzawa-san/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/yuzawa-san/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/yuzawa-san/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/yuzawa-san"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/yuzawa-san/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T13:25:17Z",
      "releases_url": "https://api.github.com/repos/yuzawa-san/kafka/releases{/id}",
      "size": 108003,
      "ssh_url": "git@github.com:yuzawa-san/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/yuzawa-san/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/yuzawa-san/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/yuzawa-san/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/yuzawa-san/kafka/subscription",
      "svn_url": "https://github.com/yuzawa-san/kafka",
      "tags_url": "https://api.github.com/repos/yuzawa-san/kafka/tags",
      "teams_url": "https://api.github.com/repos/yuzawa-san/kafka/teams",
      "trees_url": "https://api.github.com/repos/yuzawa-san/kafka/git/trees{/sha}",
      "updated_at": "2020-10-24T02:23:14Z",
      "url": "https://api.github.com/repos/yuzawa-san/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "ba2ae15b6b3ecad33d1805bd24d9bb34c4965e4e",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/1082334?v=4",
      "events_url": "https://api.github.com/users/yuzawa-san/events{/privacy}",
      "followers_url": "https://api.github.com/users/yuzawa-san/followers",
      "following_url": "https://api.github.com/users/yuzawa-san/following{/other_user}",
      "gists_url": "https://api.github.com/users/yuzawa-san/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yuzawa-san",
      "id": 1082334,
      "login": "yuzawa-san",
      "node_id": "MDQ6VXNlcjEwODIzMzQ=",
      "organizations_url": "https://api.github.com/users/yuzawa-san/orgs",
      "received_events_url": "https://api.github.com/users/yuzawa-san/received_events",
      "repos_url": "https://api.github.com/users/yuzawa-san/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yuzawa-san/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yuzawa-san/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yuzawa-san"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9499",
  "id": 509729757,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9499",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "1c9d83b80624f73c89db14eb69a25361a94f3114",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5NzI5NzU3",
  "number": 9499,
  "patch_url": "https://github.com/apache/kafka/pull/9499.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9499/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/ba2ae15b6b3ecad33d1805bd24d9bb34c4965e4e",
  "title": "KAFKA-10470: Zstd upgrade and buffering",
  "updated_at": "2020-10-27T13:25:31Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9499",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/1082334?v=4",
    "events_url": "https://api.github.com/users/yuzawa-san/events{/privacy}",
    "followers_url": "https://api.github.com/users/yuzawa-san/followers",
    "following_url": "https://api.github.com/users/yuzawa-san/following{/other_user}",
    "gists_url": "https://api.github.com/users/yuzawa-san/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/yuzawa-san",
    "id": 1082334,
    "login": "yuzawa-san",
    "node_id": "MDQ6VXNlcjEwODIzMzQ=",
    "organizations_url": "https://api.github.com/users/yuzawa-san/orgs",
    "received_events_url": "https://api.github.com/users/yuzawa-san/received_events",
    "repos_url": "https://api.github.com/users/yuzawa-san/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/yuzawa-san/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yuzawa-san/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/yuzawa-san"
  }
}
json_root is_array: false
json_root is_object: true
number: 9499
url: https://api.github.com/repos/apache/kafka/pulls/9499
title: KAFKA-10470: Zstd upgrade and buffering
body: Zstd-jni 1.4.5-6 allocates large internal buffers inside of ZstdInputStream and ZstdOutputStream. This caused a lot of allocation and GC activity when creating and closing the streams. It also does not buffer the reads or writes. This causes inefficiency when DefaultRecord.writeTo() does a series of small single bytes reads using various ByteUtils methods. The JNI is more efficient if the writes of uncompressed data were flushed in large pieces rather than for each byte. This is due to the the expense of context switching between the Java code and the native code. This is also the case when reading as well. Per https://github.com/luben/zstd-jni/issues/141 the maintainer of zstd-jni and I agreed to not buffer reads and writes in favor of having the caller do that, so here we are updating the caller. Here is part of a flame graph of  CPU time spent in the single byte writes from Kafka:

![image](https://user-images.githubusercontent.com/1082334/97130235-3113cd00-1717-11eb-835c-cc145d549604.png)

In this patch, I upgraded to the most recent zstd-jni version with the buffer reuse built-in. This was done in https://github.com/luben/zstd-jni/pull/143 and https://github.com/luben/zstd-jni/pull/146 Since we decided not to add additional buffering of input/output with zstd-jni, I added the BufferedInputStream and BufferedOutputStream to CompressionType.ZSTD just like we currently do for CompressionType.GZIP which also is inefficient for single byte reads and writes. I used the same buffer sizes as that existing implementation.

NOTE: if so desired we could pass a wrapped BufferSupplier into the Zstd*Stream classes to have Kafka decide how the buffer recycling occurs. This functionality was added in the latter PR linked above. I am holding off on this since based on jmh benchmarking the performance gains were not clear and personally I don't know if it worth the complexity of trying to hack around the reflection at this point in time. The zstd-jni uses a very similar default recycler as snappy does currently which seems to provide decent efficiency. While this PR fixes the defect, I feel that using BufferSupplier in both zstd-jni and snappy is outside of the scope of this bugfix and should be considered a separate improvement. I would prefer this change get merged in on its own since the performance gains here are very significant relative to the more incremental and minor optimizations which could be achieved by doing that separate work.

There are some noticeable improvements in the JMH benchmarks (excerpt):

BEFORE:
```
Benchmark                                                                                                                    (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score     Error   Units
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed                                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   27743.260 ± 673.869   ops/s
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.alloc.rate                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    3399.966 ±  82.608  MB/sec
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.alloc.rate.norm                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  134968.010 ±   0.012    B/op
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Eden_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    3850.985 ±  84.476  MB/sec
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Eden_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  152881.128 ± 942.189    B/op
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Survivor_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     174.241 ±   3.486  MB/sec
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Survivor_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    6917.758 ±  82.522    B/op
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.count                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1689.000            counts
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.time                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   82621.000                ms
JMH benchmarks done

Benchmark                                                                                                    (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score       Error   Units
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage                                                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   24095.711 ±   895.866   ops/s
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.alloc.rate                                     CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2932.289 ±   109.465  MB/sec
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.alloc.rate.norm                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  134032.012 ±     0.013    B/op
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Eden_Space                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    3282.912 ±   115.042  MB/sec
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Eden_Space.norm                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  150073.914 ±  1342.235    B/op
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Survivor_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     149.697 ±     5.786  MB/sec
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Survivor_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    6842.462 ±    64.515    B/op
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.count                                          CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1449.000              counts
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.time                                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   82518.000                  ms
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize                                                     CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1449.060 ±   230.498   ops/s
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.alloc.rate                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     198.051 ±    31.532  MB/sec
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.alloc.rate.norm                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  150502.519 ±     0.186    B/op
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     200.064 ±    31.879  MB/sec
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space.norm                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  152569.341 ± 13826.686    B/op
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.count                                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15      91.000              counts
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.time                                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   75869.000                  ms
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize                                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2609.660 ±  1145.160   ops/s
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.alloc.rate                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     815.441 ±   357.818  MB/sec
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.alloc.rate.norm                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  344309.097 ±     0.238    B/op
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     808.952 ±   354.975  MB/sec
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  345712.061 ± 51434.034    B/op
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.019 ±     0.042  MB/sec
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen.norm                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15      18.615 ±    42.045    B/op
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Survivor_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15      24.132 ±    12.254  MB/sec
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Survivor_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   13540.960 ± 14649.192    B/op
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.count                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     148.000              counts
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.time                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   23848.000                  ms
JMH benchmarks done
```

AFTER:
```
Benchmark                                                                                                                (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score      Error   Units
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed                                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  147792.454 ± 2721.318   ops/s
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.alloc.rate                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2708.481 ±   50.012  MB/sec
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.alloc.rate.norm                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   20184.002 ±    0.002    B/op
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Eden_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2732.667 ±   59.258  MB/sec
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Eden_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   20363.460 ±  120.585    B/op
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Old_Gen                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.042 ±    0.033  MB/sec
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.churn.G1_Old_Gen.norm                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.316 ±    0.249    B/op
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.count                                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     833.000             counts
CompressedRecordBatchValidationBenchmark.measureValidateMessagesAndAssignOffsetsCompressed:·gc.time                                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    8390.000                 ms
JMH benchmarks done

Benchmark                                                                                                (bufferSupplierStr)  (bytes)  (compressionType)  (maxBatchSize)  (messageSize)  (messageVersion)   Mode  Cnt       Score      Error   Units
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage                                                CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  166786.092 ± 3285.702   ops/s
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.alloc.rate                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2926.914 ±   57.464  MB/sec
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.alloc.rate.norm                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   19328.002 ±    0.002    B/op
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Eden_Space                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2938.541 ±   66.850  MB/sec
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Eden_Space.norm                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   19404.357 ±  177.485    B/op
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Old_Gen                           CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.516 ±    0.100  MB/sec
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Old_Gen.norm                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       3.409 ±    0.657    B/op
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Survivor_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.032 ±    0.131  MB/sec
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.churn.G1_Survivor_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.207 ±    0.858    B/op
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.count                                      CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     834.000             counts
RecordBatchIterationBenchmark.measureIteratorForBatchWithSingleMessage:·gc.time                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    9370.000                 ms
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize                                                 CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   15988.116 ±  137.427   ops/s
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.alloc.rate                                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     448.636 ±    3.851  MB/sec
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.alloc.rate.norm                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   30907.698 ±    0.020    B/op
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space                         CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     450.905 ±    5.587  MB/sec
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space.norm                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   31064.113 ±  291.190    B/op
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.043 ±    0.007  MB/sec
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen.norm                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       2.931 ±    0.493    B/op
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.count                                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     790.000             counts
RecordBatchIterationBenchmark.measureSkipIteratorForVariableBatchSize:·gc.time                                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     999.000                 ms
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize                                            CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15   11345.169 ±  206.528   ops/s
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.alloc.rate                             CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2314.800 ±   42.094  MB/sec
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.alloc.rate.norm                        CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  224714.266 ±    0.028    B/op
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space                    CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    2320.213 ±   45.521  MB/sec
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Eden_Space.norm               CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15  225235.965 ±  803.309    B/op
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen                       CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       0.026 ±    0.005  MB/sec
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.churn.G1_Old_Gen.norm                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15       2.551 ±    0.455    B/op
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.count                                  CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15     994.000             counts
RecordBatchIterationBenchmark.measureStreamingIteratorForVariableBatchSize:·gc.time                                   CREATE   RANDOM               ZSTD             200           1000                 2  thrpt   15    1189.000                 ms
JMH benchmarks done
```

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9499/comments
id: 511726299
url: https://api.github.com/repos/apache/kafka/pulls/comments/511726299
body: Is ```BufferedOutputStream``` good to other compression also?
diff_hunk: @@ -119,7 +119,9 @@ public InputStream wrapForInput(ByteBuffer inputBuffer, byte messageVersion, Buf
         @Override
         public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {
             try {
-                return (OutputStream) ZstdConstructors.OUTPUT.invoke(buffer);
+                // Set input buffer (uncompressed) to 16 KB (none by default) to ensure reasonable performance
+                // in cases where the caller passes a small number of bytes to write (potentially a single byte)
+                return new BufferedOutputStream((OutputStream) ZstdConstructors.OUTPUT.invoke(buffer), 16 * 1024);
path: clients/src/main/java/org/apache/kafka/common/record/CompressionType.java
html: https://github.com/apache/kafka/pull/9499#discussion_r511726299
id: 512045768
url: https://api.github.com/repos/apache/kafka/pulls/comments/512045768
body: This should be safe. It is used already in this file to wrap the GZIPOutputStream which also does not buffer uncompressed data prior to compression.
diff_hunk: @@ -119,7 +119,9 @@ public InputStream wrapForInput(ByteBuffer inputBuffer, byte messageVersion, Buf
         @Override
         public OutputStream wrapForOutput(ByteBufferOutputStream buffer, byte messageVersion) {
             try {
-                return (OutputStream) ZstdConstructors.OUTPUT.invoke(buffer);
+                // Set input buffer (uncompressed) to 16 KB (none by default) to ensure reasonable performance
+                // in cases where the caller passes a small number of bytes to write (potentially a single byte)
+                return new BufferedOutputStream((OutputStream) ZstdConstructors.OUTPUT.invoke(buffer), 16 * 1024);
path: clients/src/main/java/org/apache/kafka/common/record/CompressionType.java
html: https://github.com/apache/kafka/pull/9499#discussion_r512045768
id: 512054037
url: https://api.github.com/repos/apache/kafka/pulls/comments/512054037
body: This change means we are using the recycling buffer pool, right? I think we should be passing our own buffer pool.
diff_hunk: @@ -116,7 +116,7 @@ versions += [
   testRetryPlugin: "1.1.6",
   zinc: "1.3.5",
   zookeeper: "3.5.8",
-  zstd: "1.4.5-6"
+  zstd: "1.4.5-8"
path: gradle/dependencies.gradle
html: https://github.com/apache/kafka/pull/9499#discussion_r512054037
id: 512056003
url: https://api.github.com/repos/apache/kafka/pulls/comments/512056003
body: Ah, you explained this in the PR description. Let me think about that.
diff_hunk: @@ -116,7 +116,7 @@ versions += [
   testRetryPlugin: "1.1.6",
   zinc: "1.3.5",
   zookeeper: "3.5.8",
-  zstd: "1.4.5-6"
+  zstd: "1.4.5-8"
path: gradle/dependencies.gradle
html: https://github.com/apache/kafka/pull/9499#discussion_r512056003
pull_request_number: 9499
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9498/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9498/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9498"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9498"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9498/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9498"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/ed00b5793a30f93da1cd68eb731c004de459e49e"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "36493efa59465abee43dcd6d7ec63399947f25d6",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Call super.close when closing rocksdb options. If we don't, then closing a state\r\nstore will leak the underlying rocksdb options object. This is actually somewhat\r\ncostly, since the default options object allocates it's own cache instance.",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9498/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9498/commits",
  "created_at": "2020-10-25T23:55:33Z",
  "diff_url": "https://github.com/apache/kafka/pull/9498.diff",
  "draft": false,
  "head": {
    "label": "rodesai:close-parent-rocksdb-options",
    "ref": "close-parent-rocksdb-options",
    "repo": {
      "archive_url": "https://api.github.com/repos/rodesai/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/rodesai/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/rodesai/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/rodesai/kafka/branches{/branch}",
      "clone_url": "https://github.com/rodesai/kafka.git",
      "collaborators_url": "https://api.github.com/repos/rodesai/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/rodesai/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/rodesai/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/rodesai/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/rodesai/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/rodesai/kafka/contributors",
      "created_at": "2017-12-19T18:08:34Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/rodesai/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/rodesai/kafka/downloads",
      "events_url": "https://api.github.com/repos/rodesai/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/rodesai/kafka/forks",
      "full_name": "rodesai/kafka",
      "git_commits_url": "https://api.github.com/repos/rodesai/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/rodesai/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/rodesai/kafka/git/tags{/sha}",
      "git_url": "git://github.com/rodesai/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/rodesai/kafka/hooks",
      "html_url": "https://github.com/rodesai/kafka",
      "id": 114796522,
      "issue_comment_url": "https://api.github.com/repos/rodesai/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/rodesai/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/rodesai/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/rodesai/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/rodesai/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/rodesai/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/rodesai/kafka/merges",
      "milestones_url": "https://api.github.com/repos/rodesai/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxMTQ3OTY1MjI=",
      "notifications_url": "https://api.github.com/repos/rodesai/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/2610028?v=4",
        "events_url": "https://api.github.com/users/rodesai/events{/privacy}",
        "followers_url": "https://api.github.com/users/rodesai/followers",
        "following_url": "https://api.github.com/users/rodesai/following{/other_user}",
        "gists_url": "https://api.github.com/users/rodesai/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/rodesai",
        "id": 2610028,
        "login": "rodesai",
        "node_id": "MDQ6VXNlcjI2MTAwMjg=",
        "organizations_url": "https://api.github.com/users/rodesai/orgs",
        "received_events_url": "https://api.github.com/users/rodesai/received_events",
        "repos_url": "https://api.github.com/users/rodesai/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/rodesai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rodesai/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/rodesai"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/rodesai/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T23:57:09Z",
      "releases_url": "https://api.github.com/repos/rodesai/kafka/releases{/id}",
      "size": 100489,
      "ssh_url": "git@github.com:rodesai/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/rodesai/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/rodesai/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/rodesai/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/rodesai/kafka/subscription",
      "svn_url": "https://github.com/rodesai/kafka",
      "tags_url": "https://api.github.com/repos/rodesai/kafka/tags",
      "teams_url": "https://api.github.com/repos/rodesai/kafka/teams",
      "trees_url": "https://api.github.com/repos/rodesai/kafka/git/trees{/sha}",
      "updated_at": "2019-04-19T15:53:42Z",
      "url": "https://api.github.com/repos/rodesai/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "ed00b5793a30f93da1cd68eb731c004de459e49e",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/2610028?v=4",
      "events_url": "https://api.github.com/users/rodesai/events{/privacy}",
      "followers_url": "https://api.github.com/users/rodesai/followers",
      "following_url": "https://api.github.com/users/rodesai/following{/other_user}",
      "gists_url": "https://api.github.com/users/rodesai/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rodesai",
      "id": 2610028,
      "login": "rodesai",
      "node_id": "MDQ6VXNlcjI2MTAwMjg=",
      "organizations_url": "https://api.github.com/users/rodesai/orgs",
      "received_events_url": "https://api.github.com/users/rodesai/received_events",
      "repos_url": "https://api.github.com/users/rodesai/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rodesai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rodesai/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rodesai"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9498",
  "id": 509685798,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9498",
  "labels": [
    {
      "color": "63edea",
      "default": false,
      "description": null,
      "id": 820747028,
      "name": "streams",
      "node_id": "MDU6TGFiZWw4MjA3NDcwMjg=",
      "url": "https://api.github.com/repos/apache/kafka/labels/streams"
    }
  ],
  "locked": false,
  "merge_commit_sha": "b39a87c5eed4456210c94811df99fd23cc629b62",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5Njg1Nzk4",
  "number": 9498,
  "patch_url": "https://github.com/apache/kafka/pull/9498.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9498/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/ed00b5793a30f93da1cd68eb731c004de459e49e",
  "title": "MINOR: call super.close() when closing RocksDB options",
  "updated_at": "2020-10-28T01:14:44Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9498",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/2610028?v=4",
    "events_url": "https://api.github.com/users/rodesai/events{/privacy}",
    "followers_url": "https://api.github.com/users/rodesai/followers",
    "following_url": "https://api.github.com/users/rodesai/following{/other_user}",
    "gists_url": "https://api.github.com/users/rodesai/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/rodesai",
    "id": 2610028,
    "login": "rodesai",
    "node_id": "MDQ6VXNlcjI2MTAwMjg=",
    "organizations_url": "https://api.github.com/users/rodesai/orgs",
    "received_events_url": "https://api.github.com/users/rodesai/received_events",
    "repos_url": "https://api.github.com/users/rodesai/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/rodesai/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rodesai/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/rodesai"
  }
}
json_root is_array: false
json_root is_object: true
number: 9498
url: https://api.github.com/repos/apache/kafka/pulls/9498
title: MINOR: call super.close() when closing RocksDB options
body: Call super.close when closing rocksdb options. If we don't, then closing a state
store will leak the underlying rocksdb options object. This is actually somewhat
costly, since the default options object allocates it's own cache instance.
review_comments: https://api.github.com/repos/apache/kafka/pulls/9498/comments
id: 513093711
url: https://api.github.com/repos/apache/kafka/pulls/comments/513093711
body: Are there any ordering constraints to call the three `close` methods?
diff_hunk: @@ -1396,5 +1396,6 @@ public void close() {
         // ColumnFamilyOptions should be closed last
         dbOptions.close();
         columnFamilyOptions.close();
+        super.close();
path: streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter.java
html: https://github.com/apache/kafka/pull/9498#discussion_r513093711
id: 513095994
url: https://api.github.com/repos/apache/kafka/pulls/comments/513095994
body: I don't think it matters in this case as the parent's Options handle isn't actually used. Still, I've maintained the inverse of the initialization order here.
diff_hunk: @@ -1396,5 +1396,6 @@ public void close() {
         // ColumnFamilyOptions should be closed last
         dbOptions.close();
         columnFamilyOptions.close();
+        super.close();
path: streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter.java
html: https://github.com/apache/kafka/pull/9498#discussion_r513095994
id: 513100855
url: https://api.github.com/repos/apache/kafka/pulls/comments/513100855
body: updated the comment
diff_hunk: @@ -1396,5 +1396,6 @@ public void close() {
         // ColumnFamilyOptions should be closed last
         dbOptions.close();
         columnFamilyOptions.close();
+        super.close();
path: streams/src/main/java/org/apache/kafka/streams/state/internals/RocksDBGenericOptionsToDbOptionsColumnFamilyOptionsAdapter.java
html: https://github.com/apache/kafka/pull/9498#discussion_r513100855
pull_request_number: 9498
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9497/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9497/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9497"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9497"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9497/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9497"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/43f788d0c08c0c81f55b9672e96f1044671a7550"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "36493efa59465abee43dcd6d7ec63399947f25d6",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "In the producer config,\r\n\r\ndefault value of `acks` will change to `all`\r\n`enable.idempotence` will change to `true`\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9497/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9497/commits",
  "created_at": "2020-10-25T17:54:52Z",
  "diff_url": "https://github.com/apache/kafka/pull/9497.diff",
  "draft": false,
  "head": {
    "label": "warrenzhu25:10619",
    "ref": "10619",
    "repo": {
      "archive_url": "https://api.github.com/repos/warrenzhu25/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/warrenzhu25/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/warrenzhu25/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/warrenzhu25/kafka/branches{/branch}",
      "clone_url": "https://github.com/warrenzhu25/kafka.git",
      "collaborators_url": "https://api.github.com/repos/warrenzhu25/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/warrenzhu25/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/warrenzhu25/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/warrenzhu25/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/warrenzhu25/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/warrenzhu25/kafka/contributors",
      "created_at": "2017-04-22T00:59:03Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/warrenzhu25/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/warrenzhu25/kafka/downloads",
      "events_url": "https://api.github.com/repos/warrenzhu25/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/warrenzhu25/kafka/forks",
      "full_name": "warrenzhu25/kafka",
      "git_commits_url": "https://api.github.com/repos/warrenzhu25/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/warrenzhu25/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/warrenzhu25/kafka/git/tags{/sha}",
      "git_url": "git://github.com/warrenzhu25/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/warrenzhu25/kafka/hooks",
      "html_url": "https://github.com/warrenzhu25/kafka",
      "id": 89034933,
      "issue_comment_url": "https://api.github.com/repos/warrenzhu25/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/warrenzhu25/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/warrenzhu25/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/warrenzhu25/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/warrenzhu25/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/warrenzhu25/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/warrenzhu25/kafka/merges",
      "milestones_url": "https://api.github.com/repos/warrenzhu25/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk4OTAzNDkzMw==",
      "notifications_url": "https://api.github.com/repos/warrenzhu25/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/1633312?v=4",
        "events_url": "https://api.github.com/users/warrenzhu25/events{/privacy}",
        "followers_url": "https://api.github.com/users/warrenzhu25/followers",
        "following_url": "https://api.github.com/users/warrenzhu25/following{/other_user}",
        "gists_url": "https://api.github.com/users/warrenzhu25/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/warrenzhu25",
        "id": 1633312,
        "login": "warrenzhu25",
        "node_id": "MDQ6VXNlcjE2MzMzMTI=",
        "organizations_url": "https://api.github.com/users/warrenzhu25/orgs",
        "received_events_url": "https://api.github.com/users/warrenzhu25/received_events",
        "repos_url": "https://api.github.com/users/warrenzhu25/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/warrenzhu25/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/warrenzhu25/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/warrenzhu25"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/warrenzhu25/kafka/pulls{/number}",
      "pushed_at": "2020-10-25T17:53:07Z",
      "releases_url": "https://api.github.com/repos/warrenzhu25/kafka/releases{/id}",
      "size": 99261,
      "ssh_url": "git@github.com:warrenzhu25/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/warrenzhu25/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/warrenzhu25/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/warrenzhu25/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/warrenzhu25/kafka/subscription",
      "svn_url": "https://github.com/warrenzhu25/kafka",
      "tags_url": "https://api.github.com/repos/warrenzhu25/kafka/tags",
      "teams_url": "https://api.github.com/repos/warrenzhu25/kafka/teams",
      "trees_url": "https://api.github.com/repos/warrenzhu25/kafka/git/trees{/sha}",
      "updated_at": "2017-04-22T00:59:11Z",
      "url": "https://api.github.com/repos/warrenzhu25/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "43f788d0c08c0c81f55b9672e96f1044671a7550",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/1633312?v=4",
      "events_url": "https://api.github.com/users/warrenzhu25/events{/privacy}",
      "followers_url": "https://api.github.com/users/warrenzhu25/followers",
      "following_url": "https://api.github.com/users/warrenzhu25/following{/other_user}",
      "gists_url": "https://api.github.com/users/warrenzhu25/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/warrenzhu25",
      "id": 1633312,
      "login": "warrenzhu25",
      "node_id": "MDQ6VXNlcjE2MzMzMTI=",
      "organizations_url": "https://api.github.com/users/warrenzhu25/orgs",
      "received_events_url": "https://api.github.com/users/warrenzhu25/received_events",
      "repos_url": "https://api.github.com/users/warrenzhu25/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/warrenzhu25/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/warrenzhu25/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/warrenzhu25"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9497",
  "id": 509633041,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9497",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "9434dcf6262645c0db5a317c5a2f54eaf629279e",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5NjMzMDQx",
  "number": 9497,
  "patch_url": "https://github.com/apache/kafka/pull/9497.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9497/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/43f788d0c08c0c81f55b9672e96f1044671a7550",
  "title": "KAFKA-10619: Producer will enable idempotence and acks all by default",
  "updated_at": "2020-10-25T17:54:52Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9497",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/1633312?v=4",
    "events_url": "https://api.github.com/users/warrenzhu25/events{/privacy}",
    "followers_url": "https://api.github.com/users/warrenzhu25/followers",
    "following_url": "https://api.github.com/users/warrenzhu25/following{/other_user}",
    "gists_url": "https://api.github.com/users/warrenzhu25/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/warrenzhu25",
    "id": 1633312,
    "login": "warrenzhu25",
    "node_id": "MDQ6VXNlcjE2MzMzMTI=",
    "organizations_url": "https://api.github.com/users/warrenzhu25/orgs",
    "received_events_url": "https://api.github.com/users/warrenzhu25/received_events",
    "repos_url": "https://api.github.com/users/warrenzhu25/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/warrenzhu25/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/warrenzhu25/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/warrenzhu25"
  }
}
json_root is_array: false
json_root is_object: true
number: 9497
url: https://api.github.com/repos/apache/kafka/pulls/9497
title: KAFKA-10619: Producer will enable idempotence and acks all by default
body: In the producer config,

default value of `acks` will change to `all`
`enable.idempotence` will change to `true`

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9497/comments
pull_request_number: 9497
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9495/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9495/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9495"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9495"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9495/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9495"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/f9ffcd7d925cc9e8a21eb8b03cf1bf047200ecd5"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "If there is any exception occurred in the custom implementation of client trust verification (i.e. using security.provider), the inner exception is suppressed or hidden and not logged to the log file...\r\n\r\n@junrao @mjsax @guozhangwang",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9495/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9495/commits",
  "created_at": "2020-10-24T19:35:49Z",
  "diff_url": "https://github.com/apache/kafka/pull/9495.diff",
  "draft": false,
  "head": {
    "label": "senthilm-ms:issues/ssl_expose_error",
    "ref": "issues/ssl_expose_error",
    "repo": {
      "archive_url": "https://api.github.com/repos/senthilm-ms/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/senthilm-ms/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/senthilm-ms/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/senthilm-ms/kafka/branches{/branch}",
      "clone_url": "https://github.com/senthilm-ms/kafka.git",
      "collaborators_url": "https://api.github.com/repos/senthilm-ms/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/senthilm-ms/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/senthilm-ms/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/senthilm-ms/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/senthilm-ms/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/senthilm-ms/kafka/contributors",
      "created_at": "2019-10-11T18:59:41Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/senthilm-ms/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/senthilm-ms/kafka/downloads",
      "events_url": "https://api.github.com/repos/senthilm-ms/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/senthilm-ms/kafka/forks",
      "full_name": "senthilm-ms/kafka",
      "git_commits_url": "https://api.github.com/repos/senthilm-ms/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/senthilm-ms/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/senthilm-ms/kafka/git/tags{/sha}",
      "git_url": "git://github.com/senthilm-ms/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/senthilm-ms/kafka/hooks",
      "html_url": "https://github.com/senthilm-ms/kafka",
      "id": 214509798,
      "issue_comment_url": "https://api.github.com/repos/senthilm-ms/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/senthilm-ms/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/senthilm-ms/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/senthilm-ms/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/senthilm-ms/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/senthilm-ms/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/senthilm-ms/kafka/merges",
      "milestones_url": "https://api.github.com/repos/senthilm-ms/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMTQ1MDk3OTg=",
      "notifications_url": "https://api.github.com/repos/senthilm-ms/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/55106539?v=4",
        "events_url": "https://api.github.com/users/senthilm-ms/events{/privacy}",
        "followers_url": "https://api.github.com/users/senthilm-ms/followers",
        "following_url": "https://api.github.com/users/senthilm-ms/following{/other_user}",
        "gists_url": "https://api.github.com/users/senthilm-ms/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/senthilm-ms",
        "id": 55106539,
        "login": "senthilm-ms",
        "node_id": "MDQ6VXNlcjU1MTA2NTM5",
        "organizations_url": "https://api.github.com/users/senthilm-ms/orgs",
        "received_events_url": "https://api.github.com/users/senthilm-ms/received_events",
        "repos_url": "https://api.github.com/users/senthilm-ms/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/senthilm-ms/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/senthilm-ms/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/senthilm-ms"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/senthilm-ms/kafka/pulls{/number}",
      "pushed_at": "2020-10-24T19:34:19Z",
      "releases_url": "https://api.github.com/repos/senthilm-ms/kafka/releases{/id}",
      "size": 105456,
      "ssh_url": "git@github.com:senthilm-ms/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/senthilm-ms/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/senthilm-ms/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/senthilm-ms/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/senthilm-ms/kafka/subscription",
      "svn_url": "https://github.com/senthilm-ms/kafka",
      "tags_url": "https://api.github.com/repos/senthilm-ms/kafka/tags",
      "teams_url": "https://api.github.com/repos/senthilm-ms/kafka/teams",
      "trees_url": "https://api.github.com/repos/senthilm-ms/kafka/git/trees{/sha}",
      "updated_at": "2020-10-24T18:43:56Z",
      "url": "https://api.github.com/repos/senthilm-ms/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "f9ffcd7d925cc9e8a21eb8b03cf1bf047200ecd5",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/55106539?v=4",
      "events_url": "https://api.github.com/users/senthilm-ms/events{/privacy}",
      "followers_url": "https://api.github.com/users/senthilm-ms/followers",
      "following_url": "https://api.github.com/users/senthilm-ms/following{/other_user}",
      "gists_url": "https://api.github.com/users/senthilm-ms/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/senthilm-ms",
      "id": 55106539,
      "login": "senthilm-ms",
      "node_id": "MDQ6VXNlcjU1MTA2NTM5",
      "organizations_url": "https://api.github.com/users/senthilm-ms/orgs",
      "received_events_url": "https://api.github.com/users/senthilm-ms/received_events",
      "repos_url": "https://api.github.com/users/senthilm-ms/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/senthilm-ms/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/senthilm-ms/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/senthilm-ms"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9495",
  "id": 509483395,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9495",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "2378d65b94dfe785fabbd946330c1259586b7356",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5NDgzMzk1",
  "number": 9495,
  "patch_url": "https://github.com/apache/kafka/pull/9495.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9495/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/f9ffcd7d925cc9e8a21eb8b03cf1bf047200ecd5",
  "title": "KAFKA-10642: Expose the real stack trace if any exception occurred during SSL Client Trust Verification in extension",
  "updated_at": "2020-10-26T23:41:22Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9495",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/55106539?v=4",
    "events_url": "https://api.github.com/users/senthilm-ms/events{/privacy}",
    "followers_url": "https://api.github.com/users/senthilm-ms/followers",
    "following_url": "https://api.github.com/users/senthilm-ms/following{/other_user}",
    "gists_url": "https://api.github.com/users/senthilm-ms/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/senthilm-ms",
    "id": 55106539,
    "login": "senthilm-ms",
    "node_id": "MDQ6VXNlcjU1MTA2NTM5",
    "organizations_url": "https://api.github.com/users/senthilm-ms/orgs",
    "received_events_url": "https://api.github.com/users/senthilm-ms/received_events",
    "repos_url": "https://api.github.com/users/senthilm-ms/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/senthilm-ms/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/senthilm-ms/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/senthilm-ms"
  }
}
json_root is_array: false
json_root is_object: true
number: 9495
url: https://api.github.com/repos/apache/kafka/pulls/9495
title: KAFKA-10642: Expose the real stack trace if any exception occurred during SSL Client Trust Verification in extension
body: If there is any exception occurred in the custom implementation of client trust verification (i.e. using security.provider), the inner exception is suppressed or hidden and not logged to the log file...

@junrao @mjsax @guozhangwang
review_comments: https://api.github.com/repos/apache/kafka/pulls/9495/comments
pull_request_number: 9495
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9494/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9494/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9494"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9494"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9494/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9494"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/6e7b857a39e33884073d5d999b010d0b99f244fb"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "When using ACL Command with SSL mode, the process is not terminating after successful ACL operation.",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9494/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9494/commits",
  "created_at": "2020-10-24T19:05:48Z",
  "diff_url": "https://github.com/apache/kafka/pull/9494.diff",
  "draft": false,
  "head": {
    "label": "senthilm-ms:issues/acl_cmd_exit",
    "ref": "issues/acl_cmd_exit",
    "repo": {
      "archive_url": "https://api.github.com/repos/senthilm-ms/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/senthilm-ms/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/senthilm-ms/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/senthilm-ms/kafka/branches{/branch}",
      "clone_url": "https://github.com/senthilm-ms/kafka.git",
      "collaborators_url": "https://api.github.com/repos/senthilm-ms/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/senthilm-ms/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/senthilm-ms/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/senthilm-ms/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/senthilm-ms/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/senthilm-ms/kafka/contributors",
      "created_at": "2019-10-11T18:59:41Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/senthilm-ms/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/senthilm-ms/kafka/downloads",
      "events_url": "https://api.github.com/repos/senthilm-ms/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/senthilm-ms/kafka/forks",
      "full_name": "senthilm-ms/kafka",
      "git_commits_url": "https://api.github.com/repos/senthilm-ms/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/senthilm-ms/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/senthilm-ms/kafka/git/tags{/sha}",
      "git_url": "git://github.com/senthilm-ms/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/senthilm-ms/kafka/hooks",
      "html_url": "https://github.com/senthilm-ms/kafka",
      "id": 214509798,
      "issue_comment_url": "https://api.github.com/repos/senthilm-ms/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/senthilm-ms/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/senthilm-ms/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/senthilm-ms/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/senthilm-ms/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/senthilm-ms/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/senthilm-ms/kafka/merges",
      "milestones_url": "https://api.github.com/repos/senthilm-ms/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMTQ1MDk3OTg=",
      "notifications_url": "https://api.github.com/repos/senthilm-ms/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/55106539?v=4",
        "events_url": "https://api.github.com/users/senthilm-ms/events{/privacy}",
        "followers_url": "https://api.github.com/users/senthilm-ms/followers",
        "following_url": "https://api.github.com/users/senthilm-ms/following{/other_user}",
        "gists_url": "https://api.github.com/users/senthilm-ms/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/senthilm-ms",
        "id": 55106539,
        "login": "senthilm-ms",
        "node_id": "MDQ6VXNlcjU1MTA2NTM5",
        "organizations_url": "https://api.github.com/users/senthilm-ms/orgs",
        "received_events_url": "https://api.github.com/users/senthilm-ms/received_events",
        "repos_url": "https://api.github.com/users/senthilm-ms/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/senthilm-ms/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/senthilm-ms/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/senthilm-ms"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/senthilm-ms/kafka/pulls{/number}",
      "pushed_at": "2020-10-24T19:34:19Z",
      "releases_url": "https://api.github.com/repos/senthilm-ms/kafka/releases{/id}",
      "size": 105456,
      "ssh_url": "git@github.com:senthilm-ms/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/senthilm-ms/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/senthilm-ms/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/senthilm-ms/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/senthilm-ms/kafka/subscription",
      "svn_url": "https://github.com/senthilm-ms/kafka",
      "tags_url": "https://api.github.com/repos/senthilm-ms/kafka/tags",
      "teams_url": "https://api.github.com/repos/senthilm-ms/kafka/teams",
      "trees_url": "https://api.github.com/repos/senthilm-ms/kafka/git/trees{/sha}",
      "updated_at": "2020-10-24T18:43:56Z",
      "url": "https://api.github.com/repos/senthilm-ms/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "6e7b857a39e33884073d5d999b010d0b99f244fb",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/55106539?v=4",
      "events_url": "https://api.github.com/users/senthilm-ms/events{/privacy}",
      "followers_url": "https://api.github.com/users/senthilm-ms/followers",
      "following_url": "https://api.github.com/users/senthilm-ms/following{/other_user}",
      "gists_url": "https://api.github.com/users/senthilm-ms/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/senthilm-ms",
      "id": 55106539,
      "login": "senthilm-ms",
      "node_id": "MDQ6VXNlcjU1MTA2NTM5",
      "organizations_url": "https://api.github.com/users/senthilm-ms/orgs",
      "received_events_url": "https://api.github.com/users/senthilm-ms/received_events",
      "repos_url": "https://api.github.com/users/senthilm-ms/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/senthilm-ms/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/senthilm-ms/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/senthilm-ms"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9494",
  "id": 509479363,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9494",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "d8e37788f872d541c308b88d909ae96c4321029e",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5NDc5MzYz",
  "number": 9494,
  "patch_url": "https://github.com/apache/kafka/pull/9494.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9494/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/6e7b857a39e33884073d5d999b010d0b99f244fb",
  "title": "KAFKA-10641: ACL Command Exit properly always with error code",
  "updated_at": "2020-10-24T19:07:28Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9494",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/55106539?v=4",
    "events_url": "https://api.github.com/users/senthilm-ms/events{/privacy}",
    "followers_url": "https://api.github.com/users/senthilm-ms/followers",
    "following_url": "https://api.github.com/users/senthilm-ms/following{/other_user}",
    "gists_url": "https://api.github.com/users/senthilm-ms/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/senthilm-ms",
    "id": 55106539,
    "login": "senthilm-ms",
    "node_id": "MDQ6VXNlcjU1MTA2NTM5",
    "organizations_url": "https://api.github.com/users/senthilm-ms/orgs",
    "received_events_url": "https://api.github.com/users/senthilm-ms/received_events",
    "repos_url": "https://api.github.com/users/senthilm-ms/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/senthilm-ms/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/senthilm-ms/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/senthilm-ms"
  }
}
json_root is_array: false
json_root is_object: true
number: 9494
url: https://api.github.com/repos/apache/kafka/pulls/9494
title: KAFKA-10641: ACL Command Exit properly always with error code
body: When using ACL Command with SSL mode, the process is not terminating after successful ACL operation.
review_comments: https://api.github.com/repos/apache/kafka/pulls/9494/comments
pull_request_number: 9494
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9493/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9493/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9493"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9493"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9493/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9493"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/13d94762a0dc2ec545117dc2cd55df1947f616fc"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This PR replaces #9470 as I needed to do some cleanup of my repo and break this into its own branch so it did not block everything else. Also I have created Jira request [KAFKA-10640](https://issues.apache.org/jira/browse/KAFKA-10640) to cover a requirement for this change.\r\n\r\n---\r\n\r\nI have added support for the `Cast` and `ReplaceField` transformations to recursively traverse the structure of messages (both with and without a schema) and perform the Cast or Replace operations on matching child primitive fields if they are found at any level nested within the structure.  Nested parents of all currently-supported Connect complex types should be supported (Map, Array, or Struct) but most of the primitive field handling is still similar to before (the lowest level within the nesting would normally be a Struct when using Schema or Map when schemaless).\r\n\r\nThis behavior can be controlled by a new configuration parameter called `recursive` for both transformations.  The default setting is **false** so any existing connectors would not be impacted -- you must set the parameter to **true** in order for the child complex types to be traversed.  Otherwise, the default behavior should be the same as before.\r\n\r\nI have also cleaned up the Config names a bit to match some of the other transformations (namely, using a class interface called `ConfigName` which can be accessed statically), it is a bit nicer to work with and brings a little more consistency across the different built-in transforms.\r\n\r\nSince this is more than just a trivial change, I have created a few new unit tests, some of them quite complex, to try and make sure that everything is working ok compared to before.  I have also been running both of these as custom SMTs against data in our production kafka cluster and used some learnings there to iron out a few issues.  I have had tens of millions of events actually using this updated code so I think/hope the changes are pretty well-tested but welcome if there is some kind of feedback or concern with them!\r\n\r\nHere is a full list of everything that I have changed:\r\n\r\n### Cast\r\n\r\n#### Added new Config Parameters:\r\n- `recursive` optional boolean, default = `false`\r\n- `complex.string.as.json` optional boolean, default = `false`\r\n\r\n#### Changes:\r\n\r\n- Created new public static interface `ConfigName` and marked the old public static string `SPEC_CONFIG` as deprecated (so it can still be used for a while until it is removed later).\r\n- Added new `ConfigName` for `SPEC`, `RECURSIVE`, and `COMPLEX_STRING_AS_JSON`\r\n- Created new interface `ConfigDefault` to provide an easy way to set and consume default values for these two new optional configuration parameters.\r\n- And then of course defined and set up the config parameters for usage within the rest of the class.\r\n- Added ARRAY, MAP, and STRUCT as valid types to convert FROM (but the only thing they can convert TO is STRING, otherwise if your `SPEC` tries to convert them to something else it will throw a `DataException`).  Before you would receive a `DataException` if you tried to include a complex type in the `SPEC` but now at least you are given the option to Cast them to a string!\r\n- Refactored the `apply...` methods so that they will call a child method that recursively builds the structure of the schema or value depending if the user sets the `recursive` config parameter to true (otherwise it should basically work the same as before -- look at everything that is at the top level of the structure and then return).  There are new methods for recursively handling different type of structures but in the end the same basic flow happens at each child level as what was happening before (`for each field in fields...`). \r\n   - However, one change in the design is that when building the new Value, instead of looping through each field from the new schema and performing an `oldstruct.get(oldfield)`, it instead will loop again through each field in the old schema.  This is so that nested primitive conversions happen correctly and what happens in the Value should be exactly the same thing that happened in the Schema.\r\n- When a child schema is created as part of the recursion, it is also added to the `schemaUpdateCache`, and the recursive methods call `getOrBuildUpdatedSchema` so they should fetch it from the cast in case it has already been converted.  This is the same when child values are converted -- they should fetch their new child schemas from the cache instead of building them again.\r\n- Added usage of an instance of `JsonConverter` and `JsonDeserializer` if you wish to have the complex types toString come out in a JSON text format instead of the Java object's toString() implementation.  This is helpful for scenarios for example like using a JdbcSinkConnector where you have an array of structs as one field in your source, you can put these values into a database table as a blob of JSON text, then parse these values as JSON (for example PostgreSQL has loads of really good JSON parsing).  This behavior is controlled by the new configuration parameter `complex.string.as.json` but again by default it is set to false (so you have to set to true in order to use this).\r\n- I also changed `castValueToType` from `private static` to `private`.  This was so that we can allow a check in this method on the instance value of our new `complex.string.as.json` configuration parameter and decide to call `castToJsonString` instead of the old `castToString` method.\r\n  - I realize this one can maybe be a bit controversial, and there were several options I considered.  First, however, I tried to examine any public static method or property of any kind and see if anything ever makes use of `castValueToType` and could not see any (please mention if you see something I missed).  So a change from private static to private in this case seems very minor and should not impact any functionality -- nothing else can see or use it anyway outside of this class itself.\r\n  - Another option is possibly a bit more like the `TimestampConverter` transform, where they have created a private instance of a `Config` subclass and then pass the entire instance to some of the static methods.  But I think that change would have to \"touch\"  a lot more places, and given the point above (I did not see where it was actually used anywhere from anything public static ) this seemed like a bit too much of a rebuild.\r\n  - Also usage of this `castToJsonString` with using the `JsonConverter` and `JsonDeserializer` could be done a few other ways... but this was the one that I felt tried to use existing functionalities within Connect and was the \"cleanest\" looking that I could initially come up with from a code perspective.  And the reason to use a single private instance of the classes was to try and save a bit on resources -- it is possible that you will have multiple Json string conversions even within one record so I thought it was better to only have one instance we can re-use over and over.\r\n- Changed the log level for the Cast log message from Trace to Debug (this seems like something you definitely want to see in Debug and not just Trace!).\r\n- Added new test cases for casting Arrays and Maps to string, to JSON Strings, as well as for working with different types of recursive records (both with and without schema).  In these tests, I found that a lot of the weird issues only happen once you go a few levels deep so I have made the tests a little more complicated to ensure that everything was working properly even with multiple nested levels.\r\n\r\n#### Example Usage\r\n\r\n```\r\ncurl -X PUT -H \"Content-Type: application/json\" --data '{\r\n  \"connector.class\": \"FileStreamSink\",\r\n  \"topics\": \"test\",\r\n  \"file\": \"/tmp/cast.txt\",\r\n  \"transforms\": \"cast\",\r\n  \"transforms.cast.type\": \"org.apache.kafka.connect.transforms.Cast$Value\",\r\n  \"transforms.cast.spec\": \"child_int:string,child_array_of_structs:string\",\r\n  \"transforms.cast.recursive\": \"true\",\r\n  \"transforms.cast.complex.string.as.json\": \"true\"\r\n}' http://localhost:8083/connectors/filestreamsink_cast_test/config\r\n```\r\n\r\n\r\n### ReplaceField\r\n\r\n#### Added new Config Parameters:\r\n- `recursive` optional boolean, default = `false`\r\n\r\n#### Changes:\r\n\r\n- A lot of the changes here are very similar to what was done in `Cast`.  In fact, even before my changes, the flow of these two transforms was actually almost identical, so it worked quite well to do them both like this at the same time and they are easily used together in transform chains within Connect.\r\n- Namely, there is a new `recursive` configuration parameter and the `apply...` methods have been updated to recursively call methods to build the new target schema and values.  A lot of the code is exactly the same so you should even find direct copy-paste from `Cast` to here and using a lot of the same private object names, methods, etc.\r\n   - Note also that the pattern follows the same as with `Cast` -- looping through the old schema and converted child values based on the old structure instead of first creating a new schema and then getting the old field.  This new flow also means that the `reverseRenamed` method and its `reverseRenames` map are no longer needed either (but I left them in for now).\r\n- Added a logger instance and added Debug-level logging for a few different events, such as when a field is excluded or included, or when it is renamed.  So some of the methods were refactored a bit in order to provide this logging (for example the `filter` and `renamed` methods).\r\n- I also added support when using `renames` for a \"contains exactly one of\" kind of scenario.  What I mean by this is that in your schema, you have several fields which you know by design that only one of them will have a value, and when that one has a value, all of the rest within that group will be null.  The change to this transform now allows you to specify a target name more than one time, but when the value transform is occurring, if more than one of them have a value then it will throw a `DataException`.  Before, the transform would throw a `DataException` when building the new schema based on the `renames` config (trying to add a duplicate field to the schema) but instead now this check happens when building the updated value instead.\r\n- Also added a few unit tests to handle new scenarios and recursive operation (both with and without schemas).\r\n\r\n#### Example Usage\r\n\r\n```\r\ncurl -X PUT -H \"Content-Type: application/json\" --data '{\r\n  \"connector.class\": \"FileStreamSink\",\r\n  \"topics\": \"test\",\r\n  \"file\": \"/tmp/replace.txt\",\r\n  \"transforms\": \"replace\",\r\n  \"transforms.replace.type\": \"org.apache.kafka.connect.transforms.ReplaceField$Value\",\r\n  \"transforms.replace.renames\": \"child_value_one:child_value,child_value_two:child_value\",\r\n  \"transforms.replace.recursive\": \"true\",\r\n}' http://localhost:8083/connectors/filestreamsink_replace_test/config\r\n```\r\n\r\nI hope this covers everything but if you have any questions or concerns then please feel free to ask!\r\n\r\n\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9493/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9493/commits",
  "created_at": "2020-10-24T17:45:21Z",
  "diff_url": "https://github.com/apache/kafka/pull/9493.diff",
  "draft": false,
  "head": {
    "label": "joshuagrisham:KAFKA-10640",
    "ref": "KAFKA-10640",
    "repo": {
      "archive_url": "https://api.github.com/repos/joshuagrisham/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/joshuagrisham/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/joshuagrisham/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/joshuagrisham/kafka/branches{/branch}",
      "clone_url": "https://github.com/joshuagrisham/kafka.git",
      "collaborators_url": "https://api.github.com/repos/joshuagrisham/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/joshuagrisham/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/joshuagrisham/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/joshuagrisham/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/joshuagrisham/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/joshuagrisham/kafka/contributors",
      "created_at": "2020-10-24T13:49:37Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/joshuagrisham/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/joshuagrisham/kafka/downloads",
      "events_url": "https://api.github.com/repos/joshuagrisham/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/joshuagrisham/kafka/forks",
      "full_name": "joshuagrisham/kafka",
      "git_commits_url": "https://api.github.com/repos/joshuagrisham/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/joshuagrisham/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/joshuagrisham/kafka/git/tags{/sha}",
      "git_url": "git://github.com/joshuagrisham/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/joshuagrisham/kafka/hooks",
      "html_url": "https://github.com/joshuagrisham/kafka",
      "id": 306893753,
      "issue_comment_url": "https://api.github.com/repos/joshuagrisham/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/joshuagrisham/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/joshuagrisham/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/joshuagrisham/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/joshuagrisham/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/joshuagrisham/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/joshuagrisham/kafka/merges",
      "milestones_url": "https://api.github.com/repos/joshuagrisham/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDY4OTM3NTM=",
      "notifications_url": "https://api.github.com/repos/joshuagrisham/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/18266314?v=4",
        "events_url": "https://api.github.com/users/joshuagrisham/events{/privacy}",
        "followers_url": "https://api.github.com/users/joshuagrisham/followers",
        "following_url": "https://api.github.com/users/joshuagrisham/following{/other_user}",
        "gists_url": "https://api.github.com/users/joshuagrisham/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/joshuagrisham",
        "id": 18266314,
        "login": "joshuagrisham",
        "node_id": "MDQ6VXNlcjE4MjY2MzE0",
        "organizations_url": "https://api.github.com/users/joshuagrisham/orgs",
        "received_events_url": "https://api.github.com/users/joshuagrisham/received_events",
        "repos_url": "https://api.github.com/users/joshuagrisham/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/joshuagrisham/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/joshuagrisham/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/joshuagrisham"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/joshuagrisham/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T07:59:50Z",
      "releases_url": "https://api.github.com/repos/joshuagrisham/kafka/releases{/id}",
      "size": 107926,
      "ssh_url": "git@github.com:joshuagrisham/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/joshuagrisham/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/joshuagrisham/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/joshuagrisham/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/joshuagrisham/kafka/subscription",
      "svn_url": "https://github.com/joshuagrisham/kafka",
      "tags_url": "https://api.github.com/repos/joshuagrisham/kafka/tags",
      "teams_url": "https://api.github.com/repos/joshuagrisham/kafka/teams",
      "trees_url": "https://api.github.com/repos/joshuagrisham/kafka/git/trees{/sha}",
      "updated_at": "2020-10-24T13:49:39Z",
      "url": "https://api.github.com/repos/joshuagrisham/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "13d94762a0dc2ec545117dc2cd55df1947f616fc",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/18266314?v=4",
      "events_url": "https://api.github.com/users/joshuagrisham/events{/privacy}",
      "followers_url": "https://api.github.com/users/joshuagrisham/followers",
      "following_url": "https://api.github.com/users/joshuagrisham/following{/other_user}",
      "gists_url": "https://api.github.com/users/joshuagrisham/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/joshuagrisham",
      "id": 18266314,
      "login": "joshuagrisham",
      "node_id": "MDQ6VXNlcjE4MjY2MzE0",
      "organizations_url": "https://api.github.com/users/joshuagrisham/orgs",
      "received_events_url": "https://api.github.com/users/joshuagrisham/received_events",
      "repos_url": "https://api.github.com/users/joshuagrisham/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/joshuagrisham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joshuagrisham/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/joshuagrisham"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9493",
  "id": 509468126,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9493",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "720964462e4f446092a66d0a8a355798a4777bcb",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5NDY4MTI2",
  "number": 9493,
  "patch_url": "https://github.com/apache/kafka/pull/9493.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9493/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/13d94762a0dc2ec545117dc2cd55df1947f616fc",
  "title": "KAFKA-10640: Add recursive support to Connect Cast and ReplaceField transforms, and support for casting complex types to either a native or JSON string.",
  "updated_at": "2020-10-26T09:37:54Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9493",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/18266314?v=4",
    "events_url": "https://api.github.com/users/joshuagrisham/events{/privacy}",
    "followers_url": "https://api.github.com/users/joshuagrisham/followers",
    "following_url": "https://api.github.com/users/joshuagrisham/following{/other_user}",
    "gists_url": "https://api.github.com/users/joshuagrisham/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/joshuagrisham",
    "id": 18266314,
    "login": "joshuagrisham",
    "node_id": "MDQ6VXNlcjE4MjY2MzE0",
    "organizations_url": "https://api.github.com/users/joshuagrisham/orgs",
    "received_events_url": "https://api.github.com/users/joshuagrisham/received_events",
    "repos_url": "https://api.github.com/users/joshuagrisham/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/joshuagrisham/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/joshuagrisham/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/joshuagrisham"
  }
}
json_root is_array: false
json_root is_object: true
number: 9493
url: https://api.github.com/repos/apache/kafka/pulls/9493
title: KAFKA-10640: Add recursive support to Connect Cast and ReplaceField transforms, and support for casting complex types to either a native or JSON string.
body: This PR replaces #9470 as I needed to do some cleanup of my repo and break this into its own branch so it did not block everything else. Also I have created Jira request [KAFKA-10640](https://issues.apache.org/jira/browse/KAFKA-10640) to cover a requirement for this change.

---

I have added support for the `Cast` and `ReplaceField` transformations to recursively traverse the structure of messages (both with and without a schema) and perform the Cast or Replace operations on matching child primitive fields if they are found at any level nested within the structure.  Nested parents of all currently-supported Connect complex types should be supported (Map, Array, or Struct) but most of the primitive field handling is still similar to before (the lowest level within the nesting would normally be a Struct when using Schema or Map when schemaless).

This behavior can be controlled by a new configuration parameter called `recursive` for both transformations.  The default setting is **false** so any existing connectors would not be impacted -- you must set the parameter to **true** in order for the child complex types to be traversed.  Otherwise, the default behavior should be the same as before.

I have also cleaned up the Config names a bit to match some of the other transformations (namely, using a class interface called `ConfigName` which can be accessed statically), it is a bit nicer to work with and brings a little more consistency across the different built-in transforms.

Since this is more than just a trivial change, I have created a few new unit tests, some of them quite complex, to try and make sure that everything is working ok compared to before.  I have also been running both of these as custom SMTs against data in our production kafka cluster and used some learnings there to iron out a few issues.  I have had tens of millions of events actually using this updated code so I think/hope the changes are pretty well-tested but welcome if there is some kind of feedback or concern with them!

Here is a full list of everything that I have changed:

### Cast

#### Added new Config Parameters:
- `recursive` optional boolean, default = `false`
- `complex.string.as.json` optional boolean, default = `false`

#### Changes:

- Created new public static interface `ConfigName` and marked the old public static string `SPEC_CONFIG` as deprecated (so it can still be used for a while until it is removed later).
- Added new `ConfigName` for `SPEC`, `RECURSIVE`, and `COMPLEX_STRING_AS_JSON`
- Created new interface `ConfigDefault` to provide an easy way to set and consume default values for these two new optional configuration parameters.
- And then of course defined and set up the config parameters for usage within the rest of the class.
- Added ARRAY, MAP, and STRUCT as valid types to convert FROM (but the only thing they can convert TO is STRING, otherwise if your `SPEC` tries to convert them to something else it will throw a `DataException`).  Before you would receive a `DataException` if you tried to include a complex type in the `SPEC` but now at least you are given the option to Cast them to a string!
- Refactored the `apply...` methods so that they will call a child method that recursively builds the structure of the schema or value depending if the user sets the `recursive` config parameter to true (otherwise it should basically work the same as before -- look at everything that is at the top level of the structure and then return).  There are new methods for recursively handling different type of structures but in the end the same basic flow happens at each child level as what was happening before (`for each field in fields...`). 
   - However, one change in the design is that when building the new Value, instead of looping through each field from the new schema and performing an `oldstruct.get(oldfield)`, it instead will loop again through each field in the old schema.  This is so that nested primitive conversions happen correctly and what happens in the Value should be exactly the same thing that happened in the Schema.
- When a child schema is created as part of the recursion, it is also added to the `schemaUpdateCache`, and the recursive methods call `getOrBuildUpdatedSchema` so they should fetch it from the cast in case it has already been converted.  This is the same when child values are converted -- they should fetch their new child schemas from the cache instead of building them again.
- Added usage of an instance of `JsonConverter` and `JsonDeserializer` if you wish to have the complex types toString come out in a JSON text format instead of the Java object's toString() implementation.  This is helpful for scenarios for example like using a JdbcSinkConnector where you have an array of structs as one field in your source, you can put these values into a database table as a blob of JSON text, then parse these values as JSON (for example PostgreSQL has loads of really good JSON parsing).  This behavior is controlled by the new configuration parameter `complex.string.as.json` but again by default it is set to false (so you have to set to true in order to use this).
- I also changed `castValueToType` from `private static` to `private`.  This was so that we can allow a check in this method on the instance value of our new `complex.string.as.json` configuration parameter and decide to call `castToJsonString` instead of the old `castToString` method.
  - I realize this one can maybe be a bit controversial, and there were several options I considered.  First, however, I tried to examine any public static method or property of any kind and see if anything ever makes use of `castValueToType` and could not see any (please mention if you see something I missed).  So a change from private static to private in this case seems very minor and should not impact any functionality -- nothing else can see or use it anyway outside of this class itself.
  - Another option is possibly a bit more like the `TimestampConverter` transform, where they have created a private instance of a `Config` subclass and then pass the entire instance to some of the static methods.  But I think that change would have to "touch"  a lot more places, and given the point above (I did not see where it was actually used anywhere from anything public static ) this seemed like a bit too much of a rebuild.
  - Also usage of this `castToJsonString` with using the `JsonConverter` and `JsonDeserializer` could be done a few other ways... but this was the one that I felt tried to use existing functionalities within Connect and was the "cleanest" looking that I could initially come up with from a code perspective.  And the reason to use a single private instance of the classes was to try and save a bit on resources -- it is possible that you will have multiple Json string conversions even within one record so I thought it was better to only have one instance we can re-use over and over.
- Changed the log level for the Cast log message from Trace to Debug (this seems like something you definitely want to see in Debug and not just Trace!).
- Added new test cases for casting Arrays and Maps to string, to JSON Strings, as well as for working with different types of recursive records (both with and without schema).  In these tests, I found that a lot of the weird issues only happen once you go a few levels deep so I have made the tests a little more complicated to ensure that everything was working properly even with multiple nested levels.

#### Example Usage

```
curl -X PUT -H "Content-Type: application/json" --data '{
  "connector.class": "FileStreamSink",
  "topics": "test",
  "file": "/tmp/cast.txt",
  "transforms": "cast",
  "transforms.cast.type": "org.apache.kafka.connect.transforms.Cast$Value",
  "transforms.cast.spec": "child_int:string,child_array_of_structs:string",
  "transforms.cast.recursive": "true",
  "transforms.cast.complex.string.as.json": "true"
}' http://localhost:8083/connectors/filestreamsink_cast_test/config
```


### ReplaceField

#### Added new Config Parameters:
- `recursive` optional boolean, default = `false`

#### Changes:

- A lot of the changes here are very similar to what was done in `Cast`.  In fact, even before my changes, the flow of these two transforms was actually almost identical, so it worked quite well to do them both like this at the same time and they are easily used together in transform chains within Connect.
- Namely, there is a new `recursive` configuration parameter and the `apply...` methods have been updated to recursively call methods to build the new target schema and values.  A lot of the code is exactly the same so you should even find direct copy-paste from `Cast` to here and using a lot of the same private object names, methods, etc.
   - Note also that the pattern follows the same as with `Cast` -- looping through the old schema and converted child values based on the old structure instead of first creating a new schema and then getting the old field.  This new flow also means that the `reverseRenamed` method and its `reverseRenames` map are no longer needed either (but I left them in for now).
- Added a logger instance and added Debug-level logging for a few different events, such as when a field is excluded or included, or when it is renamed.  So some of the methods were refactored a bit in order to provide this logging (for example the `filter` and `renamed` methods).
- I also added support when using `renames` for a "contains exactly one of" kind of scenario.  What I mean by this is that in your schema, you have several fields which you know by design that only one of them will have a value, and when that one has a value, all of the rest within that group will be null.  The change to this transform now allows you to specify a target name more than one time, but when the value transform is occurring, if more than one of them have a value then it will throw a `DataException`.  Before, the transform would throw a `DataException` when building the new schema based on the `renames` config (trying to add a duplicate field to the schema) but instead now this check happens when building the updated value instead.
- Also added a few unit tests to handle new scenarios and recursive operation (both with and without schemas).

#### Example Usage

```
curl -X PUT -H "Content-Type: application/json" --data '{
  "connector.class": "FileStreamSink",
  "topics": "test",
  "file": "/tmp/replace.txt",
  "transforms": "replace",
  "transforms.replace.type": "org.apache.kafka.connect.transforms.ReplaceField$Value",
  "transforms.replace.renames": "child_value_one:child_value,child_value_two:child_value",
  "transforms.replace.recursive": "true",
}' http://localhost:8083/connectors/filestreamsink_replace_test/config
```

I hope this covers everything but if you have any questions or concerns then please feel free to ask!



### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9493/comments
pull_request_number: 9493
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9492/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9492/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9492"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9492"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9492/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9492"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/86870827674de11631d95beaed9e609c919e6c4e"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "I have made an update to **TimestampConverter** Connect transform to address the main issues that I logged in [KAFKA-10627](https://issues.apache.org/jira/browse/KAFKA-10627).\r\n\r\nI realized that kafka is using `java.util.Date` everywhere and as part of its core types (including in Schemas, values, etc).  In theory it would be good over time to upgrade to `java.time` classes but on first reflection it seems like quite a big overhaul to do this.\r\n\r\nSo instead I focused on the specific problem at hand: parsing strings into `Date` where the strings can come in different formats.  So for this part alone I changed to use `DateTimeFormatter` so we can use multiple patterns to match input strings and convert them to a `java.util.Date` after.\r\n\r\nI also updated some of the way the Config parameters and values work, to bring in line with the other classes and similar to what I did with #9470.\r\n\r\n#### String Input and Output Timestamp Format updates\r\n\r\nBecause now for input formats we allow multiple different possibilities using pattern matching, this does not work for the output format of a Timestamp to a String (which was another possibility of this transform).  So I have changed the configuration a bit... now there are three parameters:\r\n\r\n- `format` which is the original one. You can still use this one, and it will set both input (parsing) and output (Date/Timestamp to string format) based on this format.\r\n- `format.input` is a new parameter, where you can specify a DateTimeFormatter-compatible pattern string that supports multiple different formats in case you have a mix in your data.  For just one example, now you can use something like this as `format.input` and it will catch a lot of different variations which you might see in one timestamp field: `\"[yyyy-MM-dd[['T'][ ]HH:mm:ss[.SSSSSSSz][.SSS[XXX][X]]]]\"`\r\n- `format.output` is a new parameter which only controls the output of a Date/Timestamp to target type of `string`. This is the same as before and still uses `SimpleDateFormat` to create the output string, it is just controlled in a separate parameter now.\r\n\r\nI also added some code which checks the value of each of these three.  Basically it forces you to use either `format`, or one or both of the new parameters -- you cannot mix the old and new together.  In the end, `format.input` and `format.output` are the ones used in the rest of the logic, but the code first compares `format` against these values and sets the value for both of the new parameters depending on what was sent in the config.\r\n\r\n#### Support for multiple fields instead of one single field\r\n\r\nI changed the `field` parameter to now be called `fields` and supports multiple values as a comma-separated list.  I used this new `ConfigUtils.translateDeprecatedConfigs` method to provide automatic translation of of the old parameter to the new one as well.\r\n\r\nWith this change I also updated the `apply` methods so that they loop through each field and check against the list of `fields`.  Now you can specify a comma-separated list of multiple fields to have the same input format/output type applied.\r\n\r\n\r\nUnit tests have been added for both new updates (string formatting and multiple field support).\r\n\r\nAs I looked at this one then I realized that maybe it would be good to add `recursive` support similar to what I have done in #9470 but I guess that can come at another day!\r\n\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9492/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9492/commits",
  "created_at": "2020-10-24T17:31:21Z",
  "diff_url": "https://github.com/apache/kafka/pull/9492.diff",
  "draft": false,
  "head": {
    "label": "joshuagrisham:KAFKA-10627",
    "ref": "KAFKA-10627",
    "repo": {
      "archive_url": "https://api.github.com/repos/joshuagrisham/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/joshuagrisham/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/joshuagrisham/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/joshuagrisham/kafka/branches{/branch}",
      "clone_url": "https://github.com/joshuagrisham/kafka.git",
      "collaborators_url": "https://api.github.com/repos/joshuagrisham/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/joshuagrisham/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/joshuagrisham/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/joshuagrisham/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/joshuagrisham/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/joshuagrisham/kafka/contributors",
      "created_at": "2020-10-24T13:49:37Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/joshuagrisham/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/joshuagrisham/kafka/downloads",
      "events_url": "https://api.github.com/repos/joshuagrisham/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/joshuagrisham/kafka/forks",
      "full_name": "joshuagrisham/kafka",
      "git_commits_url": "https://api.github.com/repos/joshuagrisham/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/joshuagrisham/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/joshuagrisham/kafka/git/tags{/sha}",
      "git_url": "git://github.com/joshuagrisham/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/joshuagrisham/kafka/hooks",
      "html_url": "https://github.com/joshuagrisham/kafka",
      "id": 306893753,
      "issue_comment_url": "https://api.github.com/repos/joshuagrisham/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/joshuagrisham/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/joshuagrisham/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/joshuagrisham/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/joshuagrisham/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/joshuagrisham/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/joshuagrisham/kafka/merges",
      "milestones_url": "https://api.github.com/repos/joshuagrisham/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDY4OTM3NTM=",
      "notifications_url": "https://api.github.com/repos/joshuagrisham/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/18266314?v=4",
        "events_url": "https://api.github.com/users/joshuagrisham/events{/privacy}",
        "followers_url": "https://api.github.com/users/joshuagrisham/followers",
        "following_url": "https://api.github.com/users/joshuagrisham/following{/other_user}",
        "gists_url": "https://api.github.com/users/joshuagrisham/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/joshuagrisham",
        "id": 18266314,
        "login": "joshuagrisham",
        "node_id": "MDQ6VXNlcjE4MjY2MzE0",
        "organizations_url": "https://api.github.com/users/joshuagrisham/orgs",
        "received_events_url": "https://api.github.com/users/joshuagrisham/received_events",
        "repos_url": "https://api.github.com/users/joshuagrisham/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/joshuagrisham/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/joshuagrisham/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/joshuagrisham"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/joshuagrisham/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T07:59:50Z",
      "releases_url": "https://api.github.com/repos/joshuagrisham/kafka/releases{/id}",
      "size": 107926,
      "ssh_url": "git@github.com:joshuagrisham/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/joshuagrisham/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/joshuagrisham/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/joshuagrisham/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/joshuagrisham/kafka/subscription",
      "svn_url": "https://github.com/joshuagrisham/kafka",
      "tags_url": "https://api.github.com/repos/joshuagrisham/kafka/tags",
      "teams_url": "https://api.github.com/repos/joshuagrisham/kafka/teams",
      "trees_url": "https://api.github.com/repos/joshuagrisham/kafka/git/trees{/sha}",
      "updated_at": "2020-10-24T13:49:39Z",
      "url": "https://api.github.com/repos/joshuagrisham/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "86870827674de11631d95beaed9e609c919e6c4e",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/18266314?v=4",
      "events_url": "https://api.github.com/users/joshuagrisham/events{/privacy}",
      "followers_url": "https://api.github.com/users/joshuagrisham/followers",
      "following_url": "https://api.github.com/users/joshuagrisham/following{/other_user}",
      "gists_url": "https://api.github.com/users/joshuagrisham/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/joshuagrisham",
      "id": 18266314,
      "login": "joshuagrisham",
      "node_id": "MDQ6VXNlcjE4MjY2MzE0",
      "organizations_url": "https://api.github.com/users/joshuagrisham/orgs",
      "received_events_url": "https://api.github.com/users/joshuagrisham/received_events",
      "repos_url": "https://api.github.com/users/joshuagrisham/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/joshuagrisham/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joshuagrisham/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/joshuagrisham"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9492",
  "id": 509466103,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9492",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "e0b8ab019565da4ce37c691bcc1a76d58e113d3a",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5NDY2MTAz",
  "number": 9492,
  "patch_url": "https://github.com/apache/kafka/pull/9492.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9492/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/86870827674de11631d95beaed9e609c919e6c4e",
  "title": "KAFKA-10627: Added support for Connect TimestampConverter to convert multiple fields using a comma-separated list, and changed the String input parser to use DateTimeFormatter instead of SimpleDateFormat.",
  "updated_at": "2020-10-27T15:46:56Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9492",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/18266314?v=4",
    "events_url": "https://api.github.com/users/joshuagrisham/events{/privacy}",
    "followers_url": "https://api.github.com/users/joshuagrisham/followers",
    "following_url": "https://api.github.com/users/joshuagrisham/following{/other_user}",
    "gists_url": "https://api.github.com/users/joshuagrisham/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/joshuagrisham",
    "id": 18266314,
    "login": "joshuagrisham",
    "node_id": "MDQ6VXNlcjE4MjY2MzE0",
    "organizations_url": "https://api.github.com/users/joshuagrisham/orgs",
    "received_events_url": "https://api.github.com/users/joshuagrisham/received_events",
    "repos_url": "https://api.github.com/users/joshuagrisham/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/joshuagrisham/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/joshuagrisham/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/joshuagrisham"
  }
}
json_root is_array: false
json_root is_object: true
number: 9492
url: https://api.github.com/repos/apache/kafka/pulls/9492
title: KAFKA-10627: Added support for Connect TimestampConverter to convert multiple fields using a comma-separated list, and changed the String input parser to use DateTimeFormatter instead of SimpleDateFormat.
body: I have made an update to **TimestampConverter** Connect transform to address the main issues that I logged in [KAFKA-10627](https://issues.apache.org/jira/browse/KAFKA-10627).

I realized that kafka is using `java.util.Date` everywhere and as part of its core types (including in Schemas, values, etc).  In theory it would be good over time to upgrade to `java.time` classes but on first reflection it seems like quite a big overhaul to do this.

So instead I focused on the specific problem at hand: parsing strings into `Date` where the strings can come in different formats.  So for this part alone I changed to use `DateTimeFormatter` so we can use multiple patterns to match input strings and convert them to a `java.util.Date` after.

I also updated some of the way the Config parameters and values work, to bring in line with the other classes and similar to what I did with #9470.

#### String Input and Output Timestamp Format updates

Because now for input formats we allow multiple different possibilities using pattern matching, this does not work for the output format of a Timestamp to a String (which was another possibility of this transform).  So I have changed the configuration a bit... now there are three parameters:

- `format` which is the original one. You can still use this one, and it will set both input (parsing) and output (Date/Timestamp to string format) based on this format.
- `format.input` is a new parameter, where you can specify a DateTimeFormatter-compatible pattern string that supports multiple different formats in case you have a mix in your data.  For just one example, now you can use something like this as `format.input` and it will catch a lot of different variations which you might see in one timestamp field: `"[yyyy-MM-dd[['T'][ ]HH:mm:ss[.SSSSSSSz][.SSS[XXX][X]]]]"`
- `format.output` is a new parameter which only controls the output of a Date/Timestamp to target type of `string`. This is the same as before and still uses `SimpleDateFormat` to create the output string, it is just controlled in a separate parameter now.

I also added some code which checks the value of each of these three.  Basically it forces you to use either `format`, or one or both of the new parameters -- you cannot mix the old and new together.  In the end, `format.input` and `format.output` are the ones used in the rest of the logic, but the code first compares `format` against these values and sets the value for both of the new parameters depending on what was sent in the config.

#### Support for multiple fields instead of one single field

I changed the `field` parameter to now be called `fields` and supports multiple values as a comma-separated list.  I used this new `ConfigUtils.translateDeprecatedConfigs` method to provide automatic translation of of the old parameter to the new one as well.

With this change I also updated the `apply` methods so that they loop through each field and check against the list of `fields`.  Now you can specify a comma-separated list of multiple fields to have the same input format/output type applied.


Unit tests have been added for both new updates (string formatting and multiple field support).

As I looked at this one then I realized that maybe it would be good to add `recursive` support similar to what I have done in #9470 but I guess that can come at another day!


### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9492/comments
pull_request_number: 9492
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9491/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9491/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9491"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9491"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9491/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9491"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/d05e6394f9214b46a6c897352e7d83b3b4d8d49a"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Rename admin.VersionRange into admin.Versions to avoid discovery conflicts\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9491/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9491/commits",
  "created_at": "2020-10-24T02:08:49Z",
  "diff_url": "https://github.com/apache/kafka/pull/9491.diff",
  "draft": false,
  "head": {
    "label": "warrenzhu25:10623",
    "ref": "10623",
    "repo": {
      "archive_url": "https://api.github.com/repos/warrenzhu25/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/warrenzhu25/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/warrenzhu25/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/warrenzhu25/kafka/branches{/branch}",
      "clone_url": "https://github.com/warrenzhu25/kafka.git",
      "collaborators_url": "https://api.github.com/repos/warrenzhu25/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/warrenzhu25/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/warrenzhu25/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/warrenzhu25/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/warrenzhu25/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/warrenzhu25/kafka/contributors",
      "created_at": "2017-04-22T00:59:03Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/warrenzhu25/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/warrenzhu25/kafka/downloads",
      "events_url": "https://api.github.com/repos/warrenzhu25/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/warrenzhu25/kafka/forks",
      "full_name": "warrenzhu25/kafka",
      "git_commits_url": "https://api.github.com/repos/warrenzhu25/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/warrenzhu25/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/warrenzhu25/kafka/git/tags{/sha}",
      "git_url": "git://github.com/warrenzhu25/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/warrenzhu25/kafka/hooks",
      "html_url": "https://github.com/warrenzhu25/kafka",
      "id": 89034933,
      "issue_comment_url": "https://api.github.com/repos/warrenzhu25/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/warrenzhu25/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/warrenzhu25/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/warrenzhu25/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/warrenzhu25/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/warrenzhu25/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/warrenzhu25/kafka/merges",
      "milestones_url": "https://api.github.com/repos/warrenzhu25/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk4OTAzNDkzMw==",
      "notifications_url": "https://api.github.com/repos/warrenzhu25/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/1633312?v=4",
        "events_url": "https://api.github.com/users/warrenzhu25/events{/privacy}",
        "followers_url": "https://api.github.com/users/warrenzhu25/followers",
        "following_url": "https://api.github.com/users/warrenzhu25/following{/other_user}",
        "gists_url": "https://api.github.com/users/warrenzhu25/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/warrenzhu25",
        "id": 1633312,
        "login": "warrenzhu25",
        "node_id": "MDQ6VXNlcjE2MzMzMTI=",
        "organizations_url": "https://api.github.com/users/warrenzhu25/orgs",
        "received_events_url": "https://api.github.com/users/warrenzhu25/received_events",
        "repos_url": "https://api.github.com/users/warrenzhu25/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/warrenzhu25/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/warrenzhu25/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/warrenzhu25"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/warrenzhu25/kafka/pulls{/number}",
      "pushed_at": "2020-10-25T17:53:07Z",
      "releases_url": "https://api.github.com/repos/warrenzhu25/kafka/releases{/id}",
      "size": 99261,
      "ssh_url": "git@github.com:warrenzhu25/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/warrenzhu25/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/warrenzhu25/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/warrenzhu25/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/warrenzhu25/kafka/subscription",
      "svn_url": "https://github.com/warrenzhu25/kafka",
      "tags_url": "https://api.github.com/repos/warrenzhu25/kafka/tags",
      "teams_url": "https://api.github.com/repos/warrenzhu25/kafka/teams",
      "trees_url": "https://api.github.com/repos/warrenzhu25/kafka/git/trees{/sha}",
      "updated_at": "2017-04-22T00:59:11Z",
      "url": "https://api.github.com/repos/warrenzhu25/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "d05e6394f9214b46a6c897352e7d83b3b4d8d49a",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/1633312?v=4",
      "events_url": "https://api.github.com/users/warrenzhu25/events{/privacy}",
      "followers_url": "https://api.github.com/users/warrenzhu25/followers",
      "following_url": "https://api.github.com/users/warrenzhu25/following{/other_user}",
      "gists_url": "https://api.github.com/users/warrenzhu25/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/warrenzhu25",
      "id": 1633312,
      "login": "warrenzhu25",
      "node_id": "MDQ6VXNlcjE2MzMzMTI=",
      "organizations_url": "https://api.github.com/users/warrenzhu25/orgs",
      "received_events_url": "https://api.github.com/users/warrenzhu25/received_events",
      "repos_url": "https://api.github.com/users/warrenzhu25/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/warrenzhu25/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/warrenzhu25/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/warrenzhu25"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9491",
  "id": 509307886,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9491",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "b2e5497bc464ee397e09b7279820edbdd8e7ac0e",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5MzA3ODg2",
  "number": 9491,
  "patch_url": "https://github.com/apache/kafka/pull/9491.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9491/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/d05e6394f9214b46a6c897352e7d83b3b4d8d49a",
  "title": "KAFKA-10623: Refactor code to avoid discovery conflicts for admin.VersionRange",
  "updated_at": "2020-10-24T02:08:49Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9491",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/1633312?v=4",
    "events_url": "https://api.github.com/users/warrenzhu25/events{/privacy}",
    "followers_url": "https://api.github.com/users/warrenzhu25/followers",
    "following_url": "https://api.github.com/users/warrenzhu25/following{/other_user}",
    "gists_url": "https://api.github.com/users/warrenzhu25/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/warrenzhu25",
    "id": 1633312,
    "login": "warrenzhu25",
    "node_id": "MDQ6VXNlcjE2MzMzMTI=",
    "organizations_url": "https://api.github.com/users/warrenzhu25/orgs",
    "received_events_url": "https://api.github.com/users/warrenzhu25/received_events",
    "repos_url": "https://api.github.com/users/warrenzhu25/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/warrenzhu25/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/warrenzhu25/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/warrenzhu25"
  }
}
json_root is_array: false
json_root is_object: true
number: 9491
url: https://api.github.com/repos/apache/kafka/pulls/9491
title: KAFKA-10623: Refactor code to avoid discovery conflicts for admin.VersionRange
body: Rename admin.VersionRange into admin.Versions to avoid discovery conflicts

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9491/comments
pull_request_number: 9491
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9489/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9489/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9489"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9489"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9489/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9489"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/9e6a4162ef8ac911c272d9e33231ff785e29261c"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This message absolutely floods the logs, especially in an eos application where the commit interval is just 100ms. It's definitely a useful message but I don't think there's any justification for it being at the INFO level when it's logged 10 times a second. ",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9489/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9489/commits",
  "created_at": "2020-10-24T00:02:47Z",
  "diff_url": "https://github.com/apache/kafka/pull/9489.diff",
  "draft": false,
  "head": {
    "label": "ableegoldman:MINOR-demote-task-commit-logging",
    "ref": "MINOR-demote-task-commit-logging",
    "repo": {
      "archive_url": "https://api.github.com/repos/ableegoldman/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/ableegoldman/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/ableegoldman/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/ableegoldman/kafka/branches{/branch}",
      "clone_url": "https://github.com/ableegoldman/kafka.git",
      "collaborators_url": "https://api.github.com/repos/ableegoldman/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/ableegoldman/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/ableegoldman/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/ableegoldman/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/ableegoldman/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/ableegoldman/kafka/contributors",
      "created_at": "2019-01-18T01:48:43Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/ableegoldman/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/ableegoldman/kafka/downloads",
      "events_url": "https://api.github.com/repos/ableegoldman/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/ableegoldman/kafka/forks",
      "full_name": "ableegoldman/kafka",
      "git_commits_url": "https://api.github.com/repos/ableegoldman/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/ableegoldman/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/ableegoldman/kafka/git/tags{/sha}",
      "git_url": "git://github.com/ableegoldman/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/ableegoldman/kafka/hooks",
      "html_url": "https://github.com/ableegoldman/kafka",
      "id": 166325386,
      "issue_comment_url": "https://api.github.com/repos/ableegoldman/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/ableegoldman/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/ableegoldman/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/ableegoldman/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/ableegoldman/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/ableegoldman/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/ableegoldman/kafka/merges",
      "milestones_url": "https://api.github.com/repos/ableegoldman/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxNjYzMjUzODY=",
      "notifications_url": "https://api.github.com/repos/ableegoldman/kafka/notifications{?since,all,participating}",
      "open_issues": 1,
      "open_issues_count": 1,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/4843099?v=4",
        "events_url": "https://api.github.com/users/ableegoldman/events{/privacy}",
        "followers_url": "https://api.github.com/users/ableegoldman/followers",
        "following_url": "https://api.github.com/users/ableegoldman/following{/other_user}",
        "gists_url": "https://api.github.com/users/ableegoldman/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ableegoldman",
        "id": 4843099,
        "login": "ableegoldman",
        "node_id": "MDQ6VXNlcjQ4NDMwOTk=",
        "organizations_url": "https://api.github.com/users/ableegoldman/orgs",
        "received_events_url": "https://api.github.com/users/ableegoldman/received_events",
        "repos_url": "https://api.github.com/users/ableegoldman/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ableegoldman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ableegoldman/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ableegoldman"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/ableegoldman/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T00:46:04Z",
      "releases_url": "https://api.github.com/repos/ableegoldman/kafka/releases{/id}",
      "size": 106147,
      "ssh_url": "git@github.com:ableegoldman/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/ableegoldman/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/ableegoldman/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/ableegoldman/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/ableegoldman/kafka/subscription",
      "svn_url": "https://github.com/ableegoldman/kafka",
      "tags_url": "https://api.github.com/repos/ableegoldman/kafka/tags",
      "teams_url": "https://api.github.com/repos/ableegoldman/kafka/teams",
      "trees_url": "https://api.github.com/repos/ableegoldman/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T23:10:01Z",
      "url": "https://api.github.com/repos/ableegoldman/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "9e6a4162ef8ac911c272d9e33231ff785e29261c",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/4843099?v=4",
      "events_url": "https://api.github.com/users/ableegoldman/events{/privacy}",
      "followers_url": "https://api.github.com/users/ableegoldman/followers",
      "following_url": "https://api.github.com/users/ableegoldman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ableegoldman/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ableegoldman",
      "id": 4843099,
      "login": "ableegoldman",
      "node_id": "MDQ6VXNlcjQ4NDMwOTk=",
      "organizations_url": "https://api.github.com/users/ableegoldman/orgs",
      "received_events_url": "https://api.github.com/users/ableegoldman/received_events",
      "repos_url": "https://api.github.com/users/ableegoldman/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ableegoldman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ableegoldman/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ableegoldman"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9489",
  "id": 509287846,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9489",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "3a6411b333018dca0443be60c1489331d20ce5ef",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5Mjg3ODQ2",
  "number": 9489,
  "patch_url": "https://github.com/apache/kafka/pull/9489.patch",
  "requested_reviewers": [
    {
      "avatar_url": "https://avatars0.githubusercontent.com/u/832787?v=4",
      "events_url": "https://api.github.com/users/vvcephei/events{/privacy}",
      "followers_url": "https://api.github.com/users/vvcephei/followers",
      "following_url": "https://api.github.com/users/vvcephei/following{/other_user}",
      "gists_url": "https://api.github.com/users/vvcephei/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vvcephei",
      "id": 832787,
      "login": "vvcephei",
      "node_id": "MDQ6VXNlcjgzMjc4Nw==",
      "organizations_url": "https://api.github.com/users/vvcephei/orgs",
      "received_events_url": "https://api.github.com/users/vvcephei/received_events",
      "repos_url": "https://api.github.com/users/vvcephei/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vvcephei/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vvcephei/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vvcephei"
    },
    {
      "avatar_url": "https://avatars0.githubusercontent.com/u/10729597?v=4",
      "events_url": "https://api.github.com/users/guozhangwang/events{/privacy}",
      "followers_url": "https://api.github.com/users/guozhangwang/followers",
      "following_url": "https://api.github.com/users/guozhangwang/following{/other_user}",
      "gists_url": "https://api.github.com/users/guozhangwang/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/guozhangwang",
      "id": 10729597,
      "login": "guozhangwang",
      "node_id": "MDQ6VXNlcjEwNzI5NTk3",
      "organizations_url": "https://api.github.com/users/guozhangwang/orgs",
      "received_events_url": "https://api.github.com/users/guozhangwang/received_events",
      "repos_url": "https://api.github.com/users/guozhangwang/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/guozhangwang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/guozhangwang/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/guozhangwang"
    }
  ],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9489/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/9e6a4162ef8ac911c272d9e33231ff785e29261c",
  "title": "MINOR: demote \"Committing task offsets\" log to DEBUG",
  "updated_at": "2020-10-24T00:08:05Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9489",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/4843099?v=4",
    "events_url": "https://api.github.com/users/ableegoldman/events{/privacy}",
    "followers_url": "https://api.github.com/users/ableegoldman/followers",
    "following_url": "https://api.github.com/users/ableegoldman/following{/other_user}",
    "gists_url": "https://api.github.com/users/ableegoldman/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ableegoldman",
    "id": 4843099,
    "login": "ableegoldman",
    "node_id": "MDQ6VXNlcjQ4NDMwOTk=",
    "organizations_url": "https://api.github.com/users/ableegoldman/orgs",
    "received_events_url": "https://api.github.com/users/ableegoldman/received_events",
    "repos_url": "https://api.github.com/users/ableegoldman/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ableegoldman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ableegoldman/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ableegoldman"
  }
}
json_root is_array: false
json_root is_object: true
number: 9489
url: https://api.github.com/repos/apache/kafka/pulls/9489
title: MINOR: demote "Committing task offsets" log to DEBUG
body: This message absolutely floods the logs, especially in an eos application where the commit interval is just 100ms. It's definitely a useful message but I don't think there's any justification for it being at the INFO level when it's logged 10 times a second. 
review_comments: https://api.github.com/repos/apache/kafka/pulls/9489/comments
pull_request_number: 9489
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9487/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9487/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9487"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9487"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9487/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9487"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/d721014ff6a3b66b9a296c2c4b18407f6974466e"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "aa287acb2eed07cf6d75c10e71f051f538a57872",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "*More detailed description of your change,\r\nif necessary. The PR title and PR message become\r\nthe squashed commit message, so use a separate\r\ncomment to ping reviewers.*\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9487/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9487/commits",
  "created_at": "2020-10-23T20:45:51Z",
  "diff_url": "https://github.com/apache/kafka/pull/9487.diff",
  "draft": false,
  "head": {
    "label": "wcarlson5:wcarlson-streams-handler",
    "ref": "wcarlson-streams-handler",
    "repo": {
      "archive_url": "https://api.github.com/repos/wcarlson5/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/wcarlson5/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/wcarlson5/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/wcarlson5/kafka/branches{/branch}",
      "clone_url": "https://github.com/wcarlson5/kafka.git",
      "collaborators_url": "https://api.github.com/repos/wcarlson5/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/wcarlson5/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/wcarlson5/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/wcarlson5/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/wcarlson5/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/wcarlson5/kafka/contributors",
      "created_at": "2019-09-23T22:54:50Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/wcarlson5/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/wcarlson5/kafka/downloads",
      "events_url": "https://api.github.com/repos/wcarlson5/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/wcarlson5/kafka/forks",
      "full_name": "wcarlson5/kafka",
      "git_commits_url": "https://api.github.com/repos/wcarlson5/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/wcarlson5/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/wcarlson5/kafka/git/tags{/sha}",
      "git_url": "git://github.com/wcarlson5/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/wcarlson5/kafka/hooks",
      "html_url": "https://github.com/wcarlson5/kafka",
      "id": 210466651,
      "issue_comment_url": "https://api.github.com/repos/wcarlson5/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/wcarlson5/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/wcarlson5/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/wcarlson5/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/wcarlson5/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/wcarlson5/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/wcarlson5/kafka/merges",
      "milestones_url": "https://api.github.com/repos/wcarlson5/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMTA0NjY2NTE=",
      "notifications_url": "https://api.github.com/repos/wcarlson5/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/18128741?v=4",
        "events_url": "https://api.github.com/users/wcarlson5/events{/privacy}",
        "followers_url": "https://api.github.com/users/wcarlson5/followers",
        "following_url": "https://api.github.com/users/wcarlson5/following{/other_user}",
        "gists_url": "https://api.github.com/users/wcarlson5/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/wcarlson5",
        "id": 18128741,
        "login": "wcarlson5",
        "node_id": "MDQ6VXNlcjE4MTI4NzQx",
        "organizations_url": "https://api.github.com/users/wcarlson5/orgs",
        "received_events_url": "https://api.github.com/users/wcarlson5/received_events",
        "repos_url": "https://api.github.com/users/wcarlson5/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/wcarlson5/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wcarlson5/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/wcarlson5"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/wcarlson5/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T17:37:57Z",
      "releases_url": "https://api.github.com/repos/wcarlson5/kafka/releases{/id}",
      "size": 103227,
      "ssh_url": "git@github.com:wcarlson5/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/wcarlson5/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/wcarlson5/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/wcarlson5/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/wcarlson5/kafka/subscription",
      "svn_url": "https://github.com/wcarlson5/kafka",
      "tags_url": "https://api.github.com/repos/wcarlson5/kafka/tags",
      "teams_url": "https://api.github.com/repos/wcarlson5/kafka/teams",
      "trees_url": "https://api.github.com/repos/wcarlson5/kafka/git/trees{/sha}",
      "updated_at": "2020-10-23T14:24:31Z",
      "url": "https://api.github.com/repos/wcarlson5/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "d721014ff6a3b66b9a296c2c4b18407f6974466e",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/18128741?v=4",
      "events_url": "https://api.github.com/users/wcarlson5/events{/privacy}",
      "followers_url": "https://api.github.com/users/wcarlson5/followers",
      "following_url": "https://api.github.com/users/wcarlson5/following{/other_user}",
      "gists_url": "https://api.github.com/users/wcarlson5/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/wcarlson5",
      "id": 18128741,
      "login": "wcarlson5",
      "node_id": "MDQ6VXNlcjE4MTI4NzQx",
      "organizations_url": "https://api.github.com/users/wcarlson5/orgs",
      "received_events_url": "https://api.github.com/users/wcarlson5/received_events",
      "repos_url": "https://api.github.com/users/wcarlson5/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/wcarlson5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wcarlson5/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/wcarlson5"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9487",
  "id": 509208862,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9487",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "7f9f513e595ec75110ae983db4f3392b03ef6178",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA5MjA4ODYy",
  "number": 9487,
  "patch_url": "https://github.com/apache/kafka/pull/9487.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9487/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/d721014ff6a3b66b9a296c2c4b18407f6974466e",
  "title": "KAFKA-9331 add a streams handler",
  "updated_at": "2020-10-27T17:38:08Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9487",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/18128741?v=4",
    "events_url": "https://api.github.com/users/wcarlson5/events{/privacy}",
    "followers_url": "https://api.github.com/users/wcarlson5/followers",
    "following_url": "https://api.github.com/users/wcarlson5/following{/other_user}",
    "gists_url": "https://api.github.com/users/wcarlson5/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/wcarlson5",
    "id": 18128741,
    "login": "wcarlson5",
    "node_id": "MDQ6VXNlcjE4MTI4NzQx",
    "organizations_url": "https://api.github.com/users/wcarlson5/orgs",
    "received_events_url": "https://api.github.com/users/wcarlson5/received_events",
    "repos_url": "https://api.github.com/users/wcarlson5/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/wcarlson5/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wcarlson5/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/wcarlson5"
  }
}
json_root is_array: false
json_root is_object: true
number: 9487
url: https://api.github.com/repos/apache/kafka/pulls/9487
title: KAFKA-9331 add a streams handler
body: *More detailed description of your change,
if necessary. The PR title and PR message become
the squashed commit message, so use a separate
comment to ping reviewers.*

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9487/comments
id: 511148601
url: https://api.github.com/repos/apache/kafka/pulls/comments/511148601
body: This will call closeToError but I am testing if that has a problem. So far it does not
diff_hunk: @@ -782,7 +849,12 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,
                 cacheSizePerThread,
                 stateDirectory,
                 delegatingStateRestoreListener,
-                i + 1);
+                i + 1,
+                KafkaStreams.this::close,
path: streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java
html: https://github.com/apache/kafka/pull/9487#discussion_r511148601
id: 511149017
url: https://api.github.com/repos/apache/kafka/pulls/comments/511149017
body: moved into stream thread because of a concurrent operation exception that appeared
diff_hunk: @@ -346,26 +351,92 @@ public void setStateListener(final KafkaStreams.StateListener listener) {
      * Set the handler invoked when a {@link StreamsConfig#NUM_STREAM_THREADS_CONFIG internal thread} abruptly
      * terminates due to an uncaught exception.
      *
-     * @param eh the uncaught exception handler for all internal threads; {@code null} deletes the current handler
+     * @param uncaughtExceptionHandler the uncaught exception handler for all internal threads; {@code null} deletes the current handler
      * @throws IllegalStateException if this {@code KafkaStreams} instance is not in state {@link State#CREATED CREATED}.
+     *
+     * @Deprecated Since 2.7.0. Use {@link KafkaStreams#setUncaughtExceptionHandler(StreamsUncaughtExceptionHandler)} instead.
+     *
      */
-    public void setUncaughtExceptionHandler(final Thread.UncaughtExceptionHandler eh) {
+    public void setUncaughtExceptionHandler(final Thread.UncaughtExceptionHandler uncaughtExceptionHandler) {
         synchronized (stateLock) {
             if (state == State.CREATED) {
                 for (final StreamThread thread : threads) {
-                    thread.setUncaughtExceptionHandler(eh);
+                    thread.setUncaughtExceptionHandler(uncaughtExceptionHandler);
                 }
 
                 if (globalStreamThread != null) {
-                    globalStreamThread.setUncaughtExceptionHandler(eh);
+                    globalStreamThread.setUncaughtExceptionHandler(uncaughtExceptionHandler);
                 }
             } else {
                 throw new IllegalStateException("Can only set UncaughtExceptionHandler in CREATED state. " +
-                    "Current state is: " + state);
+                        "Current state is: " + state);
+            }
+        }
+    }
+
+    /**
+     * Set the handler invoked when a {@link StreamsConfig#NUM_STREAM_THREADS_CONFIG internal thread}
+     * throws an unexpected exception.
+     * These might be exceptions indicating rare bugs in Kafka Streams, or they
+     * might be exceptions thrown by your code, for example a NullPointerException thrown from your processor
+     * logic.
+     * <p>
+     * Note, this handler must be threadsafe, since it will be shared among all threads, and invoked from any
+     * thread that encounters such an exception.
+     *
+     * @param streamsUncaughtExceptionHandler the uncaught exception handler of type {@link StreamsUncaughtExceptionHandler} for all internal threads; {@code null} deletes the current handler
+     * @throws IllegalStateException if this {@code KafkaStreams} instance is not in state {@link State#CREATED CREATED}.
+     * @throws NullPointerException @NotNull if streamsUncaughtExceptionHandler is null.
+     */
+    public void setUncaughtExceptionHandler(final StreamsUncaughtExceptionHandler streamsUncaughtExceptionHandler) {
+        final StreamsUncaughtExceptionHandler handler = exception -> handleStreamsUncaughtException(exception, streamsUncaughtExceptionHandler);
+        synchronized (stateLock) {
+            if (state == State.CREATED) {
+                Objects.requireNonNull(streamsUncaughtExceptionHandler);
+                for (final StreamThread thread : threads) {
+                    thread.setStreamsUncaughtExceptionHandler(handler);
+                }
+                if (globalStreamThread != null) {
+                    globalStreamThread.setUncaughtExceptionHandler(handler);
+                }
+            } else {
+                throw new IllegalStateException("Can only set UncaughtExceptionHandler in CREATED state. " +
+                        "Current state is: " + state);
             }
         }
     }
 
+    private StreamsUncaughtExceptionHandler.StreamThreadExceptionResponse handleStreamsUncaughtException(final Throwable e,
+                                                                                                         final StreamsUncaughtExceptionHandler streamsUncaughtExceptionHandler) {
+        final StreamsUncaughtExceptionHandler.StreamThreadExceptionResponse action = streamsUncaughtExceptionHandler.handle(e);
+        switch (action) {
+//            case REPLACE_STREAM_THREAD:
+//                log.error("Encountered the following exception during processing " +
+//                        "and the the stream thread will be replaced: ", e);
+//            this.addStreamsThread();
+//                break;
+            case SHUTDOWN_CLIENT:
+                log.error("Encountered the following exception during processing " +
+                        "and the client is going to shut down: ", e);
+                close(Duration.ZERO);
+                break;
+            case SHUTDOWN_APPLICATION:
+                if (e instanceof Error) {
+                    log.error("This option requires the thread to stay running to start the shutdown." +
+                            "Therefore it is not suitable for Error types.");
+                }
+//                for (final StreamThread streamThread: threads) {
path: streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java
html: https://github.com/apache/kafka/pull/9487#discussion_r511149017
id: 512320447
url: https://api.github.com/repos/apache/kafka/pulls/comments/512320447
body: Method was a few lines too long
diff_hunk: @@ -659,7 +727,6 @@ private KafkaStreams(final InternalTopologyBuilder internalTopologyBuilder,
                          final Time time) throws StreamsException {
         this.config = config;
         this.time = time;
-
path: streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java
html: https://github.com/apache/kafka/pull/9487#discussion_r512320447
pull_request_number: 9487
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9485/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9485/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9485"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9485"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9485/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9485"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/a91a5bc32f614b09c65cb416df4e23f73aa9dbe8"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "*More detailed description of your change,\r\nif necessary. The PR title and PR message become\r\nthe squashed commit message, so use a separate\r\ncomment to ping reviewers.*\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9485/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9485/commits",
  "created_at": "2020-10-23T05:23:25Z",
  "diff_url": "https://github.com/apache/kafka/pull/9485.diff",
  "draft": true,
  "head": {
    "label": "d8tltanc:SUGGEST_DEFAULT",
    "ref": "SUGGEST_DEFAULT",
    "repo": {
      "archive_url": "https://api.github.com/repos/d8tltanc/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/d8tltanc/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/d8tltanc/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/d8tltanc/kafka/branches{/branch}",
      "clone_url": "https://github.com/d8tltanc/kafka.git",
      "collaborators_url": "https://api.github.com/repos/d8tltanc/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/d8tltanc/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/d8tltanc/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/d8tltanc/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/d8tltanc/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/d8tltanc/kafka/contributors",
      "created_at": "2020-02-20T21:41:39Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/d8tltanc/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/d8tltanc/kafka/downloads",
      "events_url": "https://api.github.com/repos/d8tltanc/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/d8tltanc/kafka/forks",
      "full_name": "d8tltanc/kafka",
      "git_commits_url": "https://api.github.com/repos/d8tltanc/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/d8tltanc/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/d8tltanc/kafka/git/tags{/sha}",
      "git_url": "git://github.com/d8tltanc/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/d8tltanc/kafka/hooks",
      "html_url": "https://github.com/d8tltanc/kafka",
      "id": 241996119,
      "issue_comment_url": "https://api.github.com/repos/d8tltanc/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/d8tltanc/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/d8tltanc/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/d8tltanc/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/d8tltanc/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/d8tltanc/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/d8tltanc/kafka/merges",
      "milestones_url": "https://api.github.com/repos/d8tltanc/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyNDE5OTYxMTk=",
      "notifications_url": "https://api.github.com/repos/d8tltanc/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/31675100?v=4",
        "events_url": "https://api.github.com/users/d8tltanc/events{/privacy}",
        "followers_url": "https://api.github.com/users/d8tltanc/followers",
        "following_url": "https://api.github.com/users/d8tltanc/following{/other_user}",
        "gists_url": "https://api.github.com/users/d8tltanc/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/d8tltanc",
        "id": 31675100,
        "login": "d8tltanc",
        "node_id": "MDQ6VXNlcjMxNjc1MTAw",
        "organizations_url": "https://api.github.com/users/d8tltanc/orgs",
        "received_events_url": "https://api.github.com/users/d8tltanc/received_events",
        "repos_url": "https://api.github.com/users/d8tltanc/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/d8tltanc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/d8tltanc/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/d8tltanc"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/d8tltanc/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T01:53:49Z",
      "releases_url": "https://api.github.com/repos/d8tltanc/kafka/releases{/id}",
      "size": 106424,
      "ssh_url": "git@github.com:d8tltanc/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/d8tltanc/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/d8tltanc/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/d8tltanc/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/d8tltanc/kafka/subscription",
      "svn_url": "https://github.com/d8tltanc/kafka",
      "tags_url": "https://api.github.com/repos/d8tltanc/kafka/tags",
      "teams_url": "https://api.github.com/repos/d8tltanc/kafka/teams",
      "trees_url": "https://api.github.com/repos/d8tltanc/kafka/git/trees{/sha}",
      "updated_at": "2020-03-30T04:36:15Z",
      "url": "https://api.github.com/repos/d8tltanc/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "a91a5bc32f614b09c65cb416df4e23f73aa9dbe8",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/31675100?v=4",
      "events_url": "https://api.github.com/users/d8tltanc/events{/privacy}",
      "followers_url": "https://api.github.com/users/d8tltanc/followers",
      "following_url": "https://api.github.com/users/d8tltanc/following{/other_user}",
      "gists_url": "https://api.github.com/users/d8tltanc/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/d8tltanc",
      "id": 31675100,
      "login": "d8tltanc",
      "node_id": "MDQ6VXNlcjMxNjc1MTAw",
      "organizations_url": "https://api.github.com/users/d8tltanc/orgs",
      "received_events_url": "https://api.github.com/users/d8tltanc/received_events",
      "repos_url": "https://api.github.com/users/d8tltanc/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/d8tltanc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/d8tltanc/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/d8tltanc"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9485",
  "id": 508725536,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9485",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "66f6a9d8bc752860b5b7d1f096d92c5501c93739",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA4NzI1NTM2",
  "number": 9485,
  "patch_url": "https://github.com/apache/kafka/pull/9485.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9485/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/a91a5bc32f614b09c65cb416df4e23f73aa9dbe8",
  "title": "[WIP] KAKFA-10619: Producer will enable EOS by default",
  "updated_at": "2020-10-27T01:53:53Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9485",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/31675100?v=4",
    "events_url": "https://api.github.com/users/d8tltanc/events{/privacy}",
    "followers_url": "https://api.github.com/users/d8tltanc/followers",
    "following_url": "https://api.github.com/users/d8tltanc/following{/other_user}",
    "gists_url": "https://api.github.com/users/d8tltanc/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/d8tltanc",
    "id": 31675100,
    "login": "d8tltanc",
    "node_id": "MDQ6VXNlcjMxNjc1MTAw",
    "organizations_url": "https://api.github.com/users/d8tltanc/orgs",
    "received_events_url": "https://api.github.com/users/d8tltanc/received_events",
    "repos_url": "https://api.github.com/users/d8tltanc/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/d8tltanc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/d8tltanc/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/d8tltanc"
  }
}
json_root is_array: false
json_root is_object: true
number: 9485
url: https://api.github.com/repos/apache/kafka/pulls/9485
title: [WIP] KAKFA-10619: Producer will enable EOS by default
body: *More detailed description of your change,
if necessary. The PR title and PR message become
the squashed commit message, so use a separate
comment to ping reviewers.*

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9485/comments
pull_request_number: 9485
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9482/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9482/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9482"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9482"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9482/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9482"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/1345f566ff9265c4072f2129bf6c477946c4407c"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "927edfece3db8aab7d01850955f9a65e5c110da5",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "In #9418, we add a listener to the `RaftClient` interface. In that patch, we used it only to send commit notifications for writes from the leader. In this PR, we extend the `handleCommit` API to accept all committed data and we remove the pull-based `read` API. Additionally, we add two new callbacks to the listener interface in order to notify the state machine when the raft client has claimed or resigned leadership.\r\n\r\nFinally, this patch allows the `RaftClient` to support multiple listeners. This is necessary for KIP-500 because we will have one listener for the controller role and one for the broker role.\r\n\r\nNote this patch builds on top of #9418. Once merged, I will rebase this patch and remove draft status.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9482/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9482/commits",
  "created_at": "2020-10-22T18:32:33Z",
  "diff_url": "https://github.com/apache/kafka/pull/9482.diff",
  "draft": false,
  "head": {
    "label": "hachikuji:raft-read-refactor",
    "ref": "raft-read-refactor",
    "repo": {
      "archive_url": "https://api.github.com/repos/hachikuji/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/hachikuji/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/hachikuji/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/hachikuji/kafka/branches{/branch}",
      "clone_url": "https://github.com/hachikuji/kafka.git",
      "collaborators_url": "https://api.github.com/repos/hachikuji/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/hachikuji/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/hachikuji/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/hachikuji/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/hachikuji/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/hachikuji/kafka/contributors",
      "created_at": "2015-05-18T20:54:26Z",
      "default_branch": "0.8.2",
      "deployments_url": "https://api.github.com/repos/hachikuji/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/hachikuji/kafka/downloads",
      "events_url": "https://api.github.com/repos/hachikuji/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/hachikuji/kafka/forks",
      "full_name": "hachikuji/kafka",
      "git_commits_url": "https://api.github.com/repos/hachikuji/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/hachikuji/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/hachikuji/kafka/git/tags{/sha}",
      "git_url": "git://github.com/hachikuji/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/hachikuji/kafka/hooks",
      "html_url": "https://github.com/hachikuji/kafka",
      "id": 35842084,
      "issue_comment_url": "https://api.github.com/repos/hachikuji/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/hachikuji/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/hachikuji/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/hachikuji/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/hachikuji/kafka/labels{/name}",
      "language": "Scala",
      "languages_url": "https://api.github.com/repos/hachikuji/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/hachikuji/kafka/merges",
      "milestones_url": "https://api.github.com/repos/hachikuji/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzNTg0MjA4NA==",
      "notifications_url": "https://api.github.com/repos/hachikuji/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/12502538?v=4",
        "events_url": "https://api.github.com/users/hachikuji/events{/privacy}",
        "followers_url": "https://api.github.com/users/hachikuji/followers",
        "following_url": "https://api.github.com/users/hachikuji/following{/other_user}",
        "gists_url": "https://api.github.com/users/hachikuji/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/hachikuji",
        "id": 12502538,
        "login": "hachikuji",
        "node_id": "MDQ6VXNlcjEyNTAyNTM4",
        "organizations_url": "https://api.github.com/users/hachikuji/orgs",
        "received_events_url": "https://api.github.com/users/hachikuji/received_events",
        "repos_url": "https://api.github.com/users/hachikuji/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/hachikuji/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hachikuji/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/hachikuji"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/hachikuji/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T03:23:22Z",
      "releases_url": "https://api.github.com/repos/hachikuji/kafka/releases{/id}",
      "size": 111604,
      "ssh_url": "git@github.com:hachikuji/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/hachikuji/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/hachikuji/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/hachikuji/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/hachikuji/kafka/subscription",
      "svn_url": "https://github.com/hachikuji/kafka",
      "tags_url": "https://api.github.com/repos/hachikuji/kafka/tags",
      "teams_url": "https://api.github.com/repos/hachikuji/kafka/teams",
      "trees_url": "https://api.github.com/repos/hachikuji/kafka/git/trees{/sha}",
      "updated_at": "2018-12-20T09:55:26Z",
      "url": "https://api.github.com/repos/hachikuji/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "1345f566ff9265c4072f2129bf6c477946c4407c",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/12502538?v=4",
      "events_url": "https://api.github.com/users/hachikuji/events{/privacy}",
      "followers_url": "https://api.github.com/users/hachikuji/followers",
      "following_url": "https://api.github.com/users/hachikuji/following{/other_user}",
      "gists_url": "https://api.github.com/users/hachikuji/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/hachikuji",
      "id": 12502538,
      "login": "hachikuji",
      "node_id": "MDQ6VXNlcjEyNTAyNTM4",
      "organizations_url": "https://api.github.com/users/hachikuji/orgs",
      "received_events_url": "https://api.github.com/users/hachikuji/received_events",
      "repos_url": "https://api.github.com/users/hachikuji/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/hachikuji/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hachikuji/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/hachikuji"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9482",
  "id": 508481774,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9482",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "e5ad1588025c32d8890b98dde237530d8c3ffbfd",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA4NDgxNzc0",
  "number": 9482,
  "patch_url": "https://github.com/apache/kafka/pull/9482.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9482/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/1345f566ff9265c4072f2129bf6c477946c4407c",
  "title": "KAFKA-10632; Raft client should push all committed data to state machines",
  "updated_at": "2020-10-28T03:23:29Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9482",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/12502538?v=4",
    "events_url": "https://api.github.com/users/hachikuji/events{/privacy}",
    "followers_url": "https://api.github.com/users/hachikuji/followers",
    "following_url": "https://api.github.com/users/hachikuji/following{/other_user}",
    "gists_url": "https://api.github.com/users/hachikuji/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/hachikuji",
    "id": 12502538,
    "login": "hachikuji",
    "node_id": "MDQ6VXNlcjEyNTAyNTM4",
    "organizations_url": "https://api.github.com/users/hachikuji/orgs",
    "received_events_url": "https://api.github.com/users/hachikuji/received_events",
    "repos_url": "https://api.github.com/users/hachikuji/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/hachikuji/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hachikuji/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/hachikuji"
  }
}
json_root is_array: false
json_root is_object: true
number: 9482
url: https://api.github.com/repos/apache/kafka/pulls/9482
title: KAFKA-10632; Raft client should push all committed data to state machines
body: In #9418, we add a listener to the `RaftClient` interface. In that patch, we used it only to send commit notifications for writes from the leader. In this PR, we extend the `handleCommit` API to accept all committed data and we remove the pull-based `read` API. Additionally, we add two new callbacks to the listener interface in order to notify the state machine when the raft client has claimed or resigned leadership.

Finally, this patch allows the `RaftClient` to support multiple listeners. This is necessary for KIP-500 because we will have one listener for the controller role and one for the broker role.

Note this patch builds on top of #9418. Once merged, I will rebase this patch and remove draft status.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9482/comments
id: 510385486
url: https://api.github.com/repos/apache/kafka/pulls/comments/510385486
body: I would remove this comment. We ca file an issue and fix it if this becomes a performance issue.
diff_hunk: @@ -206,30 +234,77 @@ private void updateLeaderEndOffsetAndTimestamp(
         final LogOffsetMetadata endOffsetMetadata = log.endOffset();
 
         if (state.updateLocalState(currentTimeMs, endOffsetMetadata)) {
-            updateHighWatermark(state, currentTimeMs);
+            onUpdateLeaderHighWatermark(state, currentTimeMs);
         }
 
-        LogOffset endOffset = new LogOffset(endOffsetMetadata.offset, Isolation.UNCOMMITTED);
-        fetchPurgatory.maybeComplete(endOffset, currentTimeMs);
+        fetchPurgatory.maybeComplete(endOffsetMetadata.offset, currentTimeMs);
     }
 
-    private void updateHighWatermark(
-        EpochState state,
+    private void onUpdateLeaderHighWatermark(
+        LeaderState state,
         long currentTimeMs
     ) {
         state.highWatermark().ifPresent(highWatermark -> {
-            logger.debug("High watermark updated to {}", highWatermark);
+            logger.debug("Leader high watermark updated to {}", highWatermark);
             log.updateHighWatermark(highWatermark);
-
-            LogOffset offset = new LogOffset(highWatermark.offset, Isolation.COMMITTED);
-            appendPurgatory.maybeComplete(offset, currentTimeMs);
-            fetchPurgatory.maybeComplete(offset, currentTimeMs);
+            appendPurgatory.maybeComplete(highWatermark.offset, currentTimeMs);
+            maybeFireHandleCommit(highWatermark.offset);
         });
     }
 
-    @Override
-    public LeaderAndEpoch currentLeaderAndEpoch() {
-        return quorum.leaderAndEpoch();
+    private void maybeFireHandleCommit(long highWatermark) {
+        maybeFireHandleCommit(listenerContexts, highWatermark);
+    }
+
+    private void maybeFireHandleCommit(List<ListenerContext> listenerContexts, long highWatermark) {
+        // TODO: When there are multiple listeners, we can cache reads to save some work
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510385486
id: 510387597
url: https://api.github.com/repos/apache/kafka/pulls/comments/510387597
body: Why a `return`? Did you mean to use `continue`? If this is suppose to be a `continue` then maybe we can `Optional.ifPresent`.

Same comment for one of the other overloaded `maybeFireHandleCommit`.
diff_hunk: @@ -206,30 +234,77 @@ private void updateLeaderEndOffsetAndTimestamp(
         final LogOffsetMetadata endOffsetMetadata = log.endOffset();
 
         if (state.updateLocalState(currentTimeMs, endOffsetMetadata)) {
-            updateHighWatermark(state, currentTimeMs);
+            onUpdateLeaderHighWatermark(state, currentTimeMs);
         }
 
-        LogOffset endOffset = new LogOffset(endOffsetMetadata.offset, Isolation.UNCOMMITTED);
-        fetchPurgatory.maybeComplete(endOffset, currentTimeMs);
+        fetchPurgatory.maybeComplete(endOffsetMetadata.offset, currentTimeMs);
     }
 
-    private void updateHighWatermark(
-        EpochState state,
+    private void onUpdateLeaderHighWatermark(
+        LeaderState state,
         long currentTimeMs
     ) {
         state.highWatermark().ifPresent(highWatermark -> {
-            logger.debug("High watermark updated to {}", highWatermark);
+            logger.debug("Leader high watermark updated to {}", highWatermark);
             log.updateHighWatermark(highWatermark);
-
-            LogOffset offset = new LogOffset(highWatermark.offset, Isolation.COMMITTED);
-            appendPurgatory.maybeComplete(offset, currentTimeMs);
-            fetchPurgatory.maybeComplete(offset, currentTimeMs);
+            appendPurgatory.maybeComplete(highWatermark.offset, currentTimeMs);
+            maybeFireHandleCommit(highWatermark.offset);
         });
     }
 
-    @Override
-    public LeaderAndEpoch currentLeaderAndEpoch() {
-        return quorum.leaderAndEpoch();
+    private void maybeFireHandleCommit(long highWatermark) {
+        maybeFireHandleCommit(listenerContexts, highWatermark);
+    }
+
+    private void maybeFireHandleCommit(List<ListenerContext> listenerContexts, long highWatermark) {
+        // TODO: When there are multiple listeners, we can cache reads to save some work
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510387597
id: 510397179
url: https://api.github.com/repos/apache/kafka/pulls/comments/510397179
body: Interesting. It is good to hide this logic from the state machine. Looking at the epoch and not at the LEO is okay because at this point we guarantee that the only records with that epoch are control records (e.g. LeaderChangedMessage).

I am wondering if the state machine may want to know this before it can process state machine requests. Maybe this is okay because the brokers/replicas will learn about the new leader through the `Fetch` and `BeginQuorum` protocol and not from the state machine (Kafka Controller) itself.

It is possible that the leader will receive Kafka Controller message from replicas/broker before it knows that it is leader. Most likely the Kafka Controller will reject them but the replicas/brokers need to keep retrying. This is specially important for heartbeat messages.
diff_hunk: @@ -206,30 +234,77 @@ private void updateLeaderEndOffsetAndTimestamp(
         final LogOffsetMetadata endOffsetMetadata = log.endOffset();
 
         if (state.updateLocalState(currentTimeMs, endOffsetMetadata)) {
-            updateHighWatermark(state, currentTimeMs);
+            onUpdateLeaderHighWatermark(state, currentTimeMs);
         }
 
-        LogOffset endOffset = new LogOffset(endOffsetMetadata.offset, Isolation.UNCOMMITTED);
-        fetchPurgatory.maybeComplete(endOffset, currentTimeMs);
+        fetchPurgatory.maybeComplete(endOffsetMetadata.offset, currentTimeMs);
     }
 
-    private void updateHighWatermark(
-        EpochState state,
+    private void onUpdateLeaderHighWatermark(
+        LeaderState state,
         long currentTimeMs
     ) {
         state.highWatermark().ifPresent(highWatermark -> {
-            logger.debug("High watermark updated to {}", highWatermark);
+            logger.debug("Leader high watermark updated to {}", highWatermark);
             log.updateHighWatermark(highWatermark);
-
-            LogOffset offset = new LogOffset(highWatermark.offset, Isolation.COMMITTED);
-            appendPurgatory.maybeComplete(offset, currentTimeMs);
-            fetchPurgatory.maybeComplete(offset, currentTimeMs);
+            appendPurgatory.maybeComplete(highWatermark.offset, currentTimeMs);
+            maybeFireHandleCommit(highWatermark.offset);
         });
     }
 
-    @Override
-    public LeaderAndEpoch currentLeaderAndEpoch() {
-        return quorum.leaderAndEpoch();
+    private void maybeFireHandleCommit(long highWatermark) {
+        maybeFireHandleCommit(listenerContexts, highWatermark);
+    }
+
+    private void maybeFireHandleCommit(List<ListenerContext> listenerContexts, long highWatermark) {
+        // TODO: When there are multiple listeners, we can cache reads to save some work
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
+            }
+
+            long nextExpectedOffset = nextExpectedOffsetOpt.getAsLong();
+            if (nextExpectedOffset < highWatermark) {
+                LogFetchInfo readInfo = log.read(nextExpectedOffset, Isolation.COMMITTED);
+                listenerContext.fireHandleCommit(nextExpectedOffset, readInfo.records);
+            }
+        }
+    }
+
+    private void maybeFireHandleCommit(long baseOffset, int epoch, List<T> records) {
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
+            }
+
+            long nextExpectedOffset = nextExpectedOffsetOpt.getAsLong();
+            if (nextExpectedOffset == baseOffset) {
+                listenerContext.fireHandleCommit(baseOffset, epoch, records);
+            }
+        }
+    }
+
+    private void maybeFireHandleClaim(LeaderState state) {
+        for (ListenerContext listenerContext : listenerContexts) {
+            int leaderEpoch = state.epoch();
+
+            // We can fire `handleClaim` as soon as the listener has caught
+            // up to the start of the leader epoch. This guarantees that the
+            // state machine has seen the full committed state before it becomes
+            // leader and begins writing to the log.
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510397179
id: 510398902
url: https://api.github.com/repos/apache/kafka/pulls/comments/510398902
body: Incomplete sentence.
diff_hunk: @@ -975,12 +1029,9 @@ private boolean handleFetchResponse(
                 log.truncateToEndOffset(divergingOffsetAndEpoch).ifPresent(truncationOffset -> {
                     logger.info("Truncated to offset {} from Fetch response from leader {}",
                         truncationOffset, quorum.leaderIdOrNil());
-
-                    // Since the end offset has been updated, we should complete any delayed
-                    // reads at the end offset.
-                    fetchPurgatory.maybeComplete(
-                        new LogOffset(Long.MAX_VALUE, Isolation.UNCOMMITTED),
-                        currentTimeMs);
+                    // After truncation, we complete all pending reads in order to
+                    // ensure that fetches account for the
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510398902
id: 510404596
url: https://api.github.com/repos/apache/kafka/pulls/comments/510404596
body: Does this mean that in practice, follower will have at most two batches in flight?
1. The one that they are currently processing
2. If they read the last message/record in the batch then the next batch in the log?
diff_hunk: @@ -1757,35 +1809,86 @@ public void complete() {
         }
     }
 
-    private static class UnwrittenAppend {
-        private final Records records;
-        private final long createTimeMs;
-        private final long requestTimeoutMs;
-        private final AckMode ackMode;
-        private final CompletableFuture<OffsetAndEpoch> future;
+    private final class ListenerContext implements CloseListener<BatchReader<T>> {
+        private final RaftClient.Listener<T> listener;
+        private BatchReader<T> lastSent = null;
+        private long lastAckedOffset = 0;
+        private int claimedEpoch = 0;
+
+        private ListenerContext(Listener<T> listener) {
+            this.listener = listener;
+        }
+
+        /**
+         * Get the last acked offset, which is one greater than the offset of the
+         * last record which was acked by the state machine.
+         */
+        public synchronized long lastAckedOffset() {
+            return lastAckedOffset;
+        }
+
+        /**
+         * Get the next expected offset, which might be larger than the last acked
+         * offset if there are inflight batches which have not been acked yet.
+         * Note that when fetching from disk, we may not know the last offset of
+         * inflight data until it has been processed by the state machine. In this case,
+         * we delay sending additional data until the state machine has read to the
+         * end and the last offset is determined.
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510404596
id: 510408362
url: https://api.github.com/repos/apache/kafka/pulls/comments/510408362
body: What is "this" in this sentence? epochStartOffset?
diff_hunk: @@ -369,6 +379,17 @@ public void transitionToLeader(long epochStartOffset) throws IOException {
         if (!candidateState.isVoteGranted())
             throw new IllegalStateException("Cannot become leader without majority votes granted");
 
+        // Note that the leader does not retain the high watermark that was known
+        // in the previous state. The purpose of this is to protect the monotonicity
path: raft/src/main/java/org/apache/kafka/raft/QuorumState.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510408362
id: 510409063
url: https://api.github.com/repos/apache/kafka/pulls/comments/510409063
body: nit: "... must be iterated and closed".
diff_hunk: @@ -16,57 +16,75 @@
  */
 package org.apache.kafka.raft;
 
-import org.apache.kafka.common.record.Records;
-
 import java.io.IOException;
+import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
-public interface RaftClient {
+public interface RaftClient<T> {
+
+    interface Listener<T> {
+        /**
+         * Callback which is invoked for all records committed to the log.
+         * It is the responsibility of the caller to invoke {@link BatchReader#close()}
+         * after consuming the reader.
+         *
+         * Note that there is not a one-to-one correspondence between writes through
+         * {@link #scheduleAppend(int, List)} and this callback. The Raft implementation
+         * is free to batch together the records from multiple append calls provided
+         * that batch boundaries are respected. This means that each batch specified
+         * through {@link #scheduleAppend(int, List)} is guaranteed to be a subset of
+         * a batch provided by the {@link BatchReader}.
+         *
+         * @param reader reader instance which must be iterated
path: raft/src/main/java/org/apache/kafka/raft/RaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510409063
id: 510411603
url: https://api.github.com/repos/apache/kafka/pulls/comments/510411603
body: We should also mention that `MAX_VALUE` is return if the RaftClient is not the leader.
diff_hunk: @@ -16,57 +16,75 @@
  */
 package org.apache.kafka.raft;
 
-import org.apache.kafka.common.record.Records;
-
 import java.io.IOException;
+import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
-public interface RaftClient {
+public interface RaftClient<T> {
+
+    interface Listener<T> {
+        /**
+         * Callback which is invoked for all records committed to the log.
+         * It is the responsibility of the caller to invoke {@link BatchReader#close()}
+         * after consuming the reader.
+         *
+         * Note that there is not a one-to-one correspondence between writes through
+         * {@link #scheduleAppend(int, List)} and this callback. The Raft implementation
+         * is free to batch together the records from multiple append calls provided
+         * that batch boundaries are respected. This means that each batch specified
+         * through {@link #scheduleAppend(int, List)} is guaranteed to be a subset of
+         * a batch provided by the {@link BatchReader}.
+         *
+         * @param reader reader instance which must be iterated
+         */
+        void handleCommit(BatchReader<T> reader);
+
+        /**
+         * Invoked after this node has become a leader. This is only called after
+         * all commits up to the start of the leader's epoch have been sent to
+         * {@link #handleCommit(BatchReader)}.
+         *
+         * After becoming a leader, the client is eligible to write to the log
+         * using {@link #scheduleAppend(int, List)}.
+         *
+         * @param epoch the claimed leader epoch
+         */
+        default void handleClaim(int epoch) {}
+
+        /**
+         * Invoked after a leader has stepped down. This callback may or may not
+         * fire before the next leader has been elected.
+         */
+        default void handleResign() {}
+    }
 
     /**
-     * Initialize the client. This should only be called once and it must be
-     * called before any of the other APIs can be invoked.
+     * Initialize the client. This should only be called once on startup.
      *
      * @throws IOException For any IO errors during initialization
      */
     void initialize() throws IOException;
 
     /**
-     * Append a new entry to the log. The client must be in the leader state to
-     * accept an append: it is up to the state machine implementation
-     * to ensure this using {@link #currentLeaderAndEpoch()}.
-     *
-     * TODO: One improvement we can make here is to allow the caller to specify
-     * the current leader epoch in the record set. That would ensure that each
-     * leader change must be "observed" by the state machine before new appends
-     * are accepted.
-     *
-     * @param records The records to append to the log
-     * @param timeoutMs Maximum time to wait for the append to complete
-     * @return A future containing the last offset and epoch of the appended records (if successful)
-     */
-    CompletableFuture<OffsetAndEpoch> append(Records records, AckMode ackMode, long timeoutMs);
-
-    /**
-     * Read a set of records from the log. Note that it is the responsibility of the state machine
-     * to filter control records added by the Raft client itself.
-     *
-     * If the fetch offset is no longer valid, then the future will be completed exceptionally
-     * with a {@link LogTruncationException}.
+     * Register a listener to get commit/leader notifications.
      *
-     * @param position The position to fetch from
-     * @param isolation The isolation level to apply to the read
-     * @param maxWaitTimeMs The maximum time to wait for new data to become available before completion
-     * @return The record set, which may be empty if fetching from the end of the log
+     * @param listener the listener
      */
-    CompletableFuture<Records> read(OffsetAndEpoch position, Isolation isolation, long maxWaitTimeMs);
+    void register(Listener<T> listener);
 
     /**
-     * Get the current leader (if known) and the current epoch.
+     * Append a list of records to the log. The write will be scheduled for some time
+     * in the future. There is no guarantee that appended records will be written to
+     * the log and eventually committed. However, it is guaranteed that if any of the
+     * records become committed, then all of them will be.
      *
-     * @return Current leader and epoch information
+     * @param epoch the current leader epoch
+     * @param records the list of records to append
+     * @return the offset within the current epoch that the log entries will be appended,
+     *         or null if the leader was unable to accept the write (e.g. due to memory
+     *         being reached).
path: raft/src/main/java/org/apache/kafka/raft/RaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510411603
id: 510412505
url: https://api.github.com/repos/apache/kafka/pulls/comments/510412505
body: I think it is okay as the fix may be non-trivial but technically `scheduleAppend` will accept records even if no `Listener` has received a `handleClaim`.
diff_hunk: @@ -16,57 +16,75 @@
  */
 package org.apache.kafka.raft;
 
-import org.apache.kafka.common.record.Records;
-
 import java.io.IOException;
+import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
-public interface RaftClient {
+public interface RaftClient<T> {
+
+    interface Listener<T> {
+        /**
+         * Callback which is invoked for all records committed to the log.
+         * It is the responsibility of the caller to invoke {@link BatchReader#close()}
+         * after consuming the reader.
+         *
+         * Note that there is not a one-to-one correspondence between writes through
+         * {@link #scheduleAppend(int, List)} and this callback. The Raft implementation
+         * is free to batch together the records from multiple append calls provided
+         * that batch boundaries are respected. This means that each batch specified
+         * through {@link #scheduleAppend(int, List)} is guaranteed to be a subset of
+         * a batch provided by the {@link BatchReader}.
+         *
+         * @param reader reader instance which must be iterated
+         */
+        void handleCommit(BatchReader<T> reader);
+
+        /**
+         * Invoked after this node has become a leader. This is only called after
+         * all commits up to the start of the leader's epoch have been sent to
+         * {@link #handleCommit(BatchReader)}.
+         *
+         * After becoming a leader, the client is eligible to write to the log
+         * using {@link #scheduleAppend(int, List)}.
+         *
+         * @param epoch the claimed leader epoch
+         */
+        default void handleClaim(int epoch) {}
+
+        /**
+         * Invoked after a leader has stepped down. This callback may or may not
+         * fire before the next leader has been elected.
+         */
+        default void handleResign() {}
+    }
 
     /**
-     * Initialize the client. This should only be called once and it must be
-     * called before any of the other APIs can be invoked.
+     * Initialize the client. This should only be called once on startup.
      *
      * @throws IOException For any IO errors during initialization
      */
     void initialize() throws IOException;
 
     /**
-     * Append a new entry to the log. The client must be in the leader state to
-     * accept an append: it is up to the state machine implementation
-     * to ensure this using {@link #currentLeaderAndEpoch()}.
-     *
-     * TODO: One improvement we can make here is to allow the caller to specify
-     * the current leader epoch in the record set. That would ensure that each
-     * leader change must be "observed" by the state machine before new appends
-     * are accepted.
-     *
-     * @param records The records to append to the log
-     * @param timeoutMs Maximum time to wait for the append to complete
-     * @return A future containing the last offset and epoch of the appended records (if successful)
-     */
-    CompletableFuture<OffsetAndEpoch> append(Records records, AckMode ackMode, long timeoutMs);
-
-    /**
-     * Read a set of records from the log. Note that it is the responsibility of the state machine
-     * to filter control records added by the Raft client itself.
-     *
-     * If the fetch offset is no longer valid, then the future will be completed exceptionally
-     * with a {@link LogTruncationException}.
+     * Register a listener to get commit/leader notifications.
      *
-     * @param position The position to fetch from
-     * @param isolation The isolation level to apply to the read
-     * @param maxWaitTimeMs The maximum time to wait for new data to become available before completion
-     * @return The record set, which may be empty if fetching from the end of the log
+     * @param listener the listener
      */
-    CompletableFuture<Records> read(OffsetAndEpoch position, Isolation isolation, long maxWaitTimeMs);
+    void register(Listener<T> listener);
 
     /**
-     * Get the current leader (if known) and the current epoch.
+     * Append a list of records to the log. The write will be scheduled for some time
+     * in the future. There is no guarantee that appended records will be written to
+     * the log and eventually committed. However, it is guaranteed that if any of the
+     * records become committed, then all of them will be.
      *
-     * @return Current leader and epoch information
+     * @param epoch the current leader epoch
+     * @param records the list of records to append
+     * @return the offset within the current epoch that the log entries will be appended,
+     *         or null if the leader was unable to accept the write (e.g. due to memory
+     *         being reached).
      */
-    LeaderAndEpoch currentLeaderAndEpoch();
+    Long scheduleAppend(int epoch, List<T> records);
path: raft/src/main/java/org/apache/kafka/raft/RaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510412505
id: 510413244
url: https://api.github.com/repos/apache/kafka/pulls/comments/510413244
body: TODO: missing comments.
diff_hunk: @@ -0,0 +1,63 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.raft;
+
+import org.apache.kafka.common.protocol.DataOutputStreamWritable;
+import org.apache.kafka.common.protocol.Readable;
+
+public interface RecordSerde<T> {
+    /**
+     * Create a new context object for to be used when serializing a batch of records.
+     * This allows for state to be shared between {@link #recordSize(Object, Object)}
+     * and {@link #write(Object, Object, DataOutputStreamWritable)}, which is useful
+     * in order to avoid redundant work (see e.g.
+     * {@link org.apache.kafka.common.protocol.ObjectSerializationCache}).
+     *
+     * @return context object or null if none is needed
+     */
+    default Object newWriteContext() {
+        return null;
+    }
+
+    /**
+     * Get the size of a record.
+     *
+     * @param data the record that will be serialized
+     * @param context context object created by {@link #newWriteContext()}
+     * @return the size in bytes of the serialized record
+     */
+    int recordSize(T data, Object context);
+
+
+    /**
+     * Write the record to the output stream.
+     *
+     * @param data the record to serialize and write
+     * @param context context object created by {@link #newWriteContext()}
+     * @param out the output stream to write the record to
+     */
+    void write(T data, Object context, DataOutputStreamWritable out);
+
+    /**
+     *
+     * @param input
+     * @param size
+     * @return
+     */
path: raft/src/main/java/org/apache/kafka/raft/RecordSerde.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510413244
id: 510426714
url: https://api.github.com/repos/apache/kafka/pulls/comments/510426714
body: Agreed. I added this here: https://github.com/apache/kafka/pull/9418/files#diff-ac850e29114f9b5a03aaf3ccb8f07feda8b48e5de6912f4c527b8477aa3d6cbcR60.
diff_hunk: @@ -16,57 +16,75 @@
  */
 package org.apache.kafka.raft;
 
-import org.apache.kafka.common.record.Records;
-
 import java.io.IOException;
+import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
-public interface RaftClient {
+public interface RaftClient<T> {
+
+    interface Listener<T> {
+        /**
+         * Callback which is invoked for all records committed to the log.
+         * It is the responsibility of the caller to invoke {@link BatchReader#close()}
+         * after consuming the reader.
+         *
+         * Note that there is not a one-to-one correspondence between writes through
+         * {@link #scheduleAppend(int, List)} and this callback. The Raft implementation
+         * is free to batch together the records from multiple append calls provided
+         * that batch boundaries are respected. This means that each batch specified
+         * through {@link #scheduleAppend(int, List)} is guaranteed to be a subset of
+         * a batch provided by the {@link BatchReader}.
+         *
+         * @param reader reader instance which must be iterated
+         */
+        void handleCommit(BatchReader<T> reader);
+
+        /**
+         * Invoked after this node has become a leader. This is only called after
+         * all commits up to the start of the leader's epoch have been sent to
+         * {@link #handleCommit(BatchReader)}.
+         *
+         * After becoming a leader, the client is eligible to write to the log
+         * using {@link #scheduleAppend(int, List)}.
+         *
+         * @param epoch the claimed leader epoch
+         */
+        default void handleClaim(int epoch) {}
+
+        /**
+         * Invoked after a leader has stepped down. This callback may or may not
+         * fire before the next leader has been elected.
+         */
+        default void handleResign() {}
+    }
 
     /**
-     * Initialize the client. This should only be called once and it must be
-     * called before any of the other APIs can be invoked.
+     * Initialize the client. This should only be called once on startup.
      *
      * @throws IOException For any IO errors during initialization
      */
     void initialize() throws IOException;
 
     /**
-     * Append a new entry to the log. The client must be in the leader state to
-     * accept an append: it is up to the state machine implementation
-     * to ensure this using {@link #currentLeaderAndEpoch()}.
-     *
-     * TODO: One improvement we can make here is to allow the caller to specify
-     * the current leader epoch in the record set. That would ensure that each
-     * leader change must be "observed" by the state machine before new appends
-     * are accepted.
-     *
-     * @param records The records to append to the log
-     * @param timeoutMs Maximum time to wait for the append to complete
-     * @return A future containing the last offset and epoch of the appended records (if successful)
-     */
-    CompletableFuture<OffsetAndEpoch> append(Records records, AckMode ackMode, long timeoutMs);
-
-    /**
-     * Read a set of records from the log. Note that it is the responsibility of the state machine
-     * to filter control records added by the Raft client itself.
-     *
-     * If the fetch offset is no longer valid, then the future will be completed exceptionally
-     * with a {@link LogTruncationException}.
+     * Register a listener to get commit/leader notifications.
      *
-     * @param position The position to fetch from
-     * @param isolation The isolation level to apply to the read
-     * @param maxWaitTimeMs The maximum time to wait for new data to become available before completion
-     * @return The record set, which may be empty if fetching from the end of the log
+     * @param listener the listener
      */
-    CompletableFuture<Records> read(OffsetAndEpoch position, Isolation isolation, long maxWaitTimeMs);
+    void register(Listener<T> listener);
 
     /**
-     * Get the current leader (if known) and the current epoch.
+     * Append a list of records to the log. The write will be scheduled for some time
+     * in the future. There is no guarantee that appended records will be written to
+     * the log and eventually committed. However, it is guaranteed that if any of the
+     * records become committed, then all of them will be.
      *
-     * @return Current leader and epoch information
+     * @param epoch the current leader epoch
+     * @param records the list of records to append
+     * @return the offset within the current epoch that the log entries will be appended,
+     *         or null if the leader was unable to accept the write (e.g. due to memory
+     *         being reached).
path: raft/src/main/java/org/apache/kafka/raft/RaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510426714
id: 510432303
url: https://api.github.com/repos/apache/kafka/pulls/comments/510432303
body: Yeah, I don't see a strong need to be too strict about this for now.
diff_hunk: @@ -16,57 +16,75 @@
  */
 package org.apache.kafka.raft;
 
-import org.apache.kafka.common.record.Records;
-
 import java.io.IOException;
+import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
-public interface RaftClient {
+public interface RaftClient<T> {
+
+    interface Listener<T> {
+        /**
+         * Callback which is invoked for all records committed to the log.
+         * It is the responsibility of the caller to invoke {@link BatchReader#close()}
+         * after consuming the reader.
+         *
+         * Note that there is not a one-to-one correspondence between writes through
+         * {@link #scheduleAppend(int, List)} and this callback. The Raft implementation
+         * is free to batch together the records from multiple append calls provided
+         * that batch boundaries are respected. This means that each batch specified
+         * through {@link #scheduleAppend(int, List)} is guaranteed to be a subset of
+         * a batch provided by the {@link BatchReader}.
+         *
+         * @param reader reader instance which must be iterated
+         */
+        void handleCommit(BatchReader<T> reader);
+
+        /**
+         * Invoked after this node has become a leader. This is only called after
+         * all commits up to the start of the leader's epoch have been sent to
+         * {@link #handleCommit(BatchReader)}.
+         *
+         * After becoming a leader, the client is eligible to write to the log
+         * using {@link #scheduleAppend(int, List)}.
+         *
+         * @param epoch the claimed leader epoch
+         */
+        default void handleClaim(int epoch) {}
+
+        /**
+         * Invoked after a leader has stepped down. This callback may or may not
+         * fire before the next leader has been elected.
+         */
+        default void handleResign() {}
+    }
 
     /**
-     * Initialize the client. This should only be called once and it must be
-     * called before any of the other APIs can be invoked.
+     * Initialize the client. This should only be called once on startup.
      *
      * @throws IOException For any IO errors during initialization
      */
     void initialize() throws IOException;
 
     /**
-     * Append a new entry to the log. The client must be in the leader state to
-     * accept an append: it is up to the state machine implementation
-     * to ensure this using {@link #currentLeaderAndEpoch()}.
-     *
-     * TODO: One improvement we can make here is to allow the caller to specify
-     * the current leader epoch in the record set. That would ensure that each
-     * leader change must be "observed" by the state machine before new appends
-     * are accepted.
-     *
-     * @param records The records to append to the log
-     * @param timeoutMs Maximum time to wait for the append to complete
-     * @return A future containing the last offset and epoch of the appended records (if successful)
-     */
-    CompletableFuture<OffsetAndEpoch> append(Records records, AckMode ackMode, long timeoutMs);
-
-    /**
-     * Read a set of records from the log. Note that it is the responsibility of the state machine
-     * to filter control records added by the Raft client itself.
-     *
-     * If the fetch offset is no longer valid, then the future will be completed exceptionally
-     * with a {@link LogTruncationException}.
+     * Register a listener to get commit/leader notifications.
      *
-     * @param position The position to fetch from
-     * @param isolation The isolation level to apply to the read
-     * @param maxWaitTimeMs The maximum time to wait for new data to become available before completion
-     * @return The record set, which may be empty if fetching from the end of the log
+     * @param listener the listener
      */
-    CompletableFuture<Records> read(OffsetAndEpoch position, Isolation isolation, long maxWaitTimeMs);
+    void register(Listener<T> listener);
 
     /**
-     * Get the current leader (if known) and the current epoch.
+     * Append a list of records to the log. The write will be scheduled for some time
+     * in the future. There is no guarantee that appended records will be written to
+     * the log and eventually committed. However, it is guaranteed that if any of the
+     * records become committed, then all of them will be.
      *
-     * @return Current leader and epoch information
+     * @param epoch the current leader epoch
+     * @param records the list of records to append
+     * @return the offset within the current epoch that the log entries will be appended,
+     *         or null if the leader was unable to accept the write (e.g. due to memory
+     *         being reached).
      */
-    LeaderAndEpoch currentLeaderAndEpoch();
+    Long scheduleAppend(int epoch, List<T> records);
path: raft/src/main/java/org/apache/kafka/raft/RaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510432303
id: 510433916
url: https://api.github.com/repos/apache/kafka/pulls/comments/510433916
body: When catching up from the log, yes. However, I have implemented an optimization for writes from the leader. We save the original batch in memory so that it can be sent back to the state machine after the write is committed. In this case, we know the last offset of the batch, so we can have multiple inflight batches sent to the controller. This is nice because it means the elected controller will not have to read from disk.
diff_hunk: @@ -1757,35 +1809,86 @@ public void complete() {
         }
     }
 
-    private static class UnwrittenAppend {
-        private final Records records;
-        private final long createTimeMs;
-        private final long requestTimeoutMs;
-        private final AckMode ackMode;
-        private final CompletableFuture<OffsetAndEpoch> future;
+    private final class ListenerContext implements CloseListener<BatchReader<T>> {
+        private final RaftClient.Listener<T> listener;
+        private BatchReader<T> lastSent = null;
+        private long lastAckedOffset = 0;
+        private int claimedEpoch = 0;
+
+        private ListenerContext(Listener<T> listener) {
+            this.listener = listener;
+        }
+
+        /**
+         * Get the last acked offset, which is one greater than the offset of the
+         * last record which was acked by the state machine.
+         */
+        public synchronized long lastAckedOffset() {
+            return lastAckedOffset;
+        }
+
+        /**
+         * Get the next expected offset, which might be larger than the last acked
+         * offset if there are inflight batches which have not been acked yet.
+         * Note that when fetching from disk, we may not know the last offset of
+         * inflight data until it has been processed by the state machine. In this case,
+         * we delay sending additional data until the state machine has read to the
+         * end and the last offset is determined.
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510433916
id: 510437477
url: https://api.github.com/repos/apache/kafka/pulls/comments/510437477
body: It was intended to refer to the behavior of not retaining the high watermark from the previous sentence. I will attempt to clarify.
diff_hunk: @@ -369,6 +379,17 @@ public void transitionToLeader(long epochStartOffset) throws IOException {
         if (!candidateState.isVoteGranted())
             throw new IllegalStateException("Cannot become leader without majority votes granted");
 
+        // Note that the leader does not retain the high watermark that was known
+        // in the previous state. The purpose of this is to protect the monotonicity
path: raft/src/main/java/org/apache/kafka/raft/QuorumState.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510437477
id: 510438318
url: https://api.github.com/repos/apache/kafka/pulls/comments/510438318
body: Good catch. I think that I forgot to update this when moving from a single listener to multiple listeners.
diff_hunk: @@ -206,30 +234,77 @@ private void updateLeaderEndOffsetAndTimestamp(
         final LogOffsetMetadata endOffsetMetadata = log.endOffset();
 
         if (state.updateLocalState(currentTimeMs, endOffsetMetadata)) {
-            updateHighWatermark(state, currentTimeMs);
+            onUpdateLeaderHighWatermark(state, currentTimeMs);
         }
 
-        LogOffset endOffset = new LogOffset(endOffsetMetadata.offset, Isolation.UNCOMMITTED);
-        fetchPurgatory.maybeComplete(endOffset, currentTimeMs);
+        fetchPurgatory.maybeComplete(endOffsetMetadata.offset, currentTimeMs);
     }
 
-    private void updateHighWatermark(
-        EpochState state,
+    private void onUpdateLeaderHighWatermark(
+        LeaderState state,
         long currentTimeMs
     ) {
         state.highWatermark().ifPresent(highWatermark -> {
-            logger.debug("High watermark updated to {}", highWatermark);
+            logger.debug("Leader high watermark updated to {}", highWatermark);
             log.updateHighWatermark(highWatermark);
-
-            LogOffset offset = new LogOffset(highWatermark.offset, Isolation.COMMITTED);
-            appendPurgatory.maybeComplete(offset, currentTimeMs);
-            fetchPurgatory.maybeComplete(offset, currentTimeMs);
+            appendPurgatory.maybeComplete(highWatermark.offset, currentTimeMs);
+            maybeFireHandleCommit(highWatermark.offset);
         });
     }
 
-    @Override
-    public LeaderAndEpoch currentLeaderAndEpoch() {
-        return quorum.leaderAndEpoch();
+    private void maybeFireHandleCommit(long highWatermark) {
+        maybeFireHandleCommit(listenerContexts, highWatermark);
+    }
+
+    private void maybeFireHandleCommit(List<ListenerContext> listenerContexts, long highWatermark) {
+        // TODO: When there are multiple listeners, we can cache reads to save some work
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510438318
id: 510455713
url: https://api.github.com/repos/apache/kafka/pulls/comments/510455713
body: I thought a little about it. Right now the state machine has just two states: 1) i am not a leader, and 2) i am a leader and have caught up with all committed data from previous epochs.  An alternative design is to fire `handleClaim` immediately and provide the starting offset of the leader epoch. Then the controller can wait until its state machine has caught up to that offset before starting to write data. In the end, I decided not to do it because it adds a third state and I did not expect the controller would be able to do anything useful in the additional state. The point about heartbeats is interesting, but even that seems tricky since the controller would not know if a broker had been fenced until it has caught up. I think the only thing the controller could do is hold the requests in purgatory, which might be better than letting them retry, but not sure it's worth it.
diff_hunk: @@ -206,30 +234,77 @@ private void updateLeaderEndOffsetAndTimestamp(
         final LogOffsetMetadata endOffsetMetadata = log.endOffset();
 
         if (state.updateLocalState(currentTimeMs, endOffsetMetadata)) {
-            updateHighWatermark(state, currentTimeMs);
+            onUpdateLeaderHighWatermark(state, currentTimeMs);
         }
 
-        LogOffset endOffset = new LogOffset(endOffsetMetadata.offset, Isolation.UNCOMMITTED);
-        fetchPurgatory.maybeComplete(endOffset, currentTimeMs);
+        fetchPurgatory.maybeComplete(endOffsetMetadata.offset, currentTimeMs);
     }
 
-    private void updateHighWatermark(
-        EpochState state,
+    private void onUpdateLeaderHighWatermark(
+        LeaderState state,
         long currentTimeMs
     ) {
         state.highWatermark().ifPresent(highWatermark -> {
-            logger.debug("High watermark updated to {}", highWatermark);
+            logger.debug("Leader high watermark updated to {}", highWatermark);
             log.updateHighWatermark(highWatermark);
-
-            LogOffset offset = new LogOffset(highWatermark.offset, Isolation.COMMITTED);
-            appendPurgatory.maybeComplete(offset, currentTimeMs);
-            fetchPurgatory.maybeComplete(offset, currentTimeMs);
+            appendPurgatory.maybeComplete(highWatermark.offset, currentTimeMs);
+            maybeFireHandleCommit(highWatermark.offset);
         });
     }
 
-    @Override
-    public LeaderAndEpoch currentLeaderAndEpoch() {
-        return quorum.leaderAndEpoch();
+    private void maybeFireHandleCommit(long highWatermark) {
+        maybeFireHandleCommit(listenerContexts, highWatermark);
+    }
+
+    private void maybeFireHandleCommit(List<ListenerContext> listenerContexts, long highWatermark) {
+        // TODO: When there are multiple listeners, we can cache reads to save some work
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
+            }
+
+            long nextExpectedOffset = nextExpectedOffsetOpt.getAsLong();
+            if (nextExpectedOffset < highWatermark) {
+                LogFetchInfo readInfo = log.read(nextExpectedOffset, Isolation.COMMITTED);
+                listenerContext.fireHandleCommit(nextExpectedOffset, readInfo.records);
+            }
+        }
+    }
+
+    private void maybeFireHandleCommit(long baseOffset, int epoch, List<T> records) {
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
+            }
+
+            long nextExpectedOffset = nextExpectedOffsetOpt.getAsLong();
+            if (nextExpectedOffset == baseOffset) {
+                listenerContext.fireHandleCommit(baseOffset, epoch, records);
+            }
+        }
+    }
+
+    private void maybeFireHandleClaim(LeaderState state) {
+        for (ListenerContext listenerContext : listenerContexts) {
+            int leaderEpoch = state.epoch();
+
+            // We can fire `handleClaim` as soon as the listener has caught
+            // up to the start of the leader epoch. This guarantees that the
+            // state machine has seen the full committed state before it becomes
+            // leader and begins writing to the log.
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510455713
id: 510469742
url: https://api.github.com/repos/apache/kafka/pulls/comments/510469742
body: Yeah. I was thinking of the same thing, "hold the requests in purgatory". But like you said, maybe this optimization is not worth the added complexity.
diff_hunk: @@ -206,30 +234,77 @@ private void updateLeaderEndOffsetAndTimestamp(
         final LogOffsetMetadata endOffsetMetadata = log.endOffset();
 
         if (state.updateLocalState(currentTimeMs, endOffsetMetadata)) {
-            updateHighWatermark(state, currentTimeMs);
+            onUpdateLeaderHighWatermark(state, currentTimeMs);
         }
 
-        LogOffset endOffset = new LogOffset(endOffsetMetadata.offset, Isolation.UNCOMMITTED);
-        fetchPurgatory.maybeComplete(endOffset, currentTimeMs);
+        fetchPurgatory.maybeComplete(endOffsetMetadata.offset, currentTimeMs);
     }
 
-    private void updateHighWatermark(
-        EpochState state,
+    private void onUpdateLeaderHighWatermark(
+        LeaderState state,
         long currentTimeMs
     ) {
         state.highWatermark().ifPresent(highWatermark -> {
-            logger.debug("High watermark updated to {}", highWatermark);
+            logger.debug("Leader high watermark updated to {}", highWatermark);
             log.updateHighWatermark(highWatermark);
-
-            LogOffset offset = new LogOffset(highWatermark.offset, Isolation.COMMITTED);
-            appendPurgatory.maybeComplete(offset, currentTimeMs);
-            fetchPurgatory.maybeComplete(offset, currentTimeMs);
+            appendPurgatory.maybeComplete(highWatermark.offset, currentTimeMs);
+            maybeFireHandleCommit(highWatermark.offset);
         });
     }
 
-    @Override
-    public LeaderAndEpoch currentLeaderAndEpoch() {
-        return quorum.leaderAndEpoch();
+    private void maybeFireHandleCommit(long highWatermark) {
+        maybeFireHandleCommit(listenerContexts, highWatermark);
+    }
+
+    private void maybeFireHandleCommit(List<ListenerContext> listenerContexts, long highWatermark) {
+        // TODO: When there are multiple listeners, we can cache reads to save some work
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
+            }
+
+            long nextExpectedOffset = nextExpectedOffsetOpt.getAsLong();
+            if (nextExpectedOffset < highWatermark) {
+                LogFetchInfo readInfo = log.read(nextExpectedOffset, Isolation.COMMITTED);
+                listenerContext.fireHandleCommit(nextExpectedOffset, readInfo.records);
+            }
+        }
+    }
+
+    private void maybeFireHandleCommit(long baseOffset, int epoch, List<T> records) {
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
+            }
+
+            long nextExpectedOffset = nextExpectedOffsetOpt.getAsLong();
+            if (nextExpectedOffset == baseOffset) {
+                listenerContext.fireHandleCommit(baseOffset, epoch, records);
+            }
+        }
+    }
+
+    private void maybeFireHandleClaim(LeaderState state) {
+        for (ListenerContext listenerContext : listenerContexts) {
+            int leaderEpoch = state.epoch();
+
+            // We can fire `handleClaim` as soon as the listener has caught
+            // up to the start of the leader epoch. This guarantees that the
+            // state machine has seen the full committed state before it becomes
+            // leader and begins writing to the log.
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510469742
id: 510513954
url: https://api.github.com/repos/apache/kafka/pulls/comments/510513954
body: I guess let's keep this option in our back pocket for now.
diff_hunk: @@ -206,30 +234,77 @@ private void updateLeaderEndOffsetAndTimestamp(
         final LogOffsetMetadata endOffsetMetadata = log.endOffset();
 
         if (state.updateLocalState(currentTimeMs, endOffsetMetadata)) {
-            updateHighWatermark(state, currentTimeMs);
+            onUpdateLeaderHighWatermark(state, currentTimeMs);
         }
 
-        LogOffset endOffset = new LogOffset(endOffsetMetadata.offset, Isolation.UNCOMMITTED);
-        fetchPurgatory.maybeComplete(endOffset, currentTimeMs);
+        fetchPurgatory.maybeComplete(endOffsetMetadata.offset, currentTimeMs);
     }
 
-    private void updateHighWatermark(
-        EpochState state,
+    private void onUpdateLeaderHighWatermark(
+        LeaderState state,
         long currentTimeMs
     ) {
         state.highWatermark().ifPresent(highWatermark -> {
-            logger.debug("High watermark updated to {}", highWatermark);
+            logger.debug("Leader high watermark updated to {}", highWatermark);
             log.updateHighWatermark(highWatermark);
-
-            LogOffset offset = new LogOffset(highWatermark.offset, Isolation.COMMITTED);
-            appendPurgatory.maybeComplete(offset, currentTimeMs);
-            fetchPurgatory.maybeComplete(offset, currentTimeMs);
+            appendPurgatory.maybeComplete(highWatermark.offset, currentTimeMs);
+            maybeFireHandleCommit(highWatermark.offset);
         });
     }
 
-    @Override
-    public LeaderAndEpoch currentLeaderAndEpoch() {
-        return quorum.leaderAndEpoch();
+    private void maybeFireHandleCommit(long highWatermark) {
+        maybeFireHandleCommit(listenerContexts, highWatermark);
+    }
+
+    private void maybeFireHandleCommit(List<ListenerContext> listenerContexts, long highWatermark) {
+        // TODO: When there are multiple listeners, we can cache reads to save some work
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
+            }
+
+            long nextExpectedOffset = nextExpectedOffsetOpt.getAsLong();
+            if (nextExpectedOffset < highWatermark) {
+                LogFetchInfo readInfo = log.read(nextExpectedOffset, Isolation.COMMITTED);
+                listenerContext.fireHandleCommit(nextExpectedOffset, readInfo.records);
+            }
+        }
+    }
+
+    private void maybeFireHandleCommit(long baseOffset, int epoch, List<T> records) {
+        for (ListenerContext listenerContext : listenerContexts) {
+            OptionalLong nextExpectedOffsetOpt = listenerContext.nextExpectedOffset();
+            if (!nextExpectedOffsetOpt.isPresent()) {
+                return;
+            }
+
+            long nextExpectedOffset = nextExpectedOffsetOpt.getAsLong();
+            if (nextExpectedOffset == baseOffset) {
+                listenerContext.fireHandleCommit(baseOffset, epoch, records);
+            }
+        }
+    }
+
+    private void maybeFireHandleClaim(LeaderState state) {
+        for (ListenerContext listenerContext : listenerContexts) {
+            int leaderEpoch = state.epoch();
+
+            // We can fire `handleClaim` as soon as the listener has caught
+            // up to the start of the leader epoch. This guarantees that the
+            // state machine has seen the full committed state before it becomes
+            // leader and begins writing to the log.
path: raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java
html: https://github.com/apache/kafka/pull/9482#discussion_r510513954
pull_request_number: 9482
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9473/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9473/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9473"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9473"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9473/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9473"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/87d8331dbf47eb149870a4553e7867a6ceb38087"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Topic IDs must be created for all new topics and all existing topics that do not yet have a topic ID. In ZooKeeper, the ID is written to the TopicZNode, and in the controller, it is stored in a map. \r\n\r\nThis is a preliminary change before the second part of KAFKA-10545, which will propagate these IDs to brokers.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9473/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9473/commits",
  "created_at": "2020-10-21T17:23:28Z",
  "diff_url": "https://github.com/apache/kafka/pull/9473.diff",
  "draft": false,
  "head": {
    "label": "jolshan:KIP516_Controller_and_ZK",
    "ref": "KIP516_Controller_and_ZK",
    "repo": {
      "archive_url": "https://api.github.com/repos/jolshan/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/jolshan/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/jolshan/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/jolshan/kafka/branches{/branch}",
      "clone_url": "https://github.com/jolshan/kafka.git",
      "collaborators_url": "https://api.github.com/repos/jolshan/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/jolshan/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/jolshan/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/jolshan/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/jolshan/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/jolshan/kafka/contributors",
      "created_at": "2020-08-21T16:50:35Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/jolshan/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/jolshan/kafka/downloads",
      "events_url": "https://api.github.com/repos/jolshan/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/jolshan/kafka/forks",
      "full_name": "jolshan/kafka",
      "git_commits_url": "https://api.github.com/repos/jolshan/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/jolshan/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/jolshan/kafka/git/tags{/sha}",
      "git_url": "git://github.com/jolshan/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/jolshan/kafka/hooks",
      "html_url": "https://github.com/jolshan/kafka",
      "id": 289319790,
      "issue_comment_url": "https://api.github.com/repos/jolshan/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/jolshan/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/jolshan/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/jolshan/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/jolshan/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/jolshan/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/jolshan/kafka/merges",
      "milestones_url": "https://api.github.com/repos/jolshan/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyODkzMTk3OTA=",
      "notifications_url": "https://api.github.com/repos/jolshan/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/25566826?v=4",
        "events_url": "https://api.github.com/users/jolshan/events{/privacy}",
        "followers_url": "https://api.github.com/users/jolshan/followers",
        "following_url": "https://api.github.com/users/jolshan/following{/other_user}",
        "gists_url": "https://api.github.com/users/jolshan/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jolshan",
        "id": 25566826,
        "login": "jolshan",
        "node_id": "MDQ6VXNlcjI1NTY2ODI2",
        "organizations_url": "https://api.github.com/users/jolshan/orgs",
        "received_events_url": "https://api.github.com/users/jolshan/received_events",
        "repos_url": "https://api.github.com/users/jolshan/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jolshan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jolshan/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jolshan"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/jolshan/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T22:14:55Z",
      "releases_url": "https://api.github.com/repos/jolshan/kafka/releases{/id}",
      "size": 108010,
      "ssh_url": "git@github.com:jolshan/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/jolshan/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/jolshan/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/jolshan/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/jolshan/kafka/subscription",
      "svn_url": "https://github.com/jolshan/kafka",
      "tags_url": "https://api.github.com/repos/jolshan/kafka/tags",
      "teams_url": "https://api.github.com/repos/jolshan/kafka/teams",
      "trees_url": "https://api.github.com/repos/jolshan/kafka/git/trees{/sha}",
      "updated_at": "2020-10-02T20:37:35Z",
      "url": "https://api.github.com/repos/jolshan/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "87d8331dbf47eb149870a4553e7867a6ceb38087",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/25566826?v=4",
      "events_url": "https://api.github.com/users/jolshan/events{/privacy}",
      "followers_url": "https://api.github.com/users/jolshan/followers",
      "following_url": "https://api.github.com/users/jolshan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jolshan/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jolshan",
      "id": 25566826,
      "login": "jolshan",
      "node_id": "MDQ6VXNlcjI1NTY2ODI2",
      "organizations_url": "https://api.github.com/users/jolshan/orgs",
      "received_events_url": "https://api.github.com/users/jolshan/received_events",
      "repos_url": "https://api.github.com/users/jolshan/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jolshan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jolshan/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jolshan"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9473",
  "id": 507728049,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9473",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "42a73ffa6d4927b152f7efa32e1cad586c3b4269",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA3NzI4MDQ5",
  "number": 9473,
  "patch_url": "https://github.com/apache/kafka/pull/9473.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9473/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/87d8331dbf47eb149870a4553e7867a6ceb38087",
  "title": "KAFKA-10545: Create topic IDs in ZooKeeper and Controller",
  "updated_at": "2020-10-26T18:07:34Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9473",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/25566826?v=4",
    "events_url": "https://api.github.com/users/jolshan/events{/privacy}",
    "followers_url": "https://api.github.com/users/jolshan/followers",
    "following_url": "https://api.github.com/users/jolshan/following{/other_user}",
    "gists_url": "https://api.github.com/users/jolshan/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/jolshan",
    "id": 25566826,
    "login": "jolshan",
    "node_id": "MDQ6VXNlcjI1NTY2ODI2",
    "organizations_url": "https://api.github.com/users/jolshan/orgs",
    "received_events_url": "https://api.github.com/users/jolshan/received_events",
    "repos_url": "https://api.github.com/users/jolshan/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/jolshan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jolshan/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/jolshan"
  }
}
json_root is_array: false
json_root is_object: true
number: 9473
url: https://api.github.com/repos/apache/kafka/pulls/9473
title: KAFKA-10545: Create topic IDs in ZooKeeper and Controller
body: Topic IDs must be created for all new topics and all existing topics that do not yet have a topic ID. In ZooKeeper, the ID is written to the TopicZNode, and in the controller, it is stored in a map. 

This is a preliminary change before the second part of KAFKA-10545, which will propagate these IDs to brokers.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9473/comments
id: 511880256
url: https://api.github.com/repos/apache/kafka/pulls/comments/511880256
body: Do we want to do both checks first and update the two maps together at the end? We may also want to check that the topic exists in `allTopics`.
diff_hunk: @@ -126,6 +130,23 @@ class ControllerContext {
     replicaStates.clear()
   }
 
+  def addTopicId(topic: String, id: UUID): Unit = {
+    topicIds.get(topic).foreach { existingId =>
+      if (!existingId.equals(id))
+        throw new IllegalStateException("topic ID map already contained ID for topic "
+          + topic + " and new ID " + id + " did not match existing ID "
+          + existingId)
+    }
+    topicIds.put(topic, id)
path: core/src/main/scala/kafka/controller/ControllerContext.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511880256
id: 511882563
url: https://api.github.com/repos/apache/kafka/pulls/comments/511882563
body: We could do:
```
topicIds.remove(topic).foreach { topicId =>
  topicNames.remove(topicId)
}
```
diff_hunk: @@ -295,6 +316,10 @@ class ControllerContext {
     topicsToBeDeleted -= topic
     topicsWithDeletionStarted -= topic
     allTopics -= topic
+    if (topicIds.get(topic)!= None) {
+      topicNames.remove(topicIds.get(topic).get)
+      topicIds.remove(topic)
+    }
path: core/src/main/scala/kafka/controller/ControllerContext.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511882563
id: 511886842
url: https://api.github.com/repos/apache/kafka/pulls/comments/511886842
body: Can use `controllerContext.topicIds(topicPartition.topic)`
diff_hunk: @@ -1027,7 +1032,9 @@ class KafkaController(val config: KafkaConfig,
       controllerContext.partitionFullReplicaAssignmentForTopic(topicPartition.topic) +=
       (topicPartition -> assignment)
 
-    val setDataResponse = zkClient.setTopicAssignmentRaw(topicPartition.topic, topicAssignment, controllerContext.epochZkVersion)
+    val setDataResponse = zkClient.setTopicAssignmentRaw(topicPartition.topic,
+      controllerContext.topicIds.get(topicPartition.topic).get,
path: core/src/main/scala/kafka/controller/KafkaController.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511886842
id: 511888172
url: https://api.github.com/repos/apache/kafka/pulls/comments/511888172
body: As before: `controllerContext.topicIds(topic)`
diff_hunk: @@ -1670,6 +1691,7 @@ class KafkaController(val config: KafkaConfig,
       }.toMap
 
       zkClient.setTopicAssignment(topic,
+        controllerContext.topicIds.get(topic).get,
path: core/src/main/scala/kafka/controller/KafkaController.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511888172
id: 511889829
url: https://api.github.com/repos/apache/kafka/pulls/comments/511889829
body: `topicIds(topic)`
diff_hunk: @@ -158,9 +158,11 @@ class AdminZkClient(zkClient: KafkaZkClient) extends Logging {
       val assignment = replicaAssignment.map { case (partitionId, replicas) => (new TopicPartition(topic,partitionId), replicas) }.toMap
 
       if (!isUpdate) {
-        zkClient.createTopicAssignment(topic, assignment.map { case (k, v) => k -> v.replicas })
+        val topicId = UUID.randomUUID()
+        zkClient.createTopicAssignment(topic, topicId, assignment.map { case (k, v) => k -> v.replicas })
       } else {
-        zkClient.setTopicAssignment(topic, assignment)
+        val topicIds = zkClient.getTopicIdsForTopics(Set(topic))
+        zkClient.setTopicAssignment(topic, topicIds.get(topic).get, assignment)
path: core/src/main/scala/kafka/zk/AdminZkClient.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511889829
id: 511891101
url: https://api.github.com/repos/apache/kafka/pulls/comments/511891101
body: Is topicId optional?
diff_hunk: @@ -481,43 +482,70 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo
     pathExists(TopicZNode.path(topicName))
   }
 
+  /**
+   * Adds a topic ID to existing topic and replica assignments
+   * @param topicIdReplicaAssignments the TopicIDReplicaAssignments to add a topic ID to
+   * @return the updated TopicIdReplicaAssigments including the newly created topic IDs
+   */
+  def setTopicIds(topicIdReplicaAssignments: collection.Set[TopicIdReplicaAssignment],
+                  expectedControllerEpochZkVersion: Int): Set[TopicIdReplicaAssignment] = {
+    val updatedAssignments = topicIdReplicaAssignments.map {
+      case TopicIdReplicaAssignment(topic, None, assignments) =>
+        TopicIdReplicaAssignment(topic, Some(UUID.randomUUID()), assignments)
+      case TopicIdReplicaAssignment(topic, Some(_), _) =>
+        throw new IllegalArgumentException("TopicIdReplicaAssignment for " + topic + " already contains a topic ID.")
+    }.toSet
+
+    val setDataRequests = updatedAssignments.map { case TopicIdReplicaAssignment(topic, topicIdOpt, assignments) =>
+      SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(topicIdOpt.get, assignments), ZkVersion.MatchAnyVersion)
+    }.toSeq
+
+    retryRequestsUntilConnected(setDataRequests, expectedControllerEpochZkVersion)
+    updatedAssignments
+  }
+
   /**
    * Sets the topic znode with the given assignment.
    * @param topic the topic whose assignment is being set.
+   * @param topicId optional topic ID if the topic has one
    * @param assignment the partition to replica mapping to set for the given topic
    * @param expectedControllerEpochZkVersion expected controller epoch zkVersion.
    * @return SetDataResponse
    */
   def setTopicAssignmentRaw(topic: String,
+                            topicId: UUID,
                             assignment: collection.Map[TopicPartition, ReplicaAssignment],
                             expectedControllerEpochZkVersion: Int): SetDataResponse = {
-    val setDataRequest = SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(assignment), ZkVersion.MatchAnyVersion)
+    val setDataRequest = SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(topicId, assignment), ZkVersion.MatchAnyVersion)
     retryRequestUntilConnected(setDataRequest, expectedControllerEpochZkVersion)
   }
 
   /**
    * Sets the topic znode with the given assignment.
    * @param topic the topic whose assignment is being set.
+   * @param topicId optional topic ID if the topic has one
path: core/src/main/scala/kafka/zk/KafkaZkClient.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511891101
id: 511891201
url: https://api.github.com/repos/apache/kafka/pulls/comments/511891201
body: Is topicId optional?
diff_hunk: @@ -481,43 +482,70 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo
     pathExists(TopicZNode.path(topicName))
   }
 
+  /**
+   * Adds a topic ID to existing topic and replica assignments
+   * @param topicIdReplicaAssignments the TopicIDReplicaAssignments to add a topic ID to
+   * @return the updated TopicIdReplicaAssigments including the newly created topic IDs
+   */
+  def setTopicIds(topicIdReplicaAssignments: collection.Set[TopicIdReplicaAssignment],
+                  expectedControllerEpochZkVersion: Int): Set[TopicIdReplicaAssignment] = {
+    val updatedAssignments = topicIdReplicaAssignments.map {
+      case TopicIdReplicaAssignment(topic, None, assignments) =>
+        TopicIdReplicaAssignment(topic, Some(UUID.randomUUID()), assignments)
+      case TopicIdReplicaAssignment(topic, Some(_), _) =>
+        throw new IllegalArgumentException("TopicIdReplicaAssignment for " + topic + " already contains a topic ID.")
+    }.toSet
+
+    val setDataRequests = updatedAssignments.map { case TopicIdReplicaAssignment(topic, topicIdOpt, assignments) =>
+      SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(topicIdOpt.get, assignments), ZkVersion.MatchAnyVersion)
+    }.toSeq
+
+    retryRequestsUntilConnected(setDataRequests, expectedControllerEpochZkVersion)
+    updatedAssignments
+  }
+
   /**
    * Sets the topic znode with the given assignment.
    * @param topic the topic whose assignment is being set.
+   * @param topicId optional topic ID if the topic has one
    * @param assignment the partition to replica mapping to set for the given topic
    * @param expectedControllerEpochZkVersion expected controller epoch zkVersion.
    * @return SetDataResponse
    */
   def setTopicAssignmentRaw(topic: String,
+                            topicId: UUID,
                             assignment: collection.Map[TopicPartition, ReplicaAssignment],
                             expectedControllerEpochZkVersion: Int): SetDataResponse = {
-    val setDataRequest = SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(assignment), ZkVersion.MatchAnyVersion)
+    val setDataRequest = SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(topicId, assignment), ZkVersion.MatchAnyVersion)
     retryRequestUntilConnected(setDataRequest, expectedControllerEpochZkVersion)
   }
 
   /**
    * Sets the topic znode with the given assignment.
    * @param topic the topic whose assignment is being set.
+   * @param topicId optional topic ID if the topic has one
    * @param assignment the partition to replica mapping to set for the given topic
    * @param expectedControllerEpochZkVersion expected controller epoch zkVersion.
    * @throws KeeperException if there is an error while setting assignment
    */
   def setTopicAssignment(topic: String,
+                         topicId: UUID,
                          assignment: Map[TopicPartition, ReplicaAssignment],
                          expectedControllerEpochZkVersion: Int = ZkVersion.MatchAnyVersion) = {
-    val setDataResponse = setTopicAssignmentRaw(topic, assignment, expectedControllerEpochZkVersion)
+    val setDataResponse = setTopicAssignmentRaw(topic, topicId, assignment, expectedControllerEpochZkVersion)
     setDataResponse.maybeThrow()
   }
 
   /**
    * Create the topic znode with the given assignment.
    * @param topic the topic whose assignment is being set.
+   * @param topicId optional topic ID if the topic has one
path: core/src/main/scala/kafka/zk/KafkaZkClient.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511891201
id: 511893263
url: https://api.github.com/repos/apache/kafka/pulls/comments/511893263
body: Do we expect cases where topicId is not defined? If so, do we need to distinguish between topics that don't exist and topics that don't have topic ids? Either way, we should update javadoc (unless we throw an IllegalStateException here for topic id not set).
diff_hunk: @@ -577,6 +605,27 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo
     retryRequestsUntilConnected(deleteRequests, expectedControllerEpochZkVersion)
   }
 
+  /**
+   * Gets the topic IDs for the given topics.
+   * @param topics the topics we wish to retrieve the Topic IDs for
+   * @return the Topic IDs
+   */
+  def getTopicIdsForTopics(topics: Set[String]): Map[String, UUID] = {
+    val getDataRequests = topics.map(topic => GetDataRequest(TopicZNode.path(topic), ctx = Some(topic)))
+    val getDataResponses = retryRequestsUntilConnected(getDataRequests.toSeq)
+    getDataResponses.map { getDataResponse =>
+      val topic = getDataResponse.ctx.get.asInstanceOf[String]
+      getDataResponse.resultCode match {
+        case Code.OK => Some(TopicZNode.decode(topic, getDataResponse.data))
+        case Code.NONODE => None
+        case _ => throw getDataResponse.resultException.get
+      }
+    }.filter(_.flatMap(_.topicId).isDefined)
path: core/src/main/scala/kafka/zk/KafkaZkClient.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511893263
id: 511894444
url: https://api.github.com/repos/apache/kafka/pulls/comments/511894444
body: nit: indentation - looks like the indentation of the `if` statement above is off.
diff_hunk: @@ -616,7 +683,7 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo
     getDataResponses.flatMap { getDataResponse =>
       val topic = getDataResponse.ctx.get.asInstanceOf[String]
        if (getDataResponse.resultCode == Code.OK) {
-        val partitionMap = TopicZNode.decode(topic, getDataResponse.data).map { case (k, v) => (k.partition, v) }
+         val partitionMap = TopicZNode.decode(topic, getDataResponse.data).assignment.map { case (k, v) => (k.partition, v) }
path: core/src/main/scala/kafka/zk/KafkaZkClient.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511894444
id: 511895940
url: https://api.github.com/repos/apache/kafka/pulls/comments/511895940
body: `assertNotEquals`?
diff_hunk: @@ -848,6 +848,110 @@ class ControllerIntegrationTest extends ZooKeeperTestHarness {
     latch.await()
   }
 
+  @Test
+  def testTopicIdsAreAdded(): Unit = {
+    servers = makeServers(1)
+    TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp1 = new TopicPartition("t1", 0)
+    val assignment1 = Map(tp1.partition -> Seq(0))
+
+    // Before adding the topic, an attempt to get the ID should result in None.
+    assertTrue(controller.controllerContext.topicIds.get("t1") == None)
+
+    TestUtils.createTopic(zkClient, tp1.topic(), assignment1, servers)
+
+    // Test that the first topic has its ID added correctly
+    waitForPartitionState(tp1, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t1") != None)
path: core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511895940
id: 511896386
url: https://api.github.com/repos/apache/kafka/pulls/comments/511896386
body: `.topicIds("t1")`
diff_hunk: @@ -848,6 +848,110 @@ class ControllerIntegrationTest extends ZooKeeperTestHarness {
     latch.await()
   }
 
+  @Test
+  def testTopicIdsAreAdded(): Unit = {
+    servers = makeServers(1)
+    TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp1 = new TopicPartition("t1", 0)
+    val assignment1 = Map(tp1.partition -> Seq(0))
+
+    // Before adding the topic, an attempt to get the ID should result in None.
+    assertTrue(controller.controllerContext.topicIds.get("t1") == None)
+
+    TestUtils.createTopic(zkClient, tp1.topic(), assignment1, servers)
+
+    // Test that the first topic has its ID added correctly
+    waitForPartitionState(tp1, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t1") != None)
+    val topicId1 = controller.controllerContext.topicIds.get("t1").get
path: core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511896386
id: 511896770
url: https://api.github.com/repos/apache/kafka/pulls/comments/511896770
body: Reverse the arguments since expected value comes first?
diff_hunk: @@ -848,6 +848,110 @@ class ControllerIntegrationTest extends ZooKeeperTestHarness {
     latch.await()
   }
 
+  @Test
+  def testTopicIdsAreAdded(): Unit = {
+    servers = makeServers(1)
+    TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp1 = new TopicPartition("t1", 0)
+    val assignment1 = Map(tp1.partition -> Seq(0))
+
+    // Before adding the topic, an attempt to get the ID should result in None.
+    assertTrue(controller.controllerContext.topicIds.get("t1") == None)
+
+    TestUtils.createTopic(zkClient, tp1.topic(), assignment1, servers)
+
+    // Test that the first topic has its ID added correctly
+    waitForPartitionState(tp1, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t1") != None)
+    val topicId1 = controller.controllerContext.topicIds.get("t1").get
+    assertEquals(controller.controllerContext.topicNames(topicId1), "t1")
path: core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511896770
id: 511897141
url: https://api.github.com/repos/apache/kafka/pulls/comments/511897141
body: Same comments as earlier for this block.
diff_hunk: @@ -848,6 +848,110 @@ class ControllerIntegrationTest extends ZooKeeperTestHarness {
     latch.await()
   }
 
+  @Test
+  def testTopicIdsAreAdded(): Unit = {
+    servers = makeServers(1)
+    TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp1 = new TopicPartition("t1", 0)
+    val assignment1 = Map(tp1.partition -> Seq(0))
+
+    // Before adding the topic, an attempt to get the ID should result in None.
+    assertTrue(controller.controllerContext.topicIds.get("t1") == None)
+
+    TestUtils.createTopic(zkClient, tp1.topic(), assignment1, servers)
+
+    // Test that the first topic has its ID added correctly
+    waitForPartitionState(tp1, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t1") != None)
+    val topicId1 = controller.controllerContext.topicIds.get("t1").get
+    assertEquals(controller.controllerContext.topicNames(topicId1), "t1")
+
+    val tp2 = new TopicPartition("t2", 0)
+    val assignment2 = Map(tp2.partition -> Seq(0))
+    TestUtils.createTopic(zkClient, tp2.topic(), assignment2, servers)
+
+    // Test that the second topic has its ID added correctly
+    waitForPartitionState(tp2, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t2") != None)
+    val topicId2 = controller.controllerContext.topicIds.get("t2").get
+    assertEquals(controller.controllerContext.topicNames(topicId2), "t2")
path: core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511897141
id: 511897277
url: https://api.github.com/repos/apache/kafka/pulls/comments/511897277
body: `assertNotEquals`
diff_hunk: @@ -848,6 +848,110 @@ class ControllerIntegrationTest extends ZooKeeperTestHarness {
     latch.await()
   }
 
+  @Test
+  def testTopicIdsAreAdded(): Unit = {
+    servers = makeServers(1)
+    TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp1 = new TopicPartition("t1", 0)
+    val assignment1 = Map(tp1.partition -> Seq(0))
+
+    // Before adding the topic, an attempt to get the ID should result in None.
+    assertTrue(controller.controllerContext.topicIds.get("t1") == None)
+
+    TestUtils.createTopic(zkClient, tp1.topic(), assignment1, servers)
+
+    // Test that the first topic has its ID added correctly
+    waitForPartitionState(tp1, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t1") != None)
+    val topicId1 = controller.controllerContext.topicIds.get("t1").get
+    assertEquals(controller.controllerContext.topicNames(topicId1), "t1")
+
+    val tp2 = new TopicPartition("t2", 0)
+    val assignment2 = Map(tp2.partition -> Seq(0))
+    TestUtils.createTopic(zkClient, tp2.topic(), assignment2, servers)
+
+    // Test that the second topic has its ID added correctly
+    waitForPartitionState(tp2, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t2") != None)
+    val topicId2 = controller.controllerContext.topicIds.get("t2").get
+    assertEquals(controller.controllerContext.topicNames(topicId2), "t2")
+
+    // The first topic ID has not changed
+    assertEquals(topicId1, controller.controllerContext.topicIds.get("t1").get)
+    assertTrue(!topicId1.equals(topicId2))
path: core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511897277
id: 511898587
url: https://api.github.com/repos/apache/kafka/pulls/comments/511898587
body: nit: unnecessary newline
diff_hunk: @@ -848,6 +848,110 @@ class ControllerIntegrationTest extends ZooKeeperTestHarness {
     latch.await()
   }
 
+  @Test
+  def testTopicIdsAreAdded(): Unit = {
+    servers = makeServers(1)
+    TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp1 = new TopicPartition("t1", 0)
+    val assignment1 = Map(tp1.partition -> Seq(0))
+
+    // Before adding the topic, an attempt to get the ID should result in None.
+    assertTrue(controller.controllerContext.topicIds.get("t1") == None)
+
+    TestUtils.createTopic(zkClient, tp1.topic(), assignment1, servers)
+
+    // Test that the first topic has its ID added correctly
+    waitForPartitionState(tp1, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t1") != None)
+    val topicId1 = controller.controllerContext.topicIds.get("t1").get
+    assertEquals(controller.controllerContext.topicNames(topicId1), "t1")
+
+    val tp2 = new TopicPartition("t2", 0)
+    val assignment2 = Map(tp2.partition -> Seq(0))
+    TestUtils.createTopic(zkClient, tp2.topic(), assignment2, servers)
+
+    // Test that the second topic has its ID added correctly
+    waitForPartitionState(tp2, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t2") != None)
+    val topicId2 = controller.controllerContext.topicIds.get("t2").get
+    assertEquals(controller.controllerContext.topicNames(topicId2), "t2")
+
+    // The first topic ID has not changed
+    assertEquals(topicId1, controller.controllerContext.topicIds.get("t1").get)
+    assertTrue(!topicId1.equals(topicId2))
+  }
+
+
+  @Test
+  def testTopicIdMigrationAndHandling(): Unit = {
+    val tp = new TopicPartition("t", 0)
+    val assignment = Map(tp.partition -> ReplicaAssignment(Seq(0), List(), List()))
+    val adminZkClient = new AdminZkClient(zkClient)
+
+    servers = makeServers(1)
+    adminZkClient.createTopic(tp.topic, 1, 1)
+    waitForPartitionState(tp, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    val topicIdAfterCreate = zkClient.getTopicIdsForTopics(Set(tp.topic())).get(tp.topic())
+    assertTrue(topicIdAfterCreate.isDefined)
+    assertEquals("correct topic ID cannot be found in the controller context",
+      topicIdAfterCreate, servers.head.kafkaController.controllerContext.topicIds.get(tp.topic))
+
+    adminZkClient.addPartitions(tp.topic, assignment, adminZkClient.getBrokerMetadatas(), 2)
+    val topicIdAfterAddition = zkClient.getTopicIdsForTopics(Set(tp.topic())).get(tp.topic())
+    assertEquals(topicIdAfterCreate, topicIdAfterAddition)
+    assertEquals("topic ID changed after partition additions",
+      topicIdAfterCreate, servers.head.kafkaController.controllerContext.topicIds.get(tp.topic))
+
+    adminZkClient.deleteTopic(tp.topic)
+    TestUtils.waitUntilTrue(() => servers.head.kafkaController.controllerContext.topicIds.get(tp.topic).isEmpty,
+      "topic ID for topic should have been removed from controller context after deletion")
+  }
+
+  @Test
+  def testTopicIdPersistsThroughControllerReelection(): Unit = {
+    servers = makeServers(2)
+    val controllerId = TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp = new TopicPartition("t", 0)
+    val assignment = Map(tp.partition -> Seq(controllerId))
+    TestUtils.createTopic(zkClient, tp.topic, partitionReplicaAssignment = assignment, servers = servers)
+    waitForPartitionState(tp, firstControllerEpoch, controllerId, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    val topicId = controller.controllerContext.topicIds.get("t").get
+
+
path: core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511898587
id: 511899119
url: https://api.github.com/repos/apache/kafka/pulls/comments/511899119
body: nit: unnecessary newline (just one required)?
diff_hunk: @@ -848,6 +848,110 @@ class ControllerIntegrationTest extends ZooKeeperTestHarness {
     latch.await()
   }
 
+  @Test
+  def testTopicIdsAreAdded(): Unit = {
+    servers = makeServers(1)
+    TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp1 = new TopicPartition("t1", 0)
+    val assignment1 = Map(tp1.partition -> Seq(0))
+
+    // Before adding the topic, an attempt to get the ID should result in None.
+    assertTrue(controller.controllerContext.topicIds.get("t1") == None)
+
+    TestUtils.createTopic(zkClient, tp1.topic(), assignment1, servers)
+
+    // Test that the first topic has its ID added correctly
+    waitForPartitionState(tp1, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t1") != None)
+    val topicId1 = controller.controllerContext.topicIds.get("t1").get
+    assertEquals(controller.controllerContext.topicNames(topicId1), "t1")
+
+    val tp2 = new TopicPartition("t2", 0)
+    val assignment2 = Map(tp2.partition -> Seq(0))
+    TestUtils.createTopic(zkClient, tp2.topic(), assignment2, servers)
+
+    // Test that the second topic has its ID added correctly
+    waitForPartitionState(tp2, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    assertTrue(controller.controllerContext.topicIds.get("t2") != None)
+    val topicId2 = controller.controllerContext.topicIds.get("t2").get
+    assertEquals(controller.controllerContext.topicNames(topicId2), "t2")
+
+    // The first topic ID has not changed
+    assertEquals(topicId1, controller.controllerContext.topicIds.get("t1").get)
+    assertTrue(!topicId1.equals(topicId2))
+  }
+
+
+  @Test
+  def testTopicIdMigrationAndHandling(): Unit = {
+    val tp = new TopicPartition("t", 0)
+    val assignment = Map(tp.partition -> ReplicaAssignment(Seq(0), List(), List()))
+    val adminZkClient = new AdminZkClient(zkClient)
+
+    servers = makeServers(1)
+    adminZkClient.createTopic(tp.topic, 1, 1)
+    waitForPartitionState(tp, firstControllerEpoch, 0, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    val topicIdAfterCreate = zkClient.getTopicIdsForTopics(Set(tp.topic())).get(tp.topic())
+    assertTrue(topicIdAfterCreate.isDefined)
+    assertEquals("correct topic ID cannot be found in the controller context",
+      topicIdAfterCreate, servers.head.kafkaController.controllerContext.topicIds.get(tp.topic))
+
+    adminZkClient.addPartitions(tp.topic, assignment, adminZkClient.getBrokerMetadatas(), 2)
+    val topicIdAfterAddition = zkClient.getTopicIdsForTopics(Set(tp.topic())).get(tp.topic())
+    assertEquals(topicIdAfterCreate, topicIdAfterAddition)
+    assertEquals("topic ID changed after partition additions",
+      topicIdAfterCreate, servers.head.kafkaController.controllerContext.topicIds.get(tp.topic))
+
+    adminZkClient.deleteTopic(tp.topic)
+    TestUtils.waitUntilTrue(() => servers.head.kafkaController.controllerContext.topicIds.get(tp.topic).isEmpty,
+      "topic ID for topic should have been removed from controller context after deletion")
+  }
+
+  @Test
+  def testTopicIdPersistsThroughControllerReelection(): Unit = {
+    servers = makeServers(2)
+    val controllerId = TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp = new TopicPartition("t", 0)
+    val assignment = Map(tp.partition -> Seq(controllerId))
+    TestUtils.createTopic(zkClient, tp.topic, partitionReplicaAssignment = assignment, servers = servers)
+    waitForPartitionState(tp, firstControllerEpoch, controllerId, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    val topicId = controller.controllerContext.topicIds.get("t").get
+
+
+    servers(controllerId).shutdown()
+    servers(controllerId).awaitShutdown()
+    TestUtils.waitUntilTrue(() => zkClient.getControllerId.isDefined, "failed to elect a controller")
+    val controller2 = getController().kafkaController
+    assertEquals(topicId, controller2.controllerContext.topicIds.get("t").get)
+  }
+
+  @Test
+  def testTopicIdPersistsThroughControllerRestart(): Unit = {
+    servers = makeServers(1)
+    val controllerId = TestUtils.waitUntilControllerElected(zkClient)
+    val controller = getController().kafkaController
+    val tp = new TopicPartition("t", 0)
+    val assignment = Map(tp.partition -> Seq(controllerId))
+    TestUtils.createTopic(zkClient, tp.topic, partitionReplicaAssignment = assignment, servers = servers)
+    waitForPartitionState(tp, firstControllerEpoch, controllerId, LeaderAndIsr.initialLeaderEpoch,
+      "failed to get expected partition state upon topic creation")
+    val topicId = controller.controllerContext.topicIds.get("t").get
+
+
path: core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511899119
id: 511899926
url: https://api.github.com/repos/apache/kafka/pulls/comments/511899926
body: `topicIds(topic1)` instead of .get().get() - multiple places
diff_hunk: @@ -194,7 +195,7 @@ class KafkaZkClientTest extends ZooKeeperTestHarness {
     )
 
     // create a topic assignment
-    zkClient.createTopicAssignment(topic1, assignment)
+    zkClient.createTopicAssignment(topic1, topicIds.get(topic1).get, assignment)
path: core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r511899926
id: 512054701
url: https://api.github.com/repos/apache/kafka/pulls/comments/512054701
body: Yeah. That makes sense to me.
diff_hunk: @@ -126,6 +130,23 @@ class ControllerContext {
     replicaStates.clear()
   }
 
+  def addTopicId(topic: String, id: UUID): Unit = {
+    topicIds.get(topic).foreach { existingId =>
+      if (!existingId.equals(id))
+        throw new IllegalStateException("topic ID map already contained ID for topic "
+          + topic + " and new ID " + id + " did not match existing ID "
+          + existingId)
+    }
+    topicIds.put(topic, id)
path: core/src/main/scala/kafka/controller/ControllerContext.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r512054701
id: 512056578
url: https://api.github.com/repos/apache/kafka/pulls/comments/512056578
body: I meant to fix this. Thanks for catching.
diff_hunk: @@ -481,43 +482,70 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo
     pathExists(TopicZNode.path(topicName))
   }
 
+  /**
+   * Adds a topic ID to existing topic and replica assignments
+   * @param topicIdReplicaAssignments the TopicIDReplicaAssignments to add a topic ID to
+   * @return the updated TopicIdReplicaAssigments including the newly created topic IDs
+   */
+  def setTopicIds(topicIdReplicaAssignments: collection.Set[TopicIdReplicaAssignment],
+                  expectedControllerEpochZkVersion: Int): Set[TopicIdReplicaAssignment] = {
+    val updatedAssignments = topicIdReplicaAssignments.map {
+      case TopicIdReplicaAssignment(topic, None, assignments) =>
+        TopicIdReplicaAssignment(topic, Some(UUID.randomUUID()), assignments)
+      case TopicIdReplicaAssignment(topic, Some(_), _) =>
+        throw new IllegalArgumentException("TopicIdReplicaAssignment for " + topic + " already contains a topic ID.")
+    }.toSet
+
+    val setDataRequests = updatedAssignments.map { case TopicIdReplicaAssignment(topic, topicIdOpt, assignments) =>
+      SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(topicIdOpt.get, assignments), ZkVersion.MatchAnyVersion)
+    }.toSeq
+
+    retryRequestsUntilConnected(setDataRequests, expectedControllerEpochZkVersion)
+    updatedAssignments
+  }
+
   /**
    * Sets the topic znode with the given assignment.
    * @param topic the topic whose assignment is being set.
+   * @param topicId optional topic ID if the topic has one
    * @param assignment the partition to replica mapping to set for the given topic
    * @param expectedControllerEpochZkVersion expected controller epoch zkVersion.
    * @return SetDataResponse
    */
   def setTopicAssignmentRaw(topic: String,
+                            topicId: UUID,
                             assignment: collection.Map[TopicPartition, ReplicaAssignment],
                             expectedControllerEpochZkVersion: Int): SetDataResponse = {
-    val setDataRequest = SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(assignment), ZkVersion.MatchAnyVersion)
+    val setDataRequest = SetDataRequest(TopicZNode.path(topic), TopicZNode.encode(topicId, assignment), ZkVersion.MatchAnyVersion)
     retryRequestUntilConnected(setDataRequest, expectedControllerEpochZkVersion)
   }
 
   /**
    * Sets the topic znode with the given assignment.
    * @param topic the topic whose assignment is being set.
+   * @param topicId optional topic ID if the topic has one
path: core/src/main/scala/kafka/zk/KafkaZkClient.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r512056578
id: 512068125
url: https://api.github.com/repos/apache/kafka/pulls/comments/512068125
body: In the case where the topic was created on an older version (where there are no topic IDs yet, we will have the case where topic IDs are not defined. However, I believe in the case where this is used, we should have topic IDs defined. (I'm expecting a topic ID on the following line, so an error would occur there if it was missing.) I'm thinking it would make sense to remove the filter line and maybe throw an error here (earlier) if it is not set.
diff_hunk: @@ -577,6 +605,27 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo
     retryRequestsUntilConnected(deleteRequests, expectedControllerEpochZkVersion)
   }
 
+  /**
+   * Gets the topic IDs for the given topics.
+   * @param topics the topics we wish to retrieve the Topic IDs for
+   * @return the Topic IDs
+   */
+  def getTopicIdsForTopics(topics: Set[String]): Map[String, UUID] = {
+    val getDataRequests = topics.map(topic => GetDataRequest(TopicZNode.path(topic), ctx = Some(topic)))
+    val getDataResponses = retryRequestsUntilConnected(getDataRequests.toSeq)
+    getDataResponses.map { getDataResponse =>
+      val topic = getDataResponse.ctx.get.asInstanceOf[String]
+      getDataResponse.resultCode match {
+        case Code.OK => Some(TopicZNode.decode(topic, getDataResponse.data))
+        case Code.NONODE => None
+        case _ => throw getDataResponse.resultException.get
+      }
+    }.filter(_.flatMap(_.topicId).isDefined)
path: core/src/main/scala/kafka/zk/KafkaZkClient.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r512068125
id: 512069339
url: https://api.github.com/repos/apache/kafka/pulls/comments/512069339
body: I've found a few style errors while working on this and I wasn't sure the protocol. I guess it makes sense to fix the style in the block of code I'm working on. (But it's a little confusing when its not the areas of code I'm working on)
diff_hunk: @@ -616,7 +683,7 @@ class KafkaZkClient private[zk] (zooKeeperClient: ZooKeeperClient, isSecure: Boo
     getDataResponses.flatMap { getDataResponse =>
       val topic = getDataResponse.ctx.get.asInstanceOf[String]
        if (getDataResponse.resultCode == Code.OK) {
-        val partitionMap = TopicZNode.decode(topic, getDataResponse.data).map { case (k, v) => (k.partition, v) }
+         val partitionMap = TopicZNode.decode(topic, getDataResponse.data).assignment.map { case (k, v) => (k.partition, v) }
path: core/src/main/scala/kafka/zk/KafkaZkClient.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r512069339
id: 512081744
url: https://api.github.com/repos/apache/kafka/pulls/comments/512081744
body: I was thinking about this some more, and I don't think we will have a case where the topic ID is not in the map (the if conditional is not needed.) However, the suggestion you gave is still good because it prevents the extra lookup.
diff_hunk: @@ -295,6 +316,10 @@ class ControllerContext {
     topicsToBeDeleted -= topic
     topicsWithDeletionStarted -= topic
     allTopics -= topic
+    if (topicIds.get(topic)!= None) {
+      topicNames.remove(topicIds.get(topic).get)
+      topicIds.remove(topic)
+    }
path: core/src/main/scala/kafka/controller/ControllerContext.scala
html: https://github.com/apache/kafka/pull/9473#discussion_r512081744
pull_request_number: 9473
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9471/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9471/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9471"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9471"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9471/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9471"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/dc41db6ac815c9300735a39d68e34534be652f4a"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:2.6",
    "ref": "2.6",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "c4b41bc725a635906ca6c400871a1c9de5dc4f26",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Add a Jenkinsfile for the 2.6 branch so PRs can be built.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9471/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9471/commits",
  "created_at": "2020-10-21T16:59:25Z",
  "diff_url": "https://github.com/apache/kafka/pull/9471.diff",
  "draft": false,
  "head": {
    "label": "vvcephei:2.6-jenkinsfile",
    "ref": "2.6-jenkinsfile",
    "repo": {
      "archive_url": "https://api.github.com/repos/vvcephei/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/vvcephei/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/vvcephei/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/vvcephei/kafka/branches{/branch}",
      "clone_url": "https://github.com/vvcephei/kafka.git",
      "collaborators_url": "https://api.github.com/repos/vvcephei/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/vvcephei/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/vvcephei/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/vvcephei/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/vvcephei/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/vvcephei/kafka/contributors",
      "created_at": "2020-10-13T02:33:37Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/vvcephei/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/vvcephei/kafka/downloads",
      "events_url": "https://api.github.com/repos/vvcephei/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/vvcephei/kafka/forks",
      "full_name": "vvcephei/kafka",
      "git_commits_url": "https://api.github.com/repos/vvcephei/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/vvcephei/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/vvcephei/kafka/git/tags{/sha}",
      "git_url": "git://github.com/vvcephei/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/vvcephei/kafka/hooks",
      "html_url": "https://github.com/vvcephei/kafka",
      "id": 303567113,
      "issue_comment_url": "https://api.github.com/repos/vvcephei/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/vvcephei/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/vvcephei/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/vvcephei/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/vvcephei/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/vvcephei/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/vvcephei/kafka/merges",
      "milestones_url": "https://api.github.com/repos/vvcephei/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDM1NjcxMTM=",
      "notifications_url": "https://api.github.com/repos/vvcephei/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/832787?v=4",
        "events_url": "https://api.github.com/users/vvcephei/events{/privacy}",
        "followers_url": "https://api.github.com/users/vvcephei/followers",
        "following_url": "https://api.github.com/users/vvcephei/following{/other_user}",
        "gists_url": "https://api.github.com/users/vvcephei/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vvcephei",
        "id": 832787,
        "login": "vvcephei",
        "node_id": "MDQ6VXNlcjgzMjc4Nw==",
        "organizations_url": "https://api.github.com/users/vvcephei/orgs",
        "received_events_url": "https://api.github.com/users/vvcephei/received_events",
        "repos_url": "https://api.github.com/users/vvcephei/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vvcephei/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vvcephei/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vvcephei"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/vvcephei/kafka/pulls{/number}",
      "pushed_at": "2020-10-23T18:53:14Z",
      "releases_url": "https://api.github.com/repos/vvcephei/kafka/releases{/id}",
      "size": 108580,
      "ssh_url": "git@github.com:vvcephei/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/vvcephei/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/vvcephei/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/vvcephei/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/vvcephei/kafka/subscription",
      "svn_url": "https://github.com/vvcephei/kafka",
      "tags_url": "https://api.github.com/repos/vvcephei/kafka/tags",
      "teams_url": "https://api.github.com/repos/vvcephei/kafka/teams",
      "trees_url": "https://api.github.com/repos/vvcephei/kafka/git/trees{/sha}",
      "updated_at": "2020-10-13T02:33:40Z",
      "url": "https://api.github.com/repos/vvcephei/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "dc41db6ac815c9300735a39d68e34534be652f4a",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/832787?v=4",
      "events_url": "https://api.github.com/users/vvcephei/events{/privacy}",
      "followers_url": "https://api.github.com/users/vvcephei/followers",
      "following_url": "https://api.github.com/users/vvcephei/following{/other_user}",
      "gists_url": "https://api.github.com/users/vvcephei/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vvcephei",
      "id": 832787,
      "login": "vvcephei",
      "node_id": "MDQ6VXNlcjgzMjc4Nw==",
      "organizations_url": "https://api.github.com/users/vvcephei/orgs",
      "received_events_url": "https://api.github.com/users/vvcephei/received_events",
      "repos_url": "https://api.github.com/users/vvcephei/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vvcephei/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vvcephei/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vvcephei"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9471",
  "id": 507715330,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9471",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "f5636c1dd0825d90f200ca2c6054fbdb89bc4f71",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA3NzE1MzMw",
  "number": 9471,
  "patch_url": "https://github.com/apache/kafka/pull/9471.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9471/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/dc41db6ac815c9300735a39d68e34534be652f4a",
  "title": "MINOR: Add Jenkinsfile to 2.6",
  "updated_at": "2020-10-22T21:37:03Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9471",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/832787?v=4",
    "events_url": "https://api.github.com/users/vvcephei/events{/privacy}",
    "followers_url": "https://api.github.com/users/vvcephei/followers",
    "following_url": "https://api.github.com/users/vvcephei/following{/other_user}",
    "gists_url": "https://api.github.com/users/vvcephei/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/vvcephei",
    "id": 832787,
    "login": "vvcephei",
    "node_id": "MDQ6VXNlcjgzMjc4Nw==",
    "organizations_url": "https://api.github.com/users/vvcephei/orgs",
    "received_events_url": "https://api.github.com/users/vvcephei/received_events",
    "repos_url": "https://api.github.com/users/vvcephei/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/vvcephei/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vvcephei/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/vvcephei"
  }
}
json_root is_array: false
json_root is_object: true
number: 9471
url: https://api.github.com/repos/apache/kafka/pulls/9471
title: MINOR: Add Jenkinsfile to 2.6
body: Add a Jenkinsfile for the 2.6 branch so PRs can be built.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9471/comments
pull_request_number: 9471
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9468/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9468/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9468"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9468"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9468/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9468"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/fbf5d5703cc6180258ede2f4b26abbab7bca69bf"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:2.6",
    "ref": "2.6",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "c4b41bc725a635906ca6c400871a1c9de5dc4f26",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "cherry-picking https://github.com/apache/kafka/pull/9237 on 2.6 branch\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9468/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9468/commits",
  "created_at": "2020-10-21T06:52:13Z",
  "diff_url": "https://github.com/apache/kafka/pull/9468.diff",
  "draft": false,
  "head": {
    "label": "lkokhreidze:2.6",
    "ref": "2.6",
    "repo": {
      "archive_url": "https://api.github.com/repos/lkokhreidze/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/lkokhreidze/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/lkokhreidze/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/lkokhreidze/kafka/branches{/branch}",
      "clone_url": "https://github.com/lkokhreidze/kafka.git",
      "collaborators_url": "https://api.github.com/repos/lkokhreidze/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/lkokhreidze/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/lkokhreidze/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/lkokhreidze/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/lkokhreidze/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/lkokhreidze/kafka/contributors",
      "created_at": "2019-07-14T20:20:09Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/lkokhreidze/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/lkokhreidze/kafka/downloads",
      "events_url": "https://api.github.com/repos/lkokhreidze/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/lkokhreidze/kafka/forks",
      "full_name": "lkokhreidze/kafka",
      "git_commits_url": "https://api.github.com/repos/lkokhreidze/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/lkokhreidze/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/lkokhreidze/kafka/git/tags{/sha}",
      "git_url": "git://github.com/lkokhreidze/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": "https://cwiki.apache.org/confluence/display/KAFKA/KIP-221%3A+Enhance+DSL+with+Connecting+Topic+Creation+and+Repartition+Hint",
      "hooks_url": "https://api.github.com/repos/lkokhreidze/kafka/hooks",
      "html_url": "https://github.com/lkokhreidze/kafka",
      "id": 196879641,
      "issue_comment_url": "https://api.github.com/repos/lkokhreidze/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/lkokhreidze/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/lkokhreidze/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/lkokhreidze/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/lkokhreidze/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/lkokhreidze/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/lkokhreidze/kafka/merges",
      "milestones_url": "https://api.github.com/repos/lkokhreidze/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxOTY4Nzk2NDE=",
      "notifications_url": "https://api.github.com/repos/lkokhreidze/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/8927925?v=4",
        "events_url": "https://api.github.com/users/lkokhreidze/events{/privacy}",
        "followers_url": "https://api.github.com/users/lkokhreidze/followers",
        "following_url": "https://api.github.com/users/lkokhreidze/following{/other_user}",
        "gists_url": "https://api.github.com/users/lkokhreidze/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lkokhreidze",
        "id": 8927925,
        "login": "lkokhreidze",
        "node_id": "MDQ6VXNlcjg5Mjc5MjU=",
        "organizations_url": "https://api.github.com/users/lkokhreidze/orgs",
        "received_events_url": "https://api.github.com/users/lkokhreidze/received_events",
        "repos_url": "https://api.github.com/users/lkokhreidze/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lkokhreidze/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lkokhreidze/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lkokhreidze"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/lkokhreidze/kafka/pulls{/number}",
      "pushed_at": "2020-10-21T06:46:45Z",
      "releases_url": "https://api.github.com/repos/lkokhreidze/kafka/releases{/id}",
      "size": 105581,
      "ssh_url": "git@github.com:lkokhreidze/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/lkokhreidze/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/lkokhreidze/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/lkokhreidze/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/lkokhreidze/kafka/subscription",
      "svn_url": "https://github.com/lkokhreidze/kafka",
      "tags_url": "https://api.github.com/repos/lkokhreidze/kafka/tags",
      "teams_url": "https://api.github.com/repos/lkokhreidze/kafka/teams",
      "trees_url": "https://api.github.com/repos/lkokhreidze/kafka/git/trees{/sha}",
      "updated_at": "2020-10-22T06:14:48Z",
      "url": "https://api.github.com/repos/lkokhreidze/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "fbf5d5703cc6180258ede2f4b26abbab7bca69bf",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/8927925?v=4",
      "events_url": "https://api.github.com/users/lkokhreidze/events{/privacy}",
      "followers_url": "https://api.github.com/users/lkokhreidze/followers",
      "following_url": "https://api.github.com/users/lkokhreidze/following{/other_user}",
      "gists_url": "https://api.github.com/users/lkokhreidze/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lkokhreidze",
      "id": 8927925,
      "login": "lkokhreidze",
      "node_id": "MDQ6VXNlcjg5Mjc5MjU=",
      "organizations_url": "https://api.github.com/users/lkokhreidze/orgs",
      "received_events_url": "https://api.github.com/users/lkokhreidze/received_events",
      "repos_url": "https://api.github.com/users/lkokhreidze/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lkokhreidze/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lkokhreidze/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lkokhreidze"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9468",
  "id": 507300862,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9468",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "19cdaf1f981879e39f77bfee04ee97fdd54d4f68",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA3MzAwODYy",
  "number": 9468,
  "patch_url": "https://github.com/apache/kafka/pull/9468.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9468/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/fbf5d5703cc6180258ede2f4b26abbab7bca69bf",
  "title": "KAFKA-10454 / (2.6) Update copartitionSourceGroups when optimization algorithm is triggered",
  "updated_at": "2020-10-21T18:17:57Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9468",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/8927925?v=4",
    "events_url": "https://api.github.com/users/lkokhreidze/events{/privacy}",
    "followers_url": "https://api.github.com/users/lkokhreidze/followers",
    "following_url": "https://api.github.com/users/lkokhreidze/following{/other_user}",
    "gists_url": "https://api.github.com/users/lkokhreidze/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/lkokhreidze",
    "id": 8927925,
    "login": "lkokhreidze",
    "node_id": "MDQ6VXNlcjg5Mjc5MjU=",
    "organizations_url": "https://api.github.com/users/lkokhreidze/orgs",
    "received_events_url": "https://api.github.com/users/lkokhreidze/received_events",
    "repos_url": "https://api.github.com/users/lkokhreidze/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/lkokhreidze/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lkokhreidze/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/lkokhreidze"
  }
}
json_root is_array: false
json_root is_object: true
number: 9468
url: https://api.github.com/repos/apache/kafka/pulls/9468
title: KAFKA-10454 / (2.6) Update copartitionSourceGroups when optimization algorithm is triggered
body: cherry-picking https://github.com/apache/kafka/pull/9237 on 2.6 branch

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9468/comments
pull_request_number: 9468
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9467/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9467/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9467"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9467"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9467/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9467"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/3466b90cc95c1e07e86d74a44a330890e346c48b"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:2.6",
    "ref": "2.6",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "c4b41bc725a635906ca6c400871a1c9de5dc4f26",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This is a cherry pick of PR #9338 on branch 2.6.\r\n\r\nAlso introduced the notion of WrappingNullableSerdes (aligned to the concept\r\nof WrappingNullableSerializer and WrappingNullableDeserializer) and centralized\r\ninitialization in WrappingNullables.\r\n\r\nThe added integeration test KTableKTableForeignKeyJoinDistributedTest tests\r\nwhether all serdes are now correctly set on all stream clients.\r\n\r\nReviewers: John Roesler <vvcephei@apache.org>\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9467/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9467/commits",
  "created_at": "2020-10-21T04:39:17Z",
  "diff_url": "https://github.com/apache/kafka/pull/9467.diff",
  "draft": false,
  "head": {
    "label": "thake:fixNpe-2.6",
    "ref": "fixNpe-2.6",
    "repo": {
      "archive_url": "https://api.github.com/repos/thake/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/thake/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/thake/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/thake/kafka/branches{/branch}",
      "clone_url": "https://github.com/thake/kafka.git",
      "collaborators_url": "https://api.github.com/repos/thake/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/thake/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/thake/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/thake/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/thake/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/thake/kafka/contributors",
      "created_at": "2020-09-25T04:58:17Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/thake/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/thake/kafka/downloads",
      "events_url": "https://api.github.com/repos/thake/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/thake/kafka/forks",
      "full_name": "thake/kafka",
      "git_commits_url": "https://api.github.com/repos/thake/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/thake/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/thake/kafka/git/tags{/sha}",
      "git_url": "git://github.com/thake/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/thake/kafka/hooks",
      "html_url": "https://github.com/thake/kafka",
      "id": 298471556,
      "issue_comment_url": "https://api.github.com/repos/thake/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/thake/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/thake/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/thake/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/thake/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/thake/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/thake/kafka/merges",
      "milestones_url": "https://api.github.com/repos/thake/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyOTg0NzE1NTY=",
      "notifications_url": "https://api.github.com/repos/thake/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/12547985?v=4",
        "events_url": "https://api.github.com/users/thake/events{/privacy}",
        "followers_url": "https://api.github.com/users/thake/followers",
        "following_url": "https://api.github.com/users/thake/following{/other_user}",
        "gists_url": "https://api.github.com/users/thake/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/thake",
        "id": 12547985,
        "login": "thake",
        "node_id": "MDQ6VXNlcjEyNTQ3OTg1",
        "organizations_url": "https://api.github.com/users/thake/orgs",
        "received_events_url": "https://api.github.com/users/thake/received_events",
        "repos_url": "https://api.github.com/users/thake/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/thake/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thake/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/thake"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/thake/kafka/pulls{/number}",
      "pushed_at": "2020-10-22T17:20:00Z",
      "releases_url": "https://api.github.com/repos/thake/kafka/releases{/id}",
      "size": 107789,
      "ssh_url": "git@github.com:thake/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/thake/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/thake/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/thake/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/thake/kafka/subscription",
      "svn_url": "https://github.com/thake/kafka",
      "tags_url": "https://api.github.com/repos/thake/kafka/tags",
      "teams_url": "https://api.github.com/repos/thake/kafka/teams",
      "trees_url": "https://api.github.com/repos/thake/kafka/git/trees{/sha}",
      "updated_at": "2020-10-20T18:51:58Z",
      "url": "https://api.github.com/repos/thake/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "3466b90cc95c1e07e86d74a44a330890e346c48b",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/12547985?v=4",
      "events_url": "https://api.github.com/users/thake/events{/privacy}",
      "followers_url": "https://api.github.com/users/thake/followers",
      "following_url": "https://api.github.com/users/thake/following{/other_user}",
      "gists_url": "https://api.github.com/users/thake/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/thake",
      "id": 12547985,
      "login": "thake",
      "node_id": "MDQ6VXNlcjEyNTQ3OTg1",
      "organizations_url": "https://api.github.com/users/thake/orgs",
      "received_events_url": "https://api.github.com/users/thake/received_events",
      "repos_url": "https://api.github.com/users/thake/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/thake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thake/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/thake"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9467",
  "id": 507243020,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9467",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "2b8d29409d656cf789d706c68ad85edaa5a62516",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA3MjQzMDIw",
  "number": 9467,
  "patch_url": "https://github.com/apache/kafka/pull/9467.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9467/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/3466b90cc95c1e07e86d74a44a330890e346c48b",
  "title": "KAFKA-10515: Properly initialize nullable Serdes with default values",
  "updated_at": "2020-10-22T17:20:25Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9467",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/12547985?v=4",
    "events_url": "https://api.github.com/users/thake/events{/privacy}",
    "followers_url": "https://api.github.com/users/thake/followers",
    "following_url": "https://api.github.com/users/thake/following{/other_user}",
    "gists_url": "https://api.github.com/users/thake/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/thake",
    "id": 12547985,
    "login": "thake",
    "node_id": "MDQ6VXNlcjEyNTQ3OTg1",
    "organizations_url": "https://api.github.com/users/thake/orgs",
    "received_events_url": "https://api.github.com/users/thake/received_events",
    "repos_url": "https://api.github.com/users/thake/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/thake/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/thake/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/thake"
  }
}
json_root is_array: false
json_root is_object: true
number: 9467
url: https://api.github.com/repos/apache/kafka/pulls/9467
title: KAFKA-10515: Properly initialize nullable Serdes with default values
body: This is a cherry pick of PR #9338 on branch 2.6.

Also introduced the notion of WrappingNullableSerdes (aligned to the concept
of WrappingNullableSerializer and WrappingNullableDeserializer) and centralized
initialization in WrappingNullables.

The added integeration test KTableKTableForeignKeyJoinDistributedTest tests
whether all serdes are now correctly set on all stream clients.

Reviewers: John Roesler <vvcephei@apache.org>

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9467/comments
id: 509366502
url: https://api.github.com/repos/apache/kafka/pulls/comments/509366502
body: ```suggestion
```

Let's not backport these methods, which are unused in 2.6. If we need them later, we can backport them at that time.
diff_hunk: @@ -0,0 +1,83 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.streams.processor.internals;
+
+import org.apache.kafka.common.serialization.Deserializer;
+import org.apache.kafka.common.serialization.Serde;
+import org.apache.kafka.common.serialization.Serializer;
+import org.apache.kafka.streams.processor.ProcessorContext;
+import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;
+
+/**
+ * This class bridges the gap for components that _should_ be compatible with
+ * the public ProcessorContext interface, but have come to depend on features
+ * in InternalProcessorContext. In theory, all the features adapted here could
+ * migrate to the public interface, so each method in this class should reference
+ * the ticket that would ultimately obviate it.
+ */
+public final class ProcessorContextUtils {
+
+    private ProcessorContextUtils() {}
+
+    /**
+     * Note that KIP-622 would move currentSystemTimeMs to ProcessorContext,
+     * removing the need for this method.
+     */
+    public static long getCurrentSystemTime(final ProcessorContext context) {
+        return context instanceof InternalProcessorContext
+            ? ((InternalProcessorContext) context).currentSystemTimeMs()
+            : System.currentTimeMillis();
+    }
+
+    /**
+     * Should be removed as part of KAFKA-10217
+     */
+    public static StreamsMetricsImpl getMetricsImpl(final ProcessorContext context) {
+        return (StreamsMetricsImpl) context.metrics();
+    }
+
+    public static InternalProcessorContext asInternalProcessorContext(final ProcessorContext context) {
+        if (context instanceof InternalProcessorContext) {
+            return (InternalProcessorContext) context;
+        } else {
+            throw new IllegalArgumentException(
+                "This component requires internal features of Kafka Streams and must be disabled for unit tests."
+            );
+        }
+    }
path: streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextUtils.java
html: https://github.com/apache/kafka/pull/9467#discussion_r509366502
id: 509373215
url: https://api.github.com/repos/apache/kafka/pulls/comments/509373215
body: Note, there will also be an unused import after removing these methods. I don't know if you know, but you can run `./gradlew :streams:testAll` to fully run all the verifications locally.
diff_hunk: @@ -0,0 +1,83 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.streams.processor.internals;
+
+import org.apache.kafka.common.serialization.Deserializer;
+import org.apache.kafka.common.serialization.Serde;
+import org.apache.kafka.common.serialization.Serializer;
+import org.apache.kafka.streams.processor.ProcessorContext;
+import org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl;
+
+/**
+ * This class bridges the gap for components that _should_ be compatible with
+ * the public ProcessorContext interface, but have come to depend on features
+ * in InternalProcessorContext. In theory, all the features adapted here could
+ * migrate to the public interface, so each method in this class should reference
+ * the ticket that would ultimately obviate it.
+ */
+public final class ProcessorContextUtils {
+
+    private ProcessorContextUtils() {}
+
+    /**
+     * Note that KIP-622 would move currentSystemTimeMs to ProcessorContext,
+     * removing the need for this method.
+     */
+    public static long getCurrentSystemTime(final ProcessorContext context) {
+        return context instanceof InternalProcessorContext
+            ? ((InternalProcessorContext) context).currentSystemTimeMs()
+            : System.currentTimeMillis();
+    }
+
+    /**
+     * Should be removed as part of KAFKA-10217
+     */
+    public static StreamsMetricsImpl getMetricsImpl(final ProcessorContext context) {
+        return (StreamsMetricsImpl) context.metrics();
+    }
+
+    public static InternalProcessorContext asInternalProcessorContext(final ProcessorContext context) {
+        if (context instanceof InternalProcessorContext) {
+            return (InternalProcessorContext) context;
+        } else {
+            throw new IllegalArgumentException(
+                "This component requires internal features of Kafka Streams and must be disabled for unit tests."
+            );
+        }
+    }
path: streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorContextUtils.java
html: https://github.com/apache/kafka/pull/9467#discussion_r509373215
pull_request_number: 9467
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9457/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9457/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9457"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9457"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9457/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9457"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/ed685bbec9cd9b78b1ba6e6ec1cea332477559f3"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "e3d6344ed7feadae119a57ce658fe7dc0505ca06",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Remove unused variables, methods, parameters, unthrown exceptions, and fixing typos.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9457/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9457/commits",
  "created_at": "2020-10-20T08:11:26Z",
  "diff_url": "https://github.com/apache/kafka/pull/9457.diff",
  "draft": false,
  "head": {
    "label": "dongjinleekr:cleanup/202009",
    "ref": "cleanup/202009",
    "repo": {
      "archive_url": "https://api.github.com/repos/dongjinleekr/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/dongjinleekr/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/dongjinleekr/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/dongjinleekr/kafka/branches{/branch}",
      "clone_url": "https://github.com/dongjinleekr/kafka.git",
      "collaborators_url": "https://api.github.com/repos/dongjinleekr/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/dongjinleekr/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/dongjinleekr/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/dongjinleekr/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/dongjinleekr/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/dongjinleekr/kafka/contributors",
      "created_at": "2016-09-23T15:16:20Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/dongjinleekr/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/dongjinleekr/kafka/downloads",
      "events_url": "https://api.github.com/repos/dongjinleekr/kafka/events",
      "fork": true,
      "forks": 1,
      "forks_count": 1,
      "forks_url": "https://api.github.com/repos/dongjinleekr/kafka/forks",
      "full_name": "dongjinleekr/kafka",
      "git_commits_url": "https://api.github.com/repos/dongjinleekr/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/dongjinleekr/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/dongjinleekr/kafka/git/tags{/sha}",
      "git_url": "git://github.com/dongjinleekr/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/dongjinleekr/kafka/hooks",
      "html_url": "https://github.com/dongjinleekr/kafka",
      "id": 69036305,
      "issue_comment_url": "https://api.github.com/repos/dongjinleekr/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/dongjinleekr/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/dongjinleekr/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/dongjinleekr/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/dongjinleekr/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/dongjinleekr/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/dongjinleekr/kafka/merges",
      "milestones_url": "https://api.github.com/repos/dongjinleekr/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk2OTAzNjMwNQ==",
      "notifications_url": "https://api.github.com/repos/dongjinleekr/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/2375128?v=4",
        "events_url": "https://api.github.com/users/dongjinleekr/events{/privacy}",
        "followers_url": "https://api.github.com/users/dongjinleekr/followers",
        "following_url": "https://api.github.com/users/dongjinleekr/following{/other_user}",
        "gists_url": "https://api.github.com/users/dongjinleekr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dongjinleekr",
        "id": 2375128,
        "login": "dongjinleekr",
        "node_id": "MDQ6VXNlcjIzNzUxMjg=",
        "organizations_url": "https://api.github.com/users/dongjinleekr/orgs",
        "received_events_url": "https://api.github.com/users/dongjinleekr/received_events",
        "repos_url": "https://api.github.com/users/dongjinleekr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dongjinleekr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dongjinleekr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dongjinleekr"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/dongjinleekr/kafka/pulls{/number}",
      "pushed_at": "2020-10-26T09:34:22Z",
      "releases_url": "https://api.github.com/repos/dongjinleekr/kafka/releases{/id}",
      "size": 97789,
      "ssh_url": "git@github.com:dongjinleekr/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/dongjinleekr/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/dongjinleekr/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/dongjinleekr/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/dongjinleekr/kafka/subscription",
      "svn_url": "https://github.com/dongjinleekr/kafka",
      "tags_url": "https://api.github.com/repos/dongjinleekr/kafka/tags",
      "teams_url": "https://api.github.com/repos/dongjinleekr/kafka/teams",
      "trees_url": "https://api.github.com/repos/dongjinleekr/kafka/git/trees{/sha}",
      "updated_at": "2020-10-26T09:34:27Z",
      "url": "https://api.github.com/repos/dongjinleekr/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "ed685bbec9cd9b78b1ba6e6ec1cea332477559f3",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/2375128?v=4",
      "events_url": "https://api.github.com/users/dongjinleekr/events{/privacy}",
      "followers_url": "https://api.github.com/users/dongjinleekr/followers",
      "following_url": "https://api.github.com/users/dongjinleekr/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongjinleekr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dongjinleekr",
      "id": 2375128,
      "login": "dongjinleekr",
      "node_id": "MDQ6VXNlcjIzNzUxMjg=",
      "organizations_url": "https://api.github.com/users/dongjinleekr/orgs",
      "received_events_url": "https://api.github.com/users/dongjinleekr/received_events",
      "repos_url": "https://api.github.com/users/dongjinleekr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dongjinleekr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongjinleekr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dongjinleekr"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9457",
  "id": 506576552,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9457",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "4410812874a0af1a3f47df56085fb53bf2d35256",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA2NTc2NTUy",
  "number": 9457,
  "patch_url": "https://github.com/apache/kafka/pull/9457.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9457/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/ed685bbec9cd9b78b1ba6e6ec1cea332477559f3",
  "title": "MINOR: Trivial Cleanups",
  "updated_at": "2020-10-20T08:13:48Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9457",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/2375128?v=4",
    "events_url": "https://api.github.com/users/dongjinleekr/events{/privacy}",
    "followers_url": "https://api.github.com/users/dongjinleekr/followers",
    "following_url": "https://api.github.com/users/dongjinleekr/following{/other_user}",
    "gists_url": "https://api.github.com/users/dongjinleekr/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/dongjinleekr",
    "id": 2375128,
    "login": "dongjinleekr",
    "node_id": "MDQ6VXNlcjIzNzUxMjg=",
    "organizations_url": "https://api.github.com/users/dongjinleekr/orgs",
    "received_events_url": "https://api.github.com/users/dongjinleekr/received_events",
    "repos_url": "https://api.github.com/users/dongjinleekr/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/dongjinleekr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dongjinleekr/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/dongjinleekr"
  }
}
json_root is_array: false
json_root is_object: true
number: 9457
url: https://api.github.com/repos/apache/kafka/pulls/9457
title: MINOR: Trivial Cleanups
body: Remove unused variables, methods, parameters, unthrown exceptions, and fixing typos.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9457/comments
pull_request_number: 9457
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9451/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9451/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9451"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9451"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9451/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9451"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/72cf7a36cf2799452771904e425f4fcdf8ce1779"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "cf202cb6acf38c64a3e8b9e541673a12ee55eaaa",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "KIP: https://cwiki.apache.org/confluence/display/KAFKA/KIP-656%3A+MirrorMaker2+Exactly-once+Semantics\r\n\r\nconfig to enable exactly-once (aka. transaction producer)\r\n```\r\nprimary->backup.transaction.producer.enabled: true\r\nprimary->backup.topics: foo,bar,heartbeats\r\ntopics: foo,bar,heartbeats\r\nprimary.consumer.isolation.level: read_committed\r\n```\r\nvalidation tool on k8s: https://github.com/ning2008wisc/kafka-producer-consumer-test\r\n\r\nTODO: (1) add unit test, (2) switch between `MirrorSinkConnector` and `MirrorSourceConnector` by config",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9451/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9451/commits",
  "created_at": "2020-10-18T00:46:53Z",
  "diff_url": "https://github.com/apache/kafka/pull/9451.diff",
  "draft": false,
  "head": {
    "label": "ning2008wisc:KAFKA-10339",
    "ref": "KAFKA-10339",
    "repo": {
      "archive_url": "https://api.github.com/repos/ning2008wisc/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/ning2008wisc/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/ning2008wisc/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/ning2008wisc/kafka/branches{/branch}",
      "clone_url": "https://github.com/ning2008wisc/kafka.git",
      "collaborators_url": "https://api.github.com/repos/ning2008wisc/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/ning2008wisc/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/ning2008wisc/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/ning2008wisc/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/ning2008wisc/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/ning2008wisc/kafka/contributors",
      "created_at": "2020-08-07T16:36:54Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/ning2008wisc/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/ning2008wisc/kafka/downloads",
      "events_url": "https://api.github.com/repos/ning2008wisc/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/ning2008wisc/kafka/forks",
      "full_name": "ning2008wisc/kafka",
      "git_commits_url": "https://api.github.com/repos/ning2008wisc/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/ning2008wisc/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/ning2008wisc/kafka/git/tags{/sha}",
      "git_url": "git://github.com/ning2008wisc/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/ning2008wisc/kafka/hooks",
      "html_url": "https://github.com/ning2008wisc/kafka",
      "id": 285876041,
      "issue_comment_url": "https://api.github.com/repos/ning2008wisc/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/ning2008wisc/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/ning2008wisc/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/ning2008wisc/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/ning2008wisc/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/ning2008wisc/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/ning2008wisc/kafka/merges",
      "milestones_url": "https://api.github.com/repos/ning2008wisc/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyODU4NzYwNDE=",
      "notifications_url": "https://api.github.com/repos/ning2008wisc/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/32080381?v=4",
        "events_url": "https://api.github.com/users/ning2008wisc/events{/privacy}",
        "followers_url": "https://api.github.com/users/ning2008wisc/followers",
        "following_url": "https://api.github.com/users/ning2008wisc/following{/other_user}",
        "gists_url": "https://api.github.com/users/ning2008wisc/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ning2008wisc",
        "id": 32080381,
        "login": "ning2008wisc",
        "node_id": "MDQ6VXNlcjMyMDgwMzgx",
        "organizations_url": "https://api.github.com/users/ning2008wisc/orgs",
        "received_events_url": "https://api.github.com/users/ning2008wisc/received_events",
        "repos_url": "https://api.github.com/users/ning2008wisc/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ning2008wisc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ning2008wisc/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ning2008wisc"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/ning2008wisc/kafka/pulls{/number}",
      "pushed_at": "2020-10-23T06:09:47Z",
      "releases_url": "https://api.github.com/repos/ning2008wisc/kafka/releases{/id}",
      "size": 107417,
      "ssh_url": "git@github.com:ning2008wisc/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/ning2008wisc/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/ning2008wisc/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/ning2008wisc/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/ning2008wisc/kafka/subscription",
      "svn_url": "https://github.com/ning2008wisc/kafka",
      "tags_url": "https://api.github.com/repos/ning2008wisc/kafka/tags",
      "teams_url": "https://api.github.com/repos/ning2008wisc/kafka/teams",
      "trees_url": "https://api.github.com/repos/ning2008wisc/kafka/git/trees{/sha}",
      "updated_at": "2020-10-17T07:34:53Z",
      "url": "https://api.github.com/repos/ning2008wisc/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "72cf7a36cf2799452771904e425f4fcdf8ce1779",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/32080381?v=4",
      "events_url": "https://api.github.com/users/ning2008wisc/events{/privacy}",
      "followers_url": "https://api.github.com/users/ning2008wisc/followers",
      "following_url": "https://api.github.com/users/ning2008wisc/following{/other_user}",
      "gists_url": "https://api.github.com/users/ning2008wisc/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ning2008wisc",
      "id": 32080381,
      "login": "ning2008wisc",
      "node_id": "MDQ6VXNlcjMyMDgwMzgx",
      "organizations_url": "https://api.github.com/users/ning2008wisc/orgs",
      "received_events_url": "https://api.github.com/users/ning2008wisc/received_events",
      "repos_url": "https://api.github.com/users/ning2008wisc/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ning2008wisc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ning2008wisc/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ning2008wisc"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9451",
  "id": 505369736,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9451",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "e7e1b5b21856c25a782f9e11e7f0d1f41e988ecf",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA1MzY5NzM2",
  "number": 9451,
  "patch_url": "https://github.com/apache/kafka/pull/9451.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9451/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/72cf7a36cf2799452771904e425f4fcdf8ce1779",
  "title": "MirrorMaker2 Exactly-once Semantics",
  "updated_at": "2020-10-18T00:46:53Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9451",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/32080381?v=4",
    "events_url": "https://api.github.com/users/ning2008wisc/events{/privacy}",
    "followers_url": "https://api.github.com/users/ning2008wisc/followers",
    "following_url": "https://api.github.com/users/ning2008wisc/following{/other_user}",
    "gists_url": "https://api.github.com/users/ning2008wisc/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ning2008wisc",
    "id": 32080381,
    "login": "ning2008wisc",
    "node_id": "MDQ6VXNlcjMyMDgwMzgx",
    "organizations_url": "https://api.github.com/users/ning2008wisc/orgs",
    "received_events_url": "https://api.github.com/users/ning2008wisc/received_events",
    "repos_url": "https://api.github.com/users/ning2008wisc/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ning2008wisc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ning2008wisc/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ning2008wisc"
  }
}
json_root is_array: false
json_root is_object: true
number: 9451
url: https://api.github.com/repos/apache/kafka/pulls/9451
title: MirrorMaker2 Exactly-once Semantics
body: KIP: https://cwiki.apache.org/confluence/display/KAFKA/KIP-656%3A+MirrorMaker2+Exactly-once+Semantics

config to enable exactly-once (aka. transaction producer)
```
primary->backup.transaction.producer.enabled: true
primary->backup.topics: foo,bar,heartbeats
topics: foo,bar,heartbeats
primary.consumer.isolation.level: read_committed
```
validation tool on k8s: https://github.com/ning2008wisc/kafka-producer-consumer-test

TODO: (1) add unit test, (2) switch between `MirrorSinkConnector` and `MirrorSourceConnector` by config
review_comments: https://api.github.com/repos/apache/kafka/pulls/9451/comments
pull_request_number: 9451
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9445/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9445/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9445"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9445"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9445/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9445"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/8a727ca02406495051e88fbae50358d9c552403b"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "b752097f849cef17d5ffcbaec1d56f32825167da",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Improve broker logs when a client authenticates using Plain mechanism and wrong password. \r\nThis helps identifying wihich client is misconfigured.",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9445/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9445/commits",
  "created_at": "2020-10-15T18:11:28Z",
  "diff_url": "https://github.com/apache/kafka/pull/9445.diff",
  "draft": false,
  "head": {
    "label": "gquintana:pr-plain-auth-failed-log",
    "ref": "pr-plain-auth-failed-log",
    "repo": {
      "archive_url": "https://api.github.com/repos/gquintana/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/gquintana/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/gquintana/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/gquintana/kafka/branches{/branch}",
      "clone_url": "https://github.com/gquintana/kafka.git",
      "collaborators_url": "https://api.github.com/repos/gquintana/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/gquintana/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/gquintana/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/gquintana/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/gquintana/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/gquintana/kafka/contributors",
      "created_at": "2020-10-15T18:04:00Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/gquintana/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/gquintana/kafka/downloads",
      "events_url": "https://api.github.com/repos/gquintana/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/gquintana/kafka/forks",
      "full_name": "gquintana/kafka",
      "git_commits_url": "https://api.github.com/repos/gquintana/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/gquintana/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/gquintana/kafka/git/tags{/sha}",
      "git_url": "git://github.com/gquintana/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/gquintana/kafka/hooks",
      "html_url": "https://github.com/gquintana/kafka",
      "id": 304409268,
      "issue_comment_url": "https://api.github.com/repos/gquintana/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/gquintana/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/gquintana/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/gquintana/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/gquintana/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/gquintana/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/gquintana/kafka/merges",
      "milestones_url": "https://api.github.com/repos/gquintana/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDQ0MDkyNjg=",
      "notifications_url": "https://api.github.com/repos/gquintana/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/755587?v=4",
        "events_url": "https://api.github.com/users/gquintana/events{/privacy}",
        "followers_url": "https://api.github.com/users/gquintana/followers",
        "following_url": "https://api.github.com/users/gquintana/following{/other_user}",
        "gists_url": "https://api.github.com/users/gquintana/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gquintana",
        "id": 755587,
        "login": "gquintana",
        "node_id": "MDQ6VXNlcjc1NTU4Nw==",
        "organizations_url": "https://api.github.com/users/gquintana/orgs",
        "received_events_url": "https://api.github.com/users/gquintana/received_events",
        "repos_url": "https://api.github.com/users/gquintana/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gquintana/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gquintana/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gquintana"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/gquintana/kafka/pulls{/number}",
      "pushed_at": "2020-10-15T18:06:00Z",
      "releases_url": "https://api.github.com/repos/gquintana/kafka/releases{/id}",
      "size": 107475,
      "ssh_url": "git@github.com:gquintana/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/gquintana/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/gquintana/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/gquintana/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/gquintana/kafka/subscription",
      "svn_url": "https://github.com/gquintana/kafka",
      "tags_url": "https://api.github.com/repos/gquintana/kafka/tags",
      "teams_url": "https://api.github.com/repos/gquintana/kafka/teams",
      "trees_url": "https://api.github.com/repos/gquintana/kafka/git/trees{/sha}",
      "updated_at": "2020-10-15T18:04:04Z",
      "url": "https://api.github.com/repos/gquintana/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "8a727ca02406495051e88fbae50358d9c552403b",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/755587?v=4",
      "events_url": "https://api.github.com/users/gquintana/events{/privacy}",
      "followers_url": "https://api.github.com/users/gquintana/followers",
      "following_url": "https://api.github.com/users/gquintana/following{/other_user}",
      "gists_url": "https://api.github.com/users/gquintana/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/gquintana",
      "id": 755587,
      "login": "gquintana",
      "node_id": "MDQ6VXNlcjc1NTU4Nw==",
      "organizations_url": "https://api.github.com/users/gquintana/orgs",
      "received_events_url": "https://api.github.com/users/gquintana/received_events",
      "repos_url": "https://api.github.com/users/gquintana/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/gquintana/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gquintana/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/gquintana"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9445",
  "id": 504287668,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9445",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "6d9c1ba635d0420d8fcc5b6adf7636abf247d1ee",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA0Mjg3NjY4",
  "number": 9445,
  "patch_url": "https://github.com/apache/kafka/pull/9445.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9445/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/8a727ca02406495051e88fbae50358d9c552403b",
  "title": "KAFKA-10615 Detail plain authentication failure log",
  "updated_at": "2020-10-15T18:11:28Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9445",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/755587?v=4",
    "events_url": "https://api.github.com/users/gquintana/events{/privacy}",
    "followers_url": "https://api.github.com/users/gquintana/followers",
    "following_url": "https://api.github.com/users/gquintana/following{/other_user}",
    "gists_url": "https://api.github.com/users/gquintana/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/gquintana",
    "id": 755587,
    "login": "gquintana",
    "node_id": "MDQ6VXNlcjc1NTU4Nw==",
    "organizations_url": "https://api.github.com/users/gquintana/orgs",
    "received_events_url": "https://api.github.com/users/gquintana/received_events",
    "repos_url": "https://api.github.com/users/gquintana/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/gquintana/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gquintana/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/gquintana"
  }
}
json_root is_array: false
json_root is_object: true
number: 9445
url: https://api.github.com/repos/apache/kafka/pulls/9445
title: KAFKA-10615 Detail plain authentication failure log
body: Improve broker logs when a client authenticates using Plain mechanism and wrong password. 
This helps identifying wihich client is misconfigured.
review_comments: https://api.github.com/repos/apache/kafka/pulls/9445/comments
pull_request_number: 9445
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9444/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9444/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9444"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9444"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9444/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9444"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/076d3c4cc13d611a62b2fbe5751bba17db563b97"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "b752097f849cef17d5ffcbaec1d56f32825167da",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Doc fix for KAFKA-8305; mention its alternate use.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9444/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9444/commits",
  "created_at": "2020-10-15T17:52:03Z",
  "diff_url": "https://github.com/apache/kafka/pull/9444.diff",
  "draft": false,
  "head": {
    "label": "garyrussell:docfix",
    "ref": "docfix",
    "repo": {
      "archive_url": "https://api.github.com/repos/garyrussell/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/garyrussell/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/garyrussell/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/garyrussell/kafka/branches{/branch}",
      "clone_url": "https://github.com/garyrussell/kafka.git",
      "collaborators_url": "https://api.github.com/repos/garyrussell/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/garyrussell/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/garyrussell/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/garyrussell/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/garyrussell/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/garyrussell/kafka/contributors",
      "created_at": "2017-02-28T19:56:35Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/garyrussell/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/garyrussell/kafka/downloads",
      "events_url": "https://api.github.com/repos/garyrussell/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/garyrussell/kafka/forks",
      "full_name": "garyrussell/kafka",
      "git_commits_url": "https://api.github.com/repos/garyrussell/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/garyrussell/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/garyrussell/kafka/git/tags{/sha}",
      "git_url": "git://github.com/garyrussell/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/garyrussell/kafka/hooks",
      "html_url": "https://github.com/garyrussell/kafka",
      "id": 83473519,
      "issue_comment_url": "https://api.github.com/repos/garyrussell/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/garyrussell/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/garyrussell/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/garyrussell/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/garyrussell/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/garyrussell/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/garyrussell/kafka/merges",
      "milestones_url": "https://api.github.com/repos/garyrussell/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk4MzQ3MzUxOQ==",
      "notifications_url": "https://api.github.com/repos/garyrussell/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/483832?v=4",
        "events_url": "https://api.github.com/users/garyrussell/events{/privacy}",
        "followers_url": "https://api.github.com/users/garyrussell/followers",
        "following_url": "https://api.github.com/users/garyrussell/following{/other_user}",
        "gists_url": "https://api.github.com/users/garyrussell/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/garyrussell",
        "id": 483832,
        "login": "garyrussell",
        "node_id": "MDQ6VXNlcjQ4MzgzMg==",
        "organizations_url": "https://api.github.com/users/garyrussell/orgs",
        "received_events_url": "https://api.github.com/users/garyrussell/received_events",
        "repos_url": "https://api.github.com/users/garyrussell/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/garyrussell/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/garyrussell/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/garyrussell"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/garyrussell/kafka/pulls{/number}",
      "pushed_at": "2020-10-15T17:50:07Z",
      "releases_url": "https://api.github.com/repos/garyrussell/kafka/releases{/id}",
      "size": 43670,
      "ssh_url": "git@github.com:garyrussell/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/garyrussell/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/garyrussell/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/garyrussell/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/garyrussell/kafka/subscription",
      "svn_url": "https://github.com/garyrussell/kafka",
      "tags_url": "https://api.github.com/repos/garyrussell/kafka/tags",
      "teams_url": "https://api.github.com/repos/garyrussell/kafka/teams",
      "trees_url": "https://api.github.com/repos/garyrussell/kafka/git/trees{/sha}",
      "updated_at": "2017-02-28T19:56:43Z",
      "url": "https://api.github.com/repos/garyrussell/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "076d3c4cc13d611a62b2fbe5751bba17db563b97",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/483832?v=4",
      "events_url": "https://api.github.com/users/garyrussell/events{/privacy}",
      "followers_url": "https://api.github.com/users/garyrussell/followers",
      "following_url": "https://api.github.com/users/garyrussell/following{/other_user}",
      "gists_url": "https://api.github.com/users/garyrussell/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/garyrussell",
      "id": 483832,
      "login": "garyrussell",
      "node_id": "MDQ6VXNlcjQ4MzgzMg==",
      "organizations_url": "https://api.github.com/users/garyrussell/orgs",
      "received_events_url": "https://api.github.com/users/garyrussell/received_events",
      "repos_url": "https://api.github.com/users/garyrussell/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/garyrussell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/garyrussell/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/garyrussell"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9444",
  "id": 504276292,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9444",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "1903e79a0d71cb536b47916c5090c1489ba06f57",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA0Mjc2Mjky",
  "number": 9444,
  "patch_url": "https://github.com/apache/kafka/pull/9444.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9444/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/076d3c4cc13d611a62b2fbe5751bba17db563b97",
  "title": "KAFKA-8305: Doc Fix default.replication.factor",
  "updated_at": "2020-10-15T17:52:03Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9444",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/483832?v=4",
    "events_url": "https://api.github.com/users/garyrussell/events{/privacy}",
    "followers_url": "https://api.github.com/users/garyrussell/followers",
    "following_url": "https://api.github.com/users/garyrussell/following{/other_user}",
    "gists_url": "https://api.github.com/users/garyrussell/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/garyrussell",
    "id": 483832,
    "login": "garyrussell",
    "node_id": "MDQ6VXNlcjQ4MzgzMg==",
    "organizations_url": "https://api.github.com/users/garyrussell/orgs",
    "received_events_url": "https://api.github.com/users/garyrussell/received_events",
    "repos_url": "https://api.github.com/users/garyrussell/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/garyrussell/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/garyrussell/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/garyrussell"
  }
}
json_root is_array: false
json_root is_object: true
number: 9444
url: https://api.github.com/repos/apache/kafka/pulls/9444
title: KAFKA-8305: Doc Fix default.replication.factor
body: Doc fix for KAFKA-8305; mention its alternate use.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9444/comments
pull_request_number: 9444
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9441/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9441/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9441"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9441"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9441/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9441"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/41d4546304d99a1b7a51df5d4c9274beeb1dec0f"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "fcc7c2de391cadad8edecb108d978ea50afd428d",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Implements the single thread with FIFO approach suggested in https://issues.apache.org/jira/browse/KAFKA-10614",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9441/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9441/commits",
  "created_at": "2020-10-15T11:33:16Z",
  "diff_url": "https://github.com/apache/kafka/pull/9441.diff",
  "draft": true,
  "head": {
    "label": "tombentley:KAFKA-10614-group-coordinator-election-resignation",
    "ref": "KAFKA-10614-group-coordinator-election-resignation",
    "repo": {
      "archive_url": "https://api.github.com/repos/tombentley/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/tombentley/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/tombentley/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/tombentley/kafka/branches{/branch}",
      "clone_url": "https://github.com/tombentley/kafka.git",
      "collaborators_url": "https://api.github.com/repos/tombentley/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/tombentley/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/tombentley/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/tombentley/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/tombentley/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/tombentley/kafka/contributors",
      "created_at": "2017-06-09T11:08:28Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/tombentley/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/tombentley/kafka/downloads",
      "events_url": "https://api.github.com/repos/tombentley/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/tombentley/kafka/forks",
      "full_name": "tombentley/kafka",
      "git_commits_url": "https://api.github.com/repos/tombentley/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/tombentley/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/tombentley/kafka/git/tags{/sha}",
      "git_url": "git://github.com/tombentley/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/tombentley/kafka/hooks",
      "html_url": "https://github.com/tombentley/kafka",
      "id": 93850932,
      "issue_comment_url": "https://api.github.com/repos/tombentley/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/tombentley/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/tombentley/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/tombentley/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/tombentley/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/tombentley/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/tombentley/kafka/merges",
      "milestones_url": "https://api.github.com/repos/tombentley/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk5Mzg1MDkzMg==",
      "notifications_url": "https://api.github.com/repos/tombentley/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/879487?v=4",
        "events_url": "https://api.github.com/users/tombentley/events{/privacy}",
        "followers_url": "https://api.github.com/users/tombentley/followers",
        "following_url": "https://api.github.com/users/tombentley/following{/other_user}",
        "gists_url": "https://api.github.com/users/tombentley/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tombentley",
        "id": 879487,
        "login": "tombentley",
        "node_id": "MDQ6VXNlcjg3OTQ4Nw==",
        "organizations_url": "https://api.github.com/users/tombentley/orgs",
        "received_events_url": "https://api.github.com/users/tombentley/received_events",
        "repos_url": "https://api.github.com/users/tombentley/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tombentley/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tombentley/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tombentley"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/tombentley/kafka/pulls{/number}",
      "pushed_at": "2020-10-23T15:12:00Z",
      "releases_url": "https://api.github.com/repos/tombentley/kafka/releases{/id}",
      "size": 100102,
      "ssh_url": "git@github.com:tombentley/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/tombentley/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/tombentley/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/tombentley/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/tombentley/kafka/subscription",
      "svn_url": "https://github.com/tombentley/kafka",
      "tags_url": "https://api.github.com/repos/tombentley/kafka/tags",
      "teams_url": "https://api.github.com/repos/tombentley/kafka/teams",
      "trees_url": "https://api.github.com/repos/tombentley/kafka/git/trees{/sha}",
      "updated_at": "2017-06-09T11:08:37Z",
      "url": "https://api.github.com/repos/tombentley/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "41d4546304d99a1b7a51df5d4c9274beeb1dec0f",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/879487?v=4",
      "events_url": "https://api.github.com/users/tombentley/events{/privacy}",
      "followers_url": "https://api.github.com/users/tombentley/followers",
      "following_url": "https://api.github.com/users/tombentley/following{/other_user}",
      "gists_url": "https://api.github.com/users/tombentley/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/tombentley",
      "id": 879487,
      "login": "tombentley",
      "node_id": "MDQ6VXNlcjg3OTQ4Nw==",
      "organizations_url": "https://api.github.com/users/tombentley/orgs",
      "received_events_url": "https://api.github.com/users/tombentley/received_events",
      "repos_url": "https://api.github.com/users/tombentley/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/tombentley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tombentley/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/tombentley"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9441",
  "id": 504032720,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9441",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "fd7616ae49c4cbe1af482ff2721f2e4ea1928ae5",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTA0MDMyNzIw",
  "number": 9441,
  "patch_url": "https://github.com/apache/kafka/pull/9441.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9441/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/41d4546304d99a1b7a51df5d4c9274beeb1dec0f",
  "title": "KAFKA-10614: Ensure group state (un)load is executed in the submitted order",
  "updated_at": "2020-10-21T15:33:11Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9441",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/879487?v=4",
    "events_url": "https://api.github.com/users/tombentley/events{/privacy}",
    "followers_url": "https://api.github.com/users/tombentley/followers",
    "following_url": "https://api.github.com/users/tombentley/following{/other_user}",
    "gists_url": "https://api.github.com/users/tombentley/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/tombentley",
    "id": 879487,
    "login": "tombentley",
    "node_id": "MDQ6VXNlcjg3OTQ4Nw==",
    "organizations_url": "https://api.github.com/users/tombentley/orgs",
    "received_events_url": "https://api.github.com/users/tombentley/received_events",
    "repos_url": "https://api.github.com/users/tombentley/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/tombentley/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tombentley/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/tombentley"
  }
}
json_root is_array: false
json_root is_object: true
number: 9441
url: https://api.github.com/repos/apache/kafka/pulls/9441
title: KAFKA-10614: Ensure group state (un)load is executed in the submitted order
body: Implements the single thread with FIFO approach suggested in https://issues.apache.org/jira/browse/KAFKA-10614
review_comments: https://api.github.com/repos/apache/kafka/pulls/9441/comments
pull_request_number: 9441
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9439/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9439/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9439"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9439"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9439/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9439"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/a788048936bb256b0764f5094a6900f5be389ae9"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "MEMBER",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "7f9beeaaafdb1bc74a5f0c1386f7e01f5f831d6b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9439/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9439/commits",
  "created_at": "2020-10-14T23:49:37Z",
  "diff_url": "https://github.com/apache/kafka/pull/9439.diff",
  "draft": true,
  "head": {
    "label": "xvrl:kafka-10587",
    "ref": "kafka-10587",
    "repo": {
      "archive_url": "https://api.github.com/repos/xvrl/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/xvrl/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/xvrl/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/xvrl/kafka/branches{/branch}",
      "clone_url": "https://github.com/xvrl/kafka.git",
      "collaborators_url": "https://api.github.com/repos/xvrl/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/xvrl/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/xvrl/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/xvrl/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/xvrl/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/xvrl/kafka/contributors",
      "created_at": "2016-10-04T18:42:23Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/xvrl/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/xvrl/kafka/downloads",
      "events_url": "https://api.github.com/repos/xvrl/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/xvrl/kafka/forks",
      "full_name": "xvrl/kafka",
      "git_commits_url": "https://api.github.com/repos/xvrl/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/xvrl/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/xvrl/kafka/git/tags{/sha}",
      "git_url": "git://github.com/xvrl/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/xvrl/kafka/hooks",
      "html_url": "https://github.com/xvrl/kafka",
      "id": 69995142,
      "issue_comment_url": "https://api.github.com/repos/xvrl/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/xvrl/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/xvrl/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/xvrl/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/xvrl/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/xvrl/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/xvrl/kafka/merges",
      "milestones_url": "https://api.github.com/repos/xvrl/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk2OTk5NTE0Mg==",
      "notifications_url": "https://api.github.com/repos/xvrl/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/815147?v=4",
        "events_url": "https://api.github.com/users/xvrl/events{/privacy}",
        "followers_url": "https://api.github.com/users/xvrl/followers",
        "following_url": "https://api.github.com/users/xvrl/following{/other_user}",
        "gists_url": "https://api.github.com/users/xvrl/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/xvrl",
        "id": 815147,
        "login": "xvrl",
        "node_id": "MDQ6VXNlcjgxNTE0Nw==",
        "organizations_url": "https://api.github.com/users/xvrl/orgs",
        "received_events_url": "https://api.github.com/users/xvrl/received_events",
        "repos_url": "https://api.github.com/users/xvrl/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/xvrl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xvrl/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/xvrl"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/xvrl/kafka/pulls{/number}",
      "pushed_at": "2020-10-19T18:40:28Z",
      "releases_url": "https://api.github.com/repos/xvrl/kafka/releases{/id}",
      "size": 99134,
      "ssh_url": "git@github.com:xvrl/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/xvrl/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/xvrl/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/xvrl/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/xvrl/kafka/subscription",
      "svn_url": "https://github.com/xvrl/kafka",
      "tags_url": "https://api.github.com/repos/xvrl/kafka/tags",
      "teams_url": "https://api.github.com/repos/xvrl/kafka/teams",
      "trees_url": "https://api.github.com/repos/xvrl/kafka/git/trees{/sha}",
      "updated_at": "2016-10-04T18:42:29Z",
      "url": "https://api.github.com/repos/xvrl/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "a788048936bb256b0764f5094a6900f5be389ae9",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/815147?v=4",
      "events_url": "https://api.github.com/users/xvrl/events{/privacy}",
      "followers_url": "https://api.github.com/users/xvrl/followers",
      "following_url": "https://api.github.com/users/xvrl/following{/other_user}",
      "gists_url": "https://api.github.com/users/xvrl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/xvrl",
      "id": 815147,
      "login": "xvrl",
      "node_id": "MDQ6VXNlcjgxNTE0Nw==",
      "organizations_url": "https://api.github.com/users/xvrl/orgs",
      "received_events_url": "https://api.github.com/users/xvrl/received_events",
      "repos_url": "https://api.github.com/users/xvrl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/xvrl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xvrl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/xvrl"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9439",
  "id": 503716043,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9439",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "c57ceeb2b53fc4370c58035d0af9854330eb78d9",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAzNzE2MDQz",
  "number": 9439,
  "patch_url": "https://github.com/apache/kafka/pull/9439.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9439/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/a788048936bb256b0764f5094a6900f5be389ae9",
  "title": "KAFKA-10587 MirrorMaker CLI change for KIP-629",
  "updated_at": "2020-10-14T23:49:37Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9439",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/815147?v=4",
    "events_url": "https://api.github.com/users/xvrl/events{/privacy}",
    "followers_url": "https://api.github.com/users/xvrl/followers",
    "following_url": "https://api.github.com/users/xvrl/following{/other_user}",
    "gists_url": "https://api.github.com/users/xvrl/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/xvrl",
    "id": 815147,
    "login": "xvrl",
    "node_id": "MDQ6VXNlcjgxNTE0Nw==",
    "organizations_url": "https://api.github.com/users/xvrl/orgs",
    "received_events_url": "https://api.github.com/users/xvrl/received_events",
    "repos_url": "https://api.github.com/users/xvrl/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/xvrl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/xvrl/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/xvrl"
  }
}
json_root is_array: false
json_root is_object: true
number: 9439
url: https://api.github.com/repos/apache/kafka/pulls/9439
title: KAFKA-10587 MirrorMaker CLI change for KIP-629
body: 
review_comments: https://api.github.com/repos/apache/kafka/pulls/9439/comments
pull_request_number: 9439
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9437/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9437/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9437"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9437"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9437/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9437"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/a17daf4d50c68a2140adff522fce0b21a7db9757"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "7e9dec707dab344ceabf36346d1611bae1f20a8e",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Additional logging, no functional changes.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9437/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9437/commits",
  "created_at": "2020-10-14T20:14:18Z",
  "diff_url": "https://github.com/apache/kafka/pull/9437.diff",
  "draft": false,
  "head": {
    "label": "belugabehr:KAFKA-10612",
    "ref": "KAFKA-10612",
    "repo": {
      "archive_url": "https://api.github.com/repos/belugabehr/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/belugabehr/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/belugabehr/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/belugabehr/kafka/branches{/branch}",
      "clone_url": "https://github.com/belugabehr/kafka.git",
      "collaborators_url": "https://api.github.com/repos/belugabehr/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/belugabehr/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/belugabehr/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/belugabehr/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/belugabehr/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/belugabehr/kafka/contributors",
      "created_at": "2020-01-07T21:05:47Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/belugabehr/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/belugabehr/kafka/downloads",
      "events_url": "https://api.github.com/repos/belugabehr/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/belugabehr/kafka/forks",
      "full_name": "belugabehr/kafka",
      "git_commits_url": "https://api.github.com/repos/belugabehr/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/belugabehr/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/belugabehr/kafka/git/tags{/sha}",
      "git_url": "git://github.com/belugabehr/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/belugabehr/kafka/hooks",
      "html_url": "https://github.com/belugabehr/kafka",
      "id": 232417321,
      "issue_comment_url": "https://api.github.com/repos/belugabehr/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/belugabehr/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/belugabehr/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/belugabehr/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/belugabehr/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/belugabehr/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/belugabehr/kafka/merges",
      "milestones_url": "https://api.github.com/repos/belugabehr/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMzI0MTczMjE=",
      "notifications_url": "https://api.github.com/repos/belugabehr/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/12578579?v=4",
        "events_url": "https://api.github.com/users/belugabehr/events{/privacy}",
        "followers_url": "https://api.github.com/users/belugabehr/followers",
        "following_url": "https://api.github.com/users/belugabehr/following{/other_user}",
        "gists_url": "https://api.github.com/users/belugabehr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/belugabehr",
        "id": 12578579,
        "login": "belugabehr",
        "node_id": "MDQ6VXNlcjEyNTc4NTc5",
        "organizations_url": "https://api.github.com/users/belugabehr/orgs",
        "received_events_url": "https://api.github.com/users/belugabehr/received_events",
        "repos_url": "https://api.github.com/users/belugabehr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/belugabehr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/belugabehr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/belugabehr"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/belugabehr/kafka/pulls{/number}",
      "pushed_at": "2020-10-14T20:13:05Z",
      "releases_url": "https://api.github.com/repos/belugabehr/kafka/releases{/id}",
      "size": 105963,
      "ssh_url": "git@github.com:belugabehr/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/belugabehr/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/belugabehr/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/belugabehr/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/belugabehr/kafka/subscription",
      "svn_url": "https://github.com/belugabehr/kafka",
      "tags_url": "https://api.github.com/repos/belugabehr/kafka/tags",
      "teams_url": "https://api.github.com/repos/belugabehr/kafka/teams",
      "trees_url": "https://api.github.com/repos/belugabehr/kafka/git/trees{/sha}",
      "updated_at": "2020-10-14T19:33:35Z",
      "url": "https://api.github.com/repos/belugabehr/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "a17daf4d50c68a2140adff522fce0b21a7db9757",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/12578579?v=4",
      "events_url": "https://api.github.com/users/belugabehr/events{/privacy}",
      "followers_url": "https://api.github.com/users/belugabehr/followers",
      "following_url": "https://api.github.com/users/belugabehr/following{/other_user}",
      "gists_url": "https://api.github.com/users/belugabehr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/belugabehr",
      "id": 12578579,
      "login": "belugabehr",
      "node_id": "MDQ6VXNlcjEyNTc4NTc5",
      "organizations_url": "https://api.github.com/users/belugabehr/orgs",
      "received_events_url": "https://api.github.com/users/belugabehr/received_events",
      "repos_url": "https://api.github.com/users/belugabehr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/belugabehr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/belugabehr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/belugabehr"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9437",
  "id": 503614651,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9437",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "50b95521991f487140300ffc4f3b420b267df752",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAzNjE0NjUx",
  "number": 9437,
  "patch_url": "https://github.com/apache/kafka/pull/9437.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9437/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/a17daf4d50c68a2140adff522fce0b21a7db9757",
  "title": "KAFKA-10612: Log When SSL Authentication is in Unexpected State",
  "updated_at": "2020-10-14T20:14:18Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9437",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/12578579?v=4",
    "events_url": "https://api.github.com/users/belugabehr/events{/privacy}",
    "followers_url": "https://api.github.com/users/belugabehr/followers",
    "following_url": "https://api.github.com/users/belugabehr/following{/other_user}",
    "gists_url": "https://api.github.com/users/belugabehr/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/belugabehr",
    "id": 12578579,
    "login": "belugabehr",
    "node_id": "MDQ6VXNlcjEyNTc4NTc5",
    "organizations_url": "https://api.github.com/users/belugabehr/orgs",
    "received_events_url": "https://api.github.com/users/belugabehr/received_events",
    "repos_url": "https://api.github.com/users/belugabehr/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/belugabehr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/belugabehr/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/belugabehr"
  }
}
json_root is_array: false
json_root is_object: true
number: 9437
url: https://api.github.com/repos/apache/kafka/pulls/9437
title: KAFKA-10612: Log When SSL Authentication is in Unexpected State
body: Additional logging, no functional changes.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9437/comments
pull_request_number: 9437
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9435/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9435/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9435"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9435"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9435/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9435"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/c877b329c1f2112ccd7cb2530c6d745cb87aca13"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "fc4710e2da81dae4becbfa5ff0f43d82250870fe",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "\r\nThere is a bug that causes fetch-all-topic-metadata requests triggering\r\nauto topic creation. Details are described in KAFKA-10606. This is the\r\nsimplest way to fix this bug on the broker side.",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9435/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9435/commits",
  "created_at": "2020-10-14T18:18:31Z",
  "diff_url": "https://github.com/apache/kafka/pull/9435.diff",
  "draft": false,
  "head": {
    "label": "Lincong:disable-atc-bug",
    "ref": "disable-atc-bug",
    "repo": {
      "archive_url": "https://api.github.com/repos/Lincong/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/Lincong/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/Lincong/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/Lincong/kafka/branches{/branch}",
      "clone_url": "https://github.com/Lincong/kafka.git",
      "collaborators_url": "https://api.github.com/repos/Lincong/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/Lincong/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/Lincong/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/Lincong/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/Lincong/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/Lincong/kafka/contributors",
      "created_at": "2019-03-23T16:30:05Z",
      "default_branch": "2.0-li",
      "deployments_url": "https://api.github.com/repos/Lincong/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/Lincong/kafka/downloads",
      "events_url": "https://api.github.com/repos/Lincong/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/Lincong/kafka/forks",
      "full_name": "Lincong/kafka",
      "git_commits_url": "https://api.github.com/repos/Lincong/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/Lincong/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/Lincong/kafka/git/tags{/sha}",
      "git_url": "git://github.com/Lincong/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/Lincong/kafka/hooks",
      "html_url": "https://github.com/Lincong/kafka",
      "id": 177313021,
      "issue_comment_url": "https://api.github.com/repos/Lincong/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/Lincong/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/Lincong/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/Lincong/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/Lincong/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/Lincong/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/Lincong/kafka/merges",
      "milestones_url": "https://api.github.com/repos/Lincong/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxNzczMTMwMjE=",
      "notifications_url": "https://api.github.com/repos/Lincong/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/9780681?v=4",
        "events_url": "https://api.github.com/users/Lincong/events{/privacy}",
        "followers_url": "https://api.github.com/users/Lincong/followers",
        "following_url": "https://api.github.com/users/Lincong/following{/other_user}",
        "gists_url": "https://api.github.com/users/Lincong/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Lincong",
        "id": 9780681,
        "login": "Lincong",
        "node_id": "MDQ6VXNlcjk3ODA2ODE=",
        "organizations_url": "https://api.github.com/users/Lincong/orgs",
        "received_events_url": "https://api.github.com/users/Lincong/received_events",
        "repos_url": "https://api.github.com/users/Lincong/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Lincong/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Lincong/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Lincong"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/Lincong/kafka/pulls{/number}",
      "pushed_at": "2020-10-21T07:16:06Z",
      "releases_url": "https://api.github.com/repos/Lincong/kafka/releases{/id}",
      "size": 105217,
      "ssh_url": "git@github.com:Lincong/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/Lincong/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/Lincong/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/Lincong/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/Lincong/kafka/subscription",
      "svn_url": "https://github.com/Lincong/kafka",
      "tags_url": "https://api.github.com/repos/Lincong/kafka/tags",
      "teams_url": "https://api.github.com/repos/Lincong/kafka/teams",
      "trees_url": "https://api.github.com/repos/Lincong/kafka/git/trees{/sha}",
      "updated_at": "2019-08-27T23:51:03Z",
      "url": "https://api.github.com/repos/Lincong/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "c877b329c1f2112ccd7cb2530c6d745cb87aca13",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/9780681?v=4",
      "events_url": "https://api.github.com/users/Lincong/events{/privacy}",
      "followers_url": "https://api.github.com/users/Lincong/followers",
      "following_url": "https://api.github.com/users/Lincong/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lincong/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Lincong",
      "id": 9780681,
      "login": "Lincong",
      "node_id": "MDQ6VXNlcjk3ODA2ODE=",
      "organizations_url": "https://api.github.com/users/Lincong/orgs",
      "received_events_url": "https://api.github.com/users/Lincong/received_events",
      "repos_url": "https://api.github.com/users/Lincong/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Lincong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lincong/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Lincong"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9435",
  "id": 503556249,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9435",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "2cac340b4f827447e023e14dd54c007afb39074d",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAzNTU2MjQ5",
  "number": 9435,
  "patch_url": "https://github.com/apache/kafka/pull/9435.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9435/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/c877b329c1f2112ccd7cb2530c6d745cb87aca13",
  "title": "KAFKA-10606: Disable auto topic creation for fetch-all-topic-metadata request",
  "updated_at": "2020-10-21T07:40:06Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9435",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/9780681?v=4",
    "events_url": "https://api.github.com/users/Lincong/events{/privacy}",
    "followers_url": "https://api.github.com/users/Lincong/followers",
    "following_url": "https://api.github.com/users/Lincong/following{/other_user}",
    "gists_url": "https://api.github.com/users/Lincong/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/Lincong",
    "id": 9780681,
    "login": "Lincong",
    "node_id": "MDQ6VXNlcjk3ODA2ODE=",
    "organizations_url": "https://api.github.com/users/Lincong/orgs",
    "received_events_url": "https://api.github.com/users/Lincong/received_events",
    "repos_url": "https://api.github.com/users/Lincong/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/Lincong/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Lincong/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/Lincong"
  }
}
json_root is_array: false
json_root is_object: true
number: 9435
url: https://api.github.com/repos/apache/kafka/pulls/9435
title: KAFKA-10606: Disable auto topic creation for fetch-all-topic-metadata request
body: 
There is a bug that causes fetch-all-topic-metadata requests triggering
auto topic creation. Details are described in KAFKA-10606. This is the
simplest way to fix this bug on the broker side.
review_comments: https://api.github.com/repos/apache/kafka/pulls/9435/comments
id: 509055559
url: https://api.github.com/repos/apache/kafka/pulls/comments/509055559
body: If we pass ```false``` to getTopicMetadata, it generates ```UNKNOWN_TOPIC_OR_PARTITION``` when the topic is removed, right? If so, does client-side need to handle such error? For example, KafkaAdminClient#listTopics should filter out those "nonexistent" topics (https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java#L1717). Otherwise, users want to get all "existent" topics but response say a_topic is "nonexistent".
diff_hunk: @@ -1236,9 +1236,19 @@ class KafkaApis(val requestChannel: RequestChannel,
     val topicMetadata =
       if (authorizedTopics.isEmpty)
         Seq.empty[MetadataResponseTopic]
-      else
-        getTopicMetadata(metadataRequest.allowAutoTopicCreation, authorizedTopics, request.context.listenerName,
-          errorUnavailableEndpoints, errorUnavailableListeners)
+      else {
+        // KAFKA-10606: If this request is to get metadata for all topics, auto topic creation should not be allowed
+        // The special handling is necessary on broker side because allowAutoTopicCreation is hard coded to true
+        // for backward compatibility on client side.
+        val allowAutoTopicCreation = (!metadataRequest.isAllTopics) && metadataRequest.allowAutoTopicCreation
path: core/src/main/scala/kafka/server/KafkaApis.scala
html: https://github.com/apache/kafka/pull/9435#discussion_r509055559
pull_request_number: 9435
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9433/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9433/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9433"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9433"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9433/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9433"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/022bc25dd456c8ba46a99266e030db11a551ed19"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "7e9dec707dab344ceabf36346d1611bae1f20a8e",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9433/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9433/commits",
  "created_at": "2020-10-14T11:25:55Z",
  "diff_url": "https://github.com/apache/kafka/pull/9433.diff",
  "draft": false,
  "head": {
    "label": "tombentley:KAFKA-10607-error-counts",
    "ref": "KAFKA-10607-error-counts",
    "repo": {
      "archive_url": "https://api.github.com/repos/tombentley/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/tombentley/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/tombentley/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/tombentley/kafka/branches{/branch}",
      "clone_url": "https://github.com/tombentley/kafka.git",
      "collaborators_url": "https://api.github.com/repos/tombentley/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/tombentley/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/tombentley/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/tombentley/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/tombentley/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/tombentley/kafka/contributors",
      "created_at": "2017-06-09T11:08:28Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/tombentley/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/tombentley/kafka/downloads",
      "events_url": "https://api.github.com/repos/tombentley/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/tombentley/kafka/forks",
      "full_name": "tombentley/kafka",
      "git_commits_url": "https://api.github.com/repos/tombentley/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/tombentley/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/tombentley/kafka/git/tags{/sha}",
      "git_url": "git://github.com/tombentley/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/tombentley/kafka/hooks",
      "html_url": "https://github.com/tombentley/kafka",
      "id": 93850932,
      "issue_comment_url": "https://api.github.com/repos/tombentley/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/tombentley/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/tombentley/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/tombentley/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/tombentley/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/tombentley/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/tombentley/kafka/merges",
      "milestones_url": "https://api.github.com/repos/tombentley/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk5Mzg1MDkzMg==",
      "notifications_url": "https://api.github.com/repos/tombentley/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/879487?v=4",
        "events_url": "https://api.github.com/users/tombentley/events{/privacy}",
        "followers_url": "https://api.github.com/users/tombentley/followers",
        "following_url": "https://api.github.com/users/tombentley/following{/other_user}",
        "gists_url": "https://api.github.com/users/tombentley/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tombentley",
        "id": 879487,
        "login": "tombentley",
        "node_id": "MDQ6VXNlcjg3OTQ4Nw==",
        "organizations_url": "https://api.github.com/users/tombentley/orgs",
        "received_events_url": "https://api.github.com/users/tombentley/received_events",
        "repos_url": "https://api.github.com/users/tombentley/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tombentley/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tombentley/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tombentley"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/tombentley/kafka/pulls{/number}",
      "pushed_at": "2020-10-23T15:12:00Z",
      "releases_url": "https://api.github.com/repos/tombentley/kafka/releases{/id}",
      "size": 100102,
      "ssh_url": "git@github.com:tombentley/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/tombentley/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/tombentley/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/tombentley/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/tombentley/kafka/subscription",
      "svn_url": "https://github.com/tombentley/kafka",
      "tags_url": "https://api.github.com/repos/tombentley/kafka/tags",
      "teams_url": "https://api.github.com/repos/tombentley/kafka/teams",
      "trees_url": "https://api.github.com/repos/tombentley/kafka/git/trees{/sha}",
      "updated_at": "2017-06-09T11:08:37Z",
      "url": "https://api.github.com/repos/tombentley/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "022bc25dd456c8ba46a99266e030db11a551ed19",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/879487?v=4",
      "events_url": "https://api.github.com/users/tombentley/events{/privacy}",
      "followers_url": "https://api.github.com/users/tombentley/followers",
      "following_url": "https://api.github.com/users/tombentley/following{/other_user}",
      "gists_url": "https://api.github.com/users/tombentley/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/tombentley",
      "id": 879487,
      "login": "tombentley",
      "node_id": "MDQ6VXNlcjg3OTQ4Nw==",
      "organizations_url": "https://api.github.com/users/tombentley/orgs",
      "received_events_url": "https://api.github.com/users/tombentley/received_events",
      "repos_url": "https://api.github.com/users/tombentley/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/tombentley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tombentley/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/tombentley"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9433",
  "id": 503303582,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9433",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "39cddca172d23e5d8301b2b6c1ae6da2ca4c9714",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAzMzAzNTgy",
  "number": 9433,
  "patch_url": "https://github.com/apache/kafka/pull/9433.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9433/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/022bc25dd456c8ba46a99266e030db11a551ed19",
  "title": "KAFKA-10607: Consistent behaviour for response errorCounts()",
  "updated_at": "2020-10-20T10:20:24Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9433",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/879487?v=4",
    "events_url": "https://api.github.com/users/tombentley/events{/privacy}",
    "followers_url": "https://api.github.com/users/tombentley/followers",
    "following_url": "https://api.github.com/users/tombentley/following{/other_user}",
    "gists_url": "https://api.github.com/users/tombentley/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/tombentley",
    "id": 879487,
    "login": "tombentley",
    "node_id": "MDQ6VXNlcjg3OTQ4Nw==",
    "organizations_url": "https://api.github.com/users/tombentley/orgs",
    "received_events_url": "https://api.github.com/users/tombentley/received_events",
    "repos_url": "https://api.github.com/users/tombentley/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/tombentley/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tombentley/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/tombentley"
  }
}
json_root is_array: false
json_root is_object: true
number: 9433
url: https://api.github.com/repos/apache/kafka/pulls/9433
title: KAFKA-10607: Consistent behaviour for response errorCounts()
body: 
review_comments: https://api.github.com/repos/apache/kafka/pulls/9433/comments
pull_request_number: 9433
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9430/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9430/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9430"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9430"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9430/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9430"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/cc7c1196425181fcc26f568ae1d1b33d28cff247"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "7e9dec707dab344ceabf36346d1611bae1f20a8e",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Implements KIP-635\r\n\r\nChanges:\r\n\r\n- Added kafka-get-offsets.sh script\r\n- Removed deprecated max-wait-ms and offsets arguments\r\n- Updated tool to query all topic-partitions by default\r\n- Updated topic argument to support patterns\r\n- Added topic-partitions argument to support a list of topic-partition patterns\r\n- Added exclude-internal-topics to support filtering internal topics\r\n\r\nTesting done: added new ducktape tests for the tool.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9430/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9430/commits",
  "created_at": "2020-10-14T06:52:59Z",
  "diff_url": "https://github.com/apache/kafka/pull/9430.diff",
  "draft": false,
  "head": {
    "label": "urbandan:KIP-635_GetOffsetShell",
    "ref": "KIP-635_GetOffsetShell",
    "repo": {
      "archive_url": "https://api.github.com/repos/urbandan/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/urbandan/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/urbandan/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/urbandan/kafka/branches{/branch}",
      "clone_url": "https://github.com/urbandan/kafka.git",
      "collaborators_url": "https://api.github.com/repos/urbandan/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/urbandan/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/urbandan/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/urbandan/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/urbandan/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/urbandan/kafka/contributors",
      "created_at": "2020-06-23T13:50:03Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/urbandan/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/urbandan/kafka/downloads",
      "events_url": "https://api.github.com/repos/urbandan/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/urbandan/kafka/forks",
      "full_name": "urbandan/kafka",
      "git_commits_url": "https://api.github.com/repos/urbandan/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/urbandan/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/urbandan/kafka/git/tags{/sha}",
      "git_url": "git://github.com/urbandan/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/urbandan/kafka/hooks",
      "html_url": "https://github.com/urbandan/kafka",
      "id": 274418128,
      "issue_comment_url": "https://api.github.com/repos/urbandan/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/urbandan/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/urbandan/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/urbandan/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/urbandan/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/urbandan/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/urbandan/kafka/merges",
      "milestones_url": "https://api.github.com/repos/urbandan/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyNzQ0MTgxMjg=",
      "notifications_url": "https://api.github.com/repos/urbandan/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/48119872?v=4",
        "events_url": "https://api.github.com/users/urbandan/events{/privacy}",
        "followers_url": "https://api.github.com/users/urbandan/followers",
        "following_url": "https://api.github.com/users/urbandan/following{/other_user}",
        "gists_url": "https://api.github.com/users/urbandan/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/urbandan",
        "id": 48119872,
        "login": "urbandan",
        "node_id": "MDQ6VXNlcjQ4MTE5ODcy",
        "organizations_url": "https://api.github.com/users/urbandan/orgs",
        "received_events_url": "https://api.github.com/users/urbandan/received_events",
        "repos_url": "https://api.github.com/users/urbandan/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/urbandan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/urbandan/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/urbandan"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/urbandan/kafka/pulls{/number}",
      "pushed_at": "2020-10-14T06:51:05Z",
      "releases_url": "https://api.github.com/repos/urbandan/kafka/releases{/id}",
      "size": 107357,
      "ssh_url": "git@github.com:urbandan/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/urbandan/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/urbandan/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/urbandan/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/urbandan/kafka/subscription",
      "svn_url": "https://github.com/urbandan/kafka",
      "tags_url": "https://api.github.com/repos/urbandan/kafka/tags",
      "teams_url": "https://api.github.com/repos/urbandan/kafka/teams",
      "trees_url": "https://api.github.com/repos/urbandan/kafka/git/trees{/sha}",
      "updated_at": "2020-06-30T11:50:34Z",
      "url": "https://api.github.com/repos/urbandan/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "cc7c1196425181fcc26f568ae1d1b33d28cff247",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/48119872?v=4",
      "events_url": "https://api.github.com/users/urbandan/events{/privacy}",
      "followers_url": "https://api.github.com/users/urbandan/followers",
      "following_url": "https://api.github.com/users/urbandan/following{/other_user}",
      "gists_url": "https://api.github.com/users/urbandan/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/urbandan",
      "id": 48119872,
      "login": "urbandan",
      "node_id": "MDQ6VXNlcjQ4MTE5ODcy",
      "organizations_url": "https://api.github.com/users/urbandan/orgs",
      "received_events_url": "https://api.github.com/users/urbandan/received_events",
      "repos_url": "https://api.github.com/users/urbandan/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/urbandan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/urbandan/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/urbandan"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9430",
  "id": 503155481,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9430",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "c7fd8792ed2e8b91d771533ca332ea7f0f9723dd",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAzMTU1NDgx",
  "number": 9430,
  "patch_url": "https://github.com/apache/kafka/pull/9430.patch",
  "requested_reviewers": [
    {
      "avatar_url": "https://avatars2.githubusercontent.com/u/157182?v=4",
      "events_url": "https://api.github.com/users/dajac/events{/privacy}",
      "followers_url": "https://api.github.com/users/dajac/followers",
      "following_url": "https://api.github.com/users/dajac/following{/other_user}",
      "gists_url": "https://api.github.com/users/dajac/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dajac",
      "id": 157182,
      "login": "dajac",
      "node_id": "MDQ6VXNlcjE1NzE4Mg==",
      "organizations_url": "https://api.github.com/users/dajac/orgs",
      "received_events_url": "https://api.github.com/users/dajac/received_events",
      "repos_url": "https://api.github.com/users/dajac/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dajac/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dajac/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dajac"
    }
  ],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9430/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/cc7c1196425181fcc26f568ae1d1b33d28cff247",
  "title": "KAFKA-5235: GetOffsetShell: support for multiple topics and consumer configuration override",
  "updated_at": "2020-10-22T21:02:00Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9430",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/48119872?v=4",
    "events_url": "https://api.github.com/users/urbandan/events{/privacy}",
    "followers_url": "https://api.github.com/users/urbandan/followers",
    "following_url": "https://api.github.com/users/urbandan/following{/other_user}",
    "gists_url": "https://api.github.com/users/urbandan/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/urbandan",
    "id": 48119872,
    "login": "urbandan",
    "node_id": "MDQ6VXNlcjQ4MTE5ODcy",
    "organizations_url": "https://api.github.com/users/urbandan/orgs",
    "received_events_url": "https://api.github.com/users/urbandan/received_events",
    "repos_url": "https://api.github.com/users/urbandan/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/urbandan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/urbandan/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/urbandan"
  }
}
json_root is_array: false
json_root is_object: true
number: 9430
url: https://api.github.com/repos/apache/kafka/pulls/9430
title: KAFKA-5235: GetOffsetShell: support for multiple topics and consumer configuration override
body: Implements KIP-635

Changes:

- Added kafka-get-offsets.sh script
- Removed deprecated max-wait-ms and offsets arguments
- Updated tool to query all topic-partitions by default
- Updated topic argument to support patterns
- Added topic-partitions argument to support a list of topic-partition patterns
- Added exclude-internal-topics to support filtering internal topics

Testing done: added new ducktape tests for the tool.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9430/comments
pull_request_number: 9430
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9426/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9426/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9426"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9426"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9426/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9426"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/c872e89cf6a45d6c0620ec8a13ad5870996bc7f7"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "40ad4fe0ae9c687ed3c4d35fb5f5830cb1a867b8",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Fix flaky test by making sure Streams is\r\nrunning before making assertions about IQ.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9426/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9426/commits",
  "created_at": "2020-10-13T18:21:53Z",
  "diff_url": "https://github.com/apache/kafka/pull/9426.diff",
  "draft": false,
  "head": {
    "label": "vvcephei:minor-fix-flaky-qsit",
    "ref": "minor-fix-flaky-qsit",
    "repo": {
      "archive_url": "https://api.github.com/repos/vvcephei/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/vvcephei/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/vvcephei/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/vvcephei/kafka/branches{/branch}",
      "clone_url": "https://github.com/vvcephei/kafka.git",
      "collaborators_url": "https://api.github.com/repos/vvcephei/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/vvcephei/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/vvcephei/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/vvcephei/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/vvcephei/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/vvcephei/kafka/contributors",
      "created_at": "2020-10-13T02:33:37Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/vvcephei/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/vvcephei/kafka/downloads",
      "events_url": "https://api.github.com/repos/vvcephei/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/vvcephei/kafka/forks",
      "full_name": "vvcephei/kafka",
      "git_commits_url": "https://api.github.com/repos/vvcephei/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/vvcephei/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/vvcephei/kafka/git/tags{/sha}",
      "git_url": "git://github.com/vvcephei/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/vvcephei/kafka/hooks",
      "html_url": "https://github.com/vvcephei/kafka",
      "id": 303567113,
      "issue_comment_url": "https://api.github.com/repos/vvcephei/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/vvcephei/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/vvcephei/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/vvcephei/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/vvcephei/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/vvcephei/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/vvcephei/kafka/merges",
      "milestones_url": "https://api.github.com/repos/vvcephei/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDM1NjcxMTM=",
      "notifications_url": "https://api.github.com/repos/vvcephei/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/832787?v=4",
        "events_url": "https://api.github.com/users/vvcephei/events{/privacy}",
        "followers_url": "https://api.github.com/users/vvcephei/followers",
        "following_url": "https://api.github.com/users/vvcephei/following{/other_user}",
        "gists_url": "https://api.github.com/users/vvcephei/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vvcephei",
        "id": 832787,
        "login": "vvcephei",
        "node_id": "MDQ6VXNlcjgzMjc4Nw==",
        "organizations_url": "https://api.github.com/users/vvcephei/orgs",
        "received_events_url": "https://api.github.com/users/vvcephei/received_events",
        "repos_url": "https://api.github.com/users/vvcephei/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vvcephei/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vvcephei/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vvcephei"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/vvcephei/kafka/pulls{/number}",
      "pushed_at": "2020-10-23T18:53:14Z",
      "releases_url": "https://api.github.com/repos/vvcephei/kafka/releases{/id}",
      "size": 108580,
      "ssh_url": "git@github.com:vvcephei/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/vvcephei/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/vvcephei/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/vvcephei/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/vvcephei/kafka/subscription",
      "svn_url": "https://github.com/vvcephei/kafka",
      "tags_url": "https://api.github.com/repos/vvcephei/kafka/tags",
      "teams_url": "https://api.github.com/repos/vvcephei/kafka/teams",
      "trees_url": "https://api.github.com/repos/vvcephei/kafka/git/trees{/sha}",
      "updated_at": "2020-10-13T02:33:40Z",
      "url": "https://api.github.com/repos/vvcephei/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "c872e89cf6a45d6c0620ec8a13ad5870996bc7f7",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/832787?v=4",
      "events_url": "https://api.github.com/users/vvcephei/events{/privacy}",
      "followers_url": "https://api.github.com/users/vvcephei/followers",
      "following_url": "https://api.github.com/users/vvcephei/following{/other_user}",
      "gists_url": "https://api.github.com/users/vvcephei/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vvcephei",
      "id": 832787,
      "login": "vvcephei",
      "node_id": "MDQ6VXNlcjgzMjc4Nw==",
      "organizations_url": "https://api.github.com/users/vvcephei/orgs",
      "received_events_url": "https://api.github.com/users/vvcephei/received_events",
      "repos_url": "https://api.github.com/users/vvcephei/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vvcephei/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vvcephei/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vvcephei"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9426",
  "id": 502666325,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9426",
  "labels": [
    {
      "color": "63edea",
      "default": false,
      "description": null,
      "id": 820747028,
      "name": "streams",
      "node_id": "MDU6TGFiZWw4MjA3NDcwMjg=",
      "url": "https://api.github.com/repos/apache/kafka/labels/streams"
    }
  ],
  "locked": false,
  "merge_commit_sha": "d031ca9299b2e7258832a92beca8265d46ef6e8f",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAyNjY2MzI1",
  "number": 9426,
  "patch_url": "https://github.com/apache/kafka/pull/9426.patch",
  "requested_reviewers": [
    {
      "avatar_url": "https://avatars0.githubusercontent.com/u/10729597?v=4",
      "events_url": "https://api.github.com/users/guozhangwang/events{/privacy}",
      "followers_url": "https://api.github.com/users/guozhangwang/followers",
      "following_url": "https://api.github.com/users/guozhangwang/following{/other_user}",
      "gists_url": "https://api.github.com/users/guozhangwang/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/guozhangwang",
      "id": 10729597,
      "login": "guozhangwang",
      "node_id": "MDQ6VXNlcjEwNzI5NTk3",
      "organizations_url": "https://api.github.com/users/guozhangwang/orgs",
      "received_events_url": "https://api.github.com/users/guozhangwang/received_events",
      "repos_url": "https://api.github.com/users/guozhangwang/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/guozhangwang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/guozhangwang/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/guozhangwang"
    }
  ],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9426/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/c872e89cf6a45d6c0620ec8a13ad5870996bc7f7",
  "title": "MINOR: Fix flaky shouldRejectNonExistentStoreName",
  "updated_at": "2020-10-22T08:16:45Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9426",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/832787?v=4",
    "events_url": "https://api.github.com/users/vvcephei/events{/privacy}",
    "followers_url": "https://api.github.com/users/vvcephei/followers",
    "following_url": "https://api.github.com/users/vvcephei/following{/other_user}",
    "gists_url": "https://api.github.com/users/vvcephei/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/vvcephei",
    "id": 832787,
    "login": "vvcephei",
    "node_id": "MDQ6VXNlcjgzMjc4Nw==",
    "organizations_url": "https://api.github.com/users/vvcephei/orgs",
    "received_events_url": "https://api.github.com/users/vvcephei/received_events",
    "repos_url": "https://api.github.com/users/vvcephei/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/vvcephei/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vvcephei/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/vvcephei"
  }
}
json_root is_array: false
json_root is_object: true
number: 9426
url: https://api.github.com/repos/apache/kafka/pulls/9426
title: MINOR: Fix flaky shouldRejectNonExistentStoreName
body: Fix flaky test by making sure Streams is
running before making assertions about IQ.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9426/comments
id: 509966875
url: https://api.github.com/repos/apache/kafka/pulls/comments/509966875
body: How about moving this cleanup to ```@after```?
diff_hunk: @@ -470,6 +475,8 @@ public void shouldRejectNonExistentStoreName() {
                 exception.getMessage(),
                 is("Cannot get state store no-table because no such store is registered in the topology.")
             );
+        } finally {
+            CLUSTER.deleteAllTopicsAndWait(0L);
path: streams/src/test/java/org/apache/kafka/streams/integration/QueryableStateIntegrationTest.java
html: https://github.com/apache/kafka/pull/9426#discussion_r509966875
pull_request_number: 9426
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9423/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9423/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9423"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9423"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9423/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9423"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/d3c9337a6266282360c89e2957774f7e819266d6"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "3bfbe682a2246313d126045f2c5e1a0c2577bbd2",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "The following actions results in this issue.\r\n\r\n1. handle_1 gets the current log\r\n2. ReplicaAlterLogDirsThread replaces current log by future log\r\n3. handle_1 adds the new hw to “current” log but the log is actually invalid\r\n\r\nThe solution is that the action 1 and 3 must be executed within same read lock of leaderIsrUpdateLock to avoid adding new hw to invalid log (which is replaced by ReplicaAlterLogDirsThread) \r\n\r\n**Test Plan**\r\n\r\nRelying on ```PlaintextAdminIntegrationTest.testAlterReplicaLogDirs```. I have looped the test with this patch 100 times. all pass\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9423/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9423/commits",
  "created_at": "2020-10-13T15:21:06Z",
  "diff_url": "https://github.com/apache/kafka/pull/9423.diff",
  "draft": false,
  "head": {
    "label": "chia7712:KAFKA-9263",
    "ref": "KAFKA-9263",
    "repo": {
      "archive_url": "https://api.github.com/repos/chia7712/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/chia7712/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/chia7712/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/chia7712/kafka/branches{/branch}",
      "clone_url": "https://github.com/chia7712/kafka.git",
      "collaborators_url": "https://api.github.com/repos/chia7712/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/chia7712/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/chia7712/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/chia7712/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/chia7712/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/chia7712/kafka/contributors",
      "created_at": "2018-03-14T12:43:46Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/chia7712/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/chia7712/kafka/downloads",
      "events_url": "https://api.github.com/repos/chia7712/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/chia7712/kafka/forks",
      "full_name": "chia7712/kafka",
      "git_commits_url": "https://api.github.com/repos/chia7712/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/chia7712/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/chia7712/kafka/git/tags{/sha}",
      "git_url": "git://github.com/chia7712/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/chia7712/kafka/hooks",
      "html_url": "https://github.com/chia7712/kafka",
      "id": 125210946,
      "issue_comment_url": "https://api.github.com/repos/chia7712/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/chia7712/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/chia7712/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/chia7712/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/chia7712/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/chia7712/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/chia7712/kafka/merges",
      "milestones_url": "https://api.github.com/repos/chia7712/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjUyMTA5NDY=",
      "notifications_url": "https://api.github.com/repos/chia7712/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
        "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
        "followers_url": "https://api.github.com/users/chia7712/followers",
        "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
        "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/chia7712",
        "id": 6234750,
        "login": "chia7712",
        "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
        "organizations_url": "https://api.github.com/users/chia7712/orgs",
        "received_events_url": "https://api.github.com/users/chia7712/received_events",
        "repos_url": "https://api.github.com/users/chia7712/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/chia7712"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/chia7712/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T03:45:34Z",
      "releases_url": "https://api.github.com/repos/chia7712/kafka/releases{/id}",
      "size": 102819,
      "ssh_url": "git@github.com:chia7712/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/chia7712/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/chia7712/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/chia7712/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/chia7712/kafka/subscription",
      "svn_url": "https://github.com/chia7712/kafka",
      "tags_url": "https://api.github.com/repos/chia7712/kafka/tags",
      "teams_url": "https://api.github.com/repos/chia7712/kafka/teams",
      "trees_url": "https://api.github.com/repos/chia7712/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:44:24Z",
      "url": "https://api.github.com/repos/chia7712/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "d3c9337a6266282360c89e2957774f7e819266d6",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
      "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
      "followers_url": "https://api.github.com/users/chia7712/followers",
      "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
      "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chia7712",
      "id": 6234750,
      "login": "chia7712",
      "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
      "organizations_url": "https://api.github.com/users/chia7712/orgs",
      "received_events_url": "https://api.github.com/users/chia7712/received_events",
      "repos_url": "https://api.github.com/users/chia7712/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chia7712"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9423",
  "id": 502457006,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9423",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "a5d0c215ebbdf1de1d09a8465610f4f58b956a81",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAyNDU3MDA2",
  "number": 9423,
  "patch_url": "https://github.com/apache/kafka/pull/9423.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9423/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/d3c9337a6266282360c89e2957774f7e819266d6",
  "title": "KAFKA-9263 The new hw is added to incorrect log when ReplicaAlterLogD…",
  "updated_at": "2020-10-26T06:25:00Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9423",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
    "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
    "followers_url": "https://api.github.com/users/chia7712/followers",
    "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
    "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/chia7712",
    "id": 6234750,
    "login": "chia7712",
    "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
    "organizations_url": "https://api.github.com/users/chia7712/orgs",
    "received_events_url": "https://api.github.com/users/chia7712/received_events",
    "repos_url": "https://api.github.com/users/chia7712/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/chia7712"
  }
}
json_root is_array: false
json_root is_object: true
number: 9423
url: https://api.github.com/repos/apache/kafka/pulls/9423
title: KAFKA-9263 The new hw is added to incorrect log when ReplicaAlterLogD…
body: The following actions results in this issue.

1. handle_1 gets the current log
2. ReplicaAlterLogDirsThread replaces current log by future log
3. handle_1 adds the new hw to “current” log but the log is actually invalid

The solution is that the action 1 and 3 must be executed within same read lock of leaderIsrUpdateLock to avoid adding new hw to invalid log (which is replaced by ReplicaAlterLogDirsThread) 

**Test Plan**

Relying on ```PlaintextAdminIntegrationTest.testAlterReplicaLogDirs```. I have looped the test with this patch 100 times. all pass

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9423/comments
pull_request_number: 9423
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9421/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9421/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9421"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9421"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9421/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9421"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/149422032be4bbf713465046ae7c27ca18490ec6"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "e3d6344ed7feadae119a57ce658fe7dc0505ca06",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "... with fixing typo, removing redundant method parameters, unused Throwables, and unused test methods.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9421/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9421/commits",
  "created_at": "2020-10-13T08:42:29Z",
  "diff_url": "https://github.com/apache/kafka/pull/9421.diff",
  "draft": false,
  "head": {
    "label": "dongjinleekr:cleanup/202010",
    "ref": "cleanup/202010",
    "repo": {
      "archive_url": "https://api.github.com/repos/dongjinleekr/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/dongjinleekr/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/dongjinleekr/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/dongjinleekr/kafka/branches{/branch}",
      "clone_url": "https://github.com/dongjinleekr/kafka.git",
      "collaborators_url": "https://api.github.com/repos/dongjinleekr/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/dongjinleekr/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/dongjinleekr/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/dongjinleekr/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/dongjinleekr/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/dongjinleekr/kafka/contributors",
      "created_at": "2016-09-23T15:16:20Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/dongjinleekr/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/dongjinleekr/kafka/downloads",
      "events_url": "https://api.github.com/repos/dongjinleekr/kafka/events",
      "fork": true,
      "forks": 1,
      "forks_count": 1,
      "forks_url": "https://api.github.com/repos/dongjinleekr/kafka/forks",
      "full_name": "dongjinleekr/kafka",
      "git_commits_url": "https://api.github.com/repos/dongjinleekr/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/dongjinleekr/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/dongjinleekr/kafka/git/tags{/sha}",
      "git_url": "git://github.com/dongjinleekr/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/dongjinleekr/kafka/hooks",
      "html_url": "https://github.com/dongjinleekr/kafka",
      "id": 69036305,
      "issue_comment_url": "https://api.github.com/repos/dongjinleekr/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/dongjinleekr/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/dongjinleekr/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/dongjinleekr/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/dongjinleekr/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/dongjinleekr/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/dongjinleekr/kafka/merges",
      "milestones_url": "https://api.github.com/repos/dongjinleekr/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk2OTAzNjMwNQ==",
      "notifications_url": "https://api.github.com/repos/dongjinleekr/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/2375128?v=4",
        "events_url": "https://api.github.com/users/dongjinleekr/events{/privacy}",
        "followers_url": "https://api.github.com/users/dongjinleekr/followers",
        "following_url": "https://api.github.com/users/dongjinleekr/following{/other_user}",
        "gists_url": "https://api.github.com/users/dongjinleekr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dongjinleekr",
        "id": 2375128,
        "login": "dongjinleekr",
        "node_id": "MDQ6VXNlcjIzNzUxMjg=",
        "organizations_url": "https://api.github.com/users/dongjinleekr/orgs",
        "received_events_url": "https://api.github.com/users/dongjinleekr/received_events",
        "repos_url": "https://api.github.com/users/dongjinleekr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dongjinleekr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dongjinleekr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dongjinleekr"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/dongjinleekr/kafka/pulls{/number}",
      "pushed_at": "2020-10-26T09:34:22Z",
      "releases_url": "https://api.github.com/repos/dongjinleekr/kafka/releases{/id}",
      "size": 97789,
      "ssh_url": "git@github.com:dongjinleekr/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/dongjinleekr/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/dongjinleekr/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/dongjinleekr/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/dongjinleekr/kafka/subscription",
      "svn_url": "https://github.com/dongjinleekr/kafka",
      "tags_url": "https://api.github.com/repos/dongjinleekr/kafka/tags",
      "teams_url": "https://api.github.com/repos/dongjinleekr/kafka/teams",
      "trees_url": "https://api.github.com/repos/dongjinleekr/kafka/git/trees{/sha}",
      "updated_at": "2020-10-26T09:34:27Z",
      "url": "https://api.github.com/repos/dongjinleekr/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "149422032be4bbf713465046ae7c27ca18490ec6",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/2375128?v=4",
      "events_url": "https://api.github.com/users/dongjinleekr/events{/privacy}",
      "followers_url": "https://api.github.com/users/dongjinleekr/followers",
      "following_url": "https://api.github.com/users/dongjinleekr/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongjinleekr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dongjinleekr",
      "id": 2375128,
      "login": "dongjinleekr",
      "node_id": "MDQ6VXNlcjIzNzUxMjg=",
      "organizations_url": "https://api.github.com/users/dongjinleekr/orgs",
      "received_events_url": "https://api.github.com/users/dongjinleekr/received_events",
      "repos_url": "https://api.github.com/users/dongjinleekr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dongjinleekr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongjinleekr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dongjinleekr"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9421",
  "id": 502105560,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9421",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "b930f66fd3ace67cae2834882aee3fefafbe77d0",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAyMTA1NTYw",
  "number": 9421,
  "patch_url": "https://github.com/apache/kafka/pull/9421.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9421/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/149422032be4bbf713465046ae7c27ca18490ec6",
  "title": "MINOR: Change deprecated 'scala.collection.JavaConverters' to 'scala.jdk.CollectionConverters'",
  "updated_at": "2020-10-20T14:26:42Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9421",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/2375128?v=4",
    "events_url": "https://api.github.com/users/dongjinleekr/events{/privacy}",
    "followers_url": "https://api.github.com/users/dongjinleekr/followers",
    "following_url": "https://api.github.com/users/dongjinleekr/following{/other_user}",
    "gists_url": "https://api.github.com/users/dongjinleekr/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/dongjinleekr",
    "id": 2375128,
    "login": "dongjinleekr",
    "node_id": "MDQ6VXNlcjIzNzUxMjg=",
    "organizations_url": "https://api.github.com/users/dongjinleekr/orgs",
    "received_events_url": "https://api.github.com/users/dongjinleekr/received_events",
    "repos_url": "https://api.github.com/users/dongjinleekr/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/dongjinleekr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dongjinleekr/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/dongjinleekr"
  }
}
json_root is_array: false
json_root is_object: true
number: 9421
url: https://api.github.com/repos/apache/kafka/pulls/9421
title: MINOR: Change deprecated 'scala.collection.JavaConverters' to 'scala.jdk.CollectionConverters'
body: ... with fixing typo, removing redundant method parameters, unused Throwables, and unused test methods.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9421/comments
pull_request_number: 9421
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9420/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9420/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9420"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9420"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9420/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9420"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/7b474cbe848282652396ff6d030047df63b5efd0"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "1457cc65254d1e67f8b54c49a5590dfa0db8dbb6",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Make the default state store directory location to follow OS-specific temporary directory settings or `java.io.tmpdir` JVM parameter, with `Utils#getTempDir`.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9420/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9420/commits",
  "created_at": "2020-10-13T08:09:41Z",
  "diff_url": "https://github.com/apache/kafka/pull/9420.diff",
  "draft": false,
  "head": {
    "label": "dongjinleekr:feature/KAFKA-10604",
    "ref": "feature/KAFKA-10604",
    "repo": {
      "archive_url": "https://api.github.com/repos/dongjinleekr/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/dongjinleekr/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/dongjinleekr/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/dongjinleekr/kafka/branches{/branch}",
      "clone_url": "https://github.com/dongjinleekr/kafka.git",
      "collaborators_url": "https://api.github.com/repos/dongjinleekr/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/dongjinleekr/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/dongjinleekr/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/dongjinleekr/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/dongjinleekr/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/dongjinleekr/kafka/contributors",
      "created_at": "2016-09-23T15:16:20Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/dongjinleekr/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/dongjinleekr/kafka/downloads",
      "events_url": "https://api.github.com/repos/dongjinleekr/kafka/events",
      "fork": true,
      "forks": 1,
      "forks_count": 1,
      "forks_url": "https://api.github.com/repos/dongjinleekr/kafka/forks",
      "full_name": "dongjinleekr/kafka",
      "git_commits_url": "https://api.github.com/repos/dongjinleekr/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/dongjinleekr/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/dongjinleekr/kafka/git/tags{/sha}",
      "git_url": "git://github.com/dongjinleekr/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/dongjinleekr/kafka/hooks",
      "html_url": "https://github.com/dongjinleekr/kafka",
      "id": 69036305,
      "issue_comment_url": "https://api.github.com/repos/dongjinleekr/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/dongjinleekr/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/dongjinleekr/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/dongjinleekr/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/dongjinleekr/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/dongjinleekr/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/dongjinleekr/kafka/merges",
      "milestones_url": "https://api.github.com/repos/dongjinleekr/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk2OTAzNjMwNQ==",
      "notifications_url": "https://api.github.com/repos/dongjinleekr/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/2375128?v=4",
        "events_url": "https://api.github.com/users/dongjinleekr/events{/privacy}",
        "followers_url": "https://api.github.com/users/dongjinleekr/followers",
        "following_url": "https://api.github.com/users/dongjinleekr/following{/other_user}",
        "gists_url": "https://api.github.com/users/dongjinleekr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dongjinleekr",
        "id": 2375128,
        "login": "dongjinleekr",
        "node_id": "MDQ6VXNlcjIzNzUxMjg=",
        "organizations_url": "https://api.github.com/users/dongjinleekr/orgs",
        "received_events_url": "https://api.github.com/users/dongjinleekr/received_events",
        "repos_url": "https://api.github.com/users/dongjinleekr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dongjinleekr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dongjinleekr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dongjinleekr"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/dongjinleekr/kafka/pulls{/number}",
      "pushed_at": "2020-10-26T09:34:22Z",
      "releases_url": "https://api.github.com/repos/dongjinleekr/kafka/releases{/id}",
      "size": 97789,
      "ssh_url": "git@github.com:dongjinleekr/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/dongjinleekr/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/dongjinleekr/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/dongjinleekr/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/dongjinleekr/kafka/subscription",
      "svn_url": "https://github.com/dongjinleekr/kafka",
      "tags_url": "https://api.github.com/repos/dongjinleekr/kafka/tags",
      "teams_url": "https://api.github.com/repos/dongjinleekr/kafka/teams",
      "trees_url": "https://api.github.com/repos/dongjinleekr/kafka/git/trees{/sha}",
      "updated_at": "2020-10-26T09:34:27Z",
      "url": "https://api.github.com/repos/dongjinleekr/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "7b474cbe848282652396ff6d030047df63b5efd0",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/2375128?v=4",
      "events_url": "https://api.github.com/users/dongjinleekr/events{/privacy}",
      "followers_url": "https://api.github.com/users/dongjinleekr/followers",
      "following_url": "https://api.github.com/users/dongjinleekr/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongjinleekr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dongjinleekr",
      "id": 2375128,
      "login": "dongjinleekr",
      "node_id": "MDQ6VXNlcjIzNzUxMjg=",
      "organizations_url": "https://api.github.com/users/dongjinleekr/orgs",
      "received_events_url": "https://api.github.com/users/dongjinleekr/received_events",
      "repos_url": "https://api.github.com/users/dongjinleekr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dongjinleekr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongjinleekr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dongjinleekr"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9420",
  "id": 502084548,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9420",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "07f8050476665b3953c78718284679b33cd45b75",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAyMDg0NTQ4",
  "number": 9420,
  "patch_url": "https://github.com/apache/kafka/pull/9420.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9420/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/7b474cbe848282652396ff6d030047df63b5efd0",
  "title": "KAFKA-10604: The StreamsConfig.STATE_DIR_CONFIG's default value does not reflect the JVM parameter or OS-specific settings",
  "updated_at": "2020-10-13T08:09:41Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9420",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/2375128?v=4",
    "events_url": "https://api.github.com/users/dongjinleekr/events{/privacy}",
    "followers_url": "https://api.github.com/users/dongjinleekr/followers",
    "following_url": "https://api.github.com/users/dongjinleekr/following{/other_user}",
    "gists_url": "https://api.github.com/users/dongjinleekr/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/dongjinleekr",
    "id": 2375128,
    "login": "dongjinleekr",
    "node_id": "MDQ6VXNlcjIzNzUxMjg=",
    "organizations_url": "https://api.github.com/users/dongjinleekr/orgs",
    "received_events_url": "https://api.github.com/users/dongjinleekr/received_events",
    "repos_url": "https://api.github.com/users/dongjinleekr/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/dongjinleekr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dongjinleekr/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/dongjinleekr"
  }
}
json_root is_array: false
json_root is_object: true
number: 9420
url: https://api.github.com/repos/apache/kafka/pulls/9420
title: KAFKA-10604: The StreamsConfig.STATE_DIR_CONFIG's default value does not reflect the JVM parameter or OS-specific settings
body: Make the default state store directory location to follow OS-specific temporary directory settings or `java.io.tmpdir` JVM parameter, with `Utils#getTempDir`.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9420/comments
pull_request_number: 9420
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9414/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9414/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9414"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9414"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9414/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9414"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/6c217f2d815cfc1df1e9d5c3209a5f87c11d37c6"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "50a5671135df80209ea3c781acf9d77456b6b88c",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9414/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9414/commits",
  "created_at": "2020-10-12T13:36:07Z",
  "diff_url": "https://github.com/apache/kafka/pull/9414.diff",
  "draft": false,
  "head": {
    "label": "dongjinleekr:feature/KAFKA-10585",
    "ref": "feature/KAFKA-10585",
    "repo": {
      "archive_url": "https://api.github.com/repos/dongjinleekr/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/dongjinleekr/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/dongjinleekr/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/dongjinleekr/kafka/branches{/branch}",
      "clone_url": "https://github.com/dongjinleekr/kafka.git",
      "collaborators_url": "https://api.github.com/repos/dongjinleekr/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/dongjinleekr/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/dongjinleekr/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/dongjinleekr/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/dongjinleekr/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/dongjinleekr/kafka/contributors",
      "created_at": "2016-09-23T15:16:20Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/dongjinleekr/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/dongjinleekr/kafka/downloads",
      "events_url": "https://api.github.com/repos/dongjinleekr/kafka/events",
      "fork": true,
      "forks": 1,
      "forks_count": 1,
      "forks_url": "https://api.github.com/repos/dongjinleekr/kafka/forks",
      "full_name": "dongjinleekr/kafka",
      "git_commits_url": "https://api.github.com/repos/dongjinleekr/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/dongjinleekr/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/dongjinleekr/kafka/git/tags{/sha}",
      "git_url": "git://github.com/dongjinleekr/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/dongjinleekr/kafka/hooks",
      "html_url": "https://github.com/dongjinleekr/kafka",
      "id": 69036305,
      "issue_comment_url": "https://api.github.com/repos/dongjinleekr/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/dongjinleekr/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/dongjinleekr/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/dongjinleekr/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/dongjinleekr/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/dongjinleekr/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/dongjinleekr/kafka/merges",
      "milestones_url": "https://api.github.com/repos/dongjinleekr/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk2OTAzNjMwNQ==",
      "notifications_url": "https://api.github.com/repos/dongjinleekr/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/2375128?v=4",
        "events_url": "https://api.github.com/users/dongjinleekr/events{/privacy}",
        "followers_url": "https://api.github.com/users/dongjinleekr/followers",
        "following_url": "https://api.github.com/users/dongjinleekr/following{/other_user}",
        "gists_url": "https://api.github.com/users/dongjinleekr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/dongjinleekr",
        "id": 2375128,
        "login": "dongjinleekr",
        "node_id": "MDQ6VXNlcjIzNzUxMjg=",
        "organizations_url": "https://api.github.com/users/dongjinleekr/orgs",
        "received_events_url": "https://api.github.com/users/dongjinleekr/received_events",
        "repos_url": "https://api.github.com/users/dongjinleekr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/dongjinleekr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dongjinleekr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/dongjinleekr"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/dongjinleekr/kafka/pulls{/number}",
      "pushed_at": "2020-10-26T09:34:22Z",
      "releases_url": "https://api.github.com/repos/dongjinleekr/kafka/releases{/id}",
      "size": 97789,
      "ssh_url": "git@github.com:dongjinleekr/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/dongjinleekr/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/dongjinleekr/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/dongjinleekr/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/dongjinleekr/kafka/subscription",
      "svn_url": "https://github.com/dongjinleekr/kafka",
      "tags_url": "https://api.github.com/repos/dongjinleekr/kafka/tags",
      "teams_url": "https://api.github.com/repos/dongjinleekr/kafka/teams",
      "trees_url": "https://api.github.com/repos/dongjinleekr/kafka/git/trees{/sha}",
      "updated_at": "2020-10-26T09:34:27Z",
      "url": "https://api.github.com/repos/dongjinleekr/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "6c217f2d815cfc1df1e9d5c3209a5f87c11d37c6",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/2375128?v=4",
      "events_url": "https://api.github.com/users/dongjinleekr/events{/privacy}",
      "followers_url": "https://api.github.com/users/dongjinleekr/followers",
      "following_url": "https://api.github.com/users/dongjinleekr/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongjinleekr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dongjinleekr",
      "id": 2375128,
      "login": "dongjinleekr",
      "node_id": "MDQ6VXNlcjIzNzUxMjg=",
      "organizations_url": "https://api.github.com/users/dongjinleekr/orgs",
      "received_events_url": "https://api.github.com/users/dongjinleekr/received_events",
      "repos_url": "https://api.github.com/users/dongjinleekr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dongjinleekr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongjinleekr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dongjinleekr"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9414",
  "id": 501582871,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9414",
  "labels": [
    {
      "color": "63edea",
      "default": false,
      "description": null,
      "id": 820747028,
      "name": "streams",
      "node_id": "MDU6TGFiZWw4MjA3NDcwMjg=",
      "url": "https://api.github.com/repos/apache/kafka/labels/streams"
    }
  ],
  "locked": false,
  "merge_commit_sha": "c83e7157c1edfdaeed76f40bdcc4f081e2756cb0",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAxNTgyODcx",
  "number": 9414,
  "patch_url": "https://github.com/apache/kafka/pull/9414.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9414/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/6c217f2d815cfc1df1e9d5c3209a5f87c11d37c6",
  "title": "KAFKA-10585: Kafka Streams should clean up the state store directory from cleanup",
  "updated_at": "2020-10-23T18:23:07Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9414",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/2375128?v=4",
    "events_url": "https://api.github.com/users/dongjinleekr/events{/privacy}",
    "followers_url": "https://api.github.com/users/dongjinleekr/followers",
    "following_url": "https://api.github.com/users/dongjinleekr/following{/other_user}",
    "gists_url": "https://api.github.com/users/dongjinleekr/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/dongjinleekr",
    "id": 2375128,
    "login": "dongjinleekr",
    "node_id": "MDQ6VXNlcjIzNzUxMjg=",
    "organizations_url": "https://api.github.com/users/dongjinleekr/orgs",
    "received_events_url": "https://api.github.com/users/dongjinleekr/received_events",
    "repos_url": "https://api.github.com/users/dongjinleekr/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/dongjinleekr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dongjinleekr/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/dongjinleekr"
  }
}
json_root is_array: false
json_root is_object: true
number: 9414
url: https://api.github.com/repos/apache/kafka/pulls/9414
title: KAFKA-10585: Kafka Streams should clean up the state store directory from cleanup
body: ### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9414/comments
id: 504051911
url: https://api.github.com/repos/apache/kafka/pulls/comments/504051911
body: ```suggestion
        assertFalse(appDir.exists());
```

:)
diff_hunk: @@ -510,8 +511,8 @@ public void shouldCleanupAllTaskDirectoriesIncludingGlobalOne() {
 
         directory.clean();
 
-        assertEquals(Collections.emptySet(), Arrays.stream(
-            Objects.requireNonNull(appDir.listFiles())).collect(Collectors.toSet()));
+        // if appDir is empty, it is deleted in StateDirectory#clean process.
+        assertTrue(!appDir.exists());
path: streams/src/test/java/org/apache/kafka/streams/processor/internals/StateDirectoryTest.java
html: https://github.com/apache/kafka/pull/9414#discussion_r504051911
id: 504054028
url: https://api.github.com/repos/apache/kafka/pulls/comments/504054028
body: We shouldn't add unrelated checks to tests in general, it just makes the tests more confusing. If you want to verify that the directory still exists after closing when we don't call `clean()`, we should just add a new test for it.
diff_hunk: @@ -602,6 +606,11 @@ public void shouldLogStateDirCleanerMessage() {
             directory.cleanRemovedTasks(cleanupDelayMs);
             assertThat(appender.getMessages(), hasItem(endsWith("ms has elapsed (cleanup delay is " +  cleanupDelayMs + "ms).")));
         }
+
+        // if appDir is empty, it is deleted in  process.
+        // since we did not call StateDirectory#clean, the global state directory is not deleted and appDir also.
+        assertTrue(appDir.exists());
+        assertArrayEquals(appDir.list(), new String[]{"0_0"});
path: streams/src/test/java/org/apache/kafka/streams/processor/internals/StateDirectoryTest.java
html: https://github.com/apache/kafka/pull/9414#discussion_r504054028
id: 504054842
url: https://api.github.com/repos/apache/kafka/pulls/comments/504054842
body: Similar feedback here as below. This test is about logging, not cleanup. You've already added a check to the "shouldCleanup" test, so we don't need one here.
diff_hunk: @@ -586,6 +587,9 @@ public void shouldLogManualUserCallMessage() {
                 hasItem(endsWith("as user calling cleanup."))
             );
         }
+
+        // if appDir is empty, it is deleted in StateDirectory#clean process.
+        assertTrue(!appDir.exists());
path: streams/src/test/java/org/apache/kafka/streams/processor/internals/StateDirectoryTest.java
html: https://github.com/apache/kafka/pull/9414#discussion_r504054842
id: 504057240
url: https://api.github.com/repos/apache/kafka/pulls/comments/504057240
body: ```suggestion
            if (stateDir.exists() && !stateDir.delete()) {
```

Do we need to check `hasPersistentStores` here? It seems sufficient just to check if the directory exists.
diff_hunk: @@ -301,6 +301,22 @@ public synchronized void clean() {
             );
             throw new StreamsException(exception);
         }
+
+        try {
+            if (hasPersistentStores && stateDir.exists() && !stateDir.delete()) {
path: streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java
html: https://github.com/apache/kafka/pull/9414#discussion_r504057240
id: 505424665
url: https://api.github.com/repos/apache/kafka/pulls/comments/505424665
body: Exactly. But I thought keeping symmetry with the Consturctor is better.

```
if (this.hasPersistentStores && !stateDir.exists() && !stateDir.mkdir()) {
    throw new ProcessorStateException(
        String.format("state directory [%s] doesn't exist and couldn't be created", stateDir.getPath()));
}
```
diff_hunk: @@ -301,6 +301,22 @@ public synchronized void clean() {
             );
             throw new StreamsException(exception);
         }
+
+        try {
+            if (hasPersistentStores && stateDir.exists() && !stateDir.delete()) {
path: streams/src/main/java/org/apache/kafka/streams/processor/internals/StateDirectory.java
html: https://github.com/apache/kafka/pull/9414#discussion_r505424665
id: 508798891
url: https://api.github.com/repos/apache/kafka/pulls/comments/508798891
body: I'd be tempted to give it more time. Experience says that Jenkins will take unreasonably long to perform these operations. How about using the default timeout in IntegrationTestUtils here and below?
diff_hunk: @@ -0,0 +1,255 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.streams.integration;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Properties;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import org.apache.kafka.clients.producer.KafkaProducer;
+import org.apache.kafka.clients.producer.ProducerConfig;
+import org.apache.kafka.clients.producer.ProducerRecord;
+import org.apache.kafka.common.serialization.Serdes;
+import org.apache.kafka.common.serialization.StringSerializer;
+import org.apache.kafka.common.utils.Bytes;
+import org.apache.kafka.streams.KafkaStreams;
+import org.apache.kafka.streams.StreamsBuilder;
+import org.apache.kafka.streams.StreamsConfig;
+import org.apache.kafka.streams.Topology;
+import org.apache.kafka.streams.integration.utils.EmbeddedKafkaCluster;
+import org.apache.kafka.streams.kstream.Materialized;
+import org.apache.kafka.streams.state.KeyValueStore;
+import org.apache.kafka.test.IntegrationTest;
+import org.apache.kafka.test.TestUtils;
+import org.junit.ClassRule;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+import org.junit.rules.TestName;
+
+import static org.apache.kafka.common.utils.Utils.mkEntry;
+import static org.apache.kafka.common.utils.Utils.mkMap;
+import static org.apache.kafka.common.utils.Utils.mkProperties;
+import static org.apache.kafka.streams.integration.utils.IntegrationTestUtils.safeUniqueTestName;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+@Category({IntegrationTest.class})
+public class StateDirectoryIntegrationTest {
+
+    private static final int NUM_BROKERS = 1;
+
+    @ClassRule
+    public static final EmbeddedKafkaCluster CLUSTER = new EmbeddedKafkaCluster(NUM_BROKERS);
+
+    @Rule
+    public TestName testName = new TestName();
+
+    @Test
+    public void testCleanUpStateDirIfEmpty() throws InterruptedException {
+        final String uniqueTestName = safeUniqueTestName(getClass(), testName);
+
+        // Create Topic
+        final String input = uniqueTestName + "-input";
+        CLUSTER.createTopic(input);
+
+        final Properties producerConfig = mkProperties(mkMap(
+            mkEntry(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers()),
+            mkEntry(ProducerConfig.ACKS_CONFIG, "all"),
+            mkEntry(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getCanonicalName()),
+            mkEntry(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getCanonicalName())
+        ));
+
+        try (final KafkaProducer<String, String> producer =
+                 new KafkaProducer<>(producerConfig, Serdes.String().serializer(), Serdes.String().serializer())) {
+            // Create Test Records
+            producer.send(new ProducerRecord<>(input, "a"));
+            producer.send(new ProducerRecord<>(input, "b"));
+            producer.send(new ProducerRecord<>(input, "c"));
+
+            // Create Topology
+            final String storeName = uniqueTestName + "-input-table";
+
+            final StreamsBuilder builder = new StreamsBuilder();
+            builder.table(
+                input,
+                Materialized
+                    .<String, String, KeyValueStore<Bytes, byte[]>>as(storeName)
+                    .withKeySerde(Serdes.String())
+                    .withValueSerde(Serdes.String())
+            );
+            final Topology topology = builder.build();
+
+            // State Store Directory
+            final String stateDir = TestUtils.tempDirectory(uniqueTestName).getPath();
+
+            // Create KafkaStreams instance
+            final String applicationId = uniqueTestName + "-app";
+            final Properties streamsConfig = mkProperties(mkMap(
+                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, applicationId),
+                mkEntry(StreamsConfig.STATE_DIR_CONFIG, stateDir),
+                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers())
+            ));
+
+            final KafkaStreams streams = new KafkaStreams(topology, streamsConfig);
+
+            // Create StateListener
+            final CountDownLatch runningLatch = new CountDownLatch(1);
+            final CountDownLatch notRunningLatch = new CountDownLatch(1);
+
+            final KafkaStreams.StateListener stateListener = (newState, oldState) -> {
+                if (newState == KafkaStreams.State.RUNNING) {
+                    runningLatch.countDown();
+                }
+                if (newState == KafkaStreams.State.NOT_RUNNING) {
+                    notRunningLatch.countDown();
+                }
+            };
+            streams.setStateListener(stateListener);
+
+            // Application state directory
+            final File appDir = new File(stateDir, applicationId);
+
+            // Validate application state directory is created.
+            streams.start();
+            try {
+                runningLatch.await(10 * 1000L, TimeUnit.MILLISECONDS);
path: streams/src/test/java/org/apache/kafka/streams/integration/StateDirectoryIntegrationTest.java
html: https://github.com/apache/kafka/pull/9414#discussion_r508798891
pull_request_number: 9414
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9410/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9410/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9410"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9410"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9410/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9410"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/fa83c0d8a174c4458d1a9a7259ddec21d9d848df"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "a73bf5931aaf1510f0efa86bc7d61ff8aab046c2",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "MockConsumer should filter records from unassigned partitions instead of throwing.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9410/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9410/commits",
  "created_at": "2020-10-11T19:21:00Z",
  "diff_url": "https://github.com/apache/kafka/pull/9410.diff",
  "draft": false,
  "head": {
    "label": "arafsheikh:KAFKA-9679",
    "ref": "KAFKA-9679",
    "repo": {
      "archive_url": "https://api.github.com/repos/arafsheikh/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/arafsheikh/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/arafsheikh/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/arafsheikh/kafka/branches{/branch}",
      "clone_url": "https://github.com/arafsheikh/kafka.git",
      "collaborators_url": "https://api.github.com/repos/arafsheikh/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/arafsheikh/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/arafsheikh/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/arafsheikh/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/arafsheikh/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/arafsheikh/kafka/contributors",
      "created_at": "2020-10-11T19:03:07Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/arafsheikh/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/arafsheikh/kafka/downloads",
      "events_url": "https://api.github.com/repos/arafsheikh/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/arafsheikh/kafka/forks",
      "full_name": "arafsheikh/kafka",
      "git_commits_url": "https://api.github.com/repos/arafsheikh/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/arafsheikh/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/arafsheikh/kafka/git/tags{/sha}",
      "git_url": "git://github.com/arafsheikh/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/arafsheikh/kafka/hooks",
      "html_url": "https://github.com/arafsheikh/kafka",
      "id": 303192402,
      "issue_comment_url": "https://api.github.com/repos/arafsheikh/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/arafsheikh/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/arafsheikh/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/arafsheikh/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/arafsheikh/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/arafsheikh/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/arafsheikh/kafka/merges",
      "milestones_url": "https://api.github.com/repos/arafsheikh/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDMxOTI0MDI=",
      "notifications_url": "https://api.github.com/repos/arafsheikh/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/7028838?v=4",
        "events_url": "https://api.github.com/users/arafsheikh/events{/privacy}",
        "followers_url": "https://api.github.com/users/arafsheikh/followers",
        "following_url": "https://api.github.com/users/arafsheikh/following{/other_user}",
        "gists_url": "https://api.github.com/users/arafsheikh/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/arafsheikh",
        "id": 7028838,
        "login": "arafsheikh",
        "node_id": "MDQ6VXNlcjcwMjg4Mzg=",
        "organizations_url": "https://api.github.com/users/arafsheikh/orgs",
        "received_events_url": "https://api.github.com/users/arafsheikh/received_events",
        "repos_url": "https://api.github.com/users/arafsheikh/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/arafsheikh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/arafsheikh/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/arafsheikh"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/arafsheikh/kafka/pulls{/number}",
      "pushed_at": "2020-10-11T19:14:30Z",
      "releases_url": "https://api.github.com/repos/arafsheikh/kafka/releases{/id}",
      "size": 108337,
      "ssh_url": "git@github.com:arafsheikh/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/arafsheikh/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/arafsheikh/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/arafsheikh/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/arafsheikh/kafka/subscription",
      "svn_url": "https://github.com/arafsheikh/kafka",
      "tags_url": "https://api.github.com/repos/arafsheikh/kafka/tags",
      "teams_url": "https://api.github.com/repos/arafsheikh/kafka/teams",
      "trees_url": "https://api.github.com/repos/arafsheikh/kafka/git/trees{/sha}",
      "updated_at": "2020-10-11T19:03:09Z",
      "url": "https://api.github.com/repos/arafsheikh/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "fa83c0d8a174c4458d1a9a7259ddec21d9d848df",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/7028838?v=4",
      "events_url": "https://api.github.com/users/arafsheikh/events{/privacy}",
      "followers_url": "https://api.github.com/users/arafsheikh/followers",
      "following_url": "https://api.github.com/users/arafsheikh/following{/other_user}",
      "gists_url": "https://api.github.com/users/arafsheikh/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/arafsheikh",
      "id": 7028838,
      "login": "arafsheikh",
      "node_id": "MDQ6VXNlcjcwMjg4Mzg=",
      "organizations_url": "https://api.github.com/users/arafsheikh/orgs",
      "received_events_url": "https://api.github.com/users/arafsheikh/received_events",
      "repos_url": "https://api.github.com/users/arafsheikh/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/arafsheikh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arafsheikh/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/arafsheikh"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9410",
  "id": 501192355,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9410",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "00210fcca11d56b5a7e789160b75063cd129cee5",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAxMTkyMzU1",
  "number": 9410,
  "patch_url": "https://github.com/apache/kafka/pull/9410.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9410/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/fa83c0d8a174c4458d1a9a7259ddec21d9d848df",
  "title": "KAFKA-9679: Make MockConsumer.poll() consistent with KafkaConsumer",
  "updated_at": "2020-10-11T22:02:47Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9410",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/7028838?v=4",
    "events_url": "https://api.github.com/users/arafsheikh/events{/privacy}",
    "followers_url": "https://api.github.com/users/arafsheikh/followers",
    "following_url": "https://api.github.com/users/arafsheikh/following{/other_user}",
    "gists_url": "https://api.github.com/users/arafsheikh/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/arafsheikh",
    "id": 7028838,
    "login": "arafsheikh",
    "node_id": "MDQ6VXNlcjcwMjg4Mzg=",
    "organizations_url": "https://api.github.com/users/arafsheikh/orgs",
    "received_events_url": "https://api.github.com/users/arafsheikh/received_events",
    "repos_url": "https://api.github.com/users/arafsheikh/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/arafsheikh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/arafsheikh/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/arafsheikh"
  }
}
json_root is_array: false
json_root is_object: true
number: 9410
url: https://api.github.com/repos/apache/kafka/pulls/9410
title: KAFKA-9679: Make MockConsumer.poll() consistent with KafkaConsumer
body: MockConsumer should filter records from unassigned partitions instead of throwing.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9410/comments
pull_request_number: 9410
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9404/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9404/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9404"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9404"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9404/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9404"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/2c7bab433b0df9e5da6c5e1537c5de8b9f85acaa"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "MEMBER",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "7947c18b5788fd12841de649a662336f7d3d14d8",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "depends on #9400, ignore first commit\r\nstill needs backwards compatibility changes",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9404/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9404/commits",
  "created_at": "2020-10-09T06:41:17Z",
  "diff_url": "https://github.com/apache/kafka/pull/9404.diff",
  "draft": true,
  "head": {
    "label": "xvrl:kafka-10589",
    "ref": "kafka-10589",
    "repo": {
      "archive_url": "https://api.github.com/repos/xvrl/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/xvrl/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/xvrl/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/xvrl/kafka/branches{/branch}",
      "clone_url": "https://github.com/xvrl/kafka.git",
      "collaborators_url": "https://api.github.com/repos/xvrl/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/xvrl/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/xvrl/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/xvrl/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/xvrl/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/xvrl/kafka/contributors",
      "created_at": "2016-10-04T18:42:23Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/xvrl/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/xvrl/kafka/downloads",
      "events_url": "https://api.github.com/repos/xvrl/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/xvrl/kafka/forks",
      "full_name": "xvrl/kafka",
      "git_commits_url": "https://api.github.com/repos/xvrl/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/xvrl/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/xvrl/kafka/git/tags{/sha}",
      "git_url": "git://github.com/xvrl/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/xvrl/kafka/hooks",
      "html_url": "https://github.com/xvrl/kafka",
      "id": 69995142,
      "issue_comment_url": "https://api.github.com/repos/xvrl/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/xvrl/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/xvrl/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/xvrl/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/xvrl/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/xvrl/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/xvrl/kafka/merges",
      "milestones_url": "https://api.github.com/repos/xvrl/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk2OTk5NTE0Mg==",
      "notifications_url": "https://api.github.com/repos/xvrl/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/815147?v=4",
        "events_url": "https://api.github.com/users/xvrl/events{/privacy}",
        "followers_url": "https://api.github.com/users/xvrl/followers",
        "following_url": "https://api.github.com/users/xvrl/following{/other_user}",
        "gists_url": "https://api.github.com/users/xvrl/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/xvrl",
        "id": 815147,
        "login": "xvrl",
        "node_id": "MDQ6VXNlcjgxNTE0Nw==",
        "organizations_url": "https://api.github.com/users/xvrl/orgs",
        "received_events_url": "https://api.github.com/users/xvrl/received_events",
        "repos_url": "https://api.github.com/users/xvrl/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/xvrl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xvrl/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/xvrl"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/xvrl/kafka/pulls{/number}",
      "pushed_at": "2020-10-19T18:40:28Z",
      "releases_url": "https://api.github.com/repos/xvrl/kafka/releases{/id}",
      "size": 99134,
      "ssh_url": "git@github.com:xvrl/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/xvrl/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/xvrl/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/xvrl/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/xvrl/kafka/subscription",
      "svn_url": "https://github.com/xvrl/kafka",
      "tags_url": "https://api.github.com/repos/xvrl/kafka/tags",
      "teams_url": "https://api.github.com/repos/xvrl/kafka/teams",
      "trees_url": "https://api.github.com/repos/xvrl/kafka/git/trees{/sha}",
      "updated_at": "2016-10-04T18:42:29Z",
      "url": "https://api.github.com/repos/xvrl/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "2c7bab433b0df9e5da6c5e1537c5de8b9f85acaa",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/815147?v=4",
      "events_url": "https://api.github.com/users/xvrl/events{/privacy}",
      "followers_url": "https://api.github.com/users/xvrl/followers",
      "following_url": "https://api.github.com/users/xvrl/following{/other_user}",
      "gists_url": "https://api.github.com/users/xvrl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/xvrl",
      "id": 815147,
      "login": "xvrl",
      "node_id": "MDQ6VXNlcjgxNTE0Nw==",
      "organizations_url": "https://api.github.com/users/xvrl/orgs",
      "received_events_url": "https://api.github.com/users/xvrl/received_events",
      "repos_url": "https://api.github.com/users/xvrl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/xvrl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xvrl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/xvrl"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9404",
  "id": 500382675,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9404",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "3170521be62de01bcb9d00b2da32d45ebbe3785d",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAwMzgyNjc1",
  "number": 9404,
  "patch_url": "https://github.com/apache/kafka/pull/9404.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9404/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/2c7bab433b0df9e5da6c5e1537c5de8b9f85acaa",
  "title": "KAFKA-10589 replica verification tool changes for KIP-629",
  "updated_at": "2020-10-09T06:41:17Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9404",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/815147?v=4",
    "events_url": "https://api.github.com/users/xvrl/events{/privacy}",
    "followers_url": "https://api.github.com/users/xvrl/followers",
    "following_url": "https://api.github.com/users/xvrl/following{/other_user}",
    "gists_url": "https://api.github.com/users/xvrl/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/xvrl",
    "id": 815147,
    "login": "xvrl",
    "node_id": "MDQ6VXNlcjgxNTE0Nw==",
    "organizations_url": "https://api.github.com/users/xvrl/orgs",
    "received_events_url": "https://api.github.com/users/xvrl/received_events",
    "repos_url": "https://api.github.com/users/xvrl/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/xvrl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/xvrl/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/xvrl"
  }
}
json_root is_array: false
json_root is_object: true
number: 9404
url: https://api.github.com/repos/apache/kafka/pulls/9404
title: KAFKA-10589 replica verification tool changes for KIP-629
body: depends on #9400, ignore first commit
still needs backwards compatibility changes
review_comments: https://api.github.com/repos/apache/kafka/pulls/9404/comments
pull_request_number: 9404
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9402/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9402/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9402"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9402"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9402/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9402"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/164e50f0b669a313b5644d96dbd0763a2050d830"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "MEMBER",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "7947c18b5788fd12841de649a662336f7d3d14d8",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "draft PR, more changes needed in order to ensure backwards compatibility",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9402/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9402/commits",
  "created_at": "2020-10-09T06:13:13Z",
  "diff_url": "https://github.com/apache/kafka/pull/9402.diff",
  "draft": true,
  "head": {
    "label": "xvrl:kafka-10588",
    "ref": "kafka-10588",
    "repo": {
      "archive_url": "https://api.github.com/repos/xvrl/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/xvrl/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/xvrl/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/xvrl/kafka/branches{/branch}",
      "clone_url": "https://github.com/xvrl/kafka.git",
      "collaborators_url": "https://api.github.com/repos/xvrl/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/xvrl/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/xvrl/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/xvrl/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/xvrl/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/xvrl/kafka/contributors",
      "created_at": "2016-10-04T18:42:23Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/xvrl/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/xvrl/kafka/downloads",
      "events_url": "https://api.github.com/repos/xvrl/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/xvrl/kafka/forks",
      "full_name": "xvrl/kafka",
      "git_commits_url": "https://api.github.com/repos/xvrl/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/xvrl/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/xvrl/kafka/git/tags{/sha}",
      "git_url": "git://github.com/xvrl/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/xvrl/kafka/hooks",
      "html_url": "https://github.com/xvrl/kafka",
      "id": 69995142,
      "issue_comment_url": "https://api.github.com/repos/xvrl/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/xvrl/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/xvrl/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/xvrl/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/xvrl/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/xvrl/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/xvrl/kafka/merges",
      "milestones_url": "https://api.github.com/repos/xvrl/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk2OTk5NTE0Mg==",
      "notifications_url": "https://api.github.com/repos/xvrl/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/815147?v=4",
        "events_url": "https://api.github.com/users/xvrl/events{/privacy}",
        "followers_url": "https://api.github.com/users/xvrl/followers",
        "following_url": "https://api.github.com/users/xvrl/following{/other_user}",
        "gists_url": "https://api.github.com/users/xvrl/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/xvrl",
        "id": 815147,
        "login": "xvrl",
        "node_id": "MDQ6VXNlcjgxNTE0Nw==",
        "organizations_url": "https://api.github.com/users/xvrl/orgs",
        "received_events_url": "https://api.github.com/users/xvrl/received_events",
        "repos_url": "https://api.github.com/users/xvrl/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/xvrl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/xvrl/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/xvrl"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/xvrl/kafka/pulls{/number}",
      "pushed_at": "2020-10-19T18:40:28Z",
      "releases_url": "https://api.github.com/repos/xvrl/kafka/releases{/id}",
      "size": 99134,
      "ssh_url": "git@github.com:xvrl/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/xvrl/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/xvrl/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/xvrl/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/xvrl/kafka/subscription",
      "svn_url": "https://github.com/xvrl/kafka",
      "tags_url": "https://api.github.com/repos/xvrl/kafka/tags",
      "teams_url": "https://api.github.com/repos/xvrl/kafka/teams",
      "trees_url": "https://api.github.com/repos/xvrl/kafka/git/trees{/sha}",
      "updated_at": "2016-10-04T18:42:29Z",
      "url": "https://api.github.com/repos/xvrl/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "164e50f0b669a313b5644d96dbd0763a2050d830",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/815147?v=4",
      "events_url": "https://api.github.com/users/xvrl/events{/privacy}",
      "followers_url": "https://api.github.com/users/xvrl/followers",
      "following_url": "https://api.github.com/users/xvrl/following{/other_user}",
      "gists_url": "https://api.github.com/users/xvrl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/xvrl",
      "id": 815147,
      "login": "xvrl",
      "node_id": "MDQ6VXNlcjgxNTE0Nw==",
      "organizations_url": "https://api.github.com/users/xvrl/orgs",
      "received_events_url": "https://api.github.com/users/xvrl/received_events",
      "repos_url": "https://api.github.com/users/xvrl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/xvrl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xvrl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/xvrl"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9402",
  "id": 500369548,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9402",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "db46a8555ef00c20d5d738f372861ead63b49fcc",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAwMzY5NTQ4",
  "number": 9402,
  "patch_url": "https://github.com/apache/kafka/pull/9402.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9402/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/164e50f0b669a313b5644d96dbd0763a2050d830",
  "title": "KAFKA-10588 update console consumer arguments for KIP-629",
  "updated_at": "2020-10-09T06:14:06Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9402",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/815147?v=4",
    "events_url": "https://api.github.com/users/xvrl/events{/privacy}",
    "followers_url": "https://api.github.com/users/xvrl/followers",
    "following_url": "https://api.github.com/users/xvrl/following{/other_user}",
    "gists_url": "https://api.github.com/users/xvrl/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/xvrl",
    "id": 815147,
    "login": "xvrl",
    "node_id": "MDQ6VXNlcjgxNTE0Nw==",
    "organizations_url": "https://api.github.com/users/xvrl/orgs",
    "received_events_url": "https://api.github.com/users/xvrl/received_events",
    "repos_url": "https://api.github.com/users/xvrl/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/xvrl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/xvrl/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/xvrl"
  }
}
json_root is_array: false
json_root is_object: true
number: 9402
url: https://api.github.com/repos/apache/kafka/pulls/9402
title: KAFKA-10588 update console consumer arguments for KIP-629
body: draft PR, more changes needed in order to ensure backwards compatibility
review_comments: https://api.github.com/repos/apache/kafka/pulls/9402/comments
pull_request_number: 9402
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9401/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9401/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9401"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9401"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9401/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9401"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/2191f02f93a8d60924db87f871dfc73702a5d786"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "7947c18b5788fd12841de649a662336f7d3d14d8",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "issue: https://issues.apache.org/jira/browse/KAFKA-9628\r\n\r\nThe response is not completed yet. \r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9401/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9401/commits",
  "created_at": "2020-10-09T05:58:00Z",
  "diff_url": "https://github.com/apache/kafka/pull/9401.diff",
  "draft": false,
  "head": {
    "label": "chia7712:KAFKA-9628-1",
    "ref": "KAFKA-9628-1",
    "repo": {
      "archive_url": "https://api.github.com/repos/chia7712/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/chia7712/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/chia7712/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/chia7712/kafka/branches{/branch}",
      "clone_url": "https://github.com/chia7712/kafka.git",
      "collaborators_url": "https://api.github.com/repos/chia7712/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/chia7712/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/chia7712/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/chia7712/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/chia7712/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/chia7712/kafka/contributors",
      "created_at": "2018-03-14T12:43:46Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/chia7712/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/chia7712/kafka/downloads",
      "events_url": "https://api.github.com/repos/chia7712/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/chia7712/kafka/forks",
      "full_name": "chia7712/kafka",
      "git_commits_url": "https://api.github.com/repos/chia7712/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/chia7712/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/chia7712/kafka/git/tags{/sha}",
      "git_url": "git://github.com/chia7712/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/chia7712/kafka/hooks",
      "html_url": "https://github.com/chia7712/kafka",
      "id": 125210946,
      "issue_comment_url": "https://api.github.com/repos/chia7712/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/chia7712/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/chia7712/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/chia7712/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/chia7712/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/chia7712/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/chia7712/kafka/merges",
      "milestones_url": "https://api.github.com/repos/chia7712/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjUyMTA5NDY=",
      "notifications_url": "https://api.github.com/repos/chia7712/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
        "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
        "followers_url": "https://api.github.com/users/chia7712/followers",
        "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
        "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/chia7712",
        "id": 6234750,
        "login": "chia7712",
        "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
        "organizations_url": "https://api.github.com/users/chia7712/orgs",
        "received_events_url": "https://api.github.com/users/chia7712/received_events",
        "repos_url": "https://api.github.com/users/chia7712/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/chia7712"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/chia7712/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T03:45:34Z",
      "releases_url": "https://api.github.com/repos/chia7712/kafka/releases{/id}",
      "size": 102819,
      "ssh_url": "git@github.com:chia7712/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/chia7712/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/chia7712/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/chia7712/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/chia7712/kafka/subscription",
      "svn_url": "https://github.com/chia7712/kafka",
      "tags_url": "https://api.github.com/repos/chia7712/kafka/tags",
      "teams_url": "https://api.github.com/repos/chia7712/kafka/teams",
      "trees_url": "https://api.github.com/repos/chia7712/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:44:24Z",
      "url": "https://api.github.com/repos/chia7712/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "2191f02f93a8d60924db87f871dfc73702a5d786",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
      "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
      "followers_url": "https://api.github.com/users/chia7712/followers",
      "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
      "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chia7712",
      "id": 6234750,
      "login": "chia7712",
      "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
      "organizations_url": "https://api.github.com/users/chia7712/orgs",
      "received_events_url": "https://api.github.com/users/chia7712/received_events",
      "repos_url": "https://api.github.com/users/chia7712/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chia7712"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9401",
  "id": 500363605,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9401",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "1771ae6a17cd4eb2270109150105eb2153d81cf4",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAwMzYzNjA1",
  "number": 9401,
  "patch_url": "https://github.com/apache/kafka/pull/9401.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9401/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/2191f02f93a8d60924db87f871dfc73702a5d786",
  "title": "KAFKA-9628 Replace Produce request/response with automated protocol",
  "updated_at": "2020-10-16T03:29:44Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9401",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
    "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
    "followers_url": "https://api.github.com/users/chia7712/followers",
    "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
    "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/chia7712",
    "id": 6234750,
    "login": "chia7712",
    "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
    "organizations_url": "https://api.github.com/users/chia7712/orgs",
    "received_events_url": "https://api.github.com/users/chia7712/received_events",
    "repos_url": "https://api.github.com/users/chia7712/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/chia7712"
  }
}
json_root is_array: false
json_root is_object: true
number: 9401
url: https://api.github.com/repos/apache/kafka/pulls/9401
title: KAFKA-9628 Replace Produce request/response with automated protocol
body: issue: https://issues.apache.org/jira/browse/KAFKA-9628

The response is not completed yet. 

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9401/comments
pull_request_number: 9401
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9395/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9395/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9395"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9395"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9395/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9395"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/160719af8597db1f497b26da1a01fc99ad022b4d"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "7947c18b5788fd12841de649a662336f7d3d14d8",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This commit adds a new replication policy for MirrorMaker 2, `LegacyReplicationPolicy`. This policy imitates MirrorMaker 1 behavior of not renaming replicated topics. The exception is made for `heartbeats` topic, that is replicated according to `DefaultReplicationPolicy`.\r\n\r\nAvoiding renaming topics brings a number of limitations, among which the most important one is the impossibility of detecting replication cycles. This makes cross-replication using `LegacyReplicationPolicy` effectively impossible. See `LegacyReplicationPolicy` Javadoc for details.\r\n\r\nA new method `canTrackSource` is added to `ReplicationPolicy`. Its result indicates if the replication policy can track back to the source topic of a topic. It is needed to allow detecting target topics work when `LegacyReplicationPolicy` is used.\r\n\r\nOn the testing side, the tests have the same strategy as for `DefaultReplicationPolicy` with nicessary adjustments (e.g. no active/active replication is tested).\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9395/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9395/commits",
  "created_at": "2020-10-08T17:02:23Z",
  "diff_url": "https://github.com/apache/kafka/pull/9395.diff",
  "draft": false,
  "head": {
    "label": "ivanyu:legacy-replication-policy",
    "ref": "legacy-replication-policy",
    "repo": {
      "archive_url": "https://api.github.com/repos/ivanyu/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/ivanyu/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/ivanyu/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/ivanyu/kafka/branches{/branch}",
      "clone_url": "https://github.com/ivanyu/kafka.git",
      "collaborators_url": "https://api.github.com/repos/ivanyu/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/ivanyu/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/ivanyu/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/ivanyu/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/ivanyu/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/ivanyu/kafka/contributors",
      "created_at": "2019-03-22T12:04:29Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/ivanyu/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/ivanyu/kafka/downloads",
      "events_url": "https://api.github.com/repos/ivanyu/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/ivanyu/kafka/forks",
      "full_name": "ivanyu/kafka",
      "git_commits_url": "https://api.github.com/repos/ivanyu/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/ivanyu/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/ivanyu/kafka/git/tags{/sha}",
      "git_url": "git://github.com/ivanyu/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/ivanyu/kafka/hooks",
      "html_url": "https://github.com/ivanyu/kafka",
      "id": 177132864,
      "issue_comment_url": "https://api.github.com/repos/ivanyu/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/ivanyu/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/ivanyu/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/ivanyu/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/ivanyu/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/ivanyu/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/ivanyu/kafka/merges",
      "milestones_url": "https://api.github.com/repos/ivanyu/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxNzcxMzI4NjQ=",
      "notifications_url": "https://api.github.com/repos/ivanyu/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/2189030?v=4",
        "events_url": "https://api.github.com/users/ivanyu/events{/privacy}",
        "followers_url": "https://api.github.com/users/ivanyu/followers",
        "following_url": "https://api.github.com/users/ivanyu/following{/other_user}",
        "gists_url": "https://api.github.com/users/ivanyu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ivanyu",
        "id": 2189030,
        "login": "ivanyu",
        "node_id": "MDQ6VXNlcjIxODkwMzA=",
        "organizations_url": "https://api.github.com/users/ivanyu/orgs",
        "received_events_url": "https://api.github.com/users/ivanyu/received_events",
        "repos_url": "https://api.github.com/users/ivanyu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ivanyu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ivanyu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ivanyu"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/ivanyu/kafka/pulls{/number}",
      "pushed_at": "2020-10-11T17:50:13Z",
      "releases_url": "https://api.github.com/repos/ivanyu/kafka/releases{/id}",
      "size": 104473,
      "ssh_url": "git@github.com:ivanyu/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/ivanyu/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/ivanyu/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/ivanyu/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/ivanyu/kafka/subscription",
      "svn_url": "https://github.com/ivanyu/kafka",
      "tags_url": "https://api.github.com/repos/ivanyu/kafka/tags",
      "teams_url": "https://api.github.com/repos/ivanyu/kafka/teams",
      "trees_url": "https://api.github.com/repos/ivanyu/kafka/git/trees{/sha}",
      "updated_at": "2019-05-25T16:56:57Z",
      "url": "https://api.github.com/repos/ivanyu/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "160719af8597db1f497b26da1a01fc99ad022b4d",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/2189030?v=4",
      "events_url": "https://api.github.com/users/ivanyu/events{/privacy}",
      "followers_url": "https://api.github.com/users/ivanyu/followers",
      "following_url": "https://api.github.com/users/ivanyu/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanyu/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ivanyu",
      "id": 2189030,
      "login": "ivanyu",
      "node_id": "MDQ6VXNlcjIxODkwMzA=",
      "organizations_url": "https://api.github.com/users/ivanyu/orgs",
      "received_events_url": "https://api.github.com/users/ivanyu/received_events",
      "repos_url": "https://api.github.com/users/ivanyu/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ivanyu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanyu/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ivanyu"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9395",
  "id": 500063912,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9395",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "941011be93c0fa82f21388fc2b7e3ff2f32549a3",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NTAwMDYzOTEy",
  "number": 9395,
  "patch_url": "https://github.com/apache/kafka/pull/9395.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9395/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/160719af8597db1f497b26da1a01fc99ad022b4d",
  "title": "KAFKA-9726: Add LegacyReplicationPolicy for MM2",
  "updated_at": "2020-10-10T16:58:10Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9395",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/2189030?v=4",
    "events_url": "https://api.github.com/users/ivanyu/events{/privacy}",
    "followers_url": "https://api.github.com/users/ivanyu/followers",
    "following_url": "https://api.github.com/users/ivanyu/following{/other_user}",
    "gists_url": "https://api.github.com/users/ivanyu/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ivanyu",
    "id": 2189030,
    "login": "ivanyu",
    "node_id": "MDQ6VXNlcjIxODkwMzA=",
    "organizations_url": "https://api.github.com/users/ivanyu/orgs",
    "received_events_url": "https://api.github.com/users/ivanyu/received_events",
    "repos_url": "https://api.github.com/users/ivanyu/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ivanyu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ivanyu/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ivanyu"
  }
}
json_root is_array: false
json_root is_object: true
number: 9395
url: https://api.github.com/repos/apache/kafka/pulls/9395
title: KAFKA-9726: Add LegacyReplicationPolicy for MM2
body: This commit adds a new replication policy for MirrorMaker 2, `LegacyReplicationPolicy`. This policy imitates MirrorMaker 1 behavior of not renaming replicated topics. The exception is made for `heartbeats` topic, that is replicated according to `DefaultReplicationPolicy`.

Avoiding renaming topics brings a number of limitations, among which the most important one is the impossibility of detecting replication cycles. This makes cross-replication using `LegacyReplicationPolicy` effectively impossible. See `LegacyReplicationPolicy` Javadoc for details.

A new method `canTrackSource` is added to `ReplicationPolicy`. Its result indicates if the replication policy can track back to the source topic of a topic. It is needed to allow detecting target topics work when `LegacyReplicationPolicy` is used.

On the testing side, the tests have the same strategy as for `DefaultReplicationPolicy` with nicessary adjustments (e.g. no active/active replication is tested).

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9395/comments
id: 502671621
url: https://api.github.com/repos/apache/kafka/pulls/comments/502671621
body: I'm not sure what you mean by "track back to the source of the topic". The word "track" might mean a few things here, and it's not obvious what you mean. Can you clarify?
diff_hunk: @@ -57,4 +57,9 @@ default boolean isInternalTopic(String topic) {
         return topic.endsWith(".internal") || topic.endsWith("-internal") || topic.startsWith("__")
             || topic.startsWith(".");
     }
+
+    /** Checks if the policy can track back to the source of the topic. */
path: connect/mirror-client/src/main/java/org/apache/kafka/connect/mirror/ReplicationPolicy.java
html: https://github.com/apache/kafka/pull/9395#discussion_r502671621
id: 502672494
url: https://api.github.com/repos/apache/kafka/pulls/comments/502672494
body: If a public API change like this is required, you will need to propose a small KIP. I'm unclear why it's required tho, and ideally we would not alter the existing API if possible.

If a new method is required, I think "track" is too ambiguous and should not be used here.
diff_hunk: @@ -57,4 +57,9 @@ default boolean isInternalTopic(String topic) {
         return topic.endsWith(".internal") || topic.endsWith("-internal") || topic.startsWith("__")
             || topic.startsWith(".");
     }
+
+    /** Checks if the policy can track back to the source of the topic. */
+    default boolean canTrackSource(String topic) {
path: connect/mirror-client/src/main/java/org/apache/kafka/connect/mirror/ReplicationPolicy.java
html: https://github.com/apache/kafka/pull/9395#discussion_r502672494
id: 502676365
url: https://api.github.com/repos/apache/kafka/pulls/comments/502676365
body: I've seen alternative solutions floating around that use a configurable source here. Basically, the configuration passed to configure() is consulted to find the "source cluster", rather than looking at the topic name. That approach lets you return an actual source here, which obviates the new canTrackSource() method etc.
diff_hunk: @@ -0,0 +1,96 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror;
+
+import org.apache.kafka.common.Configurable;
+
+import java.util.Map;
+
+import static org.apache.kafka.connect.mirror.MirrorClientConfig.HEARTBEATS_TOPIC;
+
+/**
+ * The replication policy that imitates the behavior of MirrorMaker 1.
+ *
+ * <p>The policy doesn't rename topics: {@code topic1} remains {@code topic1} after replication.
+ * There is one exception to this: for {@code heartbeats}, it behaves identical to {@link DefaultReplicationPolicy}.
+ *
+ * <p>The policy has some notable limitations. The most important one is that the policy is unable to detect
+ * cycles for any topic apart from {@code heartbeats}. This makes cross-replication effectively impossible.
+ *
+ * <p>Another limitation is that {@link MirrorClient#remoteTopics()} will be able to list only
+ * {@code heartbeats} topics.
+ *
+ * <p>{@link MirrorClient#countHopsForTopic(String, String)} will return {@code -1} for any topic
+ * apart from {@code heartbeats}.
+ *
+ * <p>The policy supports {@link DefaultReplicationPolicy}'s configurations
+ * for the behavior related to {@code heartbeats}.
+ */
+public class LegacyReplicationPolicy implements ReplicationPolicy, Configurable {
+    // Replication sub-policy for heartbeats topics
+    private final DefaultReplicationPolicy heartbeatTopicReplicationPolicy = new DefaultReplicationPolicy();
+
+    @Override
+    public void configure(final Map<String, ?> props) {
+        heartbeatTopicReplicationPolicy.configure(props);
+    }
+
+    @Override
+    public String formatRemoteTopic(final String sourceClusterAlias, final String topic) {
+        if (isOriginalTopicHeartbeats(topic)) {
+            return heartbeatTopicReplicationPolicy.formatRemoteTopic(sourceClusterAlias, topic);
+        } else {
+            return topic;
+        }
+    }
+
+    @Override
+    public String topicSource(final String topic) {
+        if (isOriginalTopicHeartbeats(topic)) {
+            return heartbeatTopicReplicationPolicy.topicSource(topic);
+        } else {
+            return null;
path: connect/mirror-client/src/main/java/org/apache/kafka/connect/mirror/LegacyReplicationPolicy.java
html: https://github.com/apache/kafka/pull/9395#discussion_r502676365
id: 502810124
url: https://api.github.com/repos/apache/kafka/pulls/comments/502810124
body: I've explored this possibility, too. The main problem with it is that the replication policy should answer differently for source and target clusters. It's essential for methods like `MirrorSourceConnector.isCycle` and `MirrorClient.remoteTopics`. For a source, `topicSource` should return `null`; for a target, a predefined value.

It leaves two possibility. In one, we set up two different replication policy instances with different configurations, e.g.:
```
replication.policy.source.class=org.apache.kafka.connect.mirror.LegacyReplicationPolicy
replication.policy.source.source=
replication.policy.target.class=org.apache.kafka.connect.mirror.LegacyReplicationPolicy
replication.policy.target.source=primary-cluster
```

Of course, we can make that the current configurations work as before.

Another possibility is to modify the `ReplicationPolicy` interface to allow it to pass additional information out (like `canTrackSource` or similar) or in (like `topicSource(String topic, boolean isSourceCluster)`).

What do you think would be the best approach?
diff_hunk: @@ -0,0 +1,96 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror;
+
+import org.apache.kafka.common.Configurable;
+
+import java.util.Map;
+
+import static org.apache.kafka.connect.mirror.MirrorClientConfig.HEARTBEATS_TOPIC;
+
+/**
+ * The replication policy that imitates the behavior of MirrorMaker 1.
+ *
+ * <p>The policy doesn't rename topics: {@code topic1} remains {@code topic1} after replication.
+ * There is one exception to this: for {@code heartbeats}, it behaves identical to {@link DefaultReplicationPolicy}.
+ *
+ * <p>The policy has some notable limitations. The most important one is that the policy is unable to detect
+ * cycles for any topic apart from {@code heartbeats}. This makes cross-replication effectively impossible.
+ *
+ * <p>Another limitation is that {@link MirrorClient#remoteTopics()} will be able to list only
+ * {@code heartbeats} topics.
+ *
+ * <p>{@link MirrorClient#countHopsForTopic(String, String)} will return {@code -1} for any topic
+ * apart from {@code heartbeats}.
+ *
+ * <p>The policy supports {@link DefaultReplicationPolicy}'s configurations
+ * for the behavior related to {@code heartbeats}.
+ */
+public class LegacyReplicationPolicy implements ReplicationPolicy, Configurable {
+    // Replication sub-policy for heartbeats topics
+    private final DefaultReplicationPolicy heartbeatTopicReplicationPolicy = new DefaultReplicationPolicy();
+
+    @Override
+    public void configure(final Map<String, ?> props) {
+        heartbeatTopicReplicationPolicy.configure(props);
+    }
+
+    @Override
+    public String formatRemoteTopic(final String sourceClusterAlias, final String topic) {
+        if (isOriginalTopicHeartbeats(topic)) {
+            return heartbeatTopicReplicationPolicy.formatRemoteTopic(sourceClusterAlias, topic);
+        } else {
+            return topic;
+        }
+    }
+
+    @Override
+    public String topicSource(final String topic) {
+        if (isOriginalTopicHeartbeats(topic)) {
+            return heartbeatTopicReplicationPolicy.topicSource(topic);
+        } else {
+            return null;
path: connect/mirror-client/src/main/java/org/apache/kafka/connect/mirror/LegacyReplicationPolicy.java
html: https://github.com/apache/kafka/pull/9395#discussion_r502810124
pull_request_number: 9395
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9387/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9387/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9387"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9387"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9387/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9387"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/c13717b17cf464d8cbcddb6c616109dd5e4bc47a"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "fc4710e2da81dae4becbfa5ff0f43d82250870fe",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Add subnet support to ACL authorizer. For IPv4 and IPv6, it supports:\r\n\r\n- IP address range\r\n- Subnet CIDR notation\r\n\r\nTest strategy has been simple:\r\n- Define ranges and set ACLs with IPs included in that range and other that it is not included inside the range.\r\n\r\nBTW suggestions are welcome (I don't know Scala and I haven't been coding in a long time) :)\r\n\r\nJIRA ticket: https://issues.apache.org/jira/browse/KAFKA-4759\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [x] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9387/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9387/commits",
  "created_at": "2020-10-06T21:01:19Z",
  "diff_url": "https://github.com/apache/kafka/pull/9387.diff",
  "draft": false,
  "head": {
    "label": "rgo:acl-authorizer-subnet-support",
    "ref": "acl-authorizer-subnet-support",
    "repo": {
      "archive_url": "https://api.github.com/repos/rgo/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/rgo/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/rgo/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/rgo/kafka/branches{/branch}",
      "clone_url": "https://github.com/rgo/kafka.git",
      "collaborators_url": "https://api.github.com/repos/rgo/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/rgo/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/rgo/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/rgo/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/rgo/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/rgo/kafka/contributors",
      "created_at": "2020-10-06T20:48:08Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/rgo/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/rgo/kafka/downloads",
      "events_url": "https://api.github.com/repos/rgo/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/rgo/kafka/forks",
      "full_name": "rgo/kafka",
      "git_commits_url": "https://api.github.com/repos/rgo/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/rgo/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/rgo/kafka/git/tags{/sha}",
      "git_url": "git://github.com/rgo/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/rgo/kafka/hooks",
      "html_url": "https://github.com/rgo/kafka",
      "id": 301851046,
      "issue_comment_url": "https://api.github.com/repos/rgo/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/rgo/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/rgo/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/rgo/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/rgo/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/rgo/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/rgo/kafka/merges",
      "milestones_url": "https://api.github.com/repos/rgo/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDE4NTEwNDY=",
      "notifications_url": "https://api.github.com/repos/rgo/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47124?v=4",
        "events_url": "https://api.github.com/users/rgo/events{/privacy}",
        "followers_url": "https://api.github.com/users/rgo/followers",
        "following_url": "https://api.github.com/users/rgo/following{/other_user}",
        "gists_url": "https://api.github.com/users/rgo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/rgo",
        "id": 47124,
        "login": "rgo",
        "node_id": "MDQ6VXNlcjQ3MTI0",
        "organizations_url": "https://api.github.com/users/rgo/orgs",
        "received_events_url": "https://api.github.com/users/rgo/received_events",
        "repos_url": "https://api.github.com/users/rgo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/rgo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rgo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/rgo"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/rgo/kafka/pulls{/number}",
      "pushed_at": "2020-10-21T06:49:54Z",
      "releases_url": "https://api.github.com/repos/rgo/kafka/releases{/id}",
      "size": 107792,
      "ssh_url": "git@github.com:rgo/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/rgo/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/rgo/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/rgo/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/rgo/kafka/subscription",
      "svn_url": "https://github.com/rgo/kafka",
      "tags_url": "https://api.github.com/repos/rgo/kafka/tags",
      "teams_url": "https://api.github.com/repos/rgo/kafka/teams",
      "trees_url": "https://api.github.com/repos/rgo/kafka/git/trees{/sha}",
      "updated_at": "2020-10-21T06:45:35Z",
      "url": "https://api.github.com/repos/rgo/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "c13717b17cf464d8cbcddb6c616109dd5e4bc47a",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47124?v=4",
      "events_url": "https://api.github.com/users/rgo/events{/privacy}",
      "followers_url": "https://api.github.com/users/rgo/followers",
      "following_url": "https://api.github.com/users/rgo/following{/other_user}",
      "gists_url": "https://api.github.com/users/rgo/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rgo",
      "id": 47124,
      "login": "rgo",
      "node_id": "MDQ6VXNlcjQ3MTI0",
      "organizations_url": "https://api.github.com/users/rgo/orgs",
      "received_events_url": "https://api.github.com/users/rgo/received_events",
      "repos_url": "https://api.github.com/users/rgo/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rgo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rgo/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rgo"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9387",
  "id": 498833041,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9387",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "20df72f201ca16341b015f488b857e1ef3141cc0",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDk4ODMzMDQx",
  "number": 9387,
  "patch_url": "https://github.com/apache/kafka/pull/9387.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9387/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/c13717b17cf464d8cbcddb6c616109dd5e4bc47a",
  "title": "KAFKA-4759: Acl authorizer subnet support",
  "updated_at": "2020-10-21T06:49:59Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9387",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/47124?v=4",
    "events_url": "https://api.github.com/users/rgo/events{/privacy}",
    "followers_url": "https://api.github.com/users/rgo/followers",
    "following_url": "https://api.github.com/users/rgo/following{/other_user}",
    "gists_url": "https://api.github.com/users/rgo/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/rgo",
    "id": 47124,
    "login": "rgo",
    "node_id": "MDQ6VXNlcjQ3MTI0",
    "organizations_url": "https://api.github.com/users/rgo/orgs",
    "received_events_url": "https://api.github.com/users/rgo/received_events",
    "repos_url": "https://api.github.com/users/rgo/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/rgo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rgo/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/rgo"
  }
}
json_root is_array: false
json_root is_object: true
number: 9387
url: https://api.github.com/repos/apache/kafka/pulls/9387
title: KAFKA-4759: Acl authorizer subnet support
body: Add subnet support to ACL authorizer. For IPv4 and IPv6, it supports:

- IP address range
- Subnet CIDR notation

Test strategy has been simple:
- Define ranges and set ACLs with IPs included in that range and other that it is not included inside the range.

BTW suggestions are welcome (I don't know Scala and I haven't been coding in a long time) :)

JIRA ticket: https://issues.apache.org/jira/browse/KAFKA-4759

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [x] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9387/comments
pull_request_number: 9387
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9386/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9386/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9386"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9386"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9386/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9386"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/7b25603eb1c9b1f8b9be9161de630dfd162f5e78"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "8118b6c9f9c3a8cc77dca2f6a516254f03a43d5e",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This PR implements the part of KIP-612 for adding IP throttling enforcement, and a ZK entity for configuring dynamic IP throttles.\r\n\r\nI will add `kafka-configs` support as well as `KafkaApi` reconfiguration support in a follow-up PR.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9386/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9386/commits",
  "created_at": "2020-10-06T20:44:56Z",
  "diff_url": "https://github.com/apache/kafka/pull/9386.diff",
  "draft": false,
  "head": {
    "label": "splett2:kafka-10024-pt-1",
    "ref": "kafka-10024-pt-1",
    "repo": {
      "archive_url": "https://api.github.com/repos/splett2/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/splett2/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/splett2/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/splett2/kafka/branches{/branch}",
      "clone_url": "https://github.com/splett2/kafka.git",
      "collaborators_url": "https://api.github.com/repos/splett2/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/splett2/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/splett2/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/splett2/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/splett2/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/splett2/kafka/contributors",
      "created_at": "2020-02-11T18:10:54Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/splett2/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/splett2/kafka/downloads",
      "events_url": "https://api.github.com/repos/splett2/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/splett2/kafka/forks",
      "full_name": "splett2/kafka",
      "git_commits_url": "https://api.github.com/repos/splett2/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/splett2/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/splett2/kafka/git/tags{/sha}",
      "git_url": "git://github.com/splett2/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/splett2/kafka/hooks",
      "html_url": "https://github.com/splett2/kafka",
      "id": 239831054,
      "issue_comment_url": "https://api.github.com/repos/splett2/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/splett2/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/splett2/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/splett2/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/splett2/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/splett2/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/splett2/kafka/merges",
      "milestones_url": "https://api.github.com/repos/splett2/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMzk4MzEwNTQ=",
      "notifications_url": "https://api.github.com/repos/splett2/kafka/notifications{?since,all,participating}",
      "open_issues": 1,
      "open_issues_count": 1,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47232755?v=4",
        "events_url": "https://api.github.com/users/splett2/events{/privacy}",
        "followers_url": "https://api.github.com/users/splett2/followers",
        "following_url": "https://api.github.com/users/splett2/following{/other_user}",
        "gists_url": "https://api.github.com/users/splett2/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/splett2",
        "id": 47232755,
        "login": "splett2",
        "node_id": "MDQ6VXNlcjQ3MjMyNzU1",
        "organizations_url": "https://api.github.com/users/splett2/orgs",
        "received_events_url": "https://api.github.com/users/splett2/received_events",
        "repos_url": "https://api.github.com/users/splett2/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/splett2/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/splett2/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/splett2"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/splett2/kafka/pulls{/number}",
      "pushed_at": "2020-10-20T16:18:38Z",
      "releases_url": "https://api.github.com/repos/splett2/kafka/releases{/id}",
      "size": 106115,
      "ssh_url": "git@github.com:splett2/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/splett2/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/splett2/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/splett2/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/splett2/kafka/subscription",
      "svn_url": "https://github.com/splett2/kafka",
      "tags_url": "https://api.github.com/repos/splett2/kafka/tags",
      "teams_url": "https://api.github.com/repos/splett2/kafka/teams",
      "trees_url": "https://api.github.com/repos/splett2/kafka/git/trees{/sha}",
      "updated_at": "2020-10-20T16:18:36Z",
      "url": "https://api.github.com/repos/splett2/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "7b25603eb1c9b1f8b9be9161de630dfd162f5e78",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47232755?v=4",
      "events_url": "https://api.github.com/users/splett2/events{/privacy}",
      "followers_url": "https://api.github.com/users/splett2/followers",
      "following_url": "https://api.github.com/users/splett2/following{/other_user}",
      "gists_url": "https://api.github.com/users/splett2/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/splett2",
      "id": 47232755,
      "login": "splett2",
      "node_id": "MDQ6VXNlcjQ3MjMyNzU1",
      "organizations_url": "https://api.github.com/users/splett2/orgs",
      "received_events_url": "https://api.github.com/users/splett2/received_events",
      "repos_url": "https://api.github.com/users/splett2/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/splett2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/splett2/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/splett2"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9386",
  "id": 498824927,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9386",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "a22974e046df7303eced0a7dbd02935e43a099ff",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDk4ODI0OTI3",
  "number": 9386,
  "patch_url": "https://github.com/apache/kafka/pull/9386.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9386/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/7b25603eb1c9b1f8b9be9161de630dfd162f5e78",
  "title": "KAFKA-10024: Add dynamic configuration and enforce quota for per-IP connection rate limits (KIP-612, part 2)",
  "updated_at": "2020-10-27T18:59:32Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9386",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/47232755?v=4",
    "events_url": "https://api.github.com/users/splett2/events{/privacy}",
    "followers_url": "https://api.github.com/users/splett2/followers",
    "following_url": "https://api.github.com/users/splett2/following{/other_user}",
    "gists_url": "https://api.github.com/users/splett2/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/splett2",
    "id": 47232755,
    "login": "splett2",
    "node_id": "MDQ6VXNlcjQ3MjMyNzU1",
    "organizations_url": "https://api.github.com/users/splett2/orgs",
    "received_events_url": "https://api.github.com/users/splett2/received_events",
    "repos_url": "https://api.github.com/users/splett2/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/splett2/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/splett2/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/splett2"
  }
}
json_root is_array: false
json_root is_object: true
number: 9386
url: https://api.github.com/repos/apache/kafka/pulls/9386
title: KAFKA-10024: Add dynamic configuration and enforce quota for per-IP connection rate limits (KIP-612, part 2)
body: This PR implements the part of KIP-612 for adding IP throttling enforcement, and a ZK entity for configuring dynamic IP throttles.

I will add `kafka-configs` support as well as `KafkaApi` reconfiguration support in a follow-up PR.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9386/comments
id: 502084924
url: https://api.github.com/repos/apache/kafka/pulls/comments/502084924
body: It would be more efficient if we throttled IPs **after** we know that we can accept a connection based on broker-wide and per-listener limits, since reaching broker/listener limits block the acceptor thread while throttling IPs needs more processing. Otherwise, if you reach both broker and per IP limit, the broker will continue accepting and delaying connections where it is justified to block an acceptor thread based on reaching a broker rate limit. Basically, call `waitForConnectionSlot` first. Similar how we check per IP limit on number of connections after we know that we can accept a new connection based on broker/listener limits. 
diff_hunk: @@ -1203,14 +1262,27 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
   private val listenerCounts = mutable.Map[ListenerName, Int]()
   private[network] val maxConnectionsPerListener = mutable.Map[ListenerName, ListenerConnectionQuota]()
   @volatile private var totalCount = 0
-
+  @volatile private var defaultConnectionRatePerIp = DynamicConfig.Ip.DefaultConnectionCreationRate
+  private val inactiveSensorExpirationTimeSeconds = TimeUnit.HOURS.toSeconds(1);
+  private val connectionRatePerIp = new ConcurrentHashMap[InetAddress, Int]()
+  private val lock = new ReentrantReadWriteLock()
+  private val sensorAccessor = new SensorAccess(lock, metrics)
   // sensor that tracks broker-wide connection creation rate and limit (quota)
-  private val brokerConnectionRateSensor = createConnectionRateQuotaSensor(config.maxConnectionCreationRate)
+  private val brokerConnectionRateSensor = getOrCreateConnectionRateQuotaSensor(config.maxConnectionCreationRate, BrokerQuotaEntity)
   private val maxThrottleTimeMs = TimeUnit.SECONDS.toMillis(config.quotaWindowSizeSeconds.toLong)
 
+
   def inc(listenerName: ListenerName, address: InetAddress, acceptorBlockedPercentMeter: com.yammer.metrics.core.Meter): Unit = {
     counts.synchronized {
-      waitForConnectionSlot(listenerName, acceptorBlockedPercentMeter)
+      val startThrottleTimeMs = time.milliseconds
+
+      val ipThrottleTimeMs = recordIpConnectionMaybeThrottle(address, startThrottleTimeMs)
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r502084924
id: 502086777
url: https://api.github.com/repos/apache/kafka/pulls/comments/502086777
body: You can use you new constant `DynamicConfig.Ip.UnlimitedConnectionCreationRate` instead of `Int.MaxValue` here.
diff_hunk: @@ -1242,7 +1314,56 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
   private[network] def updateBrokerMaxConnectionRate(maxConnectionRate: Int): Unit = {
     // if there is a connection waiting on the rate throttle delay, we will let it wait the original delay even if
     // the rate limit increases, because it is just one connection per listener and the code is simpler that way
-    updateConnectionRateQuota(maxConnectionRate)
+    updateConnectionRateQuota(maxConnectionRate, BrokerQuotaEntity)
+  }
+
+  /**
+   * Update the connection rate quota for a given IP and updates quota configs for updated IPs.
+   * If an IP is given, metric config will be updated only for the given IP, otherwise
+   * all metric configs will be checked and updated if required
+   *
+   * @param ip ip to update or default if None
+   * @param maxConnectionRate new connection rate, or resets entity to default if None
+   */
+  def updateIpConnectionRate(ip: Option[String], maxConnectionRate: Option[Int]): Unit = {
+    def isIpConnectionRateMetric(metricName: MetricName) = {
+      metricName.name == "connection-accept-rate" &&
+      metricName.group == MetricsGroup &&
+      metricName.tags.containsKey("ip")
+    }
+
+    def shouldUpdateQuota(metric: KafkaMetric, quotaLimit: Int) = {
+      quotaLimit != metric.config.quota.bound
+    }
+
+    ip match {
+      case Some(addr) =>
+        val address = InetAddress.getByName(addr)
+        if (maxConnectionRate.isDefined) {
+          info(s"Updating max connection rate override for $address to ${maxConnectionRate.get}")
+          connectionRatePerIp.put(address, maxConnectionRate.get)
+        } else {
+          info(s"Removing max connection rate override for $address")
+          connectionRatePerIp.remove(address)
+        }
+        updateConnectionRateQuota(connectionRateForIp(address), IpQuotaEntity(address))
+      case None =>
+        val newQuota = maxConnectionRate.getOrElse(Int.MaxValue)
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r502086777
id: 502091323
url: https://api.github.com/repos/apache/kafka/pulls/comments/502091323
body: It would be useful to add a test where we have both per-listener and per IP limit, and verify that it throttles based on which limit is reached first. Something like: 2 IPs, each per IP limit < per-listener limit, but sum of per IP limits > listener limit. So, if you reach limit on one IP, the broker would not throttle the second IP until it reaches per listener limit. Does not have to be exactly this, just need to verify how per IP throttling interacts with per listener throttling. 
diff_hunk: @@ -409,6 +409,67 @@ class ConnectionQuotasTest {
     verifyConnectionCountOnEveryListener(connectionQuotas, connectionsPerListener)
   }
 
+  @Test
path: core/src/test/scala/unit/kafka/network/ConnectionQuotasTest.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r502091323
id: 502091435
url: https://api.github.com/repos/apache/kafka/pulls/comments/502091435
body: @apovzner 
my reasoning for this is the following:
consider the case where we accept a connection at the broker/listener level, but reject it on IP level.
we would have already recorded the broker connection, so we'd be allocating rate to a rejected connection.

I suppose this we can work around this in a similar manner to `recordIpConnectionMaybeThrottle` by unrecording the listener/broker connection if the IP gets rejected.
diff_hunk: @@ -1203,14 +1262,27 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
   private val listenerCounts = mutable.Map[ListenerName, Int]()
   private[network] val maxConnectionsPerListener = mutable.Map[ListenerName, ListenerConnectionQuota]()
   @volatile private var totalCount = 0
-
+  @volatile private var defaultConnectionRatePerIp = DynamicConfig.Ip.DefaultConnectionCreationRate
+  private val inactiveSensorExpirationTimeSeconds = TimeUnit.HOURS.toSeconds(1);
+  private val connectionRatePerIp = new ConcurrentHashMap[InetAddress, Int]()
+  private val lock = new ReentrantReadWriteLock()
+  private val sensorAccessor = new SensorAccess(lock, metrics)
   // sensor that tracks broker-wide connection creation rate and limit (quota)
-  private val brokerConnectionRateSensor = createConnectionRateQuotaSensor(config.maxConnectionCreationRate)
+  private val brokerConnectionRateSensor = getOrCreateConnectionRateQuotaSensor(config.maxConnectionCreationRate, BrokerQuotaEntity)
   private val maxThrottleTimeMs = TimeUnit.SECONDS.toMillis(config.quotaWindowSizeSeconds.toLong)
 
+
   def inc(listenerName: ListenerName, address: InetAddress, acceptorBlockedPercentMeter: com.yammer.metrics.core.Meter): Unit = {
     counts.synchronized {
-      waitForConnectionSlot(listenerName, acceptorBlockedPercentMeter)
+      val startThrottleTimeMs = time.milliseconds
+
+      val ipThrottleTimeMs = recordIpConnectionMaybeThrottle(address, startThrottleTimeMs)
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r502091435
id: 502092158
url: https://api.github.com/repos/apache/kafka/pulls/comments/502092158
body: I see. Yes, I think unrecording is more efficient than keeping more delayed connections than needed. Basically, when you unrecord from per-IP metric, you can also unrecord from broker and listener metric as well.
diff_hunk: @@ -1203,14 +1262,27 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
   private val listenerCounts = mutable.Map[ListenerName, Int]()
   private[network] val maxConnectionsPerListener = mutable.Map[ListenerName, ListenerConnectionQuota]()
   @volatile private var totalCount = 0
-
+  @volatile private var defaultConnectionRatePerIp = DynamicConfig.Ip.DefaultConnectionCreationRate
+  private val inactiveSensorExpirationTimeSeconds = TimeUnit.HOURS.toSeconds(1);
+  private val connectionRatePerIp = new ConcurrentHashMap[InetAddress, Int]()
+  private val lock = new ReentrantReadWriteLock()
+  private val sensorAccessor = new SensorAccess(lock, metrics)
   // sensor that tracks broker-wide connection creation rate and limit (quota)
-  private val brokerConnectionRateSensor = createConnectionRateQuotaSensor(config.maxConnectionCreationRate)
+  private val brokerConnectionRateSensor = getOrCreateConnectionRateQuotaSensor(config.maxConnectionCreationRate, BrokerQuotaEntity)
   private val maxThrottleTimeMs = TimeUnit.SECONDS.toMillis(config.quotaWindowSizeSeconds.toLong)
 
+
   def inc(listenerName: ListenerName, address: InetAddress, acceptorBlockedPercentMeter: com.yammer.metrics.core.Meter): Unit = {
     counts.synchronized {
-      waitForConnectionSlot(listenerName, acceptorBlockedPercentMeter)
+      val startThrottleTimeMs = time.milliseconds
+
+      val ipThrottleTimeMs = recordIpConnectionMaybeThrottle(address, startThrottleTimeMs)
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r502092158
id: 502092508
url: https://api.github.com/repos/apache/kafka/pulls/comments/502092508
body: actually in this case, it should reset to `DynamicConfig.Ip.DefaultConnectionCreationRate` right?
diff_hunk: @@ -1242,7 +1314,56 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
   private[network] def updateBrokerMaxConnectionRate(maxConnectionRate: Int): Unit = {
     // if there is a connection waiting on the rate throttle delay, we will let it wait the original delay even if
     // the rate limit increases, because it is just one connection per listener and the code is simpler that way
-    updateConnectionRateQuota(maxConnectionRate)
+    updateConnectionRateQuota(maxConnectionRate, BrokerQuotaEntity)
+  }
+
+  /**
+   * Update the connection rate quota for a given IP and updates quota configs for updated IPs.
+   * If an IP is given, metric config will be updated only for the given IP, otherwise
+   * all metric configs will be checked and updated if required
+   *
+   * @param ip ip to update or default if None
+   * @param maxConnectionRate new connection rate, or resets entity to default if None
+   */
+  def updateIpConnectionRate(ip: Option[String], maxConnectionRate: Option[Int]): Unit = {
+    def isIpConnectionRateMetric(metricName: MetricName) = {
+      metricName.name == "connection-accept-rate" &&
+      metricName.group == MetricsGroup &&
+      metricName.tags.containsKey("ip")
+    }
+
+    def shouldUpdateQuota(metric: KafkaMetric, quotaLimit: Int) = {
+      quotaLimit != metric.config.quota.bound
+    }
+
+    ip match {
+      case Some(addr) =>
+        val address = InetAddress.getByName(addr)
+        if (maxConnectionRate.isDefined) {
+          info(s"Updating max connection rate override for $address to ${maxConnectionRate.get}")
+          connectionRatePerIp.put(address, maxConnectionRate.get)
+        } else {
+          info(s"Removing max connection rate override for $address")
+          connectionRatePerIp.remove(address)
+        }
+        updateConnectionRateQuota(connectionRateForIp(address), IpQuotaEntity(address))
+      case None =>
+        val newQuota = maxConnectionRate.getOrElse(Int.MaxValue)
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r502092508
id: 503249872
url: https://api.github.com/repos/apache/kafka/pulls/comments/503249872
body: Could we define this constant in a companion object?
diff_hunk: @@ -1203,14 +1261,28 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
   private val listenerCounts = mutable.Map[ListenerName, Int]()
   private[network] val maxConnectionsPerListener = mutable.Map[ListenerName, ListenerConnectionQuota]()
   @volatile private var totalCount = 0
-
+  @volatile private var defaultConnectionRatePerIp = DynamicConfig.Ip.DefaultConnectionCreationRate
+  private val inactiveSensorExpirationTimeSeconds = TimeUnit.HOURS.toSeconds(1);
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r503249872
id: 503251089
url: https://api.github.com/repos/apache/kafka/pulls/comments/503251089
body: Couldn't we rely on the `ConnectionQuotaEntity` trait to get these informations? That would avoid having to pattern match on the entity to get them.
diff_hunk: @@ -1394,28 +1554,38 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
    * Creates sensor for tracking the connection creation rate and corresponding connection rate quota for a given
    * listener or broker-wide, if listener is not provided.
    * @param quotaLimit connection creation rate quota
-   * @param listenerOpt listener name if sensor is for a listener
+   * @param connectionQuotaEntity entity to create the sensor for
    */
-  private def createConnectionRateQuotaSensor(quotaLimit: Int, listenerOpt: Option[String] = None): Sensor = {
-    val sensorName = listenerOpt.map(listener => s"ConnectionAcceptRate-$listener").getOrElse("ConnectionAcceptRate")
-    val sensor = metrics.sensor(sensorName, rateQuotaMetricConfig(quotaLimit))
-    sensor.add(connectionRateMetricName(listenerOpt), new Rate, null)
-    info(s"Created $sensorName sensor, quotaLimit=$quotaLimit")
-    sensor
+  private def getOrCreateConnectionRateQuotaSensor(quotaLimit: Int, connectionQuotaEntity: ConnectionQuotaEntity): Sensor = {
+    val (sensorName, sensorExpiration) = connectionQuotaEntity match {
+      case BrokerQuotaEntity => ("ConnectionAcceptRate", Long.MaxValue)
+      case listenerEntity: ListenerQuotaEntity => (s"ConnectionAcceptRate-${listenerEntity.entityName}", Long.MaxValue)
+      case ipEntity: IpQuotaEntity => (s"ConnectionAcceptRate-${ipEntity.entityName}", inactiveSensorExpirationTimeSeconds)
+    }
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r503251089
id: 503251341
url: https://api.github.com/repos/apache/kafka/pulls/comments/503251341
body: Same comment as before. Couldn't we rely on the `ConnectionQuotaEntity` trait here as well?
diff_hunk: @@ -1394,28 +1554,38 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
    * Creates sensor for tracking the connection creation rate and corresponding connection rate quota for a given
    * listener or broker-wide, if listener is not provided.
    * @param quotaLimit connection creation rate quota
-   * @param listenerOpt listener name if sensor is for a listener
+   * @param connectionQuotaEntity entity to create the sensor for
    */
-  private def createConnectionRateQuotaSensor(quotaLimit: Int, listenerOpt: Option[String] = None): Sensor = {
-    val sensorName = listenerOpt.map(listener => s"ConnectionAcceptRate-$listener").getOrElse("ConnectionAcceptRate")
-    val sensor = metrics.sensor(sensorName, rateQuotaMetricConfig(quotaLimit))
-    sensor.add(connectionRateMetricName(listenerOpt), new Rate, null)
-    info(s"Created $sensorName sensor, quotaLimit=$quotaLimit")
-    sensor
+  private def getOrCreateConnectionRateQuotaSensor(quotaLimit: Int, connectionQuotaEntity: ConnectionQuotaEntity): Sensor = {
+    val (sensorName, sensorExpiration) = connectionQuotaEntity match {
+      case BrokerQuotaEntity => ("ConnectionAcceptRate", Long.MaxValue)
+      case listenerEntity: ListenerQuotaEntity => (s"ConnectionAcceptRate-${listenerEntity.entityName}", Long.MaxValue)
+      case ipEntity: IpQuotaEntity => (s"ConnectionAcceptRate-${ipEntity.entityName}", inactiveSensorExpirationTimeSeconds)
+    }
+    sensorAccessor.getOrCreate(
+      sensorName,
+      sensorExpiration,
+      sensor => sensor.add(connectionRateMetricName(connectionQuotaEntity), new Rate, rateQuotaMetricConfig(quotaLimit))
+    )
   }
 
   /**
-   * Updates quota configuration for a given listener or broker-wide (if 'listenerOpt' is None)
+   * Updates quota configuration for a given connection quota entity
    */
-  private def updateConnectionRateQuota(quotaLimit: Int, listenerOpt: Option[String] = None): Unit = {
-    val metric = metrics.metric(connectionRateMetricName(listenerOpt))
-    metric.config(rateQuotaMetricConfig(quotaLimit))
-    info(s"Updated ${listenerOpt.getOrElse("broker-wide")} max connection creation rate to $quotaLimit")
+  private def updateConnectionRateQuota(quotaLimit: Int, connectionQuotaEntity: ConnectionQuotaEntity): Unit = {
+    val metricOpt = Option(metrics.metric(connectionRateMetricName(connectionQuotaEntity)))
+    metricOpt.foreach { metric =>
+      metric.config(rateQuotaMetricConfig(quotaLimit))
+      info(s"Updated ${connectionQuotaEntity.entityName} max connection creation rate to $quotaLimit")
+    }
   }
 
-  private def connectionRateMetricName(listenerOpt: Option[String]): MetricName = {
-    val tags = listenerOpt.map(listener => Map("listener" -> listener)).getOrElse(Map())
-    val namePrefix = listenerOpt.map(_ => "").getOrElse("broker-")
+  private def connectionRateMetricName(connectionQuotaEntity: ConnectionQuotaEntity): MetricName = {
+    val (namePrefix, tags) = connectionQuotaEntity match {
+      case BrokerQuotaEntity => ("broker-", Map.empty[String, String])
+      case listener: ListenerQuotaEntity => ("", Map("listener" -> listener.entityName))
+      case ip: IpQuotaEntity => ("", Map("ip" -> ip.entityName))
+    }
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r503251341
id: 503251560
url: https://api.github.com/repos/apache/kafka/pulls/comments/503251560
body: nit: Can't we reuse `connectionRateQuota` directly? 
diff_hunk: @@ -1371,6 +1492,45 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
     }
   }
 
+  /**
+   * To avoid over-recording listener/broker connection rate, we unrecord a listener or broker connection
+   * if the IP gets throttled later.
+   *
+   * @param listenerName listener to unrecord connection
+   * @param timeMs current time in milliseconds
+   */
+  private def unrecordListenerConnection(listenerName: ListenerName, timeMs: Long): Unit = {
+    if (!protectedListener(listenerName)) {
+      brokerConnectionRateSensor.record(-1.0, timeMs, false)
+    }
+    maxConnectionsPerListener
+      .get(listenerName)
+      .foreach(_.connectionRateSensor.record(-1.0, timeMs, false))
+  }
+
+  /**
+   * Calculates the delay needed to bring the observed connection creation rate to the IP limit.
+   * If the connection would cause an IP quota violation, un-record the connection
+   *
+   * @param address
+   * @param timeMs
+   * @return
+   */
+  private def recordIpConnectionMaybeThrottle(address: InetAddress, timeMs: Long): Long = {
+    val connectionRateQuota = connectionRateForIp(address)
+    val quotaEnabled = connectionRateQuota != DynamicConfig.Ip.UnlimitedConnectionCreationRate
+    if (!quotaEnabled) {
+      return 0
+    }
+    val sensor = getOrCreateConnectionRateQuotaSensor(connectionRateForIp(address), IpQuotaEntity(address))
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r503251560
id: 503295246
url: https://api.github.com/repos/apache/kafka/pulls/comments/503295246
body: Instead of recording, checking the quota, and unrecording if the quota is violated, we may be able to check the quota and record only if the quota is not violated yet. Your implementation suggests that we want to enforce a strict quota here. We did so for the controller mutations with the following implementation:

```
try {
      quotaSensor synchronized {
        quotaSensor.checkQuotas(timeMs)
        quotaSensor.record(permits, timeMs, false)
      }
    } catch {
      case e: QuotaViolationException =>
         ...
    }
```

It seems that this should work here as well. Let me know what you think about this.
diff_hunk: @@ -1371,6 +1492,45 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
     }
   }
 
+  /**
+   * To avoid over-recording listener/broker connection rate, we unrecord a listener or broker connection
+   * if the IP gets throttled later.
+   *
+   * @param listenerName listener to unrecord connection
+   * @param timeMs current time in milliseconds
+   */
+  private def unrecordListenerConnection(listenerName: ListenerName, timeMs: Long): Unit = {
+    if (!protectedListener(listenerName)) {
+      brokerConnectionRateSensor.record(-1.0, timeMs, false)
+    }
+    maxConnectionsPerListener
+      .get(listenerName)
+      .foreach(_.connectionRateSensor.record(-1.0, timeMs, false))
+  }
+
+  /**
+   * Calculates the delay needed to bring the observed connection creation rate to the IP limit.
+   * If the connection would cause an IP quota violation, un-record the connection
+   *
+   * @param address
+   * @param timeMs
+   * @return
+   */
+  private def recordIpConnectionMaybeThrottle(address: InetAddress, timeMs: Long): Long = {
+    val connectionRateQuota = connectionRateForIp(address)
+    val quotaEnabled = connectionRateQuota != DynamicConfig.Ip.UnlimitedConnectionCreationRate
+    if (!quotaEnabled) {
+      return 0
+    }
+    val sensor = getOrCreateConnectionRateQuotaSensor(connectionRateForIp(address), IpQuotaEntity(address))
+    val throttleMs = recordAndGetThrottleTimeMs(sensor, timeMs)
+    if (throttleMs > 0) {
+      // unrecord the connection since we won't accept the connection
+      sensor.record(-1.0, timeMs, false)
+    }
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r503295246
id: 503297399
url: https://api.github.com/repos/apache/kafka/pulls/comments/503297399
body: - Do we really need to store delayed sockets per IP? It seems that we just close all the sockets in `throttledSockets` later on so it is not really necessary. Or have I missed something?
- Similarly, we use a `DelayQueue` for the other quotas. Is there any reason why we don't use the same data structure here?
diff_hunk: @@ -697,6 +714,31 @@ private[kafka] class Acceptor(val endPoint: EndPoint,
         info(s"Rejected connection from ${e.ip}, address already has the configured maximum of ${e.count} connections.")
         close(endPoint.listenerName, socketChannel)
         None
+      case e: ConnectionThrottledException =>
+        val ip = socketChannel.socket.getInetAddress
+        debug(s"Delaying closing of connection from $ip for ${e.throttleTimeMs} ms")
+        val delayQueue = throttledSockets.computeIfAbsent(ip, _ => new mutable.Queue[DelayedCloseSocket])
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r503297399
id: 503307706
url: https://api.github.com/repos/apache/kafka/pulls/comments/503307706
body: Out of curiosity, have we considered using a "reaper" running in a separate thread to drain the queue and close throttled connections?
diff_hunk: @@ -600,43 +607,10 @@ private[kafka] class Acceptor(val endPoint: EndPoint,
     serverChannel.register(nioSelector, SelectionKey.OP_ACCEPT)
     startupComplete()
     try {
-      var currentProcessorIndex = 0
       while (isRunning) {
         try {
-          val ready = nioSelector.select(500)
-          if (ready > 0) {
-            val keys = nioSelector.selectedKeys()
-            val iter = keys.iterator()
-            while (iter.hasNext && isRunning) {
-              try {
-                val key = iter.next
-                iter.remove()
-
-                if (key.isAcceptable) {
-                  accept(key).foreach { socketChannel =>
-                    // Assign the channel to the next processor (using round-robin) to which the
-                    // channel can be added without blocking. If newConnections queue is full on
-                    // all processors, block until the last one is able to accept a connection.
-                    var retriesLeft = synchronized(processors.length)
-                    var processor: Processor = null
-                    do {
-                      retriesLeft -= 1
-                      processor = synchronized {
-                        // adjust the index (if necessary) and retrieve the processor atomically for
-                        // correct behaviour in case the number of processors is reduced dynamically
-                        currentProcessorIndex = currentProcessorIndex % processors.length
-                        processors(currentProcessorIndex)
-                      }
-                      currentProcessorIndex += 1
-                    } while (!assignNewConnection(socketChannel, processor, retriesLeft == 0))
-                  }
-                } else
-                  throw new IllegalStateException("Unrecognized key state for acceptor thread.")
-              } catch {
-                case e: Throwable => error("Error while accepting connection", e)
-              }
-            }
-          }
+          acceptNewConnections()
+          closeThrottledConnections()
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r503307706
id: 503308407
url: https://api.github.com/repos/apache/kafka/pulls/comments/503308407
body: If we were using a shared `DelayQueue` for all IPs, iterating over all the IPs wouldn't be necessary when there are no throttled connections ready to be closed yet.
diff_hunk: @@ -697,6 +714,31 @@ private[kafka] class Acceptor(val endPoint: EndPoint,
         info(s"Rejected connection from ${e.ip}, address already has the configured maximum of ${e.count} connections.")
         close(endPoint.listenerName, socketChannel)
         None
+      case e: ConnectionThrottledException =>
+        val ip = socketChannel.socket.getInetAddress
+        debug(s"Delaying closing of connection from $ip for ${e.throttleTimeMs} ms")
+        val delayQueue = throttledSockets.computeIfAbsent(ip, _ => new mutable.Queue[DelayedCloseSocket])
+        val endThrottleTimeMs = e.startThrottleTimeMs + e.throttleTimeMs
+        delayQueue += DelayedCloseSocket(socketChannel, endThrottleTimeMs)
+        None
+    }
+  }
+
+  /**
+   * Close sockets for any connections that have been throttled
+   */
+  private def closeThrottledConnections(): Unit = {
+    val timeMs = time.milliseconds
+    val iter = throttledSockets.values.iterator
+    while (iter.hasNext) {
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r503308407
id: 503308872
url: https://api.github.com/repos/apache/kafka/pulls/comments/503308872
body: Could we use a constant for the name and use it everywhere? Same for the tag.
diff_hunk: @@ -1242,7 +1314,56 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
   private[network] def updateBrokerMaxConnectionRate(maxConnectionRate: Int): Unit = {
     // if there is a connection waiting on the rate throttle delay, we will let it wait the original delay even if
     // the rate limit increases, because it is just one connection per listener and the code is simpler that way
-    updateConnectionRateQuota(maxConnectionRate)
+    updateConnectionRateQuota(maxConnectionRate, BrokerQuotaEntity)
+  }
+
+  /**
+   * Update the connection rate quota for a given IP and updates quota configs for updated IPs.
+   * If an IP is given, metric config will be updated only for the given IP, otherwise
+   * all metric configs will be checked and updated if required
+   *
+   * @param ip ip to update or default if None
+   * @param maxConnectionRate new connection rate, or resets entity to default if None
+   */
+  def updateIpConnectionRate(ip: Option[String], maxConnectionRate: Option[Int]): Unit = {
+    def isIpConnectionRateMetric(metricName: MetricName) = {
+      metricName.name == "connection-accept-rate" &&
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r503308872
id: 503309826
url: https://api.github.com/repos/apache/kafka/pulls/comments/503309826
body: nit: We could use pattern matching here to treat both cases.
diff_hunk: @@ -1242,7 +1314,56 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
   private[network] def updateBrokerMaxConnectionRate(maxConnectionRate: Int): Unit = {
     // if there is a connection waiting on the rate throttle delay, we will let it wait the original delay even if
     // the rate limit increases, because it is just one connection per listener and the code is simpler that way
-    updateConnectionRateQuota(maxConnectionRate)
+    updateConnectionRateQuota(maxConnectionRate, BrokerQuotaEntity)
+  }
+
+  /**
+   * Update the connection rate quota for a given IP and updates quota configs for updated IPs.
+   * If an IP is given, metric config will be updated only for the given IP, otherwise
+   * all metric configs will be checked and updated if required
+   *
+   * @param ip ip to update or default if None
+   * @param maxConnectionRate new connection rate, or resets entity to default if None
+   */
+  def updateIpConnectionRate(ip: Option[String], maxConnectionRate: Option[Int]): Unit = {
+    def isIpConnectionRateMetric(metricName: MetricName) = {
+      metricName.name == "connection-accept-rate" &&
+      metricName.group == MetricsGroup &&
+      metricName.tags.containsKey("ip")
+    }
+
+    def shouldUpdateQuota(metric: KafkaMetric, quotaLimit: Int) = {
+      quotaLimit != metric.config.quota.bound
+    }
+
+    ip match {
+      case Some(addr) =>
+        val address = InetAddress.getByName(addr)
+        if (maxConnectionRate.isDefined) {
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r503309826
id: 503316846
url: https://api.github.com/repos/apache/kafka/pulls/comments/503316846
body: nit: Could we use directly the `Admin` client here? We don't use the ZK admin client in the suite at all so it would be better if we don't use it. I am not sure if this depends on the pending implementation that you mentioned.
diff_hunk: @@ -240,6 +256,16 @@ class DynamicConnectionQuotaTest extends BaseRequestTest {
       s"Admin client connection not closed (initial = $initialConnectionCount, current = $connectionCount)")
   }
 
+  private def updateIpConnectionRate(ip: Option[String], updatedRate: Int): Unit = {
+    adminZkClient.changeIpConfig(ip.getOrElse(ConfigEntityName.Default),
path: core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r503316846
id: 503664955
url: https://api.github.com/repos/apache/kafka/pulls/comments/503664955
body: I didn't do this because I saw that `checkQuotas` checks whether we are at the upper bound, not whether recording a new connection would throw an exception, which I suppose is why you are calling `record` with `checkQuotas = false`.

I think it makes sense to do here. The actual rate of permitted connections ends up being 1 higher than otherwise, but I think that's fine.
diff_hunk: @@ -1371,6 +1492,45 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
     }
   }
 
+  /**
+   * To avoid over-recording listener/broker connection rate, we unrecord a listener or broker connection
+   * if the IP gets throttled later.
+   *
+   * @param listenerName listener to unrecord connection
+   * @param timeMs current time in milliseconds
+   */
+  private def unrecordListenerConnection(listenerName: ListenerName, timeMs: Long): Unit = {
+    if (!protectedListener(listenerName)) {
+      brokerConnectionRateSensor.record(-1.0, timeMs, false)
+    }
+    maxConnectionsPerListener
+      .get(listenerName)
+      .foreach(_.connectionRateSensor.record(-1.0, timeMs, false))
+  }
+
+  /**
+   * Calculates the delay needed to bring the observed connection creation rate to the IP limit.
+   * If the connection would cause an IP quota violation, un-record the connection
+   *
+   * @param address
+   * @param timeMs
+   * @return
+   */
+  private def recordIpConnectionMaybeThrottle(address: InetAddress, timeMs: Long): Long = {
+    val connectionRateQuota = connectionRateForIp(address)
+    val quotaEnabled = connectionRateQuota != DynamicConfig.Ip.UnlimitedConnectionCreationRate
+    if (!quotaEnabled) {
+      return 0
+    }
+    val sensor = getOrCreateConnectionRateQuotaSensor(connectionRateForIp(address), IpQuotaEntity(address))
+    val throttleMs = recordAndGetThrottleTimeMs(sensor, timeMs)
+    if (throttleMs > 0) {
+      // unrecord the connection since we won't accept the connection
+      sensor.record(-1.0, timeMs, false)
+    }
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r503664955
id: 503665368
url: https://api.github.com/repos/apache/kafka/pulls/comments/503665368
body: yeah, that depends on pending implementation. I planned on using `adminZkClient` in the interim and then replacing it with `Admin` in the PR adding `KafkaApis` support.
diff_hunk: @@ -240,6 +256,16 @@ class DynamicConnectionQuotaTest extends BaseRequestTest {
       s"Admin client connection not closed (initial = $initialConnectionCount, current = $connectionCount)")
   }
 
+  private def updateIpConnectionRate(ip: Option[String], updatedRate: Int): Unit = {
+    adminZkClient.changeIpConfig(ip.getOrElse(ConfigEntityName.Default),
path: core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r503665368
id: 503668240
url: https://api.github.com/repos/apache/kafka/pulls/comments/503668240
body: I went with this data structure because throttle end time should be monotonic for a specific IP but not necessarily for all IPs. By maintaining a queue per IP, we can get constant time adds/removes for a throttled IP.

The downside of this is that in the case where there are no connections to unthrottle, `closeThrottledConnections` runs in `O(n)` for number of throttled IPs.

On the other hand `DelayQueue` uses a heap internally and has `O(log(n))` for each add/remove, and constant time for checking whether there are IPs to unthrottle. In scenarios where many connections will get unthrottled at once, the `DelayQueue` will perform significantly worse, since each `DelayQueue.dequeue` call will be `O(log(n))`.

I admit this could be a premature optimization, and a delay queue could work better in practice. Let me know what you think.
diff_hunk: @@ -697,6 +714,31 @@ private[kafka] class Acceptor(val endPoint: EndPoint,
         info(s"Rejected connection from ${e.ip}, address already has the configured maximum of ${e.count} connections.")
         close(endPoint.listenerName, socketChannel)
         None
+      case e: ConnectionThrottledException =>
+        val ip = socketChannel.socket.getInetAddress
+        debug(s"Delaying closing of connection from $ip for ${e.throttleTimeMs} ms")
+        val delayQueue = throttledSockets.computeIfAbsent(ip, _ => new mutable.Queue[DelayedCloseSocket])
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r503668240
id: 503670876
url: https://api.github.com/repos/apache/kafka/pulls/comments/503670876
body: I did consider this. I chose to do the work of closing connections in the acceptor thread to mirror the `Processor` thread which similarly has a `openSomeConnections()`, `closeSomeConnections()` loop.
Ditto for `Selector.poll()`

Additionally, as a future extension, we may want to re-try accepting a connection after its throttle time expires, and adding a new reaper thread would add additional complexity for that logic.
diff_hunk: @@ -600,43 +607,10 @@ private[kafka] class Acceptor(val endPoint: EndPoint,
     serverChannel.register(nioSelector, SelectionKey.OP_ACCEPT)
     startupComplete()
     try {
-      var currentProcessorIndex = 0
       while (isRunning) {
         try {
-          val ready = nioSelector.select(500)
-          if (ready > 0) {
-            val keys = nioSelector.selectedKeys()
-            val iter = keys.iterator()
-            while (iter.hasNext && isRunning) {
-              try {
-                val key = iter.next
-                iter.remove()
-
-                if (key.isAcceptable) {
-                  accept(key).foreach { socketChannel =>
-                    // Assign the channel to the next processor (using round-robin) to which the
-                    // channel can be added without blocking. If newConnections queue is full on
-                    // all processors, block until the last one is able to accept a connection.
-                    var retriesLeft = synchronized(processors.length)
-                    var processor: Processor = null
-                    do {
-                      retriesLeft -= 1
-                      processor = synchronized {
-                        // adjust the index (if necessary) and retrieve the processor atomically for
-                        // correct behaviour in case the number of processors is reduced dynamically
-                        currentProcessorIndex = currentProcessorIndex % processors.length
-                        processors(currentProcessorIndex)
-                      }
-                      currentProcessorIndex += 1
-                    } while (!assignNewConnection(socketChannel, processor, retriesLeft == 0))
-                  }
-                } else
-                  throw new IllegalStateException("Unrecognized key state for acceptor thread.")
-              } catch {
-                case e: Throwable => error("Error while accepting connection", e)
-              }
-            }
-          }
+          acceptNewConnections()
+          closeThrottledConnections()
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r503670876
id: 504219669
url: https://api.github.com/repos/apache/kafka/pulls/comments/504219669
body: actually, i thought a bit more about it and in the case where an IP is supposed to be completely throttled (rate limit == 0), we would be accepting connections at a rate of 1 which would be very weird/unacceptable behavior. I left it at is. Let me know if that makes sense or if I have some holes in my logic.
diff_hunk: @@ -1371,6 +1492,45 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
     }
   }
 
+  /**
+   * To avoid over-recording listener/broker connection rate, we unrecord a listener or broker connection
+   * if the IP gets throttled later.
+   *
+   * @param listenerName listener to unrecord connection
+   * @param timeMs current time in milliseconds
+   */
+  private def unrecordListenerConnection(listenerName: ListenerName, timeMs: Long): Unit = {
+    if (!protectedListener(listenerName)) {
+      brokerConnectionRateSensor.record(-1.0, timeMs, false)
+    }
+    maxConnectionsPerListener
+      .get(listenerName)
+      .foreach(_.connectionRateSensor.record(-1.0, timeMs, false))
+  }
+
+  /**
+   * Calculates the delay needed to bring the observed connection creation rate to the IP limit.
+   * If the connection would cause an IP quota violation, un-record the connection
+   *
+   * @param address
+   * @param timeMs
+   * @return
+   */
+  private def recordIpConnectionMaybeThrottle(address: InetAddress, timeMs: Long): Long = {
+    val connectionRateQuota = connectionRateForIp(address)
+    val quotaEnabled = connectionRateQuota != DynamicConfig.Ip.UnlimitedConnectionCreationRate
+    if (!quotaEnabled) {
+      return 0
+    }
+    val sensor = getOrCreateConnectionRateQuotaSensor(connectionRateForIp(address), IpQuotaEntity(address))
+    val throttleMs = recordAndGetThrottleTimeMs(sensor, timeMs)
+    if (throttleMs > 0) {
+      // unrecord the connection since we won't accept the connection
+      sensor.record(-1.0, timeMs, false)
+    }
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r504219669
id: 510833030
url: https://api.github.com/repos/apache/kafka/pulls/comments/510833030
body: nit: Could we make this one private?
diff_hunk: @@ -526,10 +527,14 @@ private[kafka] abstract class AbstractServerThread(connectionQuotas: ConnectionQ
     if (channel != null) {
       debug(s"Closing connection from ${channel.socket.getRemoteSocketAddress()}")
       connectionQuotas.dec(listenerName, channel.socket.getInetAddress)
-      CoreUtils.swallow(channel.socket().close(), this, Level.ERROR)
-      CoreUtils.swallow(channel.close(), this, Level.ERROR)
+      closeSocket(channel)
     }
   }
+
+  protected def closeSocket(channel: SocketChannel): Unit = {
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r510833030
id: 510867761
url: https://api.github.com/repos/apache/kafka/pulls/comments/510867761
body: Thanks for the explanation.

I do agree that in the worst case scenario where we would have all the connections ready to be unthrottled, the heap based solution would perform worse. On the other hand, if there are no connections ready to be unthrottled, checking the heap is `O(1)` whereas we would be `O(N)` where `N` is the number of throttled connections.

On average, I do believe that the number of connections ready to be unthrottled at every run of the acceptor loop will be smaller (or even zero) than the total number of throttled connections. Cleaning `M` throttling connections with the heap would be `O(M log(N))` which is better than `O(N)` if `M < N / log(N)`.

I lean towards using a delay queue at the moment.
diff_hunk: @@ -697,6 +714,31 @@ private[kafka] class Acceptor(val endPoint: EndPoint,
         info(s"Rejected connection from ${e.ip}, address already has the configured maximum of ${e.count} connections.")
         close(endPoint.listenerName, socketChannel)
         None
+      case e: ConnectionThrottledException =>
+        val ip = socketChannel.socket.getInetAddress
+        debug(s"Delaying closing of connection from $ip for ${e.throttleTimeMs} ms")
+        val delayQueue = throttledSockets.computeIfAbsent(ip, _ => new mutable.Queue[DelayedCloseSocket])
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r510867761
id: 510873494
url: https://api.github.com/repos/apache/kafka/pulls/comments/510873494
body: I wonder if using `newQuota` is correct here. My understanding is that `ip == None` means that we update the default quota which is used if there is not per ip quota defined. So, we should also check if there is a per ip quota defined before overriding it with the new default, isn't it?

I would be great if we could add more unit tests to cover this logic with multiple IPs and/or default.
diff_hunk: @@ -1246,7 +1337,57 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
   private[network] def updateBrokerMaxConnectionRate(maxConnectionRate: Int): Unit = {
     // if there is a connection waiting on the rate throttle delay, we will let it wait the original delay even if
     // the rate limit increases, because it is just one connection per listener and the code is simpler that way
-    updateConnectionRateQuota(maxConnectionRate)
+    updateConnectionRateQuota(maxConnectionRate, BrokerQuotaEntity)
+  }
+
+  /**
+   * Update the connection rate quota for a given IP and updates quota configs for updated IPs.
+   * If an IP is given, metric config will be updated only for the given IP, otherwise
+   * all metric configs will be checked and updated if required
+   *
+   * @param ip ip to update or default if None
+   * @param maxConnectionRate new connection rate, or resets entity to default if None
+   */
+  def updateIpConnectionRate(ip: Option[String], maxConnectionRate: Option[Int]): Unit = {
+    def isIpConnectionRateMetric(metricName: MetricName) = {
+      metricName.name == ConnectionRateMetricName &&
+      metricName.group == MetricsGroup &&
+      metricName.tags.containsKey(IpMetricTag)
+    }
+
+    def shouldUpdateQuota(metric: KafkaMetric, quotaLimit: Int) = {
+      quotaLimit != metric.config.quota.bound
+    }
+
+    ip match {
+      case Some(addr) =>
+        val address = InetAddress.getByName(addr)
+        maxConnectionRate match {
+          case Some(rate) =>
+            info(s"Updating max connection rate override for $address to $rate")
+            connectionRatePerIp.put(address, rate)
+          case None =>
+            info(s"Removing max connection rate override for $address")
+            connectionRatePerIp.remove(address)
+        }
+        updateConnectionRateQuota(connectionRateForIp(address), IpQuotaEntity(address))
+      case None =>
+        val newQuota = maxConnectionRate.getOrElse(DynamicConfig.Ip.DefaultConnectionCreationRate)
+        info(s"Updating default max IP connection rate to $newQuota")
+        defaultConnectionRatePerIp = newQuota
+        val allMetrics = metrics.metrics
+        allMetrics.forEach { (metricName, metric) =>
+          if (isIpConnectionRateMetric(metricName) && shouldUpdateQuota(metric, newQuota)) {
+            info(s"Updating existing connection rate sensor for ${metricName.tags} to $newQuota")
+            metric.config(rateQuotaMetricConfig(newQuota))
+          }
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r510873494
id: 510874436
url: https://api.github.com/repos/apache/kafka/pulls/comments/510874436
body: nit: Add `.` at the end of the sentence.
diff_hunk: @@ -1375,6 +1516,45 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
     }
   }
 
+  /**
+   * To avoid over-recording listener/broker connection rate, we unrecord a listener or broker connection
+   * if the IP gets throttled later.
+   *
+   * @param listenerName listener to unrecord connection
+   * @param timeMs current time in milliseconds
+   */
+  private def unrecordListenerConnection(listenerName: ListenerName, timeMs: Long): Unit = {
+    if (!protectedListener(listenerName)) {
+      brokerConnectionRateSensor.record(-1.0, timeMs, false)
+    }
+    maxConnectionsPerListener
+      .get(listenerName)
+      .foreach(_.connectionRateSensor.record(-1.0, timeMs, false))
+  }
+
+  /**
+   * Calculates the delay needed to bring the observed connection creation rate to the IP limit.
+   * If the connection would cause an IP quota violation, un-record the connection
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r510874436
id: 510874758
url: https://api.github.com/repos/apache/kafka/pulls/comments/510874758
body: nit: To be completed.
diff_hunk: @@ -1375,6 +1516,45 @@ class ConnectionQuotas(config: KafkaConfig, time: Time, metrics: Metrics) extend
     }
   }
 
+  /**
+   * To avoid over-recording listener/broker connection rate, we unrecord a listener or broker connection
+   * if the IP gets throttled later.
+   *
+   * @param listenerName listener to unrecord connection
+   * @param timeMs current time in milliseconds
+   */
+  private def unrecordListenerConnection(listenerName: ListenerName, timeMs: Long): Unit = {
+    if (!protectedListener(listenerName)) {
+      brokerConnectionRateSensor.record(-1.0, timeMs, false)
+    }
+    maxConnectionsPerListener
+      .get(listenerName)
+      .foreach(_.connectionRateSensor.record(-1.0, timeMs, false))
+  }
+
+  /**
+   * Calculates the delay needed to bring the observed connection creation rate to the IP limit.
+   * If the connection would cause an IP quota violation, un-record the connection
+   *
+   * @param address
+   * @param timeMs
+   * @return
path: core/src/main/scala/kafka/network/SocketServer.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r510874758
id: 510877388
url: https://api.github.com/repos/apache/kafka/pulls/comments/510877388
body: nit: To be completed.
diff_hunk: @@ -384,6 +386,28 @@ class AdminZkClient(zkClient: KafkaZkClient) extends Logging {
     changeEntityConfig(ConfigType.User, sanitizedEntityName, configs)
   }
 
+  /**
+   * validates the IP configs
+   * @param ip
+   * @param configs
path: core/src/main/scala/kafka/zk/AdminZkClient.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r510877388
id: 510877509
url: https://api.github.com/repos/apache/kafka/pulls/comments/510877509
body: nit: To be completed.
diff_hunk: @@ -384,6 +386,28 @@ class AdminZkClient(zkClient: KafkaZkClient) extends Logging {
     changeEntityConfig(ConfigType.User, sanitizedEntityName, configs)
   }
 
+  /**
+   * validates the IP configs
+   * @param ip
+   * @param configs
+   */
+  def validateIpConfig(ip: String, configs: Properties): Unit = {
+    if (ip != ConfigEntityName.Default && !Utils.validHostPattern(ip))
+      throw new AdminOperationException(s"IP $ip is not a valid address.")
+    DynamicConfig.Ip.validate(configs)
+  }
+
+  /**
+   * Update the config for an IP. These overrides will be persisted between sessions, and will override any default
+   * IP properties.
+   * @param ip
+   * @param configs
path: core/src/main/scala/kafka/zk/AdminZkClient.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r510877509
id: 510879191
url: https://api.github.com/repos/apache/kafka/pulls/comments/510879191
body: What is `255.255.3.4`?
diff_hunk: @@ -240,6 +256,16 @@ class DynamicConnectionQuotaTest extends BaseRequestTest {
       s"Admin client connection not closed (initial = $initialConnectionCount, current = $connectionCount)")
   }
 
+  private def updateIpConnectionRate(ip: Option[String], updatedRate: Int): Unit = {
+    adminZkClient.changeIpConfig(ip.getOrElse(ConfigEntityName.Default),
+      CoreUtils.propsWith(DynamicConfig.Ip.IpConnectionRateOverrideProp, updatedRate.toString))
+    // use a random throwaway address if ip isn't specified to get the default value
+    TestUtils.waitUntilTrue(() => servers.head.socketServer.connectionQuotas.
+      connectionRateForIp(InetAddress.getByName(ip.getOrElse("255.255.3.4"))) == updatedRate,
path: core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala
html: https://github.com/apache/kafka/pull/9386#discussion_r510879191
pull_request_number: 9386
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9382/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9382/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9382"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9382"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9382/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9382"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/6a2495a89320bec3e49420bcf28fc0dbe1f7ada1"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "3bfbe682a2246313d126045f2c5e1a0c2577bbd2",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "For IBP 2.7 onwards, fetch responses include diverging epoch and offset in fetch responses if `lastFetchedEpoch` is provided in the fetch request. This PR uses that information for truncation and avoids the additional OffsetForLeaderEpoch requests in followers when `lastFetchEpoch` is known.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9382/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9382/commits",
  "created_at": "2020-10-06T13:53:04Z",
  "diff_url": "https://github.com/apache/kafka/pull/9382.diff",
  "draft": false,
  "head": {
    "label": "rajinisivaram:KAFKA-10554-truncation",
    "ref": "KAFKA-10554-truncation",
    "repo": {
      "archive_url": "https://api.github.com/repos/rajinisivaram/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/rajinisivaram/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/rajinisivaram/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/rajinisivaram/kafka/branches{/branch}",
      "clone_url": "https://github.com/rajinisivaram/kafka.git",
      "collaborators_url": "https://api.github.com/repos/rajinisivaram/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/rajinisivaram/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/rajinisivaram/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/rajinisivaram/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/rajinisivaram/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/rajinisivaram/kafka/contributors",
      "created_at": "2015-09-11T08:16:17Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/rajinisivaram/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/rajinisivaram/kafka/downloads",
      "events_url": "https://api.github.com/repos/rajinisivaram/kafka/events",
      "fork": true,
      "forks": 2,
      "forks_count": 2,
      "forks_url": "https://api.github.com/repos/rajinisivaram/kafka/forks",
      "full_name": "rajinisivaram/kafka",
      "git_commits_url": "https://api.github.com/repos/rajinisivaram/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/rajinisivaram/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/rajinisivaram/kafka/git/tags{/sha}",
      "git_url": "git://github.com/rajinisivaram/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/rajinisivaram/kafka/hooks",
      "html_url": "https://github.com/rajinisivaram/kafka",
      "id": 42296329,
      "issue_comment_url": "https://api.github.com/repos/rajinisivaram/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/rajinisivaram/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/rajinisivaram/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/rajinisivaram/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/rajinisivaram/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/rajinisivaram/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/rajinisivaram/kafka/merges",
      "milestones_url": "https://api.github.com/repos/rajinisivaram/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk0MjI5NjMyOQ==",
      "notifications_url": "https://api.github.com/repos/rajinisivaram/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/13164074?v=4",
        "events_url": "https://api.github.com/users/rajinisivaram/events{/privacy}",
        "followers_url": "https://api.github.com/users/rajinisivaram/followers",
        "following_url": "https://api.github.com/users/rajinisivaram/following{/other_user}",
        "gists_url": "https://api.github.com/users/rajinisivaram/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/rajinisivaram",
        "id": 13164074,
        "login": "rajinisivaram",
        "node_id": "MDQ6VXNlcjEzMTY0MDc0",
        "organizations_url": "https://api.github.com/users/rajinisivaram/orgs",
        "received_events_url": "https://api.github.com/users/rajinisivaram/received_events",
        "repos_url": "https://api.github.com/users/rajinisivaram/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/rajinisivaram/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rajinisivaram/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/rajinisivaram"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/rajinisivaram/kafka/pulls{/number}",
      "pushed_at": "2020-10-26T09:14:45Z",
      "releases_url": "https://api.github.com/repos/rajinisivaram/kafka/releases{/id}",
      "size": 103457,
      "ssh_url": "git@github.com:rajinisivaram/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/rajinisivaram/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/rajinisivaram/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/rajinisivaram/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/rajinisivaram/kafka/subscription",
      "svn_url": "https://github.com/rajinisivaram/kafka",
      "tags_url": "https://api.github.com/repos/rajinisivaram/kafka/tags",
      "teams_url": "https://api.github.com/repos/rajinisivaram/kafka/teams",
      "trees_url": "https://api.github.com/repos/rajinisivaram/kafka/git/trees{/sha}",
      "updated_at": "2019-05-17T10:01:38Z",
      "url": "https://api.github.com/repos/rajinisivaram/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "6a2495a89320bec3e49420bcf28fc0dbe1f7ada1",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/13164074?v=4",
      "events_url": "https://api.github.com/users/rajinisivaram/events{/privacy}",
      "followers_url": "https://api.github.com/users/rajinisivaram/followers",
      "following_url": "https://api.github.com/users/rajinisivaram/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajinisivaram/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rajinisivaram",
      "id": 13164074,
      "login": "rajinisivaram",
      "node_id": "MDQ6VXNlcjEzMTY0MDc0",
      "organizations_url": "https://api.github.com/users/rajinisivaram/orgs",
      "received_events_url": "https://api.github.com/users/rajinisivaram/received_events",
      "repos_url": "https://api.github.com/users/rajinisivaram/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rajinisivaram/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajinisivaram/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rajinisivaram"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9382",
  "id": 498564192,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9382",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "7a9f894507d9d5938197ac91068d4397b4800f9e",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDk4NTY0MTky",
  "number": 9382,
  "patch_url": "https://github.com/apache/kafka/pull/9382.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9382/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/6a2495a89320bec3e49420bcf28fc0dbe1f7ada1",
  "title": "KAFKA-10554; Perform follower truncation based on diverging epochs in Fetch response",
  "updated_at": "2020-10-27T19:27:22Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9382",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/13164074?v=4",
    "events_url": "https://api.github.com/users/rajinisivaram/events{/privacy}",
    "followers_url": "https://api.github.com/users/rajinisivaram/followers",
    "following_url": "https://api.github.com/users/rajinisivaram/following{/other_user}",
    "gists_url": "https://api.github.com/users/rajinisivaram/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/rajinisivaram",
    "id": 13164074,
    "login": "rajinisivaram",
    "node_id": "MDQ6VXNlcjEzMTY0MDc0",
    "organizations_url": "https://api.github.com/users/rajinisivaram/orgs",
    "received_events_url": "https://api.github.com/users/rajinisivaram/received_events",
    "repos_url": "https://api.github.com/users/rajinisivaram/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/rajinisivaram/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rajinisivaram/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/rajinisivaram"
  }
}
json_root is_array: false
json_root is_object: true
number: 9382
url: https://api.github.com/repos/apache/kafka/pulls/9382
title: KAFKA-10554; Perform follower truncation based on diverging epochs in Fetch response
body: For IBP 2.7 onwards, fetch responses include diverging epoch and offset in fetch responses if `lastFetchedEpoch` is provided in the fetch request. This PR uses that information for truncation and avoids the additional OffsetForLeaderEpoch requests in followers when `lastFetchEpoch` is known.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9382/comments
id: 500743939
url: https://api.github.com/repos/apache/kafka/pulls/comments/500743939
body: NIT: Should this be the first check in the if () statement ?
diff_hunk: @@ -432,14 +455,22 @@ abstract class AbstractFetcherThread(name: String,
       failedPartitions.removeAll(initialFetchStates.keySet)
 
       initialFetchStates.forKeyValue { (tp, initialFetchState) =>
-        // We can skip the truncation step iff the leader epoch matches the existing epoch
+        // For IBP 2.7 onwards, we can rely on truncation based on diverging data returned in fetch responses.
+        // For older versions, we can skip the truncation step iff the leader epoch matches the existing epoch
         val currentState = partitionStates.stateValue(tp)
-        val updatedState = if (currentState != null && currentState.currentLeaderEpoch == initialFetchState.leaderEpoch) {
+        val updatedState = if (initialFetchState.offset >= 0 && isTruncationOnFetchSupported && initialFetchState.lastFetchedEpoch.nonEmpty) {
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r500743939
id: 501199512
url: https://api.github.com/repos/apache/kafka/pulls/comments/501199512
body: @rite2nikhil Thanks for the review. Did you mean changing this to:
```
if (isTruncationOnFetchSupported && initialFetchState.lastFetchedEpoch.nonEmpty && initialFetchState.offset >= 0)
```
diff_hunk: @@ -432,14 +455,22 @@ abstract class AbstractFetcherThread(name: String,
       failedPartitions.removeAll(initialFetchStates.keySet)
 
       initialFetchStates.forKeyValue { (tp, initialFetchState) =>
-        // We can skip the truncation step iff the leader epoch matches the existing epoch
+        // For IBP 2.7 onwards, we can rely on truncation based on diverging data returned in fetch responses.
+        // For older versions, we can skip the truncation step iff the leader epoch matches the existing epoch
         val currentState = partitionStates.stateValue(tp)
-        val updatedState = if (currentState != null && currentState.currentLeaderEpoch == initialFetchState.leaderEpoch) {
+        val updatedState = if (initialFetchState.offset >= 0 && isTruncationOnFetchSupported && initialFetchState.lastFetchedEpoch.nonEmpty) {
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r501199512
id: 504331562
url: https://api.github.com/repos/apache/kafka/pulls/comments/504331562
body: Wondering if it might be better not to change this type since it is used in contexts where `lastFetchedEpoch` is not relevant. Following the types through here, we first have use `InitialFetchState` in `AbstractFetcherManager`:
```scala
def addFetcherForPartitions(partitionAndOffsets: Map[TopicPartition, InitialFetchState])
```
We then convert to `OffsetAndEpoch` which gets passed down to `AbstractFetcherThread`:
```scala
def addPartitions(initialFetchStates: Map[TopicPartition, OffsetAndEpoch]): Set[TopicPartition]
```
Then this gets converted to `PartitionFetchState`. I wonder if it's possible to skip the conversion through `OffsetAndEpoch` and use `InitialFetchState` consistently? Perhaps the only reason the current code doesn't do that is that `InitialFetchState` includes the broker end point which is not really relevant to the fetcher thread. Maybe that's not such a big deal?
diff_hunk: @@ -813,8 +852,9 @@ case class OffsetTruncationState(offset: Long, truncationCompleted: Boolean) {
   override def toString: String = "offset:%d-truncationCompleted:%b".format(offset, truncationCompleted)
 }
 
-case class OffsetAndEpoch(offset: Long, leaderEpoch: Int) {
+case class OffsetAndEpoch(offset: Long, leaderEpoch: Int, lastFetchedEpoch: Option[Int] = None) {
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r504331562
id: 504332662
url: https://api.github.com/repos/apache/kafka/pulls/comments/504332662
body: nit: unnecessary parenthesis
diff_hunk: @@ -432,14 +455,22 @@ abstract class AbstractFetcherThread(name: String,
       failedPartitions.removeAll(initialFetchStates.keySet)
 
       initialFetchStates.forKeyValue { (tp, initialFetchState) =>
-        // We can skip the truncation step iff the leader epoch matches the existing epoch
+        // For IBP 2.7 onwards, we can rely on truncation based on diverging data returned in fetch responses.
+        // For older versions, we can skip the truncation step iff the leader epoch matches the existing epoch
         val currentState = partitionStates.stateValue(tp)
-        val updatedState = if (currentState != null && currentState.currentLeaderEpoch == initialFetchState.leaderEpoch) {
+        val updatedState = if (initialFetchState.offset >= 0 && isTruncationOnFetchSupported && initialFetchState.lastFetchedEpoch.nonEmpty) {
+          if (currentState != null)
+            currentState
+          else
+            PartitionFetchState(initialFetchState.offset, None, initialFetchState.leaderEpoch,
+              state = Fetching, initialFetchState.lastFetchedEpoch)
+        } else if (currentState != null && (currentState.currentLeaderEpoch == initialFetchState.leaderEpoch)) {
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r504332662
id: 504341252
url: https://api.github.com/repos/apache/kafka/pulls/comments/504341252
body: Borderline overkill perhaps, but we could check if `epochEndOffsets` is non-empty before acquiring the lock
diff_hunk: @@ -225,6 +227,20 @@ abstract class AbstractFetcherThread(name: String,
     }
   }
 
+  private def truncateOnFetchResponse(responseData: Map[TopicPartition, FetchData]): Unit = {
+    val epochEndOffsets = responseData
+      .filter { case (tp, fetchData) => fetchData.error == Errors.NONE && fetchData.divergingEpoch.isPresent }
+      .map { case (tp, fetchData) =>
+        val divergingEpoch = fetchData.divergingEpoch.get
+        tp -> new EpochEndOffset(Errors.NONE, divergingEpoch.epoch, divergingEpoch.endOffset)
+      }.toMap
+    inLock(partitionMapLock) {
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r504341252
id: 504343765
url: https://api.github.com/repos/apache/kafka/pulls/comments/504343765
body: Rather than doing an additional pass over the response partitions, would it be reasonable to build `epochEndOffsets` inline with the other error handling in `processFetchRequest`?
diff_hunk: @@ -225,6 +227,20 @@ abstract class AbstractFetcherThread(name: String,
     }
   }
 
+  private def truncateOnFetchResponse(responseData: Map[TopicPartition, FetchData]): Unit = {
+    val epochEndOffsets = responseData
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r504343765
id: 504345658
url: https://api.github.com/repos/apache/kafka/pulls/comments/504345658
body: Can be done separately, but it would be nice to figure out how to move this logic into `ReplicaAlterLogDirManager` since this comment seems to only make sense if we assume this is the log dir fetcher and reconciliation with the leader has already completed. 

In fact, I wonder if it is possible to get rid of this code entirely. If the log dir fetcher is also tracking `lastFetchedEpoch`, then we could rely on detecting truncation dynamically through `ReplicaManager.fetchMessages` instead of the current somewhat clumsy coordination with the replica fetcher.
diff_hunk: @@ -408,9 +428,12 @@ abstract class AbstractFetcherThread(name: String,
   def markPartitionsForTruncation(topicPartition: TopicPartition, truncationOffset: Long): Unit = {
     partitionMapLock.lockInterruptibly()
     try {
+      // It is safe to reset `lastFetchedEpoch` here since we don't expect diverging offsets
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r504345658
id: 504347990
url: https://api.github.com/repos/apache/kafka/pulls/comments/504347990
body: Below we only use `currentState` if the current epoch matches the initial epoch. Why is it safe to skip that check here?
diff_hunk: @@ -432,14 +455,22 @@ abstract class AbstractFetcherThread(name: String,
       failedPartitions.removeAll(initialFetchStates.keySet)
 
       initialFetchStates.forKeyValue { (tp, initialFetchState) =>
-        // We can skip the truncation step iff the leader epoch matches the existing epoch
+        // For IBP 2.7 onwards, we can rely on truncation based on diverging data returned in fetch responses.
+        // For older versions, we can skip the truncation step iff the leader epoch matches the existing epoch
         val currentState = partitionStates.stateValue(tp)
-        val updatedState = if (currentState != null && currentState.currentLeaderEpoch == initialFetchState.leaderEpoch) {
+        val updatedState = if (initialFetchState.offset >= 0 && isTruncationOnFetchSupported && initialFetchState.lastFetchedEpoch.nonEmpty) {
+          if (currentState != null)
+            currentState
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r504347990
id: 504349409
url: https://api.github.com/repos/apache/kafka/pulls/comments/504349409
body: Good catch here and in `FetchSession`. Do you think we should consider doing these fixes separately so that we can get them into 2.7? Otherwise it might be difficult to tie this behavior to the 2.7 IBP.
diff_hunk: @@ -77,6 +78,7 @@ class DelayedFetch(delayMs: Long,
    * Case E: This broker is the leader, but the requested epoch is now fenced
    * Case F: The fetch offset locates not on the last segment of the log
    * Case G: The accumulated bytes from all the fetching partitions exceeds the minimum bytes
+   * Case H: A diverging epoch was found, return response to trigger truncation
path: core/src/main/scala/kafka/server/DelayedFetch.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r504349409
id: 504726150
url: https://api.github.com/repos/apache/kafka/pulls/comments/504726150
body: I had initially added another class because I didn't want to change `OffsetAndEpoch`, but I removed that because it looked like too many similar classes. Your suggestion to use InitialFetchState sounds much better, updated.
diff_hunk: @@ -813,8 +852,9 @@ case class OffsetTruncationState(offset: Long, truncationCompleted: Boolean) {
   override def toString: String = "offset:%d-truncationCompleted:%b".format(offset, truncationCompleted)
 }
 
-case class OffsetAndEpoch(offset: Long, leaderEpoch: Int) {
+case class OffsetAndEpoch(offset: Long, leaderEpoch: Int, lastFetchedEpoch: Option[Int] = None) {
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r504726150
id: 504727381
url: https://api.github.com/repos/apache/kafka/pulls/comments/504727381
body: Updated. The method is still there for older versions, but it is now disabled with IBP 2.7.
diff_hunk: @@ -408,9 +428,12 @@ abstract class AbstractFetcherThread(name: String,
   def markPartitionsForTruncation(topicPartition: TopicPartition, truncationOffset: Long): Unit = {
     partitionMapLock.lockInterruptibly()
     try {
+      // It is safe to reset `lastFetchedEpoch` here since we don't expect diverging offsets
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r504727381
id: 504729807
url: https://api.github.com/repos/apache/kafka/pulls/comments/504729807
body: I refactored this code a bit and added a check for Fetching state. Not sure if I have missed something though. I think we can continue to fetch without truncating if currentState is Fetching when `lastFetchedEpoch` is known. If we need to truncate, we will do that later when we get told about diverging epochs. Does that make sense?
diff_hunk: @@ -432,14 +455,22 @@ abstract class AbstractFetcherThread(name: String,
       failedPartitions.removeAll(initialFetchStates.keySet)
 
       initialFetchStates.forKeyValue { (tp, initialFetchState) =>
-        // We can skip the truncation step iff the leader epoch matches the existing epoch
+        // For IBP 2.7 onwards, we can rely on truncation based on diverging data returned in fetch responses.
+        // For older versions, we can skip the truncation step iff the leader epoch matches the existing epoch
         val currentState = partitionStates.stateValue(tp)
-        val updatedState = if (currentState != null && currentState.currentLeaderEpoch == initialFetchState.leaderEpoch) {
+        val updatedState = if (initialFetchState.offset >= 0 && isTruncationOnFetchSupported && initialFetchState.lastFetchedEpoch.nonEmpty) {
+          if (currentState != null)
+            currentState
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r504729807
id: 504731267
url: https://api.github.com/repos/apache/kafka/pulls/comments/504731267
body: Makes sense, will submit another PR with just those changes.
diff_hunk: @@ -77,6 +78,7 @@ class DelayedFetch(delayMs: Long,
    * Case E: This broker is the leader, but the requested epoch is now fenced
    * Case F: The fetch offset locates not on the last segment of the log
    * Case G: The accumulated bytes from all the fetching partitions exceeds the minimum bytes
+   * Case H: A diverging epoch was found, return response to trigger truncation
path: core/src/main/scala/kafka/server/DelayedFetch.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r504731267
id: 504803409
url: https://api.github.com/repos/apache/kafka/pulls/comments/504803409
body: PR with the changes in DelayedFetch and FetchSession: https://github.com/apache/kafka/pull/9434
diff_hunk: @@ -77,6 +78,7 @@ class DelayedFetch(delayMs: Long,
    * Case E: This broker is the leader, but the requested epoch is now fenced
    * Case F: The fetch offset locates not on the last segment of the log
    * Case G: The accumulated bytes from all the fetching partitions exceeds the minimum bytes
+   * Case H: A diverging epoch was found, return response to trigger truncation
path: core/src/main/scala/kafka/server/DelayedFetch.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r504803409
id: 504803418
url: https://api.github.com/repos/apache/kafka/pulls/comments/504803418
body: PR with the changes in DelayedFetch and FetchSession: https://github.com/apache/kafka/pull/9434
diff_hunk: @@ -77,6 +78,7 @@ class DelayedFetch(delayMs: Long,
    * Case E: This broker is the leader, but the requested epoch is now fenced
    * Case F: The fetch offset locates not on the last segment of the log
    * Case G: The accumulated bytes from all the fetching partitions exceeds the minimum bytes
+   * Case H: A diverging epoch was found, return response to trigger truncation
path: core/src/main/scala/kafka/server/DelayedFetch.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r504803418
id: 507200627
url: https://api.github.com/repos/apache/kafka/pulls/comments/507200627
body: yes
diff_hunk: @@ -432,14 +455,22 @@ abstract class AbstractFetcherThread(name: String,
       failedPartitions.removeAll(initialFetchStates.keySet)
 
       initialFetchStates.forKeyValue { (tp, initialFetchState) =>
-        // We can skip the truncation step iff the leader epoch matches the existing epoch
+        // For IBP 2.7 onwards, we can rely on truncation based on diverging data returned in fetch responses.
+        // For older versions, we can skip the truncation step iff the leader epoch matches the existing epoch
         val currentState = partitionStates.stateValue(tp)
-        val updatedState = if (currentState != null && currentState.currentLeaderEpoch == initialFetchState.leaderEpoch) {
+        val updatedState = if (initialFetchState.offset >= 0 && isTruncationOnFetchSupported && initialFetchState.lastFetchedEpoch.nonEmpty) {
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r507200627
id: 509470606
url: https://api.github.com/repos/apache/kafka/pulls/comments/509470606
body: Is it not possible that the `InitialFetchState` has a bump to the current leader epoch? We will still need the latest epoch in order to continue fetching.
diff_hunk: @@ -426,21 +454,42 @@ abstract class AbstractFetcherThread(name: String,
     warn(s"Partition $topicPartition marked as failed")
   }
 
-  def addPartitions(initialFetchStates: Map[TopicPartition, OffsetAndEpoch]): Set[TopicPartition] = {
+  /**
+   * Returns initial partition fetch state based on current state and the provided `initialFetchState`.
+   * From IBP 2.7 onwards, we can rely on truncation based on diverging data returned in fetch responses.
+   * For older versions, we can skip the truncation step iff the leader epoch matches the existing epoch.
+   */
+  private def partitionFetchState(tp: TopicPartition, initialFetchState: InitialFetchState, currentState: PartitionFetchState): PartitionFetchState = {
+    if (isTruncationOnFetchSupported && initialFetchState.initOffset >= 0 && initialFetchState.lastFetchedEpoch.nonEmpty) {
+      if (currentState == null) {
+        return PartitionFetchState(initialFetchState.initOffset, None, initialFetchState.currentLeaderEpoch,
+          state = Fetching, initialFetchState.lastFetchedEpoch)
+      }
+      // If we are in `Fetching` state can continue to fetch regardless of current leader epoch and truncate
+      // if necessary based on diverging epochs returned by the leader. If we are currently in Truncating state,
+      // fall through and handle based on current epoch.
+      if (currentState.state == Fetching) {
+        return currentState
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r509470606
id: 509472854
url: https://api.github.com/repos/apache/kafka/pulls/comments/509472854
body: Do we need to adjust this? I think we want to remain in the `Fetching` state if truncation detection is through `Fetch`.
diff_hunk: @@ -461,8 +510,9 @@ abstract class AbstractFetcherThread(name: String,
         val maybeTruncationComplete = fetchOffsets.get(topicPartition) match {
           case Some(offsetTruncationState) =>
             val state = if (offsetTruncationState.truncationCompleted) Fetching else Truncating
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r509472854
id: 509482332
url: https://api.github.com/repos/apache/kafka/pulls/comments/509482332
body: This is a little unclear to me. I guess it is safe to reset `lastFetchedEpoch` as long as we reinitialize it after the next leader change. On the other hand, it seems safer to always retain the value.
diff_hunk: @@ -461,8 +510,9 @@ abstract class AbstractFetcherThread(name: String,
         val maybeTruncationComplete = fetchOffsets.get(topicPartition) match {
           case Some(offsetTruncationState) =>
             val state = if (offsetTruncationState.truncationCompleted) Fetching else Truncating
+            // Resetting `lastFetchedEpoch` since we are truncating and don't expect diverging epoch in the next fetch
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r509482332
id: 509484674
url: https://api.github.com/repos/apache/kafka/pulls/comments/509484674
body: Again it seems safe to keep `lastFetchedEpoch` in sync with the local log. If we have done a full truncation above, then `lastFetchedEpoch` will be `None`, but otherwise it seems like we should set it.
diff_hunk: @@ -629,7 +680,9 @@ abstract class AbstractFetcherThread(name: String,
 
       val initialLag = leaderEndOffset - offsetToFetch
       fetcherLagStats.getAndMaybePut(topicPartition).lag = initialLag
-      PartitionFetchState(offsetToFetch, Some(initialLag), currentLeaderEpoch, state = Fetching)
+      // We don't expect diverging epochs from the next fetch request, so resetting `lastFetchedEpoch`
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r509484674
id: 509493187
url: https://api.github.com/repos/apache/kafka/pulls/comments/509493187
body: Do we need to initialize `lastFetchedEpoch`? It seems like the log may not be empty at this point.
diff_hunk: @@ -770,7 +770,7 @@ class ReplicaManager(val config: KafkaConfig,
             logManager.abortAndPauseCleaning(topicPartition)
 
             val initialFetchState = InitialFetchState(BrokerEndPoint(config.brokerId, "localhost", -1),
-              partition.getLeaderEpoch, futureLog.highWatermark)
+              partition.getLeaderEpoch, futureLog.highWatermark, lastFetchedEpoch = None)
path: core/src/main/scala/kafka/server/ReplicaManager.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r509493187
id: 509504185
url: https://api.github.com/repos/apache/kafka/pulls/comments/509504185
body: This doesn't seem right. The last fetched epoch is supposed to represent the epoch of the last fetched batch. The fetcher could be fetching the data from an older epoch here.
diff_hunk: @@ -341,11 +352,18 @@ abstract class AbstractFetcherThread(name: String,
                       // ReplicaDirAlterThread may have removed topicPartition from the partitionStates after processing the partition data
                       if (validBytes > 0 && partitionStates.contains(topicPartition)) {
                         // Update partitionStates only if there is no exception during processPartitionData
-                        val newFetchState = PartitionFetchState(nextOffset, Some(lag), currentFetchState.currentLeaderEpoch, state = Fetching)
+                        val newFetchState = PartitionFetchState(nextOffset, Some(lag),
+                          currentFetchState.currentLeaderEpoch, state = Fetching,
+                          Some(currentFetchState.currentLeaderEpoch))
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r509504185
id: 511046915
url: https://api.github.com/repos/apache/kafka/pulls/comments/511046915
body: Updated.
diff_hunk: @@ -426,21 +454,42 @@ abstract class AbstractFetcherThread(name: String,
     warn(s"Partition $topicPartition marked as failed")
   }
 
-  def addPartitions(initialFetchStates: Map[TopicPartition, OffsetAndEpoch]): Set[TopicPartition] = {
+  /**
+   * Returns initial partition fetch state based on current state and the provided `initialFetchState`.
+   * From IBP 2.7 onwards, we can rely on truncation based on diverging data returned in fetch responses.
+   * For older versions, we can skip the truncation step iff the leader epoch matches the existing epoch.
+   */
+  private def partitionFetchState(tp: TopicPartition, initialFetchState: InitialFetchState, currentState: PartitionFetchState): PartitionFetchState = {
+    if (isTruncationOnFetchSupported && initialFetchState.initOffset >= 0 && initialFetchState.lastFetchedEpoch.nonEmpty) {
+      if (currentState == null) {
+        return PartitionFetchState(initialFetchState.initOffset, None, initialFetchState.currentLeaderEpoch,
+          state = Fetching, initialFetchState.lastFetchedEpoch)
+      }
+      // If we are in `Fetching` state can continue to fetch regardless of current leader epoch and truncate
+      // if necessary based on diverging epochs returned by the leader. If we are currently in Truncating state,
+      // fall through and handle based on current epoch.
+      if (currentState.state == Fetching) {
+        return currentState
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r511046915
id: 511047109
url: https://api.github.com/repos/apache/kafka/pulls/comments/511047109
body: Updated.
diff_hunk: @@ -461,8 +510,9 @@ abstract class AbstractFetcherThread(name: String,
         val maybeTruncationComplete = fetchOffsets.get(topicPartition) match {
           case Some(offsetTruncationState) =>
             val state = if (offsetTruncationState.truncationCompleted) Fetching else Truncating
+            // Resetting `lastFetchedEpoch` since we are truncating and don't expect diverging epoch in the next fetch
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r511047109
id: 511047510
url: https://api.github.com/repos/apache/kafka/pulls/comments/511047510
body: Updated
diff_hunk: @@ -629,7 +680,9 @@ abstract class AbstractFetcherThread(name: String,
 
       val initialLag = leaderEndOffset - offsetToFetch
       fetcherLagStats.getAndMaybePut(topicPartition).lag = initialLag
-      PartitionFetchState(offsetToFetch, Some(initialLag), currentLeaderEpoch, state = Fetching)
+      // We don't expect diverging epochs from the next fetch request, so resetting `lastFetchedEpoch`
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r511047510
id: 511047757
url: https://api.github.com/repos/apache/kafka/pulls/comments/511047757
body: Oops, fixed.
diff_hunk: @@ -341,11 +352,18 @@ abstract class AbstractFetcherThread(name: String,
                       // ReplicaDirAlterThread may have removed topicPartition from the partitionStates after processing the partition data
                       if (validBytes > 0 && partitionStates.contains(topicPartition)) {
                         // Update partitionStates only if there is no exception during processPartitionData
-                        val newFetchState = PartitionFetchState(nextOffset, Some(lag), currentFetchState.currentLeaderEpoch, state = Fetching)
+                        val newFetchState = PartitionFetchState(nextOffset, Some(lag),
+                          currentFetchState.currentLeaderEpoch, state = Fetching,
+                          Some(currentFetchState.currentLeaderEpoch))
path: core/src/main/scala/kafka/server/AbstractFetcherThread.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r511047757
id: 511051808
url: https://api.github.com/repos/apache/kafka/pulls/comments/511051808
body: I had reset this because `ReassignPartitionsIntegrationTest.testAlterLogDirReassignmentThrottle` was failing consistently when the offset was test. Having spent a whole day looking at what I had broken, I think it is an existing issue. The test itself looks new and I can recreate it on trunk. Looks like https://issues.apache.org/jira/browse/KAFKA-9087. Will look into that separately. For now, I have updated this path.
diff_hunk: @@ -770,7 +770,7 @@ class ReplicaManager(val config: KafkaConfig,
             logManager.abortAndPauseCleaning(topicPartition)
 
             val initialFetchState = InitialFetchState(BrokerEndPoint(config.brokerId, "localhost", -1),
-              partition.getLeaderEpoch, futureLog.highWatermark)
+              partition.getLeaderEpoch, futureLog.highWatermark, lastFetchedEpoch = None)
path: core/src/main/scala/kafka/server/ReplicaManager.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r511051808
id: 511174838
url: https://api.github.com/repos/apache/kafka/pulls/comments/511174838
body: Looking at this again, I think a bit more work is required to set the offsets and epoch correctly for AlterLogDirsThread in order to use `lastFetchedEpoch`. So I have reverted the changes for ReplicaAlterLogDirsThread. Will do that in a follow-on PR instead. In this PR, we will use the old truncation path in this case.
diff_hunk: @@ -770,7 +770,7 @@ class ReplicaManager(val config: KafkaConfig,
             logManager.abortAndPauseCleaning(topicPartition)
 
             val initialFetchState = InitialFetchState(BrokerEndPoint(config.brokerId, "localhost", -1),
-              partition.getLeaderEpoch, futureLog.highWatermark)
+              partition.getLeaderEpoch, futureLog.highWatermark, lastFetchedEpoch = None)
path: core/src/main/scala/kafka/server/ReplicaManager.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r511174838
id: 512370043
url: https://api.github.com/repos/apache/kafka/pulls/comments/512370043
body: nit: not sure how much it matters, but maybe we can avoid the extra garbage and just use an integer until we're ready to build the result?
diff_hunk: @@ -1388,6 +1390,7 @@ class Log(@volatile private var _dir: File,
     var validBytesCount = 0
     var firstOffset: Option[Long] = None
     var lastOffset = -1L
+    var lastLeaderEpoch: Option[Int] = None
path: core/src/main/scala/kafka/log/Log.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r512370043
id: 512870130
url: https://api.github.com/repos/apache/kafka/pulls/comments/512870130
body: Sounds fair.
diff_hunk: @@ -770,7 +770,7 @@ class ReplicaManager(val config: KafkaConfig,
             logManager.abortAndPauseCleaning(topicPartition)
 
             val initialFetchState = InitialFetchState(BrokerEndPoint(config.brokerId, "localhost", -1),
-              partition.getLeaderEpoch, futureLog.highWatermark)
+              partition.getLeaderEpoch, futureLog.highWatermark, lastFetchedEpoch = None)
path: core/src/main/scala/kafka/server/ReplicaManager.scala
html: https://github.com/apache/kafka/pull/9382#discussion_r512870130
pull_request_number: 9382
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9381/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9381/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9381"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9381"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9381/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9381"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/62a59a5f30acb219dc3a4e9891593fb1ad400342"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "c77183dbb323d1aa4b72ebcfedeac9947c3c76d0",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This gives the possibility of converting a table into a stream using a mapper with the new and old values as arguments.\r\n\r\n[KIP-675](https://cwiki.apache.org/confluence/display/KAFKA/KIP-675%3A+Convert+KTable+to+a+KStream+using+the+previous+value)\r\n\r\nKTableImpl tests complete with new methods.\r\n \r\n\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9381/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9381/commits",
  "created_at": "2020-10-06T13:17:24Z",
  "diff_url": "https://github.com/apache/kafka/pull/9381.diff",
  "draft": false,
  "head": {
    "label": "javierfreire:PreviousMapper",
    "ref": "PreviousMapper",
    "repo": {
      "archive_url": "https://api.github.com/repos/javierfreire/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/javierfreire/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/javierfreire/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/javierfreire/kafka/branches{/branch}",
      "clone_url": "https://github.com/javierfreire/kafka.git",
      "collaborators_url": "https://api.github.com/repos/javierfreire/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/javierfreire/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/javierfreire/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/javierfreire/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/javierfreire/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/javierfreire/kafka/contributors",
      "created_at": "2020-10-02T15:10:48Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/javierfreire/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/javierfreire/kafka/downloads",
      "events_url": "https://api.github.com/repos/javierfreire/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/javierfreire/kafka/forks",
      "full_name": "javierfreire/kafka",
      "git_commits_url": "https://api.github.com/repos/javierfreire/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/javierfreire/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/javierfreire/kafka/git/tags{/sha}",
      "git_url": "git://github.com/javierfreire/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/javierfreire/kafka/hooks",
      "html_url": "https://github.com/javierfreire/kafka",
      "id": 300653133,
      "issue_comment_url": "https://api.github.com/repos/javierfreire/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/javierfreire/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/javierfreire/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/javierfreire/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/javierfreire/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/javierfreire/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/javierfreire/kafka/merges",
      "milestones_url": "https://api.github.com/repos/javierfreire/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDA2NTMxMzM=",
      "notifications_url": "https://api.github.com/repos/javierfreire/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/45098297?v=4",
        "events_url": "https://api.github.com/users/javierfreire/events{/privacy}",
        "followers_url": "https://api.github.com/users/javierfreire/followers",
        "following_url": "https://api.github.com/users/javierfreire/following{/other_user}",
        "gists_url": "https://api.github.com/users/javierfreire/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/javierfreire",
        "id": 45098297,
        "login": "javierfreire",
        "node_id": "MDQ6VXNlcjQ1MDk4Mjk3",
        "organizations_url": "https://api.github.com/users/javierfreire/orgs",
        "received_events_url": "https://api.github.com/users/javierfreire/received_events",
        "repos_url": "https://api.github.com/users/javierfreire/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/javierfreire/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/javierfreire/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/javierfreire"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/javierfreire/kafka/pulls{/number}",
      "pushed_at": "2020-10-08T16:29:06Z",
      "releases_url": "https://api.github.com/repos/javierfreire/kafka/releases{/id}",
      "size": 107588,
      "ssh_url": "git@github.com:javierfreire/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/javierfreire/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/javierfreire/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/javierfreire/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/javierfreire/kafka/subscription",
      "svn_url": "https://github.com/javierfreire/kafka",
      "tags_url": "https://api.github.com/repos/javierfreire/kafka/tags",
      "teams_url": "https://api.github.com/repos/javierfreire/kafka/teams",
      "trees_url": "https://api.github.com/repos/javierfreire/kafka/git/trees{/sha}",
      "updated_at": "2020-10-08T16:24:48Z",
      "url": "https://api.github.com/repos/javierfreire/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "62a59a5f30acb219dc3a4e9891593fb1ad400342",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/45098297?v=4",
      "events_url": "https://api.github.com/users/javierfreire/events{/privacy}",
      "followers_url": "https://api.github.com/users/javierfreire/followers",
      "following_url": "https://api.github.com/users/javierfreire/following{/other_user}",
      "gists_url": "https://api.github.com/users/javierfreire/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/javierfreire",
      "id": 45098297,
      "login": "javierfreire",
      "node_id": "MDQ6VXNlcjQ1MDk4Mjk3",
      "organizations_url": "https://api.github.com/users/javierfreire/orgs",
      "received_events_url": "https://api.github.com/users/javierfreire/received_events",
      "repos_url": "https://api.github.com/users/javierfreire/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/javierfreire/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/javierfreire/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/javierfreire"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9381",
  "id": 498539157,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9381",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "5cee5c390f1f8b603fd50f15fc70bddfb9e8a514",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDk4NTM5MTU3",
  "number": 9381,
  "patch_url": "https://github.com/apache/kafka/pull/9381.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9381/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/62a59a5f30acb219dc3a4e9891593fb1ad400342",
  "title": "KIP-675: Convert KTable to a KStream using the previous value",
  "updated_at": "2020-10-08T16:29:10Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9381",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/45098297?v=4",
    "events_url": "https://api.github.com/users/javierfreire/events{/privacy}",
    "followers_url": "https://api.github.com/users/javierfreire/followers",
    "following_url": "https://api.github.com/users/javierfreire/following{/other_user}",
    "gists_url": "https://api.github.com/users/javierfreire/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/javierfreire",
    "id": 45098297,
    "login": "javierfreire",
    "node_id": "MDQ6VXNlcjQ1MDk4Mjk3",
    "organizations_url": "https://api.github.com/users/javierfreire/orgs",
    "received_events_url": "https://api.github.com/users/javierfreire/received_events",
    "repos_url": "https://api.github.com/users/javierfreire/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/javierfreire/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/javierfreire/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/javierfreire"
  }
}
json_root is_array: false
json_root is_object: true
number: 9381
url: https://api.github.com/repos/apache/kafka/pulls/9381
title: KIP-675: Convert KTable to a KStream using the previous value
body: This gives the possibility of converting a table into a stream using a mapper with the new and old values as arguments.

[KIP-675](https://cwiki.apache.org/confluence/display/KAFKA/KIP-675%3A+Convert+KTable+to+a+KStream+using+the+previous+value)

KTableImpl tests complete with new methods.
 


review_comments: https://api.github.com/repos/apache/kafka/pulls/9381/comments
pull_request_number: 9381
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9371/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9371/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9371"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9371"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9371/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9371"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/589b50ecf4efbf41306c003b7efe5a1a8768d0c9"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "69790a1463bafc1f63e3c288a6636b3f4586c1b4",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This patch introduces server-side validation that checks if applying requested reassignment won't lead to a situation where different partitions of the same topic have different replication factors. \r\n\r\nIf a given partition has a pending reassignment, then the target replication factor is used by the validator.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9371/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9371/commits",
  "created_at": "2020-10-04T18:39:44Z",
  "diff_url": "https://github.com/apache/kafka/pull/9371.diff",
  "draft": false,
  "head": {
    "label": "piotrrzysko:KAFKA-10510-replication-factor-consistency",
    "ref": "KAFKA-10510-replication-factor-consistency",
    "repo": {
      "archive_url": "https://api.github.com/repos/piotrrzysko/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/piotrrzysko/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/piotrrzysko/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/piotrrzysko/kafka/branches{/branch}",
      "clone_url": "https://github.com/piotrrzysko/kafka.git",
      "collaborators_url": "https://api.github.com/repos/piotrrzysko/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/piotrrzysko/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/piotrrzysko/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/piotrrzysko/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/piotrrzysko/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/piotrrzysko/kafka/contributors",
      "created_at": "2020-03-10T22:33:26Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/piotrrzysko/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/piotrrzysko/kafka/downloads",
      "events_url": "https://api.github.com/repos/piotrrzysko/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/piotrrzysko/kafka/forks",
      "full_name": "piotrrzysko/kafka",
      "git_commits_url": "https://api.github.com/repos/piotrrzysko/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/piotrrzysko/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/piotrrzysko/kafka/git/tags{/sha}",
      "git_url": "git://github.com/piotrrzysko/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/piotrrzysko/kafka/hooks",
      "html_url": "https://github.com/piotrrzysko/kafka",
      "id": 246422075,
      "issue_comment_url": "https://api.github.com/repos/piotrrzysko/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/piotrrzysko/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/piotrrzysko/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/piotrrzysko/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/piotrrzysko/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/piotrrzysko/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/piotrrzysko/kafka/merges",
      "milestones_url": "https://api.github.com/repos/piotrrzysko/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyNDY0MjIwNzU=",
      "notifications_url": "https://api.github.com/repos/piotrrzysko/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/6481553?v=4",
        "events_url": "https://api.github.com/users/piotrrzysko/events{/privacy}",
        "followers_url": "https://api.github.com/users/piotrrzysko/followers",
        "following_url": "https://api.github.com/users/piotrrzysko/following{/other_user}",
        "gists_url": "https://api.github.com/users/piotrrzysko/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/piotrrzysko",
        "id": 6481553,
        "login": "piotrrzysko",
        "node_id": "MDQ6VXNlcjY0ODE1NTM=",
        "organizations_url": "https://api.github.com/users/piotrrzysko/orgs",
        "received_events_url": "https://api.github.com/users/piotrrzysko/received_events",
        "repos_url": "https://api.github.com/users/piotrrzysko/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/piotrrzysko/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/piotrrzysko/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/piotrrzysko"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/piotrrzysko/kafka/pulls{/number}",
      "pushed_at": "2020-10-05T07:24:28Z",
      "releases_url": "https://api.github.com/repos/piotrrzysko/kafka/releases{/id}",
      "size": 105693,
      "ssh_url": "git@github.com:piotrrzysko/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/piotrrzysko/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/piotrrzysko/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/piotrrzysko/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/piotrrzysko/kafka/subscription",
      "svn_url": "https://github.com/piotrrzysko/kafka",
      "tags_url": "https://api.github.com/repos/piotrrzysko/kafka/tags",
      "teams_url": "https://api.github.com/repos/piotrrzysko/kafka/teams",
      "trees_url": "https://api.github.com/repos/piotrrzysko/kafka/git/trees{/sha}",
      "updated_at": "2020-10-04T14:46:39Z",
      "url": "https://api.github.com/repos/piotrrzysko/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "589b50ecf4efbf41306c003b7efe5a1a8768d0c9",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/6481553?v=4",
      "events_url": "https://api.github.com/users/piotrrzysko/events{/privacy}",
      "followers_url": "https://api.github.com/users/piotrrzysko/followers",
      "following_url": "https://api.github.com/users/piotrrzysko/following{/other_user}",
      "gists_url": "https://api.github.com/users/piotrrzysko/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/piotrrzysko",
      "id": 6481553,
      "login": "piotrrzysko",
      "node_id": "MDQ6VXNlcjY0ODE1NTM=",
      "organizations_url": "https://api.github.com/users/piotrrzysko/orgs",
      "received_events_url": "https://api.github.com/users/piotrrzysko/received_events",
      "repos_url": "https://api.github.com/users/piotrrzysko/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/piotrrzysko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piotrrzysko/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/piotrrzysko"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9371",
  "id": 497479197,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9371",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "0b46df16cf0736bd94e3332ba839fc2345c1c28f",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDk3NDc5MTk3",
  "number": 9371,
  "patch_url": "https://github.com/apache/kafka/pull/9371.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9371/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/589b50ecf4efbf41306c003b7efe5a1a8768d0c9",
  "title": "KAFKA-10510: Validate replication factor consistency on reassignment",
  "updated_at": "2020-10-06T17:27:37Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9371",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/6481553?v=4",
    "events_url": "https://api.github.com/users/piotrrzysko/events{/privacy}",
    "followers_url": "https://api.github.com/users/piotrrzysko/followers",
    "following_url": "https://api.github.com/users/piotrrzysko/following{/other_user}",
    "gists_url": "https://api.github.com/users/piotrrzysko/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/piotrrzysko",
    "id": 6481553,
    "login": "piotrrzysko",
    "node_id": "MDQ6VXNlcjY0ODE1NTM=",
    "organizations_url": "https://api.github.com/users/piotrrzysko/orgs",
    "received_events_url": "https://api.github.com/users/piotrrzysko/received_events",
    "repos_url": "https://api.github.com/users/piotrrzysko/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/piotrrzysko/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/piotrrzysko/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/piotrrzysko"
  }
}
json_root is_array: false
json_root is_object: true
number: 9371
url: https://api.github.com/repos/apache/kafka/pulls/9371
title: KAFKA-10510: Validate replication factor consistency on reassignment
body: This patch introduces server-side validation that checks if applying requested reassignment won't lead to a situation where different partitions of the same topic have different replication factors. 

If a given partition has a pending reassignment, then the target replication factor is used by the validator.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9371/comments
pull_request_number: 9371
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9370/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9370/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9370"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9370"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9370/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9370"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/95605b92a56fad9b6dd1d60746d71ebde813bf81"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "69790a1463bafc1f63e3c288a6636b3f4586c1b4",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This introduces a new **compile-only** dependency on [JetBrains Java Annotations](https://github.com/JetBrains/java-annotations). I decided to go for this particular dependency because it does not introduce any visible change to our users, nor does it introduce any additional overhead to the build process. If we get an annotation wrong, nothing bad happens because it is totally up to the code to actually validate things. (This also means that no KIP is required.)\r\n\r\nOne downside (some might say upside) is that absolutely everything must be annotated. I personally think this is a good thing because it forces people to actually think about `null`, same is the case in Kotlin where I also have to define whether `null` is permitted or not absolutely everywhere. Kotlin is also the main reason why I am interested in this, and also why I am interested in having this everywhere.\r\n\r\nI was not able to test all possible NPE situations because some require the call to actually be executed. For those where I was able to prove that `null` is invalid we could think about adding `Objects.requireNonNull` guards right at the beginning. For all others it is simple, if we prove it we can add the guards too. This might be wasteful for collections (especially if those collections contain collections). A possible way out here is to use `assert` and live with the fact that some NPEs are thrown much later and will make it hard to find the source. This, sadly, is not Kotlin, so there is no easy way for this.\r\n\r\n## Bugfix\r\n~This PR also contains a bug fix. `Admin.describeUserScramCredentials()` (without any arguments) is passing `null` to `Admin.describeUserScramCredentials(List<String>)` which is permitted but leads to an NPE. Maybe there is another ticket for this, or nobody ever called this method (which would raise the question why it exists). In any event, I changed `KafkaAdminClient` to use an empty list if `null` is passed.~ See https://github.com/apache/kafka/pull/9374, I will update the description and this branch once the other PR is in trunk.\r\n\r\n----\r\n\r\n**PS:** I am willing to continue this endeavor if it is decided to accept this PR (also if we decide to opt for another library that provides the ability to add null checks, e.g. Checker Framework, Lombok), simply because the experience in Kotlin with Kafka and the missing nullability information is horrid.\r\n\r\n**PPS:** The JetBrains annotations contain additional annotations for [`@Unmodifiable`](https://javadoc.io/doc/org.jetbrains/annotations/latest/org/jetbrains/annotations/Unmodifiable.html), [`@ApiStatus.Internal`](https://javadoc.io/doc/org.jetbrains/annotations/latest/org/jetbrains/annotations/ApiStatus.Internal.html), [`@RegExp`](https://javadoc.io/doc/org.jetbrains/annotations/latest/org/intellij/lang/annotations/RegExp.html), and [many more](https://javadoc.io/doc/org.jetbrains/annotations/latest/index.html) that ease development work tremendously. I think it would be more than worthwhile to start using them as well if we decide to go with these annotations.\r\n\r\n— [KAFKA-9234](https://issues.apache.org/jira/browse/KAFKA-9234)",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9370/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9370/commits",
  "created_at": "2020-10-04T16:31:15Z",
  "diff_url": "https://github.com/apache/kafka/pull/9370.diff",
  "draft": false,
  "head": {
    "label": "Fleshgrinder:KAFKA-9234-admin",
    "ref": "KAFKA-9234-admin",
    "repo": {
      "archive_url": "https://api.github.com/repos/Fleshgrinder/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/Fleshgrinder/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/Fleshgrinder/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/Fleshgrinder/kafka/branches{/branch}",
      "clone_url": "https://github.com/Fleshgrinder/kafka.git",
      "collaborators_url": "https://api.github.com/repos/Fleshgrinder/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/Fleshgrinder/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/Fleshgrinder/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/Fleshgrinder/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/Fleshgrinder/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/Fleshgrinder/kafka/contributors",
      "created_at": "2020-10-03T14:52:19Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/Fleshgrinder/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/Fleshgrinder/kafka/downloads",
      "events_url": "https://api.github.com/repos/Fleshgrinder/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/Fleshgrinder/kafka/forks",
      "full_name": "Fleshgrinder/kafka",
      "git_commits_url": "https://api.github.com/repos/Fleshgrinder/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/Fleshgrinder/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/Fleshgrinder/kafka/git/tags{/sha}",
      "git_url": "git://github.com/Fleshgrinder/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/Fleshgrinder/kafka/hooks",
      "html_url": "https://github.com/Fleshgrinder/kafka",
      "id": 300904588,
      "issue_comment_url": "https://api.github.com/repos/Fleshgrinder/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/Fleshgrinder/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/Fleshgrinder/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/Fleshgrinder/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/Fleshgrinder/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/Fleshgrinder/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/Fleshgrinder/kafka/merges",
      "milestones_url": "https://api.github.com/repos/Fleshgrinder/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDA5MDQ1ODg=",
      "notifications_url": "https://api.github.com/repos/Fleshgrinder/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/1059453?v=4",
        "events_url": "https://api.github.com/users/Fleshgrinder/events{/privacy}",
        "followers_url": "https://api.github.com/users/Fleshgrinder/followers",
        "following_url": "https://api.github.com/users/Fleshgrinder/following{/other_user}",
        "gists_url": "https://api.github.com/users/Fleshgrinder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Fleshgrinder",
        "id": 1059453,
        "login": "Fleshgrinder",
        "node_id": "MDQ6VXNlcjEwNTk0NTM=",
        "organizations_url": "https://api.github.com/users/Fleshgrinder/orgs",
        "received_events_url": "https://api.github.com/users/Fleshgrinder/received_events",
        "repos_url": "https://api.github.com/users/Fleshgrinder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Fleshgrinder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Fleshgrinder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Fleshgrinder"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/Fleshgrinder/kafka/pulls{/number}",
      "pushed_at": "2020-10-20T15:57:51Z",
      "releases_url": "https://api.github.com/repos/Fleshgrinder/kafka/releases{/id}",
      "size": 107782,
      "ssh_url": "git@github.com:Fleshgrinder/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/Fleshgrinder/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/Fleshgrinder/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/Fleshgrinder/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/Fleshgrinder/kafka/subscription",
      "svn_url": "https://github.com/Fleshgrinder/kafka",
      "tags_url": "https://api.github.com/repos/Fleshgrinder/kafka/tags",
      "teams_url": "https://api.github.com/repos/Fleshgrinder/kafka/teams",
      "trees_url": "https://api.github.com/repos/Fleshgrinder/kafka/git/trees{/sha}",
      "updated_at": "2020-10-20T15:58:03Z",
      "url": "https://api.github.com/repos/Fleshgrinder/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "95605b92a56fad9b6dd1d60746d71ebde813bf81",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/1059453?v=4",
      "events_url": "https://api.github.com/users/Fleshgrinder/events{/privacy}",
      "followers_url": "https://api.github.com/users/Fleshgrinder/followers",
      "following_url": "https://api.github.com/users/Fleshgrinder/following{/other_user}",
      "gists_url": "https://api.github.com/users/Fleshgrinder/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Fleshgrinder",
      "id": 1059453,
      "login": "Fleshgrinder",
      "node_id": "MDQ6VXNlcjEwNTk0NTM=",
      "organizations_url": "https://api.github.com/users/Fleshgrinder/orgs",
      "received_events_url": "https://api.github.com/users/Fleshgrinder/received_events",
      "repos_url": "https://api.github.com/users/Fleshgrinder/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Fleshgrinder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Fleshgrinder/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Fleshgrinder"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9370",
  "id": 497461260,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9370",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "3a3280adaa1e6c4655a74743cb441da4b2e458db",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDk3NDYxMjYw",
  "number": 9370,
  "patch_url": "https://github.com/apache/kafka/pull/9370.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9370/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/95605b92a56fad9b6dd1d60746d71ebde813bf81",
  "title": "KAFKA-9234: Added Nullability Annotations to Admin",
  "updated_at": "2020-10-05T15:30:46Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9370",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/1059453?v=4",
    "events_url": "https://api.github.com/users/Fleshgrinder/events{/privacy}",
    "followers_url": "https://api.github.com/users/Fleshgrinder/followers",
    "following_url": "https://api.github.com/users/Fleshgrinder/following{/other_user}",
    "gists_url": "https://api.github.com/users/Fleshgrinder/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/Fleshgrinder",
    "id": 1059453,
    "login": "Fleshgrinder",
    "node_id": "MDQ6VXNlcjEwNTk0NTM=",
    "organizations_url": "https://api.github.com/users/Fleshgrinder/orgs",
    "received_events_url": "https://api.github.com/users/Fleshgrinder/received_events",
    "repos_url": "https://api.github.com/users/Fleshgrinder/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/Fleshgrinder/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Fleshgrinder/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/Fleshgrinder"
  }
}
json_root is_array: false
json_root is_object: true
number: 9370
url: https://api.github.com/repos/apache/kafka/pulls/9370
title: KAFKA-9234: Added Nullability Annotations to Admin
body: This introduces a new **compile-only** dependency on [JetBrains Java Annotations](https://github.com/JetBrains/java-annotations). I decided to go for this particular dependency because it does not introduce any visible change to our users, nor does it introduce any additional overhead to the build process. If we get an annotation wrong, nothing bad happens because it is totally up to the code to actually validate things. (This also means that no KIP is required.)

One downside (some might say upside) is that absolutely everything must be annotated. I personally think this is a good thing because it forces people to actually think about `null`, same is the case in Kotlin where I also have to define whether `null` is permitted or not absolutely everywhere. Kotlin is also the main reason why I am interested in this, and also why I am interested in having this everywhere.

I was not able to test all possible NPE situations because some require the call to actually be executed. For those where I was able to prove that `null` is invalid we could think about adding `Objects.requireNonNull` guards right at the beginning. For all others it is simple, if we prove it we can add the guards too. This might be wasteful for collections (especially if those collections contain collections). A possible way out here is to use `assert` and live with the fact that some NPEs are thrown much later and will make it hard to find the source. This, sadly, is not Kotlin, so there is no easy way for this.

## Bugfix
~This PR also contains a bug fix. `Admin.describeUserScramCredentials()` (without any arguments) is passing `null` to `Admin.describeUserScramCredentials(List<String>)` which is permitted but leads to an NPE. Maybe there is another ticket for this, or nobody ever called this method (which would raise the question why it exists). In any event, I changed `KafkaAdminClient` to use an empty list if `null` is passed.~ See https://github.com/apache/kafka/pull/9374, I will update the description and this branch once the other PR is in trunk.

----

**PS:** I am willing to continue this endeavor if it is decided to accept this PR (also if we decide to opt for another library that provides the ability to add null checks, e.g. Checker Framework, Lombok), simply because the experience in Kotlin with Kafka and the missing nullability information is horrid.

**PPS:** The JetBrains annotations contain additional annotations for [`@Unmodifiable`](https://javadoc.io/doc/org.jetbrains/annotations/latest/org/jetbrains/annotations/Unmodifiable.html), [`@ApiStatus.Internal`](https://javadoc.io/doc/org.jetbrains/annotations/latest/org/jetbrains/annotations/ApiStatus.Internal.html), [`@RegExp`](https://javadoc.io/doc/org.jetbrains/annotations/latest/org/intellij/lang/annotations/RegExp.html), and [many more](https://javadoc.io/doc/org.jetbrains/annotations/latest/index.html) that ease development work tremendously. I think it would be more than worthwhile to start using them as well if we decide to go with these annotations.

— [KAFKA-9234](https://issues.apache.org/jira/browse/KAFKA-9234)
review_comments: https://api.github.com/repos/apache/kafka/pulls/9370/comments
id: 499595845
url: https://api.github.com/repos/apache/kafka/pulls/comments/499595845
body: Not 100% sure the parens are needed, but either they are or it increases clarity/decreases confusion to add them.
```suggestion
                        new DescribeUserScramCredentialsRequestData().setUsers((users == null ? Collections.emptyList() : users).stream().map(user ->
```
diff_hunk: @@ -4160,15 +4231,18 @@ void handleFailure(Throwable throwable) {
     }
 
     @Override
-    public DescribeUserScramCredentialsResult describeUserScramCredentials(List<String> users, DescribeUserScramCredentialsOptions options) {
+    public @NotNull DescribeUserScramCredentialsResult describeUserScramCredentials(
+        final @Nullable List<@NotNull String> users,
+        final @NotNull DescribeUserScramCredentialsOptions options
+    ) {
         final KafkaFutureImpl<DescribeUserScramCredentialsResponseData> dataFuture = new KafkaFutureImpl<>();
         final long now = time.milliseconds();
         Call call = new Call("describeUserScramCredentials", calcDeadlineMs(now, options.timeoutMs()),
                 new LeastLoadedNodeProvider()) {
             @Override
             public DescribeUserScramCredentialsRequest.Builder createRequest(int timeoutMs) {
                 return new DescribeUserScramCredentialsRequest.Builder(
-                        new DescribeUserScramCredentialsRequestData().setUsers(users.stream().map(user ->
+                        new DescribeUserScramCredentialsRequestData().setUsers(users == null ? Collections.emptyList() : users.stream().map(user ->
path: clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java
html: https://github.com/apache/kafka/pull/9370#discussion_r499595845
id: 499643570
url: https://api.github.com/repos/apache/kafka/pulls/comments/499643570
body: This way we would also run the empty map through _stream_, which is not required. I tried to make the change with as little impact as possible but if I were to write it then I would do it as follows:

```java
        Call call = new Call("describeUserScramCredentials", calcDeadlineMs(now, options.timeoutMs()), new LeastLoadedNodeProvider()) {
            @Override
            public DescribeUserScramCredentialsRequest.Builder createRequest(final int timeoutMs) {
                final DescribeUserScramCredentialsRequestData requestData = new DescribeUserScramCredentialsRequestData();

                if (users != null && !users.isEmpty()) {
                    final List<UserName> userNames = new ArrayList<>(users.size());
                    for (final String user : users) {
                        userNames.add(new UserName().setName(user));
                    }
                    requestData.setUsers(userNames);
                }

                return new DescribeUserScramCredentialsRequest.Builder(requestData);
            }
```

This is more code, yes, and it is not using _stream_ anymore but it is both clearer, faster, and allocates less.
diff_hunk: @@ -4160,15 +4231,18 @@ void handleFailure(Throwable throwable) {
     }
 
     @Override
-    public DescribeUserScramCredentialsResult describeUserScramCredentials(List<String> users, DescribeUserScramCredentialsOptions options) {
+    public @NotNull DescribeUserScramCredentialsResult describeUserScramCredentials(
+        final @Nullable List<@NotNull String> users,
+        final @NotNull DescribeUserScramCredentialsOptions options
+    ) {
         final KafkaFutureImpl<DescribeUserScramCredentialsResponseData> dataFuture = new KafkaFutureImpl<>();
         final long now = time.milliseconds();
         Call call = new Call("describeUserScramCredentials", calcDeadlineMs(now, options.timeoutMs()),
                 new LeastLoadedNodeProvider()) {
             @Override
             public DescribeUserScramCredentialsRequest.Builder createRequest(int timeoutMs) {
                 return new DescribeUserScramCredentialsRequest.Builder(
-                        new DescribeUserScramCredentialsRequestData().setUsers(users.stream().map(user ->
+                        new DescribeUserScramCredentialsRequestData().setUsers(users == null ? Collections.emptyList() : users.stream().map(user ->
path: clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java
html: https://github.com/apache/kafka/pull/9370#discussion_r499643570
id: 499647441
url: https://api.github.com/repos/apache/kafka/pulls/comments/499647441
body: I’m thinking it would be best to fix this bug in a separate “MINOR: fix potential NPE...” PR since this PR may or may not get merged.  Do you agree? If so, either I can do it, or feel free to do it — I’ll go with whichever you wish.
diff_hunk: @@ -4160,15 +4231,18 @@ void handleFailure(Throwable throwable) {
     }
 
     @Override
-    public DescribeUserScramCredentialsResult describeUserScramCredentials(List<String> users, DescribeUserScramCredentialsOptions options) {
+    public @NotNull DescribeUserScramCredentialsResult describeUserScramCredentials(
+        final @Nullable List<@NotNull String> users,
+        final @NotNull DescribeUserScramCredentialsOptions options
+    ) {
         final KafkaFutureImpl<DescribeUserScramCredentialsResponseData> dataFuture = new KafkaFutureImpl<>();
         final long now = time.milliseconds();
         Call call = new Call("describeUserScramCredentials", calcDeadlineMs(now, options.timeoutMs()),
                 new LeastLoadedNodeProvider()) {
             @Override
             public DescribeUserScramCredentialsRequest.Builder createRequest(int timeoutMs) {
                 return new DescribeUserScramCredentialsRequest.Builder(
-                        new DescribeUserScramCredentialsRequestData().setUsers(users.stream().map(user ->
+                        new DescribeUserScramCredentialsRequestData().setUsers(users == null ? Collections.emptyList() : users.stream().map(user ->
path: clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java
html: https://github.com/apache/kafka/pull/9370#discussion_r499647441
id: 499654983
url: https://api.github.com/repos/apache/kafka/pulls/comments/499654983
body: Happy to help, PR incoming. 😊 
diff_hunk: @@ -4160,15 +4231,18 @@ void handleFailure(Throwable throwable) {
     }
 
     @Override
-    public DescribeUserScramCredentialsResult describeUserScramCredentials(List<String> users, DescribeUserScramCredentialsOptions options) {
+    public @NotNull DescribeUserScramCredentialsResult describeUserScramCredentials(
+        final @Nullable List<@NotNull String> users,
+        final @NotNull DescribeUserScramCredentialsOptions options
+    ) {
         final KafkaFutureImpl<DescribeUserScramCredentialsResponseData> dataFuture = new KafkaFutureImpl<>();
         final long now = time.milliseconds();
         Call call = new Call("describeUserScramCredentials", calcDeadlineMs(now, options.timeoutMs()),
                 new LeastLoadedNodeProvider()) {
             @Override
             public DescribeUserScramCredentialsRequest.Builder createRequest(int timeoutMs) {
                 return new DescribeUserScramCredentialsRequest.Builder(
-                        new DescribeUserScramCredentialsRequestData().setUsers(users.stream().map(user ->
+                        new DescribeUserScramCredentialsRequestData().setUsers(users == null ? Collections.emptyList() : users.stream().map(user ->
path: clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java
html: https://github.com/apache/kafka/pull/9370#discussion_r499654983
pull_request_number: 9370
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9369/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9369/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9369"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9369"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9369/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9369"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/ece627ed68609c717da9b0a2f95cfbb80be86147"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "850e9922c142b69d159e4922308a8bb76977b488",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This allows the configuration values for CompressionType in the ProducerConfig and the OffsetResetStrategy in the ConsumerConfig to be specified regardless of their case.",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9369/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9369/commits",
  "created_at": "2020-10-03T16:25:42Z",
  "diff_url": "https://github.com/apache/kafka/pull/9369.diff",
  "draft": false,
  "head": {
    "label": "Fleshgrinder:KAFKA-4715",
    "ref": "KAFKA-4715",
    "repo": {
      "archive_url": "https://api.github.com/repos/Fleshgrinder/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/Fleshgrinder/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/Fleshgrinder/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/Fleshgrinder/kafka/branches{/branch}",
      "clone_url": "https://github.com/Fleshgrinder/kafka.git",
      "collaborators_url": "https://api.github.com/repos/Fleshgrinder/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/Fleshgrinder/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/Fleshgrinder/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/Fleshgrinder/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/Fleshgrinder/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/Fleshgrinder/kafka/contributors",
      "created_at": "2020-10-03T14:52:19Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/Fleshgrinder/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/Fleshgrinder/kafka/downloads",
      "events_url": "https://api.github.com/repos/Fleshgrinder/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/Fleshgrinder/kafka/forks",
      "full_name": "Fleshgrinder/kafka",
      "git_commits_url": "https://api.github.com/repos/Fleshgrinder/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/Fleshgrinder/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/Fleshgrinder/kafka/git/tags{/sha}",
      "git_url": "git://github.com/Fleshgrinder/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/Fleshgrinder/kafka/hooks",
      "html_url": "https://github.com/Fleshgrinder/kafka",
      "id": 300904588,
      "issue_comment_url": "https://api.github.com/repos/Fleshgrinder/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/Fleshgrinder/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/Fleshgrinder/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/Fleshgrinder/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/Fleshgrinder/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/Fleshgrinder/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/Fleshgrinder/kafka/merges",
      "milestones_url": "https://api.github.com/repos/Fleshgrinder/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDA5MDQ1ODg=",
      "notifications_url": "https://api.github.com/repos/Fleshgrinder/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/1059453?v=4",
        "events_url": "https://api.github.com/users/Fleshgrinder/events{/privacy}",
        "followers_url": "https://api.github.com/users/Fleshgrinder/followers",
        "following_url": "https://api.github.com/users/Fleshgrinder/following{/other_user}",
        "gists_url": "https://api.github.com/users/Fleshgrinder/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Fleshgrinder",
        "id": 1059453,
        "login": "Fleshgrinder",
        "node_id": "MDQ6VXNlcjEwNTk0NTM=",
        "organizations_url": "https://api.github.com/users/Fleshgrinder/orgs",
        "received_events_url": "https://api.github.com/users/Fleshgrinder/received_events",
        "repos_url": "https://api.github.com/users/Fleshgrinder/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Fleshgrinder/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Fleshgrinder/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Fleshgrinder"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/Fleshgrinder/kafka/pulls{/number}",
      "pushed_at": "2020-10-20T15:57:51Z",
      "releases_url": "https://api.github.com/repos/Fleshgrinder/kafka/releases{/id}",
      "size": 107782,
      "ssh_url": "git@github.com:Fleshgrinder/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/Fleshgrinder/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/Fleshgrinder/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/Fleshgrinder/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/Fleshgrinder/kafka/subscription",
      "svn_url": "https://github.com/Fleshgrinder/kafka",
      "tags_url": "https://api.github.com/repos/Fleshgrinder/kafka/tags",
      "teams_url": "https://api.github.com/repos/Fleshgrinder/kafka/teams",
      "trees_url": "https://api.github.com/repos/Fleshgrinder/kafka/git/trees{/sha}",
      "updated_at": "2020-10-20T15:58:03Z",
      "url": "https://api.github.com/repos/Fleshgrinder/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "ece627ed68609c717da9b0a2f95cfbb80be86147",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/1059453?v=4",
      "events_url": "https://api.github.com/users/Fleshgrinder/events{/privacy}",
      "followers_url": "https://api.github.com/users/Fleshgrinder/followers",
      "following_url": "https://api.github.com/users/Fleshgrinder/following{/other_user}",
      "gists_url": "https://api.github.com/users/Fleshgrinder/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Fleshgrinder",
      "id": 1059453,
      "login": "Fleshgrinder",
      "node_id": "MDQ6VXNlcjEwNTk0NTM=",
      "organizations_url": "https://api.github.com/users/Fleshgrinder/orgs",
      "received_events_url": "https://api.github.com/users/Fleshgrinder/received_events",
      "repos_url": "https://api.github.com/users/Fleshgrinder/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Fleshgrinder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Fleshgrinder/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Fleshgrinder"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9369",
  "id": 497301754,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9369",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "94418c56eb8f4e5343fbe0d4b0e4da2269639d00",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDk3MzAxNzU0",
  "number": 9369,
  "patch_url": "https://github.com/apache/kafka/pull/9369.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9369/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/ece627ed68609c717da9b0a2f95cfbb80be86147",
  "title": "KAFKA-4715: Ignore case of CompressionType and OffsetResetStrategy",
  "updated_at": "2020-10-20T15:57:58Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9369",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/1059453?v=4",
    "events_url": "https://api.github.com/users/Fleshgrinder/events{/privacy}",
    "followers_url": "https://api.github.com/users/Fleshgrinder/followers",
    "following_url": "https://api.github.com/users/Fleshgrinder/following{/other_user}",
    "gists_url": "https://api.github.com/users/Fleshgrinder/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/Fleshgrinder",
    "id": 1059453,
    "login": "Fleshgrinder",
    "node_id": "MDQ6VXNlcjEwNTk0NTM=",
    "organizations_url": "https://api.github.com/users/Fleshgrinder/orgs",
    "received_events_url": "https://api.github.com/users/Fleshgrinder/received_events",
    "repos_url": "https://api.github.com/users/Fleshgrinder/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/Fleshgrinder/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Fleshgrinder/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/Fleshgrinder"
  }
}
json_root is_array: false
json_root is_object: true
number: 9369
url: https://api.github.com/repos/apache/kafka/pulls/9369
title: KAFKA-4715: Ignore case of CompressionType and OffsetResetStrategy
body: This allows the configuration values for CompressionType in the ProducerConfig and the OffsetResetStrategy in the ConsumerConfig to be specified regardless of their case.
review_comments: https://api.github.com/repos/apache/kafka/pulls/9369/comments
id: 507452731
url: https://api.github.com/repos/apache/kafka/pulls/comments/507452731
body: Sorry that I can't catch your point here. Could you give more explanation to me? Is it different to ```Enum#toString```?
diff_hunk: @@ -16,6 +16,40 @@
  */
 package org.apache.kafka.clients.consumer;
 
+import java.util.Locale;
+import java.util.Objects;
+
+/**
+ * @see ConsumerConfig#AUTO_OFFSET_RESET_CONFIG
+ * @see ConsumerConfig#AUTO_OFFSET_RESET_DOC
+ */
 public enum OffsetResetStrategy {
-    LATEST, EARLIEST, NONE
+    LATEST, EARLIEST, NONE;
+
+    // Enums are singletons, this means that this conversion happens once the
+    // first time a variant is actually used, and never again.
+    private final String id = name().toLowerCase(Locale.ROOT);
path: clients/src/main/java/org/apache/kafka/clients/consumer/OffsetResetStrategy.java
html: https://github.com/apache/kafka/pull/9369#discussion_r507452731
id: 507454409
url: https://api.github.com/repos/apache/kafka/pulls/comments/507454409
body: Not sure whether this change is necessary. The value should be validated already.
diff_hunk: @@ -361,7 +363,7 @@ public static StreamThread create(final InternalTopologyBuilder builder,
         final AtomicLong nextScheduledRebalanceMs = new AtomicLong(Long.MAX_VALUE);
         consumerConfigs.put(StreamsConfig.InternalConfig.NEXT_SCHEDULED_REBALANCE_MS, nextScheduledRebalanceMs);
 
-        final String originalReset = (String) consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG);
+        final String originalReset = OffsetResetStrategy.forName((String) consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG)).toString();
path: streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java
html: https://github.com/apache/kafka/pull/9369#discussion_r507454409
id: 508639180
url: https://api.github.com/repos/apache/kafka/pulls/comments/508639180
body: We can move the code to `toString` but than the `toLowerCase` conversion is executed every time `toString` is invoked. This way the conversion happens once: the first time the enum is used. From there on out the string stays and never needs to be recomputed. Meaning:

```java
System.out.println(OffsetResetStrategy.LATEST); // first access, `id` member is populated with `toLowerCase` result
System.out.println(OffsetResetStrategy.LATEST); // just uses `id`
System.out.println(OffsetResetStrategy.LATEST); // just uses `id`
System.out.println(OffsetResetStrategy.LATEST); // just uses `id`
```
diff_hunk: @@ -16,6 +16,40 @@
  */
 package org.apache.kafka.clients.consumer;
 
+import java.util.Locale;
+import java.util.Objects;
+
+/**
+ * @see ConsumerConfig#AUTO_OFFSET_RESET_CONFIG
+ * @see ConsumerConfig#AUTO_OFFSET_RESET_DOC
+ */
 public enum OffsetResetStrategy {
-    LATEST, EARLIEST, NONE
+    LATEST, EARLIEST, NONE;
+
+    // Enums are singletons, this means that this conversion happens once the
+    // first time a variant is actually used, and never again.
+    private final String id = name().toLowerCase(Locale.ROOT);
path: clients/src/main/java/org/apache/kafka/clients/consumer/OffsetResetStrategy.java
html: https://github.com/apache/kafka/pull/9369#discussion_r508639180
id: 508641877
url: https://api.github.com/repos/apache/kafka/pulls/comments/508641877
body: The value could be in any format: `LaTeSt`, `latest`, `LATEST`, … but we are interested only in its canonical form and the canonical form is provided through the Enum, hence, we have to parse it again. The alternative would be to call `toLowerCase(Locale.ROOT)` on it but we would effectively be duplicating the logic and that's very bad.

Ideal would actually be if our configuration is not giving us a string but rather the Enum member that was configured but I think we all know the our configuration is generally not ideal, so that's an issue for another time.
diff_hunk: @@ -361,7 +363,7 @@ public static StreamThread create(final InternalTopologyBuilder builder,
         final AtomicLong nextScheduledRebalanceMs = new AtomicLong(Long.MAX_VALUE);
         consumerConfigs.put(StreamsConfig.InternalConfig.NEXT_SCHEDULED_REBALANCE_MS, nextScheduledRebalanceMs);
 
-        final String originalReset = (String) consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG);
+        final String originalReset = OffsetResetStrategy.forName((String) consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG)).toString();
path: streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java
html: https://github.com/apache/kafka/pull/9369#discussion_r508641877
pull_request_number: 9369
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9365/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9365/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9365"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9365"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9365/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9365"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/74196edf0a2367087cc9504586d2cf7b7f749124"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "ca559a2dcf1a2a29f635401111c743b5da1bd81d",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Fix warn log messages caused by making HashMap copies of configs prior to using. This is not an ideal solution, but because the `Map`s are passed through `Configurable.configure(Map)` it's not possible to use another type (such as the `RecordingMap` type) directly.",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9365/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9365/commits",
  "created_at": "2020-10-02T16:00:23Z",
  "diff_url": "https://github.com/apache/kafka/pull/9365.diff",
  "draft": false,
  "head": {
    "label": "tombentley:KAFKA-10566-usage-warnings",
    "ref": "KAFKA-10566-usage-warnings",
    "repo": {
      "archive_url": "https://api.github.com/repos/tombentley/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/tombentley/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/tombentley/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/tombentley/kafka/branches{/branch}",
      "clone_url": "https://github.com/tombentley/kafka.git",
      "collaborators_url": "https://api.github.com/repos/tombentley/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/tombentley/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/tombentley/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/tombentley/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/tombentley/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/tombentley/kafka/contributors",
      "created_at": "2017-06-09T11:08:28Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/tombentley/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/tombentley/kafka/downloads",
      "events_url": "https://api.github.com/repos/tombentley/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/tombentley/kafka/forks",
      "full_name": "tombentley/kafka",
      "git_commits_url": "https://api.github.com/repos/tombentley/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/tombentley/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/tombentley/kafka/git/tags{/sha}",
      "git_url": "git://github.com/tombentley/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/tombentley/kafka/hooks",
      "html_url": "https://github.com/tombentley/kafka",
      "id": 93850932,
      "issue_comment_url": "https://api.github.com/repos/tombentley/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/tombentley/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/tombentley/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/tombentley/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/tombentley/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/tombentley/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/tombentley/kafka/merges",
      "milestones_url": "https://api.github.com/repos/tombentley/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk5Mzg1MDkzMg==",
      "notifications_url": "https://api.github.com/repos/tombentley/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/879487?v=4",
        "events_url": "https://api.github.com/users/tombentley/events{/privacy}",
        "followers_url": "https://api.github.com/users/tombentley/followers",
        "following_url": "https://api.github.com/users/tombentley/following{/other_user}",
        "gists_url": "https://api.github.com/users/tombentley/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tombentley",
        "id": 879487,
        "login": "tombentley",
        "node_id": "MDQ6VXNlcjg3OTQ4Nw==",
        "organizations_url": "https://api.github.com/users/tombentley/orgs",
        "received_events_url": "https://api.github.com/users/tombentley/received_events",
        "repos_url": "https://api.github.com/users/tombentley/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tombentley/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tombentley/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tombentley"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/tombentley/kafka/pulls{/number}",
      "pushed_at": "2020-10-23T15:12:00Z",
      "releases_url": "https://api.github.com/repos/tombentley/kafka/releases{/id}",
      "size": 100102,
      "ssh_url": "git@github.com:tombentley/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/tombentley/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/tombentley/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/tombentley/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/tombentley/kafka/subscription",
      "svn_url": "https://github.com/tombentley/kafka",
      "tags_url": "https://api.github.com/repos/tombentley/kafka/tags",
      "teams_url": "https://api.github.com/repos/tombentley/kafka/teams",
      "trees_url": "https://api.github.com/repos/tombentley/kafka/git/trees{/sha}",
      "updated_at": "2017-06-09T11:08:37Z",
      "url": "https://api.github.com/repos/tombentley/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "74196edf0a2367087cc9504586d2cf7b7f749124",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/879487?v=4",
      "events_url": "https://api.github.com/users/tombentley/events{/privacy}",
      "followers_url": "https://api.github.com/users/tombentley/followers",
      "following_url": "https://api.github.com/users/tombentley/following{/other_user}",
      "gists_url": "https://api.github.com/users/tombentley/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/tombentley",
      "id": 879487,
      "login": "tombentley",
      "node_id": "MDQ6VXNlcjg3OTQ4Nw==",
      "organizations_url": "https://api.github.com/users/tombentley/orgs",
      "received_events_url": "https://api.github.com/users/tombentley/received_events",
      "repos_url": "https://api.github.com/users/tombentley/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/tombentley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tombentley/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/tombentley"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9365",
  "id": 496997430,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9365",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "2e01e5061e266ea436883aead626410d47a8ed01",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDk2OTk3NDMw",
  "number": 9365,
  "patch_url": "https://github.com/apache/kafka/pull/9365.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9365/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/74196edf0a2367087cc9504586d2cf7b7f749124",
  "title": "KAFKA-10566: Fix erroneous config usage warnings",
  "updated_at": "2020-10-14T09:56:30Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9365",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/879487?v=4",
    "events_url": "https://api.github.com/users/tombentley/events{/privacy}",
    "followers_url": "https://api.github.com/users/tombentley/followers",
    "following_url": "https://api.github.com/users/tombentley/following{/other_user}",
    "gists_url": "https://api.github.com/users/tombentley/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/tombentley",
    "id": 879487,
    "login": "tombentley",
    "node_id": "MDQ6VXNlcjg3OTQ4Nw==",
    "organizations_url": "https://api.github.com/users/tombentley/orgs",
    "received_events_url": "https://api.github.com/users/tombentley/received_events",
    "repos_url": "https://api.github.com/users/tombentley/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/tombentley/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tombentley/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/tombentley"
  }
}
json_root is_array: false
json_root is_object: true
number: 9365
url: https://api.github.com/repos/apache/kafka/pulls/9365
title: KAFKA-10566: Fix erroneous config usage warnings
body: Fix warn log messages caused by making HashMap copies of configs prior to using. This is not an ideal solution, but because the `Map`s are passed through `Configurable.configure(Map)` it's not possible to use another type (such as the `RecordingMap` type) directly.
review_comments: https://api.github.com/repos/apache/kafka/pulls/9365/comments
pull_request_number: 9365
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9364/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9364/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9364"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9364"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9364/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9364"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/984b5619420050612ad4c3e0dc9c173338b5fffc"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "c8c1baf4e1ee292b638e5c22fb32f18616cc8a42",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "LogManager writes a clean shutdown file when the broker shuts down. The\r\npresence of this file indicates that the broker had a clean shutdown and\r\nlog recovery is not needed upon the next boot up.\r\n\r\nEarlier, LogManager would check for this file at the start of log loading workflow,\r\nand delete it after the log has been loaded. If the broker were to crash\r\nwhile loading logs, the file would not be deleted and mislead LogManager when it\r\ntries to load logs upon next boot up. Hence, a crash during log loading\r\nwill not be considered a hard reset of broker.\r\n\r\nAs part of this fix, we delete the clean shutdown file as soon as we\r\nlook it up, at the start of log loading workflow. Thereafter, we maintain a boolean\r\nflag to indicate if broker underwent clean shutdown or not. So, if the\r\nbroker were to crash while logs are being loaded, LogManager will be\r\nable to detect this as a hard reset.\r\n\r\n*More detailed description of your change,\r\nif necessary. The PR title and PR message become\r\nthe squashed commit message, so use a separate\r\ncomment to ping reviewers.*\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9364/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9364/commits",
  "created_at": "2020-10-02T09:05:28Z",
  "diff_url": "https://github.com/apache/kafka/pull/9364.diff",
  "draft": false,
  "head": {
    "label": "RamanVerma:fix_kafka-10471",
    "ref": "fix_kafka-10471",
    "repo": {
      "archive_url": "https://api.github.com/repos/RamanVerma/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/RamanVerma/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/RamanVerma/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/RamanVerma/kafka/branches{/branch}",
      "clone_url": "https://github.com/RamanVerma/kafka.git",
      "collaborators_url": "https://api.github.com/repos/RamanVerma/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/RamanVerma/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/RamanVerma/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/RamanVerma/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/RamanVerma/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/RamanVerma/kafka/contributors",
      "created_at": "2020-08-02T18:29:07Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/RamanVerma/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/RamanVerma/kafka/downloads",
      "events_url": "https://api.github.com/repos/RamanVerma/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/RamanVerma/kafka/forks",
      "full_name": "RamanVerma/kafka",
      "git_commits_url": "https://api.github.com/repos/RamanVerma/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/RamanVerma/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/RamanVerma/kafka/git/tags{/sha}",
      "git_url": "git://github.com/RamanVerma/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/RamanVerma/kafka/hooks",
      "html_url": "https://github.com/RamanVerma/kafka",
      "id": 284518731,
      "issue_comment_url": "https://api.github.com/repos/RamanVerma/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/RamanVerma/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/RamanVerma/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/RamanVerma/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/RamanVerma/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/RamanVerma/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/RamanVerma/kafka/merges",
      "milestones_url": "https://api.github.com/repos/RamanVerma/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyODQ1MTg3MzE=",
      "notifications_url": "https://api.github.com/repos/RamanVerma/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/5316219?v=4",
        "events_url": "https://api.github.com/users/RamanVerma/events{/privacy}",
        "followers_url": "https://api.github.com/users/RamanVerma/followers",
        "following_url": "https://api.github.com/users/RamanVerma/following{/other_user}",
        "gists_url": "https://api.github.com/users/RamanVerma/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/RamanVerma",
        "id": 5316219,
        "login": "RamanVerma",
        "node_id": "MDQ6VXNlcjUzMTYyMTk=",
        "organizations_url": "https://api.github.com/users/RamanVerma/orgs",
        "received_events_url": "https://api.github.com/users/RamanVerma/received_events",
        "repos_url": "https://api.github.com/users/RamanVerma/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/RamanVerma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/RamanVerma/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/RamanVerma"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/RamanVerma/kafka/pulls{/number}",
      "pushed_at": "2020-10-25T09:51:49Z",
      "releases_url": "https://api.github.com/repos/RamanVerma/kafka/releases{/id}",
      "size": 107663,
      "ssh_url": "git@github.com:RamanVerma/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/RamanVerma/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/RamanVerma/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/RamanVerma/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/RamanVerma/kafka/subscription",
      "svn_url": "https://github.com/RamanVerma/kafka",
      "tags_url": "https://api.github.com/repos/RamanVerma/kafka/tags",
      "teams_url": "https://api.github.com/repos/RamanVerma/kafka/teams",
      "trees_url": "https://api.github.com/repos/RamanVerma/kafka/git/trees{/sha}",
      "updated_at": "2020-08-02T18:29:09Z",
      "url": "https://api.github.com/repos/RamanVerma/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "984b5619420050612ad4c3e0dc9c173338b5fffc",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/5316219?v=4",
      "events_url": "https://api.github.com/users/RamanVerma/events{/privacy}",
      "followers_url": "https://api.github.com/users/RamanVerma/followers",
      "following_url": "https://api.github.com/users/RamanVerma/following{/other_user}",
      "gists_url": "https://api.github.com/users/RamanVerma/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/RamanVerma",
      "id": 5316219,
      "login": "RamanVerma",
      "node_id": "MDQ6VXNlcjUzMTYyMTk=",
      "organizations_url": "https://api.github.com/users/RamanVerma/orgs",
      "received_events_url": "https://api.github.com/users/RamanVerma/received_events",
      "repos_url": "https://api.github.com/users/RamanVerma/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/RamanVerma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RamanVerma/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/RamanVerma"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9364",
  "id": 496781180,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9364",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "0822fe6544135c889c40c2fdc1f1ee00600ded92",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDk2NzgxMTgw",
  "number": 9364,
  "patch_url": "https://github.com/apache/kafka/pull/9364.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9364/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/984b5619420050612ad4c3e0dc9c173338b5fffc",
  "title": "KAFKA-10471 Mark broker crash during log loading as unclean shutdown",
  "updated_at": "2020-10-26T23:11:36Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9364",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/5316219?v=4",
    "events_url": "https://api.github.com/users/RamanVerma/events{/privacy}",
    "followers_url": "https://api.github.com/users/RamanVerma/followers",
    "following_url": "https://api.github.com/users/RamanVerma/following{/other_user}",
    "gists_url": "https://api.github.com/users/RamanVerma/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/RamanVerma",
    "id": 5316219,
    "login": "RamanVerma",
    "node_id": "MDQ6VXNlcjUzMTYyMTk=",
    "organizations_url": "https://api.github.com/users/RamanVerma/orgs",
    "received_events_url": "https://api.github.com/users/RamanVerma/received_events",
    "repos_url": "https://api.github.com/users/RamanVerma/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/RamanVerma/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/RamanVerma/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/RamanVerma"
  }
}
json_root is_array: false
json_root is_object: true
number: 9364
url: https://api.github.com/repos/apache/kafka/pulls/9364
title: KAFKA-10471 Mark broker crash during log loading as unclean shutdown
body: LogManager writes a clean shutdown file when the broker shuts down. The
presence of this file indicates that the broker had a clean shutdown and
log recovery is not needed upon the next boot up.

Earlier, LogManager would check for this file at the start of log loading workflow,
and delete it after the log has been loaded. If the broker were to crash
while loading logs, the file would not be deleted and mislead LogManager when it
tries to load logs upon next boot up. Hence, a crash during log loading
will not be considered a hard reset of broker.

As part of this fix, we delete the clean shutdown file as soon as we
look it up, at the start of log loading workflow. Thereafter, we maintain a boolean
flag to indicate if broker underwent clean shutdown or not. So, if the
broker were to crash while logs are being loaded, LogManager will be
able to detect this as a hard reset.

*More detailed description of your change,
if necessary. The PR title and PR message become
the squashed commit message, so use a separate
comment to ping reviewers.*

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9364/comments
id: 499051238
url: https://api.github.com/repos/apache/kafka/pulls/comments/499051238
body: Could we add the new param to the javadoc above?
diff_hunk: @@ -244,7 +244,8 @@ class Log(@volatile private var _dir: File,
           val producerIdExpirationCheckIntervalMs: Int,
           val topicPartition: TopicPartition,
           val producerStateManager: ProducerStateManager,
-          logDirFailureChannel: LogDirFailureChannel) extends Logging with KafkaMetricsGroup {
+          logDirFailureChannel: LogDirFailureChannel,
+          val hadCleanShutdown: Boolean = true) extends Logging with KafkaMetricsGroup {
path: core/src/main/scala/kafka/log/Log.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r499051238
id: 499052848
url: https://api.github.com/repos/apache/kafka/pulls/comments/499052848
body: It seems that all callers set expectDeletedFiles to false. So, do we need this param?
diff_hunk: @@ -4447,9 +4504,10 @@ class LogTest {
 
   private def recoverAndCheck(config: LogConfig,
                               expectedKeys: Iterable[Long],
-                              expectDeletedFiles: Boolean = true): Log = {
+                              expectDeletedFiles: Boolean = true,
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r499052848
id: 499055228
url: https://api.github.com/repos/apache/kafka/pulls/comments/499055228
body: The callers of createLog() in line 652 and 2205 seem to need lastShutdownClean to be false.
diff_hunk: @@ -4429,9 +4485,10 @@ class LogTest {
                         scheduler: Scheduler = mockTime.scheduler,
                         time: Time = mockTime,
                         maxProducerIdExpirationMs: Int = 60 * 60 * 1000,
-                        producerIdExpirationCheckIntervalMs: Int = LogManager.ProducerIdExpirationCheckIntervalMs): Log = {
+                        producerIdExpirationCheckIntervalMs: Int = LogManager.ProducerIdExpirationCheckIntervalMs,
+                        lastShutdownClean: Boolean = true): Log = {
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r499055228
id: 499058360
url: https://api.github.com/repos/apache/kafka/pulls/comments/499058360
body: The change is unnecessary.
diff_hunk: @@ -2882,11 +2953,8 @@ class LogTest {
     records.foreach(segment.append _)
     segment.close()
 
-    // Create clean shutdown file so that we do not split during the load
-    createCleanShutdownFile()
-
     val logConfig = LogTest.createLogConfig(indexIntervalBytes = 1, fileDeleteDelayMs = 1000)
-    val log = createLog(logDir, logConfig, recoveryPoint = Long.MaxValue)
+    val log = createLog(logDir, logConfig, recoveryPoint = Long.MaxValue, lastShutdownClean = true)
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r499058360
id: 499058691
url: https://api.github.com/repos/apache/kafka/pulls/comments/499058691
body: The change is unnecessary.
diff_hunk: @@ -3073,9 +3139,8 @@ class LogTest {
     // check if recovery was attempted. Even if the recovery point is 0L, recovery should not be attempted as the
     // clean shutdown file exists.
     recoveryPoint = log.logEndOffset
-    log = createLog(logDir, logConfig)
+    log = createLog(logDir, logConfig, lastShutdownClean = true)
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r499058691
id: 499715151
url: https://api.github.com/repos/apache/kafka/pulls/comments/499715151
body: Done
diff_hunk: @@ -244,7 +244,8 @@ class Log(@volatile private var _dir: File,
           val producerIdExpirationCheckIntervalMs: Int,
           val topicPartition: TopicPartition,
           val producerStateManager: ProducerStateManager,
-          logDirFailureChannel: LogDirFailureChannel) extends Logging with KafkaMetricsGroup {
+          logDirFailureChannel: LogDirFailureChannel,
+          val hadCleanShutdown: Boolean = true) extends Logging with KafkaMetricsGroup {
path: core/src/main/scala/kafka/log/Log.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r499715151
id: 499718784
url: https://api.github.com/repos/apache/kafka/pulls/comments/499718784
body: I think you meant the `hadCleanShutdown` parameter I added. I did not add the `expectDeletedFiles` parameter.
I will remove the new parameter and add a comment here to indicate that the method always assumes we had a hard reset.
diff_hunk: @@ -4447,9 +4504,10 @@ class LogTest {
 
   private def recoverAndCheck(config: LogConfig,
                               expectedKeys: Iterable[Long],
-                              expectDeletedFiles: Boolean = true): Log = {
+                              expectDeletedFiles: Boolean = true,
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r499718784
id: 499724455
url: https://api.github.com/repos/apache/kafka/pulls/comments/499724455
body: Removed
diff_hunk: @@ -2882,11 +2953,8 @@ class LogTest {
     records.foreach(segment.append _)
     segment.close()
 
-    // Create clean shutdown file so that we do not split during the load
-    createCleanShutdownFile()
-
     val logConfig = LogTest.createLogConfig(indexIntervalBytes = 1, fileDeleteDelayMs = 1000)
-    val log = createLog(logDir, logConfig, recoveryPoint = Long.MaxValue)
+    val log = createLog(logDir, logConfig, recoveryPoint = Long.MaxValue, lastShutdownClean = true)
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r499724455
id: 499731061
url: https://api.github.com/repos/apache/kafka/pulls/comments/499731061
body: Removed.
diff_hunk: @@ -3073,9 +3139,8 @@ class LogTest {
     // check if recovery was attempted. Even if the recovery point is 0L, recovery should not be attempted as the
     // clean shutdown file exists.
     recoveryPoint = log.logEndOffset
-    log = createLog(logDir, logConfig)
+    log = createLog(logDir, logConfig, lastShutdownClean = true)
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r499731061
id: 509921322
url: https://api.github.com/repos/apache/kafka/pulls/comments/509921322
body: Done 
diff_hunk: @@ -4447,9 +4504,10 @@ class LogTest {
 
   private def recoverAndCheck(config: LogConfig,
                               expectedKeys: Iterable[Long],
-                              expectDeletedFiles: Boolean = true): Log = {
+                              expectDeletedFiles: Boolean = true,
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r509921322
id: 509921859
url: https://api.github.com/repos/apache/kafka/pulls/comments/509921859
body: Done
diff_hunk: @@ -4429,9 +4485,10 @@ class LogTest {
                         scheduler: Scheduler = mockTime.scheduler,
                         time: Time = mockTime,
                         maxProducerIdExpirationMs: Int = 60 * 60 * 1000,
-                        producerIdExpirationCheckIntervalMs: Int = LogManager.ProducerIdExpirationCheckIntervalMs): Log = {
+                        producerIdExpirationCheckIntervalMs: Int = LogManager.ProducerIdExpirationCheckIntervalMs,
+                        lastShutdownClean: Boolean = true): Log = {
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r509921859
id: 510527544
url: https://api.github.com/repos/apache/kafka/pulls/comments/510527544
body: This is an existing issue, but cleanShutdownFile.delete() doesn't seem to throw IOException.
diff_hunk: @@ -298,26 +300,38 @@ class LogManager(logDirs: Seq[File],
   /**
    * Recover and load all logs in the given data directories
    */
-  private def loadLogs(): Unit = {
+  private[log] def loadLogs(): Unit = {
     info(s"Loading logs from log dirs $liveLogDirs")
     val startMs = time.hiResClockMs()
     val threadPools = ArrayBuffer.empty[ExecutorService]
     val offlineDirs = mutable.Set.empty[(String, IOException)]
-    val jobs = mutable.Map.empty[File, Seq[Future[_]]]
+    val jobs = ArrayBuffer.empty[Seq[Future[_]]]
     var numTotalLogs = 0
 
     for (dir <- liveLogDirs) {
       val logDirAbsolutePath = dir.getAbsolutePath
+      var hadCleanShutdown: Boolean = false
       try {
         val pool = Executors.newFixedThreadPool(numRecoveryThreadsPerDataDir)
         threadPools.append(pool)
 
         val cleanShutdownFile = new File(dir, Log.CleanShutdownFile)
         if (cleanShutdownFile.exists) {
           info(s"Skipping recovery for all logs in $logDirAbsolutePath since clean shutdown file was found")
+          // Cache the clean shutdown status and use that for rest of log loading workflow. Delete the CleanShutdownFile
+          // so that if broker crashes while loading the log, it is considered hard shutdown during the next boot up. KAFKA-10471
+          try {
+            cleanShutdownFile.delete()
+          } catch {
+            case e: IOException =>
path: core/src/main/scala/kafka/log/LogManager.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r510527544
id: 510530777
url: https://api.github.com/repos/apache/kafka/pulls/comments/510530777
body: Hmm, it seems that this tests expects a clean shutdown.
diff_hunk: @@ -1257,7 +1328,7 @@ class LogTest {
     log.close()
 
     // After reloading log, producer state should not be regenerated
-    val reloadedLog = createLog(logDir, logConfig, logStartOffset = 1L)
+    val reloadedLog = createLog(logDir, logConfig, logStartOffset = 1L, lastShutdownClean = false)
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r510530777
id: 510991189
url: https://api.github.com/repos/apache/kafka/pulls/comments/510991189
body: It seems that this expects a clean shutdown.
diff_hunk: @@ -2131,12 +2202,12 @@ class LogTest {
       assertEquals("Should have same number of time index entries as before.", numTimeIndexEntries, log.activeSegment.timeIndex.entries)
     }
 
-    log = createLog(logDir, logConfig, recoveryPoint = lastOffset)
+    log = createLog(logDir, logConfig, recoveryPoint = lastOffset, lastShutdownClean = false)
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r510991189
id: 510995587
url: https://api.github.com/repos/apache/kafka/pulls/comments/510995587
body: It seem the createLog() call on line 3976 inside testRecoverOnlyLastSegment() needs to have lastShutdownClean = false.
diff_hunk: @@ -3623,7 +3690,7 @@ class LogTest {
     log.close()
 
     // reopen the log and recover from the beginning
-    val recoveredLog = createLog(logDir, LogConfig())
+    val recoveredLog = createLog(logDir, LogConfig(), lastShutdownClean = false)
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r510995587
id: 511005584
url: https://api.github.com/repos/apache/kafka/pulls/comments/511005584
body: This is an existing problem. Since no callers are explicitly setting expectDeletedFiles, could we just remove this param?
diff_hunk: @@ -4445,11 +4504,9 @@ class LogTest {
     (log, segmentWithOverflow)
   }
 
-  private def recoverAndCheck(config: LogConfig,
-                              expectedKeys: Iterable[Long],
-                              expectDeletedFiles: Boolean = true): Log = {
-    LogTest.recoverAndCheck(logDir, config, expectedKeys, brokerTopicStats, mockTime, mockTime.scheduler,
-      expectDeletedFiles)
+  private def recoverAndCheck(config: LogConfig, expectedKeys: Iterable[Long], expectDeletedFiles: Boolean = true) = {
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r511005584
id: 511277713
url: https://api.github.com/repos/apache/kafka/pulls/comments/511277713
body: `java.nio.file.Files` API throws `IOException` but not the one used here `java.io.File`. Will remove this exception
diff_hunk: @@ -298,26 +300,38 @@ class LogManager(logDirs: Seq[File],
   /**
    * Recover and load all logs in the given data directories
    */
-  private def loadLogs(): Unit = {
+  private[log] def loadLogs(): Unit = {
     info(s"Loading logs from log dirs $liveLogDirs")
     val startMs = time.hiResClockMs()
     val threadPools = ArrayBuffer.empty[ExecutorService]
     val offlineDirs = mutable.Set.empty[(String, IOException)]
-    val jobs = mutable.Map.empty[File, Seq[Future[_]]]
+    val jobs = ArrayBuffer.empty[Seq[Future[_]]]
     var numTotalLogs = 0
 
     for (dir <- liveLogDirs) {
       val logDirAbsolutePath = dir.getAbsolutePath
+      var hadCleanShutdown: Boolean = false
       try {
         val pool = Executors.newFixedThreadPool(numRecoveryThreadsPerDataDir)
         threadPools.append(pool)
 
         val cleanShutdownFile = new File(dir, Log.CleanShutdownFile)
         if (cleanShutdownFile.exists) {
           info(s"Skipping recovery for all logs in $logDirAbsolutePath since clean shutdown file was found")
+          // Cache the clean shutdown status and use that for rest of log loading workflow. Delete the CleanShutdownFile
+          // so that if broker crashes while loading the log, it is considered hard shutdown during the next boot up. KAFKA-10471
+          try {
+            cleanShutdownFile.delete()
+          } catch {
+            case e: IOException =>
path: core/src/main/scala/kafka/log/LogManager.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r511277713
id: 511545712
url: https://api.github.com/repos/apache/kafka/pulls/comments/511545712
body: Jun, this test was not creating a clean shut down file before opening the log again. So, it would have gone through the recovery path. Hence, I have set `lastShutdownClean` parameter to `false`. Similarly, for line 2210.
diff_hunk: @@ -2131,12 +2202,12 @@ class LogTest {
       assertEquals("Should have same number of time index entries as before.", numTimeIndexEntries, log.activeSegment.timeIndex.entries)
     }
 
-    log = createLog(logDir, logConfig, recoveryPoint = lastOffset)
+    log = createLog(logDir, logConfig, recoveryPoint = lastOffset, lastShutdownClean = false)
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r511545712
id: 511545890
url: https://api.github.com/repos/apache/kafka/pulls/comments/511545890
body: Jun, this test was not creating a clean shut down file before opening the log again. So, it would have been going through log recovery code path earlier as well.
diff_hunk: @@ -1257,7 +1328,7 @@ class LogTest {
     log.close()
 
     // After reloading log, producer state should not be regenerated
-    val reloadedLog = createLog(logDir, logConfig, logStartOffset = 1L)
+    val reloadedLog = createLog(logDir, logConfig, logStartOffset = 1L, lastShutdownClean = false)
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r511545890
id: 512314613
url: https://api.github.com/repos/apache/kafka/pulls/comments/512314613
body: This line seems unnecessary since hadCleanShutdown is initialized to false. 
diff_hunk: @@ -298,26 +300,32 @@ class LogManager(logDirs: Seq[File],
   /**
    * Recover and load all logs in the given data directories
    */
-  private def loadLogs(): Unit = {
+  private[log] def loadLogs(): Unit = {
     info(s"Loading logs from log dirs $liveLogDirs")
     val startMs = time.hiResClockMs()
     val threadPools = ArrayBuffer.empty[ExecutorService]
     val offlineDirs = mutable.Set.empty[(String, IOException)]
-    val jobs = mutable.Map.empty[File, Seq[Future[_]]]
+    val jobs = ArrayBuffer.empty[Seq[Future[_]]]
     var numTotalLogs = 0
 
     for (dir <- liveLogDirs) {
       val logDirAbsolutePath = dir.getAbsolutePath
+      var hadCleanShutdown: Boolean = false
       try {
         val pool = Executors.newFixedThreadPool(numRecoveryThreadsPerDataDir)
         threadPools.append(pool)
 
         val cleanShutdownFile = new File(dir, Log.CleanShutdownFile)
         if (cleanShutdownFile.exists) {
           info(s"Skipping recovery for all logs in $logDirAbsolutePath since clean shutdown file was found")
+          // Cache the clean shutdown status and use that for rest of log loading workflow. Delete the CleanShutdownFile
+          // so that if broker crashes while loading the log, it is considered hard shutdown during the next boot up. KAFKA-10471
+          cleanShutdownFile.delete()
+          hadCleanShutdown = true
         } else {
           // log recovery itself is being performed by `Log` class during initialization
           info(s"Attempting recovery for all logs in $logDirAbsolutePath since no clean shutdown file was found")
+          hadCleanShutdown = false
path: core/src/main/scala/kafka/log/LogManager.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r512314613
id: 512317288
url: https://api.github.com/repos/apache/kafka/pulls/comments/512317288
body: It seems we don't need to set hadCleanShutdown to true.
diff_hunk: @@ -978,10 +1051,10 @@ class LogTest {
       producerIdExpirationCheckIntervalMs = 30000,
       topicPartition = Log.parseTopicPartitionName(logDir),
       producerStateManager = stateManager,
-      logDirFailureChannel = null)
+      logDirFailureChannel = null,
+      hadCleanShutdown = true)
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r512317288
id: 512317493
url: https://api.github.com/repos/apache/kafka/pulls/comments/512317493
body: It seems we don't need to set hadCleanShutdown to true.
diff_hunk: @@ -1021,10 +1092,10 @@ class LogTest {
       producerIdExpirationCheckIntervalMs = 30000,
       topicPartition = Log.parseTopicPartitionName(logDir),
       producerStateManager = stateManager,
-      logDirFailureChannel = null)
+      logDirFailureChannel = null,
+      hadCleanShutdown = true)
path: core/src/test/scala/unit/kafka/log/LogTest.scala
html: https://github.com/apache/kafka/pull/9364#discussion_r512317493
pull_request_number: 9364
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9363/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9363/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9363"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9363"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9363/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9363"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/2009da29e21ee190881cfa3a1121f425dc542270"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "3bc2df7651d8b9029d2478a3f39b3b223c0532b7",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "*More detailed description of your change,\r\nThe purpose of this PR is to support microseconds precision when dealing with timestamps.\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9363/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9363/commits",
  "created_at": "2020-10-01T20:22:24Z",
  "diff_url": "https://github.com/apache/kafka/pull/9363.diff",
  "draft": false,
  "head": {
    "label": "danielpetisme:KAFKA-10561",
    "ref": "KAFKA-10561",
    "repo": {
      "archive_url": "https://api.github.com/repos/danielpetisme/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/danielpetisme/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/danielpetisme/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/danielpetisme/kafka/branches{/branch}",
      "clone_url": "https://github.com/danielpetisme/kafka.git",
      "collaborators_url": "https://api.github.com/repos/danielpetisme/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/danielpetisme/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/danielpetisme/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/danielpetisme/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/danielpetisme/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/danielpetisme/kafka/contributors",
      "created_at": "2020-10-01T20:08:55Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/danielpetisme/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/danielpetisme/kafka/downloads",
      "events_url": "https://api.github.com/repos/danielpetisme/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/danielpetisme/kafka/forks",
      "full_name": "danielpetisme/kafka",
      "git_commits_url": "https://api.github.com/repos/danielpetisme/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/danielpetisme/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/danielpetisme/kafka/git/tags{/sha}",
      "git_url": "git://github.com/danielpetisme/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/danielpetisme/kafka/hooks",
      "html_url": "https://github.com/danielpetisme/kafka",
      "id": 300411189,
      "issue_comment_url": "https://api.github.com/repos/danielpetisme/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/danielpetisme/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/danielpetisme/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/danielpetisme/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/danielpetisme/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/danielpetisme/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/danielpetisme/kafka/merges",
      "milestones_url": "https://api.github.com/repos/danielpetisme/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMDA0MTExODk=",
      "notifications_url": "https://api.github.com/repos/danielpetisme/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/593564?v=4",
        "events_url": "https://api.github.com/users/danielpetisme/events{/privacy}",
        "followers_url": "https://api.github.com/users/danielpetisme/followers",
        "following_url": "https://api.github.com/users/danielpetisme/following{/other_user}",
        "gists_url": "https://api.github.com/users/danielpetisme/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/danielpetisme",
        "id": 593564,
        "login": "danielpetisme",
        "node_id": "MDQ6VXNlcjU5MzU2NA==",
        "organizations_url": "https://api.github.com/users/danielpetisme/orgs",
        "received_events_url": "https://api.github.com/users/danielpetisme/received_events",
        "repos_url": "https://api.github.com/users/danielpetisme/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/danielpetisme/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/danielpetisme/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/danielpetisme"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/danielpetisme/kafka/pulls{/number}",
      "pushed_at": "2020-10-02T07:38:27Z",
      "releases_url": "https://api.github.com/repos/danielpetisme/kafka/releases{/id}",
      "size": 106978,
      "ssh_url": "git@github.com:danielpetisme/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/danielpetisme/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/danielpetisme/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/danielpetisme/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/danielpetisme/kafka/subscription",
      "svn_url": "https://github.com/danielpetisme/kafka",
      "tags_url": "https://api.github.com/repos/danielpetisme/kafka/tags",
      "teams_url": "https://api.github.com/repos/danielpetisme/kafka/teams",
      "trees_url": "https://api.github.com/repos/danielpetisme/kafka/git/trees{/sha}",
      "updated_at": "2020-10-01T20:08:57Z",
      "url": "https://api.github.com/repos/danielpetisme/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "2009da29e21ee190881cfa3a1121f425dc542270",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/593564?v=4",
      "events_url": "https://api.github.com/users/danielpetisme/events{/privacy}",
      "followers_url": "https://api.github.com/users/danielpetisme/followers",
      "following_url": "https://api.github.com/users/danielpetisme/following{/other_user}",
      "gists_url": "https://api.github.com/users/danielpetisme/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/danielpetisme",
      "id": 593564,
      "login": "danielpetisme",
      "node_id": "MDQ6VXNlcjU5MzU2NA==",
      "organizations_url": "https://api.github.com/users/danielpetisme/orgs",
      "received_events_url": "https://api.github.com/users/danielpetisme/received_events",
      "repos_url": "https://api.github.com/users/danielpetisme/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/danielpetisme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danielpetisme/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/danielpetisme"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9363",
  "id": 496524929,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9363",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "6bd40bedadc9db35fa7be658da91df966f16648b",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDk2NTI0OTI5",
  "number": 9363,
  "patch_url": "https://github.com/apache/kafka/pull/9363.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9363/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/2009da29e21ee190881cfa3a1121f425dc542270",
  "title": "KAFKA-10561: Timestamp Microseconds support",
  "updated_at": "2020-10-02T07:38:43Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9363",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/593564?v=4",
    "events_url": "https://api.github.com/users/danielpetisme/events{/privacy}",
    "followers_url": "https://api.github.com/users/danielpetisme/followers",
    "following_url": "https://api.github.com/users/danielpetisme/following{/other_user}",
    "gists_url": "https://api.github.com/users/danielpetisme/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/danielpetisme",
    "id": 593564,
    "login": "danielpetisme",
    "node_id": "MDQ6VXNlcjU5MzU2NA==",
    "organizations_url": "https://api.github.com/users/danielpetisme/orgs",
    "received_events_url": "https://api.github.com/users/danielpetisme/received_events",
    "repos_url": "https://api.github.com/users/danielpetisme/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/danielpetisme/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/danielpetisme/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/danielpetisme"
  }
}
json_root is_array: false
json_root is_object: true
number: 9363
url: https://api.github.com/repos/apache/kafka/pulls/9363
title: KAFKA-10561: Timestamp Microseconds support
body: *More detailed description of your change,
The purpose of this PR is to support microseconds precision when dealing with timestamps.

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9363/comments
pull_request_number: 9363
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9362/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9362/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9362"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9362"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9362/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9362"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/fd2faa8a9acf9e3859471c2fefe229d6a9ea1101"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "ad17ea10890872ddd1264681d61e2c5a40382590",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Something i found that that was missing in the /bin sources when using kafka, is a script to help migrating between 2 clusters, without messing out the offsets.\r\n\r\nso i have made this suite of scripts to simulate a cluster migration, and after the dry-run, finaly migrate !",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9362/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9362/commits",
  "created_at": "2020-10-01T20:02:09Z",
  "diff_url": "https://github.com/apache/kafka/pull/9362.diff",
  "draft": false,
  "head": {
    "label": "tcarecolin:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/tcarecolin/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/tcarecolin/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/tcarecolin/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/tcarecolin/kafka/branches{/branch}",
      "clone_url": "https://github.com/tcarecolin/kafka.git",
      "collaborators_url": "https://api.github.com/repos/tcarecolin/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/tcarecolin/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/tcarecolin/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/tcarecolin/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/tcarecolin/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/tcarecolin/kafka/contributors",
      "created_at": "2019-11-05T20:22:46Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/tcarecolin/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/tcarecolin/kafka/downloads",
      "events_url": "https://api.github.com/repos/tcarecolin/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/tcarecolin/kafka/forks",
      "full_name": "tcarecolin/kafka",
      "git_commits_url": "https://api.github.com/repos/tcarecolin/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/tcarecolin/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/tcarecolin/kafka/git/tags{/sha}",
      "git_url": "git://github.com/tcarecolin/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/tcarecolin/kafka/hooks",
      "html_url": "https://github.com/tcarecolin/kafka",
      "id": 219843389,
      "issue_comment_url": "https://api.github.com/repos/tcarecolin/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/tcarecolin/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/tcarecolin/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/tcarecolin/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/tcarecolin/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/tcarecolin/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/tcarecolin/kafka/merges",
      "milestones_url": "https://api.github.com/repos/tcarecolin/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMTk4NDMzODk=",
      "notifications_url": "https://api.github.com/repos/tcarecolin/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/25033031?v=4",
        "events_url": "https://api.github.com/users/tcarecolin/events{/privacy}",
        "followers_url": "https://api.github.com/users/tcarecolin/followers",
        "following_url": "https://api.github.com/users/tcarecolin/following{/other_user}",
        "gists_url": "https://api.github.com/users/tcarecolin/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tcarecolin",
        "id": 25033031,
        "login": "tcarecolin",
        "node_id": "MDQ6VXNlcjI1MDMzMDMx",
        "organizations_url": "https://api.github.com/users/tcarecolin/orgs",
        "received_events_url": "https://api.github.com/users/tcarecolin/received_events",
        "repos_url": "https://api.github.com/users/tcarecolin/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tcarecolin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tcarecolin/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tcarecolin"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/tcarecolin/kafka/pulls{/number}",
      "pushed_at": "2020-10-01T19:57:39Z",
      "releases_url": "https://api.github.com/repos/tcarecolin/kafka/releases{/id}",
      "size": 91483,
      "ssh_url": "git@github.com:tcarecolin/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/tcarecolin/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/tcarecolin/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/tcarecolin/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/tcarecolin/kafka/subscription",
      "svn_url": "https://github.com/tcarecolin/kafka",
      "tags_url": "https://api.github.com/repos/tcarecolin/kafka/tags",
      "teams_url": "https://api.github.com/repos/tcarecolin/kafka/teams",
      "trees_url": "https://api.github.com/repos/tcarecolin/kafka/git/trees{/sha}",
      "updated_at": "2020-10-01T19:57:55Z",
      "url": "https://api.github.com/repos/tcarecolin/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "fd2faa8a9acf9e3859471c2fefe229d6a9ea1101",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/25033031?v=4",
      "events_url": "https://api.github.com/users/tcarecolin/events{/privacy}",
      "followers_url": "https://api.github.com/users/tcarecolin/followers",
      "following_url": "https://api.github.com/users/tcarecolin/following{/other_user}",
      "gists_url": "https://api.github.com/users/tcarecolin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/tcarecolin",
      "id": 25033031,
      "login": "tcarecolin",
      "node_id": "MDQ6VXNlcjI1MDMzMDMx",
      "organizations_url": "https://api.github.com/users/tcarecolin/orgs",
      "received_events_url": "https://api.github.com/users/tcarecolin/received_events",
      "repos_url": "https://api.github.com/users/tcarecolin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/tcarecolin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tcarecolin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/tcarecolin"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9362",
  "id": 496514443,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9362",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "f37a3d2e2641eaa13a6765cc03d2902d1a830c10",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDk2NTE0NDQz",
  "number": 9362,
  "patch_url": "https://github.com/apache/kafka/pull/9362.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9362/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/fd2faa8a9acf9e3859471c2fefe229d6a9ea1101",
  "title": "KAFKA-migration-scripts",
  "updated_at": "2020-10-01T20:14:32Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9362",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/25033031?v=4",
    "events_url": "https://api.github.com/users/tcarecolin/events{/privacy}",
    "followers_url": "https://api.github.com/users/tcarecolin/followers",
    "following_url": "https://api.github.com/users/tcarecolin/following{/other_user}",
    "gists_url": "https://api.github.com/users/tcarecolin/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/tcarecolin",
    "id": 25033031,
    "login": "tcarecolin",
    "node_id": "MDQ6VXNlcjI1MDMzMDMx",
    "organizations_url": "https://api.github.com/users/tcarecolin/orgs",
    "received_events_url": "https://api.github.com/users/tcarecolin/received_events",
    "repos_url": "https://api.github.com/users/tcarecolin/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/tcarecolin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tcarecolin/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/tcarecolin"
  }
}
json_root is_array: false
json_root is_object: true
number: 9362
url: https://api.github.com/repos/apache/kafka/pulls/9362
title: KAFKA-migration-scripts
body: Something i found that that was missing in the /bin sources when using kafka, is a script to help migrating between 2 clusters, without messing out the offsets.

so i have made this suite of scripts to simulate a cluster migration, and after the dry-run, finaly migrate !
review_comments: https://api.github.com/repos/apache/kafka/pulls/9362/comments
pull_request_number: 9362
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9359/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9359/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9359"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9359"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9359/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9359"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/4cf873e11d0a79dc1f35f4bb63dabcc6c4e8af40"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "94d21e3f8a64ea09449d7c4ce0e3eb4423dec369",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "I have written actionable error messages for the JSON-converter \r\n\r\n@rhauch Hi, please review if this is acceptable, if anything needs to be changed and if I need to do the same for the rest of the converters.",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9359/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9359/commits",
  "created_at": "2020-10-01T08:11:35Z",
  "diff_url": "https://github.com/apache/kafka/pull/9359.diff",
  "draft": false,
  "head": {
    "label": "shadikajevand:feature/KAFKA-10273",
    "ref": "feature/KAFKA-10273",
    "repo": {
      "archive_url": "https://api.github.com/repos/shadikajevand/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/shadikajevand/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/shadikajevand/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/shadikajevand/kafka/branches{/branch}",
      "clone_url": "https://github.com/shadikajevand/kafka.git",
      "collaborators_url": "https://api.github.com/repos/shadikajevand/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/shadikajevand/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/shadikajevand/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/shadikajevand/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/shadikajevand/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/shadikajevand/kafka/contributors",
      "created_at": "2020-09-30T09:39:12Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/shadikajevand/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/shadikajevand/kafka/downloads",
      "events_url": "https://api.github.com/repos/shadikajevand/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/shadikajevand/kafka/forks",
      "full_name": "shadikajevand/kafka",
      "git_commits_url": "https://api.github.com/repos/shadikajevand/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/shadikajevand/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/shadikajevand/kafka/git/tags{/sha}",
      "git_url": "git://github.com/shadikajevand/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/shadikajevand/kafka/hooks",
      "html_url": "https://github.com/shadikajevand/kafka",
      "id": 299873276,
      "issue_comment_url": "https://api.github.com/repos/shadikajevand/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/shadikajevand/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/shadikajevand/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/shadikajevand/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/shadikajevand/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/shadikajevand/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/shadikajevand/kafka/merges",
      "milestones_url": "https://api.github.com/repos/shadikajevand/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyOTk4NzMyNzY=",
      "notifications_url": "https://api.github.com/repos/shadikajevand/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/53711836?v=4",
        "events_url": "https://api.github.com/users/shadikajevand/events{/privacy}",
        "followers_url": "https://api.github.com/users/shadikajevand/followers",
        "following_url": "https://api.github.com/users/shadikajevand/following{/other_user}",
        "gists_url": "https://api.github.com/users/shadikajevand/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/shadikajevand",
        "id": 53711836,
        "login": "shadikajevand",
        "node_id": "MDQ6VXNlcjUzNzExODM2",
        "organizations_url": "https://api.github.com/users/shadikajevand/orgs",
        "received_events_url": "https://api.github.com/users/shadikajevand/received_events",
        "repos_url": "https://api.github.com/users/shadikajevand/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/shadikajevand/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shadikajevand/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/shadikajevand"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/shadikajevand/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T10:47:38Z",
      "releases_url": "https://api.github.com/repos/shadikajevand/kafka/releases{/id}",
      "size": 107797,
      "ssh_url": "git@github.com:shadikajevand/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/shadikajevand/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/shadikajevand/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/shadikajevand/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/shadikajevand/kafka/subscription",
      "svn_url": "https://github.com/shadikajevand/kafka",
      "tags_url": "https://api.github.com/repos/shadikajevand/kafka/tags",
      "teams_url": "https://api.github.com/repos/shadikajevand/kafka/teams",
      "trees_url": "https://api.github.com/repos/shadikajevand/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T09:33:23Z",
      "url": "https://api.github.com/repos/shadikajevand/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "4cf873e11d0a79dc1f35f4bb63dabcc6c4e8af40",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/53711836?v=4",
      "events_url": "https://api.github.com/users/shadikajevand/events{/privacy}",
      "followers_url": "https://api.github.com/users/shadikajevand/followers",
      "following_url": "https://api.github.com/users/shadikajevand/following{/other_user}",
      "gists_url": "https://api.github.com/users/shadikajevand/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/shadikajevand",
      "id": 53711836,
      "login": "shadikajevand",
      "node_id": "MDQ6VXNlcjUzNzExODM2",
      "organizations_url": "https://api.github.com/users/shadikajevand/orgs",
      "received_events_url": "https://api.github.com/users/shadikajevand/received_events",
      "repos_url": "https://api.github.com/users/shadikajevand/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/shadikajevand/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shadikajevand/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/shadikajevand"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9359",
  "id": 496059790,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9359",
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "",
      "id": 851037639,
      "name": "connect",
      "node_id": "MDU6TGFiZWw4NTEwMzc2Mzk=",
      "url": "https://api.github.com/repos/apache/kafka/labels/connect"
    }
  ],
  "locked": false,
  "merge_commit_sha": "725d58b14c98375a4be38ffb6097b1ed0e34cd57",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDk2MDU5Nzkw",
  "number": 9359,
  "patch_url": "https://github.com/apache/kafka/pull/9359.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9359/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/4cf873e11d0a79dc1f35f4bb63dabcc6c4e8af40",
  "title": "kafka-10273 Connect Converters should produce actionable error messages",
  "updated_at": "2020-10-27T10:47:42Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9359",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/53711836?v=4",
    "events_url": "https://api.github.com/users/shadikajevand/events{/privacy}",
    "followers_url": "https://api.github.com/users/shadikajevand/followers",
    "following_url": "https://api.github.com/users/shadikajevand/following{/other_user}",
    "gists_url": "https://api.github.com/users/shadikajevand/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/shadikajevand",
    "id": 53711836,
    "login": "shadikajevand",
    "node_id": "MDQ6VXNlcjUzNzExODM2",
    "organizations_url": "https://api.github.com/users/shadikajevand/orgs",
    "received_events_url": "https://api.github.com/users/shadikajevand/received_events",
    "repos_url": "https://api.github.com/users/shadikajevand/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/shadikajevand/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/shadikajevand/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/shadikajevand"
  }
}
json_root is_array: false
json_root is_object: true
number: 9359
url: https://api.github.com/repos/apache/kafka/pulls/9359
title: kafka-10273 Connect Converters should produce actionable error messages
body: I have written actionable error messages for the JSON-converter 

@rhauch Hi, please review if this is acceptable, if anything needs to be changed and if I need to do the same for the rest of the converters.
review_comments: https://api.github.com/repos/apache/kafka/pulls/9359/comments
id: 508557355
url: https://api.github.com/repos/apache/kafka/pulls/comments/508557355
body: Using `Class.toString()` method here will output a message like:
```
class org.apache.kafka.connect.storage.StringConverter Failed to serialize to a string: ...
```
First, beginning this exception message with `class` it not capitalized even though it's the start of a sentence, and `Failed` should not be capitalized in the middle of a sentence. Plus, I'm unconvinced that including the package is helpful.

But more importantly, I don't think we should change these exception messages in any of the converters, because we'd have to change them in all converter implementations to remain consistent. While we could do that for AK-provided converters, there are lots of other converters that may have modeled their error messages after these, and would then become inconsistent. Plus, why change all of them when we're catching the exception in the WorkerSinkTask and WorkerSourceTask? Wouldn't it make more sense to change it there so that we don't have to change any converters?

diff_hunk: @@ -79,7 +79,7 @@ public void configure(Map<String, ?> configs, boolean isKey) {
         try {
             return serializer.serialize(topic, value == null ? null : value.toString());
         } catch (SerializationException e) {
-            throw new DataException("Failed to serialize to a string: ", e);
+            throw new DataException(this.getClass() + " Failed to serialize to a string: ", e);
path: connect/api/src/main/java/org/apache/kafka/connect/storage/StringConverter.java
html: https://github.com/apache/kafka/pull/9359#discussion_r508557355
id: 508563162
url: https://api.github.com/repos/apache/kafka/pulls/comments/508563162
body: Why not create a single formatted string and use it for both the log and exception messages? Also, would it be useful to have the short name of the converter class in the message as well? Maybe something like:
``````suggestion
            String errorMessage = String.format("Error while deserializing the key for record in topic '%s', partition %s (timestamp %s) at offset %s. " +
                    "Check the 'key.converter' and 'key.converter.*' settings in the connector configuration, " +
                    "and ensure that the converter matches the converter/serializer used by the application that produced this record. " +
                    "Underlying converter error: %s", keyConverter.getClass().getSimpleName(), msg.topic(), msg.partition(), msg.timestamp(), msg.offset(), e.getMessage());
            log.error(errorMessage, e);
            throw new DataException(errorMessage, e);
```
Note the single quotes and slight rewording.
diff_hunk: @@ -531,19 +532,25 @@ private SchemaAndValue convertKey(ConsumerRecord<byte[], byte[]> msg) {
         try {
             return keyConverter.toConnectData(msg.topic(), msg.headers(), msg.key());
         } catch (Exception e) {
-            log.error("{} Error converting message key in topic '{}' partition {} at offset {} and timestamp {}: {}",
-                    this, msg.topic(), msg.partition(), msg.offset(), msg.timestamp(), e.getMessage(), e);
-            throw e;
+            String errorMessage = "Error while deserializing the key for record in topic %s, partition %s, timestamp %s, and at offset %s. " +
+                    "Check the key.converter and key.converter.* settings in the connector configuration, " +
+                    "and ensure that the converter matches the converter/serializer used by the application that produced this record. " +
+                    "Underlying converter error: %s";
+            log.error(String.format(errorMessage, msg.topic(), msg.partition(), msg.timestamp(), msg.offset(), e.getMessage()), e);
+            throw new DataException(String.format(errorMessage, msg.topic(), msg.partition(), msg.offset(), msg.timestamp(), e.getMessage()), e);
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java
html: https://github.com/apache/kafka/pull/9359#discussion_r508563162
id: 508563361
url: https://api.github.com/repos/apache/kafka/pulls/comments/508563361
body: Similar to above suggestion.
diff_hunk: @@ -531,19 +532,25 @@ private SchemaAndValue convertKey(ConsumerRecord<byte[], byte[]> msg) {
         try {
             return keyConverter.toConnectData(msg.topic(), msg.headers(), msg.key());
         } catch (Exception e) {
-            log.error("{} Error converting message key in topic '{}' partition {} at offset {} and timestamp {}: {}",
-                    this, msg.topic(), msg.partition(), msg.offset(), msg.timestamp(), e.getMessage(), e);
-            throw e;
+            String errorMessage = "Error while deserializing the key for record in topic %s, partition %s, timestamp %s, and at offset %s. " +
+                    "Check the key.converter and key.converter.* settings in the connector configuration, " +
+                    "and ensure that the converter matches the converter/serializer used by the application that produced this record. " +
+                    "Underlying converter error: %s";
+            log.error(String.format(errorMessage, msg.topic(), msg.partition(), msg.timestamp(), msg.offset(), e.getMessage()), e);
+            throw new DataException(String.format(errorMessage, msg.topic(), msg.partition(), msg.offset(), msg.timestamp(), e.getMessage()), e);
         }
     }
 
     private SchemaAndValue convertValue(ConsumerRecord<byte[], byte[]> msg) {
         try {
             return valueConverter.toConnectData(msg.topic(), msg.headers(), msg.value());
         } catch (Exception e) {
-            log.error("{} Error converting message value in topic '{}' partition {} at offset {} and timestamp {}: {}",
-                    this, msg.topic(), msg.partition(), msg.offset(), msg.timestamp(), e.getMessage(), e);
-            throw e;
+            String errorMessage = "Error while deserializing the value for record in topic %s, partition %s, timestamp %s, and at offset %s. " +
+                    "Check the value.converter and value.converter.* settings in the connector configuration, " +
+                    "and ensure that the converter matches the converter/serializer used by the application that produced this record. " +
+                    "Underlying converter error: %s";
+            log.error(String.format(errorMessage, msg.topic(), msg.partition(), msg.timestamp(), msg.offset(), e.getMessage()), e);
+            throw new DataException(String.format(errorMessage, msg.topic(), msg.partition(), msg.offset(), msg.timestamp(), e.getMessage()), e);
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java
html: https://github.com/apache/kafka/pull/9359#discussion_r508563361
id: 508563664
url: https://api.github.com/repos/apache/kafka/pulls/comments/508563664
body: Similar to above suggestion.
diff_hunk: @@ -602,6 +602,30 @@ private synchronized void finishSuccessfulFlush() {
         flushing = false;
     }
 
+    private byte[] convertKey(SourceRecord record, RecordHeaders headers) {
+        try {
+            return keyConverter.fromConnectData(record.topic(), headers, record.keySchema(), record.key());
+        } catch (Exception e) {
+            String errorMessage = "%s Error while serializing the key for a source record to topic: %s. Check the key.converter and key.converter.* " +
+                    "settings in the connector configuration, or in the worker configuration if the connector is inheriting the connector configuration. " +
+                    "Underlying converter error: %s";
+            log.error(String.format(errorMessage, this, record.topic(), e.getMessage()), e);
+            throw new RetriableException(String.format(errorMessage, this, record.topic(), e.getMessage()), e);
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java
html: https://github.com/apache/kafka/pull/9359#discussion_r508563664
id: 508563758
url: https://api.github.com/repos/apache/kafka/pulls/comments/508563758
body: Similar to above suggestion.
diff_hunk: @@ -602,6 +602,30 @@ private synchronized void finishSuccessfulFlush() {
         flushing = false;
     }
 
+    private byte[] convertKey(SourceRecord record, RecordHeaders headers) {
+        try {
+            return keyConverter.fromConnectData(record.topic(), headers, record.keySchema(), record.key());
+        } catch (Exception e) {
+            String errorMessage = "%s Error while serializing the key for a source record to topic: %s. Check the key.converter and key.converter.* " +
+                    "settings in the connector configuration, or in the worker configuration if the connector is inheriting the connector configuration. " +
+                    "Underlying converter error: %s";
+            log.error(String.format(errorMessage, this, record.topic(), e.getMessage()), e);
+            throw new RetriableException(String.format(errorMessage, this, record.topic(), e.getMessage()), e);
+        }
+    }
+
+    private byte[] convertValue(SourceRecord record, RecordHeaders headers) {
+        try {
+            return valueConverter.fromConnectData(record.topic(), headers, record.valueSchema(), record.value());
+        } catch (Exception e) {
+            String errorMessage = "%s Error while serializing the value for a source record to topic: %s. Check the value.converter and value.converter.* " +
+                    "settings in the connector configuration, or in the worker configuration if the connector is inheriting the connector configuration. " +
+                    "Underlying converter error: %s";
+            log.error(String.format(errorMessage, this, record.topic(), e.getMessage()), e);
+            throw new RetriableException(String.format(errorMessage, this, record.topic(), e.getMessage()), e);
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java
html: https://github.com/apache/kafka/pull/9359#discussion_r508563758
pull_request_number: 9359
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9351/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9351/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9351"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9351"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9351/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9351"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/4df95801fcea876d3630f4d3e2ec8ee094b9c6e3"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "a0fec75d3cee3d23bd517fe0acc65270a6cb0f88",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "There is a JIRA ticket requesting this small change (https://issues.apache.org/jira/browse/KAFKA-10047)\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [x] Verify design and implementation \r\n- [x] Verify test coverage and CI build status\r\n- [x] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9351/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9351/commits",
  "created_at": "2020-09-29T17:59:33Z",
  "diff_url": "https://github.com/apache/kafka/pull/9351.diff",
  "draft": false,
  "head": {
    "label": "leosilvadev:KAFKA-10047-remove-unnecessary-widening-int-to-long",
    "ref": "KAFKA-10047-remove-unnecessary-widening-int-to-long",
    "repo": {
      "archive_url": "https://api.github.com/repos/leosilvadev/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/leosilvadev/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/leosilvadev/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/leosilvadev/kafka/branches{/branch}",
      "clone_url": "https://github.com/leosilvadev/kafka.git",
      "collaborators_url": "https://api.github.com/repos/leosilvadev/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/leosilvadev/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/leosilvadev/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/leosilvadev/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/leosilvadev/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/leosilvadev/kafka/contributors",
      "created_at": "2020-09-29T17:40:19Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/leosilvadev/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/leosilvadev/kafka/downloads",
      "events_url": "https://api.github.com/repos/leosilvadev/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/leosilvadev/kafka/forks",
      "full_name": "leosilvadev/kafka",
      "git_commits_url": "https://api.github.com/repos/leosilvadev/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/leosilvadev/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/leosilvadev/kafka/git/tags{/sha}",
      "git_url": "git://github.com/leosilvadev/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/leosilvadev/kafka/hooks",
      "html_url": "https://github.com/leosilvadev/kafka",
      "id": 299692675,
      "issue_comment_url": "https://api.github.com/repos/leosilvadev/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/leosilvadev/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/leosilvadev/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/leosilvadev/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/leosilvadev/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/leosilvadev/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/leosilvadev/kafka/merges",
      "milestones_url": "https://api.github.com/repos/leosilvadev/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyOTk2OTI2NzU=",
      "notifications_url": "https://api.github.com/repos/leosilvadev/kafka/notifications{?since,all,participating}",
      "open_issues": 1,
      "open_issues_count": 1,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/5465808?v=4",
        "events_url": "https://api.github.com/users/leosilvadev/events{/privacy}",
        "followers_url": "https://api.github.com/users/leosilvadev/followers",
        "following_url": "https://api.github.com/users/leosilvadev/following{/other_user}",
        "gists_url": "https://api.github.com/users/leosilvadev/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/leosilvadev",
        "id": 5465808,
        "login": "leosilvadev",
        "node_id": "MDQ6VXNlcjU0NjU4MDg=",
        "organizations_url": "https://api.github.com/users/leosilvadev/orgs",
        "received_events_url": "https://api.github.com/users/leosilvadev/received_events",
        "repos_url": "https://api.github.com/users/leosilvadev/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/leosilvadev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/leosilvadev/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/leosilvadev"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/leosilvadev/kafka/pulls{/number}",
      "pushed_at": "2020-09-29T18:02:18Z",
      "releases_url": "https://api.github.com/repos/leosilvadev/kafka/releases{/id}",
      "size": 106527,
      "ssh_url": "git@github.com:leosilvadev/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/leosilvadev/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/leosilvadev/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/leosilvadev/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/leosilvadev/kafka/subscription",
      "svn_url": "https://github.com/leosilvadev/kafka",
      "tags_url": "https://api.github.com/repos/leosilvadev/kafka/tags",
      "teams_url": "https://api.github.com/repos/leosilvadev/kafka/teams",
      "trees_url": "https://api.github.com/repos/leosilvadev/kafka/git/trees{/sha}",
      "updated_at": "2020-09-29T17:40:22Z",
      "url": "https://api.github.com/repos/leosilvadev/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "4df95801fcea876d3630f4d3e2ec8ee094b9c6e3",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/5465808?v=4",
      "events_url": "https://api.github.com/users/leosilvadev/events{/privacy}",
      "followers_url": "https://api.github.com/users/leosilvadev/followers",
      "following_url": "https://api.github.com/users/leosilvadev/following{/other_user}",
      "gists_url": "https://api.github.com/users/leosilvadev/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/leosilvadev",
      "id": 5465808,
      "login": "leosilvadev",
      "node_id": "MDQ6VXNlcjU0NjU4MDg=",
      "organizations_url": "https://api.github.com/users/leosilvadev/orgs",
      "received_events_url": "https://api.github.com/users/leosilvadev/received_events",
      "repos_url": "https://api.github.com/users/leosilvadev/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/leosilvadev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leosilvadev/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/leosilvadev"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9351",
  "id": 495005281,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9351",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "05e243408dae7c2b265f2b620829f973a45b56e1",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDk1MDA1Mjgx",
  "number": 9351,
  "patch_url": "https://github.com/apache/kafka/pull/9351.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9351/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/4df95801fcea876d3630f4d3e2ec8ee094b9c6e3",
  "title": "KAFKA-10047: Unnecessary widening of (int to long) scope in FloatSerializer",
  "updated_at": "2020-09-29T19:53:39Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9351",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/5465808?v=4",
    "events_url": "https://api.github.com/users/leosilvadev/events{/privacy}",
    "followers_url": "https://api.github.com/users/leosilvadev/followers",
    "following_url": "https://api.github.com/users/leosilvadev/following{/other_user}",
    "gists_url": "https://api.github.com/users/leosilvadev/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/leosilvadev",
    "id": 5465808,
    "login": "leosilvadev",
    "node_id": "MDQ6VXNlcjU0NjU4MDg=",
    "organizations_url": "https://api.github.com/users/leosilvadev/orgs",
    "received_events_url": "https://api.github.com/users/leosilvadev/received_events",
    "repos_url": "https://api.github.com/users/leosilvadev/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/leosilvadev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/leosilvadev/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/leosilvadev"
  }
}
json_root is_array: false
json_root is_object: true
number: 9351
url: https://api.github.com/repos/apache/kafka/pulls/9351
title: KAFKA-10047: Unnecessary widening of (int to long) scope in FloatSerializer
body: There is a JIRA ticket requesting this small change (https://issues.apache.org/jira/browse/KAFKA-10047)

### Committer Checklist (excluded from commit message)
- [x] Verify design and implementation 
- [x] Verify test coverage and CI build status
- [x] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9351/comments
pull_request_number: 9351
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9350/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9350/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9350"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9350"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9350/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9350"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/c721dfcbde9a3b48c846d2b0b5238e6f76ca57a3"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "a0fec75d3cee3d23bd517fe0acc65270a6cb0f88",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Modify the AbstractConfig class, convert params `originals` type from Map<?, ?> to Map<String, ?> to avoid redundant judgments in the code.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9350/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9350/commits",
  "created_at": "2020-09-29T17:37:06Z",
  "diff_url": "https://github.com/apache/kafka/pull/9350.diff",
  "draft": false,
  "head": {
    "label": "kobebryantlin0:kobebryantlin0-patch-change-params-type",
    "ref": "kobebryantlin0-patch-change-params-type",
    "repo": {
      "archive_url": "https://api.github.com/repos/kobebryantlin0/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/kobebryantlin0/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/kobebryantlin0/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/kobebryantlin0/kafka/branches{/branch}",
      "clone_url": "https://github.com/kobebryantlin0/kafka.git",
      "collaborators_url": "https://api.github.com/repos/kobebryantlin0/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/kobebryantlin0/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/kobebryantlin0/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/kobebryantlin0/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/kobebryantlin0/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/kobebryantlin0/kafka/contributors",
      "created_at": "2020-09-29T17:22:44Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/kobebryantlin0/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/kobebryantlin0/kafka/downloads",
      "events_url": "https://api.github.com/repos/kobebryantlin0/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/kobebryantlin0/kafka/forks",
      "full_name": "kobebryantlin0/kafka",
      "git_commits_url": "https://api.github.com/repos/kobebryantlin0/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/kobebryantlin0/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/kobebryantlin0/kafka/git/tags{/sha}",
      "git_url": "git://github.com/kobebryantlin0/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/kobebryantlin0/kafka/hooks",
      "html_url": "https://github.com/kobebryantlin0/kafka",
      "id": 299688496,
      "issue_comment_url": "https://api.github.com/repos/kobebryantlin0/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/kobebryantlin0/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/kobebryantlin0/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/kobebryantlin0/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/kobebryantlin0/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/kobebryantlin0/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/kobebryantlin0/kafka/merges",
      "milestones_url": "https://api.github.com/repos/kobebryantlin0/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyOTk2ODg0OTY=",
      "notifications_url": "https://api.github.com/repos/kobebryantlin0/kafka/notifications{?since,all,participating}",
      "open_issues": 1,
      "open_issues_count": 1,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/15647725?v=4",
        "events_url": "https://api.github.com/users/kobebryantlin0/events{/privacy}",
        "followers_url": "https://api.github.com/users/kobebryantlin0/followers",
        "following_url": "https://api.github.com/users/kobebryantlin0/following{/other_user}",
        "gists_url": "https://api.github.com/users/kobebryantlin0/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/kobebryantlin0",
        "id": 15647725,
        "login": "kobebryantlin0",
        "node_id": "MDQ6VXNlcjE1NjQ3NzI1",
        "organizations_url": "https://api.github.com/users/kobebryantlin0/orgs",
        "received_events_url": "https://api.github.com/users/kobebryantlin0/received_events",
        "repos_url": "https://api.github.com/users/kobebryantlin0/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/kobebryantlin0/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kobebryantlin0/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/kobebryantlin0"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/kobebryantlin0/kafka/pulls{/number}",
      "pushed_at": "2020-09-29T17:35:24Z",
      "releases_url": "https://api.github.com/repos/kobebryantlin0/kafka/releases{/id}",
      "size": 106538,
      "ssh_url": "git@github.com:kobebryantlin0/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/kobebryantlin0/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/kobebryantlin0/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/kobebryantlin0/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/kobebryantlin0/kafka/subscription",
      "svn_url": "https://github.com/kobebryantlin0/kafka",
      "tags_url": "https://api.github.com/repos/kobebryantlin0/kafka/tags",
      "teams_url": "https://api.github.com/repos/kobebryantlin0/kafka/teams",
      "trees_url": "https://api.github.com/repos/kobebryantlin0/kafka/git/trees{/sha}",
      "updated_at": "2020-09-29T17:22:46Z",
      "url": "https://api.github.com/repos/kobebryantlin0/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "c721dfcbde9a3b48c846d2b0b5238e6f76ca57a3",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/15647725?v=4",
      "events_url": "https://api.github.com/users/kobebryantlin0/events{/privacy}",
      "followers_url": "https://api.github.com/users/kobebryantlin0/followers",
      "following_url": "https://api.github.com/users/kobebryantlin0/following{/other_user}",
      "gists_url": "https://api.github.com/users/kobebryantlin0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kobebryantlin0",
      "id": 15647725,
      "login": "kobebryantlin0",
      "node_id": "MDQ6VXNlcjE1NjQ3NzI1",
      "organizations_url": "https://api.github.com/users/kobebryantlin0/orgs",
      "received_events_url": "https://api.github.com/users/kobebryantlin0/received_events",
      "repos_url": "https://api.github.com/users/kobebryantlin0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kobebryantlin0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kobebryantlin0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kobebryantlin0"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9350",
  "id": 494993909,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9350",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "eaed9070345999ad3ce032a94d5db3321be33791",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDk0OTkzOTA5",
  "number": 9350,
  "patch_url": "https://github.com/apache/kafka/pull/9350.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9350/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/c721dfcbde9a3b48c846d2b0b5238e6f76ca57a3",
  "title": "KAFKA-10534: change params type to avoid redundant judgments.",
  "updated_at": "2020-09-29T17:38:33Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9350",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/15647725?v=4",
    "events_url": "https://api.github.com/users/kobebryantlin0/events{/privacy}",
    "followers_url": "https://api.github.com/users/kobebryantlin0/followers",
    "following_url": "https://api.github.com/users/kobebryantlin0/following{/other_user}",
    "gists_url": "https://api.github.com/users/kobebryantlin0/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/kobebryantlin0",
    "id": 15647725,
    "login": "kobebryantlin0",
    "node_id": "MDQ6VXNlcjE1NjQ3NzI1",
    "organizations_url": "https://api.github.com/users/kobebryantlin0/orgs",
    "received_events_url": "https://api.github.com/users/kobebryantlin0/received_events",
    "repos_url": "https://api.github.com/users/kobebryantlin0/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/kobebryantlin0/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kobebryantlin0/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/kobebryantlin0"
  }
}
json_root is_array: false
json_root is_object: true
number: 9350
url: https://api.github.com/repos/apache/kafka/pulls/9350
title: KAFKA-10534: change params type to avoid redundant judgments.
body: Modify the AbstractConfig class, convert params `originals` type from Map<?, ?> to Map<String, ?> to avoid redundant judgments in the code.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9350/comments
pull_request_number: 9350
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9328/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9328/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9328"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9328"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9328/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9328"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/36b7a33ed28c278a57fd02b825e192b5d25ee765"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "acfa0795c5dea4c1f38c30c60c30c381f998d597",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Add a `deleteDir` directive to the temporary dir we create during the streams/quickstart archetype test in the Jenkinsfile",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9328/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9328/commits",
  "created_at": "2020-09-23T15:21:11Z",
  "diff_url": "https://github.com/apache/kafka/pull/9328.diff",
  "draft": false,
  "head": {
    "label": "mumrah:minor-cleanup-streams-example-dir",
    "ref": "minor-cleanup-streams-example-dir",
    "repo": {
      "archive_url": "https://api.github.com/repos/mumrah/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/mumrah/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/mumrah/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/mumrah/kafka/branches{/branch}",
      "clone_url": "https://github.com/mumrah/kafka.git",
      "collaborators_url": "https://api.github.com/repos/mumrah/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/mumrah/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/mumrah/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/mumrah/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/mumrah/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/mumrah/kafka/contributors",
      "created_at": "2012-08-24T16:22:00Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/mumrah/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/mumrah/kafka/downloads",
      "events_url": "https://api.github.com/repos/mumrah/kafka/events",
      "fork": true,
      "forks": 2,
      "forks_count": 2,
      "forks_url": "https://api.github.com/repos/mumrah/kafka/forks",
      "full_name": "mumrah/kafka",
      "git_commits_url": "https://api.github.com/repos/mumrah/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/mumrah/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/mumrah/kafka/git/tags{/sha}",
      "git_url": "git://github.com/mumrah/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/mumrah/kafka/hooks",
      "html_url": "https://github.com/mumrah/kafka",
      "id": 5542805,
      "issue_comment_url": "https://api.github.com/repos/mumrah/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/mumrah/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/mumrah/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/mumrah/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/mumrah/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/mumrah/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/mumrah/kafka/merges",
      "milestones_url": "https://api.github.com/repos/mumrah/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk1NTQyODA1",
      "notifications_url": "https://api.github.com/repos/mumrah/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/55116?v=4",
        "events_url": "https://api.github.com/users/mumrah/events{/privacy}",
        "followers_url": "https://api.github.com/users/mumrah/followers",
        "following_url": "https://api.github.com/users/mumrah/following{/other_user}",
        "gists_url": "https://api.github.com/users/mumrah/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mumrah",
        "id": 55116,
        "login": "mumrah",
        "node_id": "MDQ6VXNlcjU1MTE2",
        "organizations_url": "https://api.github.com/users/mumrah/orgs",
        "received_events_url": "https://api.github.com/users/mumrah/received_events",
        "repos_url": "https://api.github.com/users/mumrah/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mumrah/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mumrah/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mumrah"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/mumrah/kafka/pulls{/number}",
      "pushed_at": "2020-10-05T17:38:40Z",
      "releases_url": "https://api.github.com/repos/mumrah/kafka/releases{/id}",
      "size": 103933,
      "ssh_url": "git@github.com:mumrah/kafka.git",
      "stargazers_count": 2,
      "stargazers_url": "https://api.github.com/repos/mumrah/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/mumrah/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/mumrah/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/mumrah/kafka/subscription",
      "svn_url": "https://github.com/mumrah/kafka",
      "tags_url": "https://api.github.com/repos/mumrah/kafka/tags",
      "teams_url": "https://api.github.com/repos/mumrah/kafka/teams",
      "trees_url": "https://api.github.com/repos/mumrah/kafka/git/trees{/sha}",
      "updated_at": "2018-12-10T19:34:54Z",
      "url": "https://api.github.com/repos/mumrah/kafka",
      "watchers": 2,
      "watchers_count": 2
    },
    "sha": "36b7a33ed28c278a57fd02b825e192b5d25ee765",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/55116?v=4",
      "events_url": "https://api.github.com/users/mumrah/events{/privacy}",
      "followers_url": "https://api.github.com/users/mumrah/followers",
      "following_url": "https://api.github.com/users/mumrah/following{/other_user}",
      "gists_url": "https://api.github.com/users/mumrah/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mumrah",
      "id": 55116,
      "login": "mumrah",
      "node_id": "MDQ6VXNlcjU1MTE2",
      "organizations_url": "https://api.github.com/users/mumrah/orgs",
      "received_events_url": "https://api.github.com/users/mumrah/received_events",
      "repos_url": "https://api.github.com/users/mumrah/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mumrah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mumrah/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mumrah"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9328",
  "id": 491859085,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9328",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "6047674da752ee41159d0676cacb81bf3c0cc83e",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDkxODU5MDg1",
  "number": 9328,
  "patch_url": "https://github.com/apache/kafka/pull/9328.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9328/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/36b7a33ed28c278a57fd02b825e192b5d25ee765",
  "title": "Minor: Add deleteDir for streams quickstart test",
  "updated_at": "2020-10-16T08:26:16Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9328",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/55116?v=4",
    "events_url": "https://api.github.com/users/mumrah/events{/privacy}",
    "followers_url": "https://api.github.com/users/mumrah/followers",
    "following_url": "https://api.github.com/users/mumrah/following{/other_user}",
    "gists_url": "https://api.github.com/users/mumrah/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/mumrah",
    "id": 55116,
    "login": "mumrah",
    "node_id": "MDQ6VXNlcjU1MTE2",
    "organizations_url": "https://api.github.com/users/mumrah/orgs",
    "received_events_url": "https://api.github.com/users/mumrah/received_events",
    "repos_url": "https://api.github.com/users/mumrah/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/mumrah/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mumrah/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/mumrah"
  }
}
json_root is_array: false
json_root is_object: true
number: 9328
url: https://api.github.com/repos/apache/kafka/pulls/9328
title: Minor: Add deleteDir for streams quickstart test
body: Add a `deleteDir` directive to the temporary dir we create during the streams/quickstart archetype test in the Jenkinsfile
review_comments: https://api.github.com/repos/apache/kafka/pulls/9328/comments
pull_request_number: 9328
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9326/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9326/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9326"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9326"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9326/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9326"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/cdfc19044f5507de060320f216b339b46ef3847e"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "e9251a11dc60122893c7bcfb2be36c3cd0521902",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "What? :: See https://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/server/ConfigHandler.scala#L220 . The logic is supposed to accept only two cases:\r\n\r\nlist of k:v pairs\r\na single '*'\r\nBut in practice, since the disjunction's second part only checks that the head is '*', the case where a k:v list is headed by a star is also accepted (and then later broker dies at startup, refusing the value).\r\n\r\nJIRA: https://issues.apache.org/jira/browse/KAFKA-10460\r\n\r\n@viktorsomogyi Can you please review this?",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9326/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9326/commits",
  "created_at": "2020-09-23T11:47:29Z",
  "diff_url": "https://github.com/apache/kafka/pull/9326.diff",
  "draft": false,
  "head": {
    "label": "ankit-kumar-25:KAFKA-10460",
    "ref": "KAFKA-10460",
    "repo": {
      "archive_url": "https://api.github.com/repos/ankit-kumar-25/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/ankit-kumar-25/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/ankit-kumar-25/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/ankit-kumar-25/kafka/branches{/branch}",
      "clone_url": "https://github.com/ankit-kumar-25/kafka.git",
      "collaborators_url": "https://api.github.com/repos/ankit-kumar-25/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/ankit-kumar-25/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/ankit-kumar-25/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/ankit-kumar-25/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/ankit-kumar-25/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/ankit-kumar-25/kafka/contributors",
      "created_at": "2020-09-23T11:05:19Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/ankit-kumar-25/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/ankit-kumar-25/kafka/downloads",
      "events_url": "https://api.github.com/repos/ankit-kumar-25/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/ankit-kumar-25/kafka/forks",
      "full_name": "ankit-kumar-25/kafka",
      "git_commits_url": "https://api.github.com/repos/ankit-kumar-25/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/ankit-kumar-25/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/ankit-kumar-25/kafka/git/tags{/sha}",
      "git_url": "git://github.com/ankit-kumar-25/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/ankit-kumar-25/kafka/hooks",
      "html_url": "https://github.com/ankit-kumar-25/kafka",
      "id": 297942500,
      "issue_comment_url": "https://api.github.com/repos/ankit-kumar-25/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/ankit-kumar-25/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/ankit-kumar-25/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/ankit-kumar-25/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/ankit-kumar-25/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/ankit-kumar-25/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/ankit-kumar-25/kafka/merges",
      "milestones_url": "https://api.github.com/repos/ankit-kumar-25/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyOTc5NDI1MDA=",
      "notifications_url": "https://api.github.com/repos/ankit-kumar-25/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/6847653?v=4",
        "events_url": "https://api.github.com/users/ankit-kumar-25/events{/privacy}",
        "followers_url": "https://api.github.com/users/ankit-kumar-25/followers",
        "following_url": "https://api.github.com/users/ankit-kumar-25/following{/other_user}",
        "gists_url": "https://api.github.com/users/ankit-kumar-25/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ankit-kumar-25",
        "id": 6847653,
        "login": "ankit-kumar-25",
        "node_id": "MDQ6VXNlcjY4NDc2NTM=",
        "organizations_url": "https://api.github.com/users/ankit-kumar-25/orgs",
        "received_events_url": "https://api.github.com/users/ankit-kumar-25/received_events",
        "repos_url": "https://api.github.com/users/ankit-kumar-25/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ankit-kumar-25/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ankit-kumar-25/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ankit-kumar-25"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/ankit-kumar-25/kafka/pulls{/number}",
      "pushed_at": "2020-10-05T13:12:18Z",
      "releases_url": "https://api.github.com/repos/ankit-kumar-25/kafka/releases{/id}",
      "size": 106945,
      "ssh_url": "git@github.com:ankit-kumar-25/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/ankit-kumar-25/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/ankit-kumar-25/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/ankit-kumar-25/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/ankit-kumar-25/kafka/subscription",
      "svn_url": "https://github.com/ankit-kumar-25/kafka",
      "tags_url": "https://api.github.com/repos/ankit-kumar-25/kafka/tags",
      "teams_url": "https://api.github.com/repos/ankit-kumar-25/kafka/teams",
      "trees_url": "https://api.github.com/repos/ankit-kumar-25/kafka/git/trees{/sha}",
      "updated_at": "2020-10-05T13:12:52Z",
      "url": "https://api.github.com/repos/ankit-kumar-25/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "cdfc19044f5507de060320f216b339b46ef3847e",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/6847653?v=4",
      "events_url": "https://api.github.com/users/ankit-kumar-25/events{/privacy}",
      "followers_url": "https://api.github.com/users/ankit-kumar-25/followers",
      "following_url": "https://api.github.com/users/ankit-kumar-25/following{/other_user}",
      "gists_url": "https://api.github.com/users/ankit-kumar-25/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ankit-kumar-25",
      "id": 6847653,
      "login": "ankit-kumar-25",
      "node_id": "MDQ6VXNlcjY4NDc2NTM=",
      "organizations_url": "https://api.github.com/users/ankit-kumar-25/orgs",
      "received_events_url": "https://api.github.com/users/ankit-kumar-25/received_events",
      "repos_url": "https://api.github.com/users/ankit-kumar-25/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ankit-kumar-25/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ankit-kumar-25/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ankit-kumar-25"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9326",
  "id": 491717453,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9326",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "f6d960fd6ce46f874a31102e2b2b26a4e4772717",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDkxNzE3NDUz",
  "number": 9326,
  "patch_url": "https://github.com/apache/kafka/pull/9326.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9326/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/cdfc19044f5507de060320f216b339b46ef3847e",
  "title": "KAFKA-10460: ReplicaListValidator format checking is incomplete",
  "updated_at": "2020-10-07T08:22:49Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9326",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/6847653?v=4",
    "events_url": "https://api.github.com/users/ankit-kumar-25/events{/privacy}",
    "followers_url": "https://api.github.com/users/ankit-kumar-25/followers",
    "following_url": "https://api.github.com/users/ankit-kumar-25/following{/other_user}",
    "gists_url": "https://api.github.com/users/ankit-kumar-25/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ankit-kumar-25",
    "id": 6847653,
    "login": "ankit-kumar-25",
    "node_id": "MDQ6VXNlcjY4NDc2NTM=",
    "organizations_url": "https://api.github.com/users/ankit-kumar-25/orgs",
    "received_events_url": "https://api.github.com/users/ankit-kumar-25/received_events",
    "repos_url": "https://api.github.com/users/ankit-kumar-25/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ankit-kumar-25/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ankit-kumar-25/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ankit-kumar-25"
  }
}
json_root is_array: false
json_root is_object: true
number: 9326
url: https://api.github.com/repos/apache/kafka/pulls/9326
title: KAFKA-10460: ReplicaListValidator format checking is incomplete
body: What? :: See https://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/server/ConfigHandler.scala#L220 . The logic is supposed to accept only two cases:

list of k:v pairs
a single '*'
But in practice, since the disjunction's second part only checks that the head is '*', the case where a k:v list is headed by a star is also accepted (and then later broker dies at startup, refusing the value).

JIRA: https://issues.apache.org/jira/browse/KAFKA-10460

@viktorsomogyi Can you please review this?
review_comments: https://api.github.com/repos/apache/kafka/pulls/9326/comments
pull_request_number: 9326
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9324/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9324/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9324"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9324"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9324/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9324"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/8e0c2081cfc0ef85b66e9f6abc252367e9387819"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "b7c8490cf47b0c18253d6a776b2b35c76c71c65d",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "this patch is similar to https://github.com/apache/kafka/commit/ee68b999c49cbbf514940a81282ff894e6cf50d9\r\n\r\nthe tool \"iproute2\" is required by ```round_trip_fault_test.py``` and it is not in openjdk:11\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9324/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9324/commits",
  "created_at": "2020-09-23T10:59:58Z",
  "diff_url": "https://github.com/apache/kafka/pull/9324.diff",
  "draft": false,
  "head": {
    "label": "chia7712:MINOR-9324",
    "ref": "MINOR-9324",
    "repo": {
      "archive_url": "https://api.github.com/repos/chia7712/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/chia7712/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/chia7712/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/chia7712/kafka/branches{/branch}",
      "clone_url": "https://github.com/chia7712/kafka.git",
      "collaborators_url": "https://api.github.com/repos/chia7712/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/chia7712/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/chia7712/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/chia7712/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/chia7712/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/chia7712/kafka/contributors",
      "created_at": "2018-03-14T12:43:46Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/chia7712/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/chia7712/kafka/downloads",
      "events_url": "https://api.github.com/repos/chia7712/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/chia7712/kafka/forks",
      "full_name": "chia7712/kafka",
      "git_commits_url": "https://api.github.com/repos/chia7712/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/chia7712/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/chia7712/kafka/git/tags{/sha}",
      "git_url": "git://github.com/chia7712/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/chia7712/kafka/hooks",
      "html_url": "https://github.com/chia7712/kafka",
      "id": 125210946,
      "issue_comment_url": "https://api.github.com/repos/chia7712/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/chia7712/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/chia7712/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/chia7712/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/chia7712/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/chia7712/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/chia7712/kafka/merges",
      "milestones_url": "https://api.github.com/repos/chia7712/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjUyMTA5NDY=",
      "notifications_url": "https://api.github.com/repos/chia7712/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
        "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
        "followers_url": "https://api.github.com/users/chia7712/followers",
        "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
        "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/chia7712",
        "id": 6234750,
        "login": "chia7712",
        "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
        "organizations_url": "https://api.github.com/users/chia7712/orgs",
        "received_events_url": "https://api.github.com/users/chia7712/received_events",
        "repos_url": "https://api.github.com/users/chia7712/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/chia7712"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/chia7712/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T03:45:34Z",
      "releases_url": "https://api.github.com/repos/chia7712/kafka/releases{/id}",
      "size": 102819,
      "ssh_url": "git@github.com:chia7712/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/chia7712/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/chia7712/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/chia7712/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/chia7712/kafka/subscription",
      "svn_url": "https://github.com/chia7712/kafka",
      "tags_url": "https://api.github.com/repos/chia7712/kafka/tags",
      "teams_url": "https://api.github.com/repos/chia7712/kafka/teams",
      "trees_url": "https://api.github.com/repos/chia7712/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:44:24Z",
      "url": "https://api.github.com/repos/chia7712/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "8e0c2081cfc0ef85b66e9f6abc252367e9387819",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
      "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
      "followers_url": "https://api.github.com/users/chia7712/followers",
      "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
      "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chia7712",
      "id": 6234750,
      "login": "chia7712",
      "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
      "organizations_url": "https://api.github.com/users/chia7712/orgs",
      "received_events_url": "https://api.github.com/users/chia7712/received_events",
      "repos_url": "https://api.github.com/users/chia7712/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chia7712"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9324",
  "id": 491692746,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9324",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "9a93552b857a337d7cd6f2c03ec9df50de09ddd1",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDkxNjkyNzQ2",
  "number": 9324,
  "patch_url": "https://github.com/apache/kafka/pull/9324.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9324/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/8e0c2081cfc0ef85b66e9f6abc252367e9387819",
  "title": "MINOR: Install \"iproute2\" explicitly in Dockerfile",
  "updated_at": "2020-09-23T10:59:58Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9324",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
    "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
    "followers_url": "https://api.github.com/users/chia7712/followers",
    "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
    "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/chia7712",
    "id": 6234750,
    "login": "chia7712",
    "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
    "organizations_url": "https://api.github.com/users/chia7712/orgs",
    "received_events_url": "https://api.github.com/users/chia7712/received_events",
    "repos_url": "https://api.github.com/users/chia7712/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/chia7712"
  }
}
json_root is_array: false
json_root is_object: true
number: 9324
url: https://api.github.com/repos/apache/kafka/pulls/9324
title: MINOR: Install "iproute2" explicitly in Dockerfile
body: this patch is similar to https://github.com/apache/kafka/commit/ee68b999c49cbbf514940a81282ff894e6cf50d9

the tool "iproute2" is required by ```round_trip_fault_test.py``` and it is not in openjdk:11

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9324/comments
pull_request_number: 9324
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9322/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9322/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9322"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9322"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9322/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9322"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/70a329cb51dd841c8db6316395e129fbb2454396"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "b7c8490cf47b0c18253d6a776b2b35c76c71c65d",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "The JMXTool will query for all metrics when not supplied an \"--object-name\" arg. However, some MBean objects can contain attributes that cannot be serialized, thus crashing the JMXTool before reporting any metrics. This PR catches those exceptions, printing an error message but allowing the tool to continue to reporting all metrics w/ the errored ones filtered out",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9322/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9322/commits",
  "created_at": "2020-09-23T00:10:43Z",
  "diff_url": "https://github.com/apache/kafka/pull/9322.diff",
  "draft": false,
  "head": {
    "label": "mattwong949:KAFKA-10512",
    "ref": "KAFKA-10512",
    "repo": {
      "archive_url": "https://api.github.com/repos/mattwong949/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/mattwong949/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/mattwong949/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/mattwong949/kafka/branches{/branch}",
      "clone_url": "https://github.com/mattwong949/kafka.git",
      "collaborators_url": "https://api.github.com/repos/mattwong949/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/mattwong949/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/mattwong949/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/mattwong949/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/mattwong949/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/mattwong949/kafka/contributors",
      "created_at": "2020-02-25T17:41:41Z",
      "default_branch": "master",
      "deployments_url": "https://api.github.com/repos/mattwong949/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/mattwong949/kafka/downloads",
      "events_url": "https://api.github.com/repos/mattwong949/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/mattwong949/kafka/forks",
      "full_name": "mattwong949/kafka",
      "git_commits_url": "https://api.github.com/repos/mattwong949/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/mattwong949/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/mattwong949/kafka/git/tags{/sha}",
      "git_url": "git://github.com/mattwong949/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": "https://groups.google.com/forum/#!forum/confluent-platform",
      "hooks_url": "https://api.github.com/repos/mattwong949/kafka/hooks",
      "html_url": "https://github.com/mattwong949/kafka",
      "id": 243061625,
      "issue_comment_url": "https://api.github.com/repos/mattwong949/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/mattwong949/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/mattwong949/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/mattwong949/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/mattwong949/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/mattwong949/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/mattwong949/kafka/merges",
      "milestones_url": "https://api.github.com/repos/mattwong949/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyNDMwNjE2MjU=",
      "notifications_url": "https://api.github.com/repos/mattwong949/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/16786722?v=4",
        "events_url": "https://api.github.com/users/mattwong949/events{/privacy}",
        "followers_url": "https://api.github.com/users/mattwong949/followers",
        "following_url": "https://api.github.com/users/mattwong949/following{/other_user}",
        "gists_url": "https://api.github.com/users/mattwong949/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/mattwong949",
        "id": 16786722,
        "login": "mattwong949",
        "node_id": "MDQ6VXNlcjE2Nzg2NzIy",
        "organizations_url": "https://api.github.com/users/mattwong949/orgs",
        "received_events_url": "https://api.github.com/users/mattwong949/received_events",
        "repos_url": "https://api.github.com/users/mattwong949/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/mattwong949/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mattwong949/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/mattwong949"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/mattwong949/kafka/pulls{/number}",
      "pushed_at": "2020-09-23T00:08:16Z",
      "releases_url": "https://api.github.com/repos/mattwong949/kafka/releases{/id}",
      "size": 107729,
      "ssh_url": "git@github.com:mattwong949/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/mattwong949/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/mattwong949/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/mattwong949/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/mattwong949/kafka/subscription",
      "svn_url": "https://github.com/mattwong949/kafka",
      "tags_url": "https://api.github.com/repos/mattwong949/kafka/tags",
      "teams_url": "https://api.github.com/repos/mattwong949/kafka/teams",
      "trees_url": "https://api.github.com/repos/mattwong949/kafka/git/trees{/sha}",
      "updated_at": "2020-02-25T17:41:44Z",
      "url": "https://api.github.com/repos/mattwong949/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "70a329cb51dd841c8db6316395e129fbb2454396",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/16786722?v=4",
      "events_url": "https://api.github.com/users/mattwong949/events{/privacy}",
      "followers_url": "https://api.github.com/users/mattwong949/followers",
      "following_url": "https://api.github.com/users/mattwong949/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattwong949/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mattwong949",
      "id": 16786722,
      "login": "mattwong949",
      "node_id": "MDQ6VXNlcjE2Nzg2NzIy",
      "organizations_url": "https://api.github.com/users/mattwong949/orgs",
      "received_events_url": "https://api.github.com/users/mattwong949/received_events",
      "repos_url": "https://api.github.com/users/mattwong949/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mattwong949/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattwong949/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mattwong949"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9322",
  "id": 491256435,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9322",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "687b912a755d31011d34f16d8b3378eb7c5576e9",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDkxMjU2NDM1",
  "number": 9322,
  "patch_url": "https://github.com/apache/kafka/pull/9322.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9322/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/70a329cb51dd841c8db6316395e129fbb2454396",
  "title": "KAFKA-10512: Prevent JmxTool Crashing on Unmarshall Error",
  "updated_at": "2020-09-23T00:10:43Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9322",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/16786722?v=4",
    "events_url": "https://api.github.com/users/mattwong949/events{/privacy}",
    "followers_url": "https://api.github.com/users/mattwong949/followers",
    "following_url": "https://api.github.com/users/mattwong949/following{/other_user}",
    "gists_url": "https://api.github.com/users/mattwong949/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/mattwong949",
    "id": 16786722,
    "login": "mattwong949",
    "node_id": "MDQ6VXNlcjE2Nzg2NzIy",
    "organizations_url": "https://api.github.com/users/mattwong949/orgs",
    "received_events_url": "https://api.github.com/users/mattwong949/received_events",
    "repos_url": "https://api.github.com/users/mattwong949/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/mattwong949/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mattwong949/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/mattwong949"
  }
}
json_root is_array: false
json_root is_object: true
number: 9322
url: https://api.github.com/repos/apache/kafka/pulls/9322
title: KAFKA-10512: Prevent JmxTool Crashing on Unmarshall Error
body: The JMXTool will query for all metrics when not supplied an "--object-name" arg. However, some MBean objects can contain attributes that cannot be serialized, thus crashing the JMXTool before reporting any metrics. This PR catches those exceptions, printing an error message but allowing the tool to continue to reporting all metrics w/ the errored ones filtered out
review_comments: https://api.github.com/repos/apache/kafka/pulls/9322/comments
pull_request_number: 9322
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9319/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9319/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9319"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9319"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9319/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9319"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/470d86bf0a67d0b156f8c792264f90fd56845a83"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "822b9c9866b5c327ad058f8812ddc1d632a72888",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Allow even distribution of lost/new tasks when more than one worker joins the group at the same time\r\n\r\nIssue description:\r\nExisting issue 1 description : When more than one worker joins the consumer group the incremental co operative assignor revokes and re assigns atmost average number of tasks per worker.\r\n\r\nIssue: This results in the additional workers joining the group stay idle and would require more future rebalances to happen to have even distribution of tasks.\r\n\r\nFix: As part of task assignment calculation following a deployment, the reassignment of tasks are calculated by revoking all the tasks above ceil(average) number of tasks.\r\n\r\nExisting issue 2 description: When more than one worker is lost and rejoins the group at most one worker will be re assigned with the lost tasks from all the workers that left the group.\r\n\r\nIssue: In scenarios where more than one worker is lost and rejoins the group only one among them gets assigned all the partitions that were lost in the past. The additional workers that have joined would not get any task assigned to them until a rebalance that happens in future.\r\n\r\nFix: As part fo lost task re assignment all the new workers that have joined the group would be considered for task assignment and would be assigned in a round robin fashion with the new tasks.\r\n\r\nTesting strategy : System testing in a Kube environment completed.\r\nUT : updated to UT",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9319/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9319/commits",
  "created_at": "2020-09-22T11:20:50Z",
  "diff_url": "https://github.com/apache/kafka/pull/9319.diff",
  "draft": false,
  "head": {
    "label": "ramesh-muthusamy:KAFKA-10413",
    "ref": "KAFKA-10413",
    "repo": {
      "archive_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/branches{/branch}",
      "clone_url": "https://github.com/ramesh-muthusamy/kafka.git",
      "collaborators_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/contributors",
      "created_at": "2020-09-22T11:03:55Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/downloads",
      "events_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/forks",
      "full_name": "ramesh-muthusamy/kafka",
      "git_commits_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/git/tags{/sha}",
      "git_url": "git://github.com/ramesh-muthusamy/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/hooks",
      "html_url": "https://github.com/ramesh-muthusamy/kafka",
      "id": 297622173,
      "issue_comment_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/merges",
      "milestones_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyOTc2MjIxNzM=",
      "notifications_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/8124479?v=4",
        "events_url": "https://api.github.com/users/ramesh-muthusamy/events{/privacy}",
        "followers_url": "https://api.github.com/users/ramesh-muthusamy/followers",
        "following_url": "https://api.github.com/users/ramesh-muthusamy/following{/other_user}",
        "gists_url": "https://api.github.com/users/ramesh-muthusamy/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ramesh-muthusamy",
        "id": 8124479,
        "login": "ramesh-muthusamy",
        "node_id": "MDQ6VXNlcjgxMjQ0Nzk=",
        "organizations_url": "https://api.github.com/users/ramesh-muthusamy/orgs",
        "received_events_url": "https://api.github.com/users/ramesh-muthusamy/received_events",
        "repos_url": "https://api.github.com/users/ramesh-muthusamy/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ramesh-muthusamy/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ramesh-muthusamy/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ramesh-muthusamy"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T08:08:43Z",
      "releases_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/releases{/id}",
      "size": 105859,
      "ssh_url": "git@github.com:ramesh-muthusamy/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/subscription",
      "svn_url": "https://github.com/ramesh-muthusamy/kafka",
      "tags_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/tags",
      "teams_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/teams",
      "trees_url": "https://api.github.com/repos/ramesh-muthusamy/kafka/git/trees{/sha}",
      "updated_at": "2020-09-22T11:03:57Z",
      "url": "https://api.github.com/repos/ramesh-muthusamy/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "470d86bf0a67d0b156f8c792264f90fd56845a83",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/8124479?v=4",
      "events_url": "https://api.github.com/users/ramesh-muthusamy/events{/privacy}",
      "followers_url": "https://api.github.com/users/ramesh-muthusamy/followers",
      "following_url": "https://api.github.com/users/ramesh-muthusamy/following{/other_user}",
      "gists_url": "https://api.github.com/users/ramesh-muthusamy/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ramesh-muthusamy",
      "id": 8124479,
      "login": "ramesh-muthusamy",
      "node_id": "MDQ6VXNlcjgxMjQ0Nzk=",
      "organizations_url": "https://api.github.com/users/ramesh-muthusamy/orgs",
      "received_events_url": "https://api.github.com/users/ramesh-muthusamy/received_events",
      "repos_url": "https://api.github.com/users/ramesh-muthusamy/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ramesh-muthusamy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ramesh-muthusamy/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ramesh-muthusamy"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9319",
  "id": 490869289,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9319",
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "",
      "id": 851037639,
      "name": "connect",
      "node_id": "MDU6TGFiZWw4NTEwMzc2Mzk=",
      "url": "https://api.github.com/repos/apache/kafka/labels/connect"
    }
  ],
  "locked": false,
  "merge_commit_sha": "fb4b431306f8995b05bd8bfb7edb90de8eace090",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDkwODY5Mjg5",
  "number": 9319,
  "patch_url": "https://github.com/apache/kafka/pull/9319.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9319/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/470d86bf0a67d0b156f8c792264f90fd56845a83",
  "title": "KAFKA-10413 Allow even distribution of lost/new tasks when more than one worker j…",
  "updated_at": "2020-10-27T18:49:29Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9319",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/8124479?v=4",
    "events_url": "https://api.github.com/users/ramesh-muthusamy/events{/privacy}",
    "followers_url": "https://api.github.com/users/ramesh-muthusamy/followers",
    "following_url": "https://api.github.com/users/ramesh-muthusamy/following{/other_user}",
    "gists_url": "https://api.github.com/users/ramesh-muthusamy/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ramesh-muthusamy",
    "id": 8124479,
    "login": "ramesh-muthusamy",
    "node_id": "MDQ6VXNlcjgxMjQ0Nzk=",
    "organizations_url": "https://api.github.com/users/ramesh-muthusamy/orgs",
    "received_events_url": "https://api.github.com/users/ramesh-muthusamy/received_events",
    "repos_url": "https://api.github.com/users/ramesh-muthusamy/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ramesh-muthusamy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ramesh-muthusamy/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ramesh-muthusamy"
  }
}
json_root is_array: false
json_root is_object: true
number: 9319
url: https://api.github.com/repos/apache/kafka/pulls/9319
title: KAFKA-10413 Allow even distribution of lost/new tasks when more than one worker j…
body: Allow even distribution of lost/new tasks when more than one worker joins the group at the same time

Issue description:
Existing issue 1 description : When more than one worker joins the consumer group the incremental co operative assignor revokes and re assigns atmost average number of tasks per worker.

Issue: This results in the additional workers joining the group stay idle and would require more future rebalances to happen to have even distribution of tasks.

Fix: As part of task assignment calculation following a deployment, the reassignment of tasks are calculated by revoking all the tasks above ceil(average) number of tasks.

Existing issue 2 description: When more than one worker is lost and rejoins the group at most one worker will be re assigned with the lost tasks from all the workers that left the group.

Issue: In scenarios where more than one worker is lost and rejoins the group only one among them gets assigned all the partitions that were lost in the past. The additional workers that have joined would not get any task assigned to them until a rebalance that happens in future.

Fix: As part fo lost task re assignment all the new workers that have joined the group would be considered for task assignment and would be assigned in a round robin fashion with the new tasks.

Testing strategy : System testing in a Kube environment completed.
UT : updated to UT
review_comments: https://api.github.com/repos/apache/kafka/pulls/9319/comments
id: 496296182
url: https://api.github.com/repos/apache/kafka/pulls/comments/496296182
body: Can you please make this log message more readable?
diff_hunk: @@ -260,7 +259,7 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {
         // Do not revoke resources for re-assignment while a delayed rebalance is active
         // Also we do not revoke in two consecutive rebalances by the same leader
         canRevoke = delay == 0 && canRevoke;
-
+        log.debug("Connector and task to revoke assgn post lb calculation: {}", toRevoke);
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r496296182
id: 496297191
url: https://api.github.com/repos/apache/kafka/pulls/comments/496297191
body: ```suggestion
                log.debug("Assigning lost tasks to {} candidate workers: {}", 
                        candidateWorkerLoad.size(),
                        candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(",")));
```
diff_hunk: @@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,
         if (scheduledRebalance > 0 && now >= scheduledRebalance) {
             // delayed rebalance expired and it's time to assign resources
             log.debug("Delayed rebalance expired. Reassigning lost tasks");
-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();
+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();
             if (!candidateWorkersForReassignment.isEmpty()) {
                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);
             }
 
-            if (candidateWorkerLoad.isPresent()) {
-                WorkerLoad workerLoad = candidateWorkerLoad.get();
-                log.debug("A candidate worker has been found to assign lost tasks: {}", workerLoad.worker());
-                lostAssignments.connectors().forEach(workerLoad::assign);
-                lostAssignments.tasks().forEach(workerLoad::assign);
+            if (!candidateWorkerLoad.isEmpty()) {
+                log.debug("A list of candidate workers has been found to assign lost tasks: {}", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(",")));
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r496297191
id: 496298206
url: https://api.github.com/repos/apache/kafka/pulls/comments/496298206
body: ```suggestion
```
Do we need both of these debug messages? After all, `worker.assign(...)` is just adding a string to a collection. How about keeping the first one since this is at this point an on-going process and we've not actually assigned anything to the actual worker node.
diff_hunk: @@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,
         if (scheduledRebalance > 0 && now >= scheduledRebalance) {
             // delayed rebalance expired and it's time to assign resources
             log.debug("Delayed rebalance expired. Reassigning lost tasks");
-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();
+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();
             if (!candidateWorkersForReassignment.isEmpty()) {
                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);
             }
 
-            if (candidateWorkerLoad.isPresent()) {
-                WorkerLoad workerLoad = candidateWorkerLoad.get();
-                log.debug("A candidate worker has been found to assign lost tasks: {}", workerLoad.worker());
-                lostAssignments.connectors().forEach(workerLoad::assign);
-                lostAssignments.tasks().forEach(workerLoad::assign);
+            if (!candidateWorkerLoad.isEmpty()) {
+                log.debug("A list of candidate workers has been found to assign lost tasks: {}", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(",")));
+                Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();
+                for (String connector : lostAssignments.connectors()) {
+                    // Loop over the the candidate workers as many times as it takes
+                    if (!candidateWorkerIterator.hasNext()) {
+                        candidateWorkerIterator = candidateWorkerLoad.iterator();
+                    }
+                    WorkerLoad worker = candidateWorkerIterator.next();
+                    log.debug("Assigning connector id {} to member {}", connector, worker.worker());
+                    worker.assign(connector);
+                    log.debug("Assigned connector id {} to member {}", connector, worker.worker());
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r496298206
id: 496298370
url: https://api.github.com/repos/apache/kafka/pulls/comments/496298370
body: ```suggestion
```
Do we need both of these debug messages? After all, `worker.assign(...)` is just adding a `ConnectorTaskId` to a collection. How about keeping the first one since this is at this point an on-going process and we've not actually assigned anything to the actual worker node.
diff_hunk: @@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,
         if (scheduledRebalance > 0 && now >= scheduledRebalance) {
             // delayed rebalance expired and it's time to assign resources
             log.debug("Delayed rebalance expired. Reassigning lost tasks");
-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();
+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();
             if (!candidateWorkersForReassignment.isEmpty()) {
                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);
             }
 
-            if (candidateWorkerLoad.isPresent()) {
-                WorkerLoad workerLoad = candidateWorkerLoad.get();
-                log.debug("A candidate worker has been found to assign lost tasks: {}", workerLoad.worker());
-                lostAssignments.connectors().forEach(workerLoad::assign);
-                lostAssignments.tasks().forEach(workerLoad::assign);
+            if (!candidateWorkerLoad.isEmpty()) {
+                log.debug("A list of candidate workers has been found to assign lost tasks: {}", candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(",")));
+                Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();
+                for (String connector : lostAssignments.connectors()) {
+                    // Loop over the the candidate workers as many times as it takes
+                    if (!candidateWorkerIterator.hasNext()) {
+                        candidateWorkerIterator = candidateWorkerLoad.iterator();
+                    }
+                    WorkerLoad worker = candidateWorkerIterator.next();
+                    log.debug("Assigning connector id {} to member {}", connector, worker.worker());
+                    worker.assign(connector);
+                    log.debug("Assigned connector id {} to member {}", connector, worker.worker());
+                }
+                candidateWorkerIterator = candidateWorkerLoad.iterator();
+                for (ConnectorTaskId task : lostAssignments.tasks()) {
+                    if (!candidateWorkerIterator.hasNext()) {
+                        candidateWorkerIterator = candidateWorkerLoad.iterator();
+                    }
+                    WorkerLoad worker = candidateWorkerIterator.next();
+                    log.debug("Assigning task id {} to member {}", task, worker.worker());
+                    worker.assign(task);
+                    log.debug("Assigned task id {} to member {}", task, worker.worker());
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r496298370
id: 496299248
url: https://api.github.com/repos/apache/kafka/pulls/comments/496299248
body: What do you think about combining these log messages?
```suggestion
        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);
        log.debug("New average number of tasks per worker: floor={}, ceiling={}", floorTasks, ceilTasks);
```

diff_hunk: @@ -559,6 +576,8 @@ private void resetDelay() {
         log.debug("Previous rounded down (floor) average number of tasks per worker {}", totalActiveTasksNum / existingWorkersNum);
         int floorTasks = totalActiveTasksNum / totalWorkersNum;
         log.debug("New rounded down (floor) average number of tasks per worker {}", floorTasks);
+        int ceilTasks = (int) Math.ceil((float) totalActiveTasksNum / totalWorkersNum);
+        log.debug("New rounded down (ceil) average number of tasks per worker {}", ceilTasks);
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r496299248
id: 496300646
url: https://api.github.com/repos/apache/kafka/pulls/comments/496300646
body: Isn't it possible that `numToRevoke` might be negative?
diff_hunk: @@ -577,15 +596,14 @@ private void resetDelay() {
         numToRevoke = floorTasks;
         for (WorkerLoad existing : existingWorkers) {
             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();
+            numToRevoke = existing.tasksSize() - ceilTasks;
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r496300646
id: 496300694
url: https://api.github.com/repos/apache/kafka/pulls/comments/496300694
body: ```suggestion
            log.debug("Tasks on worker {} is higher than ceiling, so revoking {} tasks", existing, numToRevoke);
```
diff_hunk: @@ -577,15 +596,14 @@ private void resetDelay() {
         numToRevoke = floorTasks;
         for (WorkerLoad existing : existingWorkers) {
             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();
+            numToRevoke = existing.tasksSize() - ceilTasks;
+            log.debug("revoke number of tasks per worker {}", numToRevoke);
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r496300694
id: 506801679
url: https://api.github.com/repos/apache/kafka/pulls/comments/506801679
body: yes it can be and it is captured under the next for loop condition.
diff_hunk: @@ -577,15 +596,14 @@ private void resetDelay() {
         numToRevoke = floorTasks;
         for (WorkerLoad existing : existingWorkers) {
             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();
+            numToRevoke = existing.tasksSize() - ceilTasks;
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r506801679
id: 506803017
url: https://api.github.com/repos/apache/kafka/pulls/comments/506803017
body: I have updated the message. 
diff_hunk: @@ -260,7 +259,7 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {
         // Do not revoke resources for re-assignment while a delayed rebalance is active
         // Also we do not revoke in two consecutive rebalances by the same leader
         canRevoke = delay == 0 && canRevoke;
-
+        log.debug("Connector and task to revoke assgn post lb calculation: {}", toRevoke);
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r506803017
id: 512487036
url: https://api.github.com/repos/apache/kafka/pulls/comments/512487036
body: Why do we print the assignment again here. They don't seem to change since we log them[ in line 249](https://github.com/apache/kafka/pull/9319/files#diff-e24067b121eb960feebfa099bd9c30382e330eaf5db39302a9d7a50e29b3acb4L249)
diff_hunk: @@ -260,7 +259,7 @@ private Long ensureLeaderConfig(long maxOffset, WorkerCoordinator coordinator) {
         // Do not revoke resources for re-assignment while a delayed rebalance is active
         // Also we do not revoke in two consecutive rebalances by the same leader
         canRevoke = delay == 0 && canRevoke;
-
+        log.debug("Connector and task to revoke assignment post load balancer calculation: {}", toRevoke);
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r512487036
id: 512492587
url: https://api.github.com/repos/apache/kafka/pulls/comments/512492587
body: So we balance the lost tasks among the new workers now. That balances the tasks but only among the new workers. Have you checked how this works with task revocation called right after?
diff_hunk: @@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,
         if (scheduledRebalance > 0 && now >= scheduledRebalance) {
             // delayed rebalance expired and it's time to assign resources
             log.debug("Delayed rebalance expired. Reassigning lost tasks");
-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();
+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();
             if (!candidateWorkersForReassignment.isEmpty()) {
                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);
             }
 
-            if (candidateWorkerLoad.isPresent()) {
-                WorkerLoad workerLoad = candidateWorkerLoad.get();
-                log.debug("A candidate worker has been found to assign lost tasks: {}", workerLoad.worker());
-                lostAssignments.connectors().forEach(workerLoad::assign);
-                lostAssignments.tasks().forEach(workerLoad::assign);
+            if (!candidateWorkerLoad.isEmpty()) {
+                log.debug("Assigning lost tasks to {} candidate workers: {}", 
+                        candidateWorkerLoad.size(),
+                        candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(",")));
+                Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();
+                for (String connector : lostAssignments.connectors()) {
+                    // Loop over the the candidate workers as many times as it takes
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r512492587
id: 512493684
url: https://api.github.com/repos/apache/kafka/pulls/comments/512493684
body: This assignment is unused now. 
diff_hunk: @@ -577,15 +595,14 @@ private void resetDelay() {
         numToRevoke = floorTasks;
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r512493684
id: 512497251
url: https://api.github.com/repos/apache/kafka/pulls/comments/512497251
body: Can you explain a bit what you aim to achieve with this change here? 
diff_hunk: @@ -577,15 +596,14 @@ private void resetDelay() {
         numToRevoke = floorTasks;
         for (WorkerLoad existing : existingWorkers) {
             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();
+            numToRevoke = existing.tasksSize() - ceilTasks;
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r512497251
id: 512500159
url: https://api.github.com/repos/apache/kafka/pulls/comments/512500159
body: Also, we apply this logic in tasks only. But why not in the connectors too, if it helps?
diff_hunk: @@ -577,15 +596,14 @@ private void resetDelay() {
         numToRevoke = floorTasks;
         for (WorkerLoad existing : existingWorkers) {
             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();
+            numToRevoke = existing.tasksSize() - ceilTasks;
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r512500159
id: 512938005
url: https://api.github.com/repos/apache/kafka/pulls/comments/512938005
body: yes , I will remove the same
diff_hunk: @@ -577,15 +595,14 @@ private void resetDelay() {
         numToRevoke = floorTasks;
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r512938005
id: 512938623
url: https://api.github.com/repos/apache/kafka/pulls/comments/512938623
body: It not only balances the tasks for new workers it also does revocation if there is any overloaded worker. 
diff_hunk: @@ -445,16 +444,34 @@ protected void handleLostAssignments(ConnectorsAndTasks lostAssignments,
         if (scheduledRebalance > 0 && now >= scheduledRebalance) {
             // delayed rebalance expired and it's time to assign resources
             log.debug("Delayed rebalance expired. Reassigning lost tasks");
-            Optional<WorkerLoad> candidateWorkerLoad = Optional.empty();
+            List<WorkerLoad> candidateWorkerLoad = Collections.emptyList();
             if (!candidateWorkersForReassignment.isEmpty()) {
                 candidateWorkerLoad = pickCandidateWorkerForReassignment(completeWorkerAssignment);
             }
 
-            if (candidateWorkerLoad.isPresent()) {
-                WorkerLoad workerLoad = candidateWorkerLoad.get();
-                log.debug("A candidate worker has been found to assign lost tasks: {}", workerLoad.worker());
-                lostAssignments.connectors().forEach(workerLoad::assign);
-                lostAssignments.tasks().forEach(workerLoad::assign);
+            if (!candidateWorkerLoad.isEmpty()) {
+                log.debug("Assigning lost tasks to {} candidate workers: {}", 
+                        candidateWorkerLoad.size(),
+                        candidateWorkerLoad.stream().map(WorkerLoad::worker).collect(Collectors.joining(",")));
+                Iterator<WorkerLoad> candidateWorkerIterator = candidateWorkerLoad.iterator();
+                for (String connector : lostAssignments.connectors()) {
+                    // Loop over the the candidate workers as many times as it takes
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r512938623
id: 512945677
url: https://api.github.com/repos/apache/kafka/pulls/comments/512945677
body: @kkonstantine  we are trying to revoke the additional tasks assigned [if any] to a worker so that in the next stage the revoked tasks can be re assigned to the new workers that get added to the group.  Yes we need to apply this to connectors as well, I will update the PR for the changes .
diff_hunk: @@ -577,15 +596,14 @@ private void resetDelay() {
         numToRevoke = floorTasks;
         for (WorkerLoad existing : existingWorkers) {
             Iterator<ConnectorTaskId> tasks = existing.tasks().iterator();
+            numToRevoke = existing.tasksSize() - ceilTasks;
path: connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignor.java
html: https://github.com/apache/kafka/pull/9319#discussion_r512945677
pull_request_number: 9319
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9318/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9318/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9318"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9318"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9318/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9318"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/962d8db89c47a5c5d0ce4a4f37f19e987e4b58d9"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "cf202cb6acf38c64a3e8b9e541673a12ee55eaaa",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "issue: https://issues.apache.org/jira/browse/KAFKA-10497\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9318/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9318/commits",
  "created_at": "2020-09-22T10:54:05Z",
  "diff_url": "https://github.com/apache/kafka/pull/9318.diff",
  "draft": false,
  "head": {
    "label": "chia7712:KAFKA-10497-1",
    "ref": "KAFKA-10497-1",
    "repo": {
      "archive_url": "https://api.github.com/repos/chia7712/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/chia7712/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/chia7712/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/chia7712/kafka/branches{/branch}",
      "clone_url": "https://github.com/chia7712/kafka.git",
      "collaborators_url": "https://api.github.com/repos/chia7712/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/chia7712/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/chia7712/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/chia7712/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/chia7712/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/chia7712/kafka/contributors",
      "created_at": "2018-03-14T12:43:46Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/chia7712/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/chia7712/kafka/downloads",
      "events_url": "https://api.github.com/repos/chia7712/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/chia7712/kafka/forks",
      "full_name": "chia7712/kafka",
      "git_commits_url": "https://api.github.com/repos/chia7712/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/chia7712/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/chia7712/kafka/git/tags{/sha}",
      "git_url": "git://github.com/chia7712/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/chia7712/kafka/hooks",
      "html_url": "https://github.com/chia7712/kafka",
      "id": 125210946,
      "issue_comment_url": "https://api.github.com/repos/chia7712/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/chia7712/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/chia7712/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/chia7712/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/chia7712/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/chia7712/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/chia7712/kafka/merges",
      "milestones_url": "https://api.github.com/repos/chia7712/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjUyMTA5NDY=",
      "notifications_url": "https://api.github.com/repos/chia7712/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
        "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
        "followers_url": "https://api.github.com/users/chia7712/followers",
        "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
        "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/chia7712",
        "id": 6234750,
        "login": "chia7712",
        "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
        "organizations_url": "https://api.github.com/users/chia7712/orgs",
        "received_events_url": "https://api.github.com/users/chia7712/received_events",
        "repos_url": "https://api.github.com/users/chia7712/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/chia7712"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/chia7712/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T03:45:34Z",
      "releases_url": "https://api.github.com/repos/chia7712/kafka/releases{/id}",
      "size": 102819,
      "ssh_url": "git@github.com:chia7712/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/chia7712/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/chia7712/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/chia7712/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/chia7712/kafka/subscription",
      "svn_url": "https://github.com/chia7712/kafka",
      "tags_url": "https://api.github.com/repos/chia7712/kafka/tags",
      "teams_url": "https://api.github.com/repos/chia7712/kafka/teams",
      "trees_url": "https://api.github.com/repos/chia7712/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:44:24Z",
      "url": "https://api.github.com/repos/chia7712/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "962d8db89c47a5c5d0ce4a4f37f19e987e4b58d9",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
      "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
      "followers_url": "https://api.github.com/users/chia7712/followers",
      "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
      "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chia7712",
      "id": 6234750,
      "login": "chia7712",
      "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
      "organizations_url": "https://api.github.com/users/chia7712/orgs",
      "received_events_url": "https://api.github.com/users/chia7712/received_events",
      "repos_url": "https://api.github.com/users/chia7712/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chia7712"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9318",
  "id": 490855369,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9318",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "655ea764d7a8110d6f590dbd655a0864cfc46cf9",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDkwODU1MzY5",
  "number": 9318,
  "patch_url": "https://github.com/apache/kafka/pull/9318.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9318/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/962d8db89c47a5c5d0ce4a4f37f19e987e4b58d9",
  "title": "KAFKA-10497 Convert group coordinator metadata schemas to use generat…",
  "updated_at": "2020-10-18T13:06:05Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9318",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
    "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
    "followers_url": "https://api.github.com/users/chia7712/followers",
    "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
    "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/chia7712",
    "id": 6234750,
    "login": "chia7712",
    "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
    "organizations_url": "https://api.github.com/users/chia7712/orgs",
    "received_events_url": "https://api.github.com/users/chia7712/received_events",
    "repos_url": "https://api.github.com/users/chia7712/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/chia7712"
  }
}
json_root is_array: false
json_root is_object: true
number: 9318
url: https://api.github.com/repos/apache/kafka/pulls/9318
title: KAFKA-10497 Convert group coordinator metadata schemas to use generat…
body: issue: https://issues.apache.org/jira/browse/KAFKA-10497

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9318/comments
id: 492661437
url: https://api.github.com/repos/apache/kafka/pulls/comments/492661437
body: Should we try avoiding the conversion to the Struct? We can directly serialize the `OffsetCommitKey` and the others like this: https://github.com/apache/kafka/pull/8897/files#diff-bad29ccb1aba700e1badeff62f1a86b7R184
diff_hunk: @@ -997,189 +997,52 @@ object GroupMetadataManager {
   val MetricsGroup: String = "group-coordinator-metrics"
   val LoadTimeSensor: String = "GroupPartitionLoadTime"
 
-  private val CURRENT_OFFSET_KEY_SCHEMA_VERSION = 1.toShort
-  private val CURRENT_GROUP_KEY_SCHEMA_VERSION = 2.toShort
-
-  private val OFFSET_COMMIT_KEY_SCHEMA = new Schema(new Field("group", STRING),
-    new Field("topic", STRING),
-    new Field("partition", INT32))
-  private val OFFSET_KEY_GROUP_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("group")
-  private val OFFSET_KEY_TOPIC_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("topic")
-  private val OFFSET_KEY_PARTITION_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("partition")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V0 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("metadata")
-  private val OFFSET_VALUE_TIMESTAMP_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V1 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64),
-    new Field("expire_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("commit_timestamp")
-  private val OFFSET_VALUE_EXPIRE_TIMESTAMP_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("expire_timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V2 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("commit_timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V3 = new Schema(
-    new Field("offset", INT64),
-    new Field("leader_epoch", INT32),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("offset")
-  private val OFFSET_VALUE_LEADER_EPOCH_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("leader_epoch")
-  private val OFFSET_VALUE_METADATA_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("commit_timestamp")
-
-  private val GROUP_METADATA_KEY_SCHEMA = new Schema(new Field("group", STRING))
-  private val GROUP_KEY_GROUP_FIELD = GROUP_METADATA_KEY_SCHEMA.get("group")
-
-  private val MEMBER_ID_KEY = "member_id"
-  private val GROUP_INSTANCE_ID_KEY = "group_instance_id"
-  private val CLIENT_ID_KEY = "client_id"
-  private val CLIENT_HOST_KEY = "client_host"
-  private val REBALANCE_TIMEOUT_KEY = "rebalance_timeout"
-  private val SESSION_TIMEOUT_KEY = "session_timeout"
-  private val SUBSCRIPTION_KEY = "subscription"
-  private val ASSIGNMENT_KEY = "assignment"
-
-  private val MEMBER_METADATA_V0 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val MEMBER_METADATA_V1 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(REBALANCE_TIMEOUT_KEY, INT32),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val MEMBER_METADATA_V2 = MEMBER_METADATA_V1
-
-  private val MEMBER_METADATA_V3 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(GROUP_INSTANCE_ID_KEY, NULLABLE_STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(REBALANCE_TIMEOUT_KEY, INT32),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val PROTOCOL_TYPE_KEY = "protocol_type"
-  private val GENERATION_KEY = "generation"
-  private val PROTOCOL_KEY = "protocol"
-  private val LEADER_KEY = "leader"
-  private val CURRENT_STATE_TIMESTAMP_KEY = "current_state_timestamp"
-  private val MEMBERS_KEY = "members"
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V0 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V0)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V1 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V1)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V2 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(CURRENT_STATE_TIMESTAMP_KEY, INT64),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V2)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V3 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(CURRENT_STATE_TIMESTAMP_KEY, INT64),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V3)))
-
-  // map of versions to key schemas as data types
-  private val MESSAGE_TYPE_SCHEMAS = Map(
-    0 -> OFFSET_COMMIT_KEY_SCHEMA,
-    1 -> OFFSET_COMMIT_KEY_SCHEMA,
-    2 -> GROUP_METADATA_KEY_SCHEMA)
-
-  // map of version of offset value schemas
-  private val OFFSET_VALUE_SCHEMAS = Map(
-    0 -> OFFSET_COMMIT_VALUE_SCHEMA_V0,
-    1 -> OFFSET_COMMIT_VALUE_SCHEMA_V1,
-    2 -> OFFSET_COMMIT_VALUE_SCHEMA_V2,
-    3 -> OFFSET_COMMIT_VALUE_SCHEMA_V3)
-
-  // map of version of group metadata value schemas
-  private val GROUP_VALUE_SCHEMAS = Map(
-    0 -> GROUP_METADATA_VALUE_SCHEMA_V0,
-    1 -> GROUP_METADATA_VALUE_SCHEMA_V1,
-    2 -> GROUP_METADATA_VALUE_SCHEMA_V2,
-    3 -> GROUP_METADATA_VALUE_SCHEMA_V3)
-
-  private val CURRENT_OFFSET_KEY_SCHEMA = schemaForKey(CURRENT_OFFSET_KEY_SCHEMA_VERSION)
-  private val CURRENT_GROUP_KEY_SCHEMA = schemaForKey(CURRENT_GROUP_KEY_SCHEMA_VERSION)
-  private val CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION = GROUP_VALUE_SCHEMAS.keySet.max
-
-  private def schemaForKey(version: Int) = {
-    val schemaOpt = MESSAGE_TYPE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown message key schema version " + version)
-    }
-  }
-
-  private def schemaForOffsetValue(version: Int) = {
-    val schemaOpt = OFFSET_VALUE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown offset schema version " + version)
+  /**
+   *
+   * Statically check to make sure that the generated code always stays in sync with the overall protocol
+   * @param clz generated class
+   * @param actual actual version
+   * @param expected expected version
+   * @return correct version
+   */
+  private def checkVersionOfGeneratedCode(clz: Class[_], actual: Short, expected: Short): Short = {
+    if (actual != expected) {
+      throw new IllegalArgumentException(
+        s"core/src/main/resources/common/message/${clz.getSimpleName}.json needs to be updated to match the " +
+          s"latest assignment protocol version. ${clz.getSimpleName} only supports up to  ["
+          + actual + "] but needs to support up to [" + expected + "].");
     }
+    expected
   }
 
-  private def schemaForGroupValue(version: Int) = {
-    val schemaOpt = GROUP_VALUE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown group metadata version " + version)
-    }
-  }
+  private val CURRENT_OFFSET_KEY_SCHEMA_VERSION = checkVersionOfGeneratedCode(
+    clz = classOf[OffsetCommitKey],
+    actual = (OffsetCommitKey.SCHEMAS.length - 1).toShort,
+    expected = 1.toShort)
+  private val CURRENT_GROUP_KEY_SCHEMA_VERSION = checkVersionOfGeneratedCode(
+    clz = classOf[generated.GroupMetadataKey],
+    actual = (generated.GroupMetadataKey.SCHEMAS.length -1).toShort,
+    expected = 2.toShort)
+  private val CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION = checkVersionOfGeneratedCode(
+    clz = classOf[GroupMetadataValue],
+    actual = (GroupMetadataValue.SCHEMAS.length - 1).toShort,
+    expected = 3.toShort)
 
   /**
    * Generates the key for offset commit message for given (group, topic, partition)
    *
    * @return key for offset commit message
    */
   def offsetCommitKey(group: String, topicPartition: TopicPartition): Array[Byte] = {
-    val key = new Struct(CURRENT_OFFSET_KEY_SCHEMA)
-    key.set(OFFSET_KEY_GROUP_FIELD, group)
-    key.set(OFFSET_KEY_TOPIC_FIELD, topicPartition.topic)
-    key.set(OFFSET_KEY_PARTITION_FIELD, topicPartition.partition)
+    val key = new OffsetCommitKey()
+      .setGroup(group)
+      .setTopic(topicPartition.topic())
+      .setPartition(topicPartition.partition())
+    val struct = key.toStruct(CURRENT_OFFSET_KEY_SCHEMA_VERSION)
path: core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
html: https://github.com/apache/kafka/pull/9318#discussion_r492661437
id: 492662801
url: https://api.github.com/repos/apache/kafka/pulls/comments/492662801
body: Could we use the same formatting as the request/response? I know that the formatting that we use is a bit weird but I think that we should remain consistent.
diff_hunk: @@ -0,0 +1,103 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "GroupMetadataValue",
path: core/src/main/resources/common/message/GroupMetadataValue.json
html: https://github.com/apache/kafka/pull/9318#discussion_r492662801
id: 492663086
url: https://api.github.com/repos/apache/kafka/pulls/comments/492663086
body: nit: Missing space after `-`.
diff_hunk: @@ -997,189 +997,52 @@ object GroupMetadataManager {
   val MetricsGroup: String = "group-coordinator-metrics"
   val LoadTimeSensor: String = "GroupPartitionLoadTime"
 
-  private val CURRENT_OFFSET_KEY_SCHEMA_VERSION = 1.toShort
-  private val CURRENT_GROUP_KEY_SCHEMA_VERSION = 2.toShort
-
-  private val OFFSET_COMMIT_KEY_SCHEMA = new Schema(new Field("group", STRING),
-    new Field("topic", STRING),
-    new Field("partition", INT32))
-  private val OFFSET_KEY_GROUP_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("group")
-  private val OFFSET_KEY_TOPIC_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("topic")
-  private val OFFSET_KEY_PARTITION_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("partition")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V0 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("metadata")
-  private val OFFSET_VALUE_TIMESTAMP_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V1 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64),
-    new Field("expire_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("commit_timestamp")
-  private val OFFSET_VALUE_EXPIRE_TIMESTAMP_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("expire_timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V2 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("commit_timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V3 = new Schema(
-    new Field("offset", INT64),
-    new Field("leader_epoch", INT32),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("offset")
-  private val OFFSET_VALUE_LEADER_EPOCH_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("leader_epoch")
-  private val OFFSET_VALUE_METADATA_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("commit_timestamp")
-
-  private val GROUP_METADATA_KEY_SCHEMA = new Schema(new Field("group", STRING))
-  private val GROUP_KEY_GROUP_FIELD = GROUP_METADATA_KEY_SCHEMA.get("group")
-
-  private val MEMBER_ID_KEY = "member_id"
-  private val GROUP_INSTANCE_ID_KEY = "group_instance_id"
-  private val CLIENT_ID_KEY = "client_id"
-  private val CLIENT_HOST_KEY = "client_host"
-  private val REBALANCE_TIMEOUT_KEY = "rebalance_timeout"
-  private val SESSION_TIMEOUT_KEY = "session_timeout"
-  private val SUBSCRIPTION_KEY = "subscription"
-  private val ASSIGNMENT_KEY = "assignment"
-
-  private val MEMBER_METADATA_V0 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val MEMBER_METADATA_V1 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(REBALANCE_TIMEOUT_KEY, INT32),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val MEMBER_METADATA_V2 = MEMBER_METADATA_V1
-
-  private val MEMBER_METADATA_V3 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(GROUP_INSTANCE_ID_KEY, NULLABLE_STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(REBALANCE_TIMEOUT_KEY, INT32),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val PROTOCOL_TYPE_KEY = "protocol_type"
-  private val GENERATION_KEY = "generation"
-  private val PROTOCOL_KEY = "protocol"
-  private val LEADER_KEY = "leader"
-  private val CURRENT_STATE_TIMESTAMP_KEY = "current_state_timestamp"
-  private val MEMBERS_KEY = "members"
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V0 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V0)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V1 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V1)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V2 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(CURRENT_STATE_TIMESTAMP_KEY, INT64),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V2)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V3 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(CURRENT_STATE_TIMESTAMP_KEY, INT64),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V3)))
-
-  // map of versions to key schemas as data types
-  private val MESSAGE_TYPE_SCHEMAS = Map(
-    0 -> OFFSET_COMMIT_KEY_SCHEMA,
-    1 -> OFFSET_COMMIT_KEY_SCHEMA,
-    2 -> GROUP_METADATA_KEY_SCHEMA)
-
-  // map of version of offset value schemas
-  private val OFFSET_VALUE_SCHEMAS = Map(
-    0 -> OFFSET_COMMIT_VALUE_SCHEMA_V0,
-    1 -> OFFSET_COMMIT_VALUE_SCHEMA_V1,
-    2 -> OFFSET_COMMIT_VALUE_SCHEMA_V2,
-    3 -> OFFSET_COMMIT_VALUE_SCHEMA_V3)
-
-  // map of version of group metadata value schemas
-  private val GROUP_VALUE_SCHEMAS = Map(
-    0 -> GROUP_METADATA_VALUE_SCHEMA_V0,
-    1 -> GROUP_METADATA_VALUE_SCHEMA_V1,
-    2 -> GROUP_METADATA_VALUE_SCHEMA_V2,
-    3 -> GROUP_METADATA_VALUE_SCHEMA_V3)
-
-  private val CURRENT_OFFSET_KEY_SCHEMA = schemaForKey(CURRENT_OFFSET_KEY_SCHEMA_VERSION)
-  private val CURRENT_GROUP_KEY_SCHEMA = schemaForKey(CURRENT_GROUP_KEY_SCHEMA_VERSION)
-  private val CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION = GROUP_VALUE_SCHEMAS.keySet.max
-
-  private def schemaForKey(version: Int) = {
-    val schemaOpt = MESSAGE_TYPE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown message key schema version " + version)
-    }
-  }
-
-  private def schemaForOffsetValue(version: Int) = {
-    val schemaOpt = OFFSET_VALUE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown offset schema version " + version)
+  /**
+   *
+   * Statically check to make sure that the generated code always stays in sync with the overall protocol
+   * @param clz generated class
+   * @param actual actual version
+   * @param expected expected version
+   * @return correct version
+   */
+  private def checkVersionOfGeneratedCode(clz: Class[_], actual: Short, expected: Short): Short = {
+    if (actual != expected) {
+      throw new IllegalArgumentException(
+        s"core/src/main/resources/common/message/${clz.getSimpleName}.json needs to be updated to match the " +
+          s"latest assignment protocol version. ${clz.getSimpleName} only supports up to  ["
+          + actual + "] but needs to support up to [" + expected + "].");
     }
+    expected
   }
 
-  private def schemaForGroupValue(version: Int) = {
-    val schemaOpt = GROUP_VALUE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown group metadata version " + version)
-    }
-  }
+  private val CURRENT_OFFSET_KEY_SCHEMA_VERSION = checkVersionOfGeneratedCode(
+    clz = classOf[OffsetCommitKey],
+    actual = (OffsetCommitKey.SCHEMAS.length - 1).toShort,
+    expected = 1.toShort)
+  private val CURRENT_GROUP_KEY_SCHEMA_VERSION = checkVersionOfGeneratedCode(
+    clz = classOf[generated.GroupMetadataKey],
+    actual = (generated.GroupMetadataKey.SCHEMAS.length -1).toShort,
path: core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
html: https://github.com/apache/kafka/pull/9318#discussion_r492663086
id: 492696066
url: https://api.github.com/repos/apache/kafka/pulls/comments/492696066
body: Great idea. Please let me copy your code :)
diff_hunk: @@ -997,189 +997,52 @@ object GroupMetadataManager {
   val MetricsGroup: String = "group-coordinator-metrics"
   val LoadTimeSensor: String = "GroupPartitionLoadTime"
 
-  private val CURRENT_OFFSET_KEY_SCHEMA_VERSION = 1.toShort
-  private val CURRENT_GROUP_KEY_SCHEMA_VERSION = 2.toShort
-
-  private val OFFSET_COMMIT_KEY_SCHEMA = new Schema(new Field("group", STRING),
-    new Field("topic", STRING),
-    new Field("partition", INT32))
-  private val OFFSET_KEY_GROUP_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("group")
-  private val OFFSET_KEY_TOPIC_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("topic")
-  private val OFFSET_KEY_PARTITION_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("partition")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V0 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("metadata")
-  private val OFFSET_VALUE_TIMESTAMP_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V1 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64),
-    new Field("expire_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("commit_timestamp")
-  private val OFFSET_VALUE_EXPIRE_TIMESTAMP_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("expire_timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V2 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("commit_timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V3 = new Schema(
-    new Field("offset", INT64),
-    new Field("leader_epoch", INT32),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("offset")
-  private val OFFSET_VALUE_LEADER_EPOCH_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("leader_epoch")
-  private val OFFSET_VALUE_METADATA_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("commit_timestamp")
-
-  private val GROUP_METADATA_KEY_SCHEMA = new Schema(new Field("group", STRING))
-  private val GROUP_KEY_GROUP_FIELD = GROUP_METADATA_KEY_SCHEMA.get("group")
-
-  private val MEMBER_ID_KEY = "member_id"
-  private val GROUP_INSTANCE_ID_KEY = "group_instance_id"
-  private val CLIENT_ID_KEY = "client_id"
-  private val CLIENT_HOST_KEY = "client_host"
-  private val REBALANCE_TIMEOUT_KEY = "rebalance_timeout"
-  private val SESSION_TIMEOUT_KEY = "session_timeout"
-  private val SUBSCRIPTION_KEY = "subscription"
-  private val ASSIGNMENT_KEY = "assignment"
-
-  private val MEMBER_METADATA_V0 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val MEMBER_METADATA_V1 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(REBALANCE_TIMEOUT_KEY, INT32),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val MEMBER_METADATA_V2 = MEMBER_METADATA_V1
-
-  private val MEMBER_METADATA_V3 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(GROUP_INSTANCE_ID_KEY, NULLABLE_STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(REBALANCE_TIMEOUT_KEY, INT32),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val PROTOCOL_TYPE_KEY = "protocol_type"
-  private val GENERATION_KEY = "generation"
-  private val PROTOCOL_KEY = "protocol"
-  private val LEADER_KEY = "leader"
-  private val CURRENT_STATE_TIMESTAMP_KEY = "current_state_timestamp"
-  private val MEMBERS_KEY = "members"
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V0 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V0)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V1 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V1)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V2 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(CURRENT_STATE_TIMESTAMP_KEY, INT64),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V2)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V3 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(CURRENT_STATE_TIMESTAMP_KEY, INT64),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V3)))
-
-  // map of versions to key schemas as data types
-  private val MESSAGE_TYPE_SCHEMAS = Map(
-    0 -> OFFSET_COMMIT_KEY_SCHEMA,
-    1 -> OFFSET_COMMIT_KEY_SCHEMA,
-    2 -> GROUP_METADATA_KEY_SCHEMA)
-
-  // map of version of offset value schemas
-  private val OFFSET_VALUE_SCHEMAS = Map(
-    0 -> OFFSET_COMMIT_VALUE_SCHEMA_V0,
-    1 -> OFFSET_COMMIT_VALUE_SCHEMA_V1,
-    2 -> OFFSET_COMMIT_VALUE_SCHEMA_V2,
-    3 -> OFFSET_COMMIT_VALUE_SCHEMA_V3)
-
-  // map of version of group metadata value schemas
-  private val GROUP_VALUE_SCHEMAS = Map(
-    0 -> GROUP_METADATA_VALUE_SCHEMA_V0,
-    1 -> GROUP_METADATA_VALUE_SCHEMA_V1,
-    2 -> GROUP_METADATA_VALUE_SCHEMA_V2,
-    3 -> GROUP_METADATA_VALUE_SCHEMA_V3)
-
-  private val CURRENT_OFFSET_KEY_SCHEMA = schemaForKey(CURRENT_OFFSET_KEY_SCHEMA_VERSION)
-  private val CURRENT_GROUP_KEY_SCHEMA = schemaForKey(CURRENT_GROUP_KEY_SCHEMA_VERSION)
-  private val CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION = GROUP_VALUE_SCHEMAS.keySet.max
-
-  private def schemaForKey(version: Int) = {
-    val schemaOpt = MESSAGE_TYPE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown message key schema version " + version)
-    }
-  }
-
-  private def schemaForOffsetValue(version: Int) = {
-    val schemaOpt = OFFSET_VALUE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown offset schema version " + version)
+  /**
+   *
+   * Statically check to make sure that the generated code always stays in sync with the overall protocol
+   * @param clz generated class
+   * @param actual actual version
+   * @param expected expected version
+   * @return correct version
+   */
+  private def checkVersionOfGeneratedCode(clz: Class[_], actual: Short, expected: Short): Short = {
+    if (actual != expected) {
+      throw new IllegalArgumentException(
+        s"core/src/main/resources/common/message/${clz.getSimpleName}.json needs to be updated to match the " +
+          s"latest assignment protocol version. ${clz.getSimpleName} only supports up to  ["
+          + actual + "] but needs to support up to [" + expected + "].");
     }
+    expected
   }
 
-  private def schemaForGroupValue(version: Int) = {
-    val schemaOpt = GROUP_VALUE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown group metadata version " + version)
-    }
-  }
+  private val CURRENT_OFFSET_KEY_SCHEMA_VERSION = checkVersionOfGeneratedCode(
+    clz = classOf[OffsetCommitKey],
+    actual = (OffsetCommitKey.SCHEMAS.length - 1).toShort,
+    expected = 1.toShort)
+  private val CURRENT_GROUP_KEY_SCHEMA_VERSION = checkVersionOfGeneratedCode(
+    clz = classOf[generated.GroupMetadataKey],
+    actual = (generated.GroupMetadataKey.SCHEMAS.length -1).toShort,
+    expected = 2.toShort)
+  private val CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION = checkVersionOfGeneratedCode(
+    clz = classOf[GroupMetadataValue],
+    actual = (GroupMetadataValue.SCHEMAS.length - 1).toShort,
+    expected = 3.toShort)
 
   /**
    * Generates the key for offset commit message for given (group, topic, partition)
    *
    * @return key for offset commit message
    */
   def offsetCommitKey(group: String, topicPartition: TopicPartition): Array[Byte] = {
-    val key = new Struct(CURRENT_OFFSET_KEY_SCHEMA)
-    key.set(OFFSET_KEY_GROUP_FIELD, group)
-    key.set(OFFSET_KEY_TOPIC_FIELD, topicPartition.topic)
-    key.set(OFFSET_KEY_PARTITION_FIELD, topicPartition.partition)
+    val key = new OffsetCommitKey()
+      .setGroup(group)
+      .setTopic(topicPartition.topic())
+      .setPartition(topicPartition.partition())
+    val struct = key.toStruct(CURRENT_OFFSET_KEY_SCHEMA_VERSION)
path: core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
html: https://github.com/apache/kafka/pull/9318#discussion_r492696066
id: 492696416
url: https://api.github.com/repos/apache/kafka/pulls/comments/492696416
body: copy that
diff_hunk: @@ -0,0 +1,103 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "GroupMetadataValue",
path: core/src/main/resources/common/message/GroupMetadataValue.json
html: https://github.com/apache/kafka/pull/9318#discussion_r492696416
id: 495872127
url: https://api.github.com/repos/apache/kafka/pulls/comments/495872127
body: I believe that your previous naming (*Key and *Value) was actually correct. I am sorry if my previous comment was misleading. I was actually referring to the overall formatting of the json document which is not inline with what we are used to do.

We usually put `type` in the beginning and also format fields differently. You can see an example here: https://github.com/apache/kafka/blob/trunk/clients/src/main/resources/common/message/ConsumerProtocolAssignment.json
diff_hunk: @@ -0,0 +1,27 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "GroupMetadataRequest",
path: core/src/main/resources/common/message/GroupMetadataRequest.json
html: https://github.com/apache/kafka/pull/9318#discussion_r495872127
id: 495882544
url: https://api.github.com/repos/apache/kafka/pulls/comments/495882544
body: I think that we should keep `currentStateTimestamp` before `members` as we can't reorder fields.

```
  private val GROUP_METADATA_VALUE_SCHEMA_V2 = new Schema(
    new Field(PROTOCOL_TYPE_KEY, STRING),
    new Field(GENERATION_KEY, INT32),
    new Field(PROTOCOL_KEY, NULLABLE_STRING),
    new Field(LEADER_KEY, NULLABLE_STRING),
    new Field(CURRENT_STATE_TIMESTAMP_KEY, INT64),
    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V2)))
```
diff_hunk: @@ -0,0 +1,103 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "GroupMetadataResponse",
+  "validVersions": "0-3",
+  "fields": [
+    {
+      "name": "protocolType",
+      "versions": "0+",
+      "type": "string"
+    },
+    {
+      "name": "generation",
+      "versions": "0+",
+      "type": "int32"
+    },
+    {
+      "name": "protocol",
+      "versions": "0+",
+      "type": "string",
+      "nullableVersions": "0+"
+    },
+    {
+      "name": "leader",
+      "versions": "0+",
+      "type": "string",
+      "nullableVersions": "0+"
+    },
+    {
+      "name": "members",
+      "versions": "0+",
+      "type": "[]MemberMetadata"
+    },
+    {
+      "name": "currentStateTimestamp",
path: core/src/main/resources/common/message/GroupMetadataResponse.json
html: https://github.com/apache/kafka/pull/9318#discussion_r495882544
id: 495883177
url: https://api.github.com/repos/apache/kafka/pulls/comments/495883177
body: It seems that `rebalanceTimeout` should be before `sessionTimeout`.

```
  private val MEMBER_METADATA_V3 = new Schema(
    new Field(MEMBER_ID_KEY, STRING),
    new Field(GROUP_INSTANCE_ID_KEY, NULLABLE_STRING),
    new Field(CLIENT_ID_KEY, STRING),
    new Field(CLIENT_HOST_KEY, STRING),
    new Field(REBALANCE_TIMEOUT_KEY, INT32),
    new Field(SESSION_TIMEOUT_KEY, INT32),
    new Field(SUBSCRIPTION_KEY, BYTES),
    new Field(ASSIGNMENT_KEY, BYTES))
```
diff_hunk: @@ -0,0 +1,103 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "GroupMetadataResponse",
+  "validVersions": "0-3",
+  "fields": [
+    {
+      "name": "protocolType",
+      "versions": "0+",
+      "type": "string"
+    },
+    {
+      "name": "generation",
+      "versions": "0+",
+      "type": "int32"
+    },
+    {
+      "name": "protocol",
+      "versions": "0+",
+      "type": "string",
+      "nullableVersions": "0+"
+    },
+    {
+      "name": "leader",
+      "versions": "0+",
+      "type": "string",
+      "nullableVersions": "0+"
+    },
+    {
+      "name": "members",
+      "versions": "0+",
+      "type": "[]MemberMetadata"
+    },
+    {
+      "name": "currentStateTimestamp",
+      "versions": "2+",
+      "type": "int64"
+    }
+  ],
+  "commonStructs": [
+    {
+      "name": "MemberMetadata",
+      "versions": "0-3",
+      "fields": [
+        {
+          "name": "memberId",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "clientId",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "clientHost",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "sessionTimeout",
+          "versions": "0+",
+          "type": "int32"
+        },
+        {
+          "name": "subscription",
+          "versions": "0+",
+          "type": "bytes"
+        },
+        {
+          "name": "assignment",
+          "versions": "0+",
+          "type": "bytes"
+        },
+        {
+          "name": "rebalanceTimeout",
path: core/src/main/resources/common/message/GroupMetadataResponse.json
html: https://github.com/apache/kafka/pull/9318#discussion_r495883177
id: 495883449
url: https://api.github.com/repos/apache/kafka/pulls/comments/495883449
body: `groupInstanceId` should be before `clientId`.
diff_hunk: @@ -0,0 +1,103 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "GroupMetadataResponse",
+  "validVersions": "0-3",
+  "fields": [
+    {
+      "name": "protocolType",
+      "versions": "0+",
+      "type": "string"
+    },
+    {
+      "name": "generation",
+      "versions": "0+",
+      "type": "int32"
+    },
+    {
+      "name": "protocol",
+      "versions": "0+",
+      "type": "string",
+      "nullableVersions": "0+"
+    },
+    {
+      "name": "leader",
+      "versions": "0+",
+      "type": "string",
+      "nullableVersions": "0+"
+    },
+    {
+      "name": "members",
+      "versions": "0+",
+      "type": "[]MemberMetadata"
+    },
+    {
+      "name": "currentStateTimestamp",
+      "versions": "2+",
+      "type": "int64"
+    }
+  ],
+  "commonStructs": [
+    {
+      "name": "MemberMetadata",
+      "versions": "0-3",
+      "fields": [
+        {
+          "name": "memberId",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "clientId",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "clientHost",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "sessionTimeout",
+          "versions": "0+",
+          "type": "int32"
+        },
+        {
+          "name": "subscription",
+          "versions": "0+",
+          "type": "bytes"
+        },
+        {
+          "name": "assignment",
+          "versions": "0+",
+          "type": "bytes"
+        },
+        {
+          "name": "rebalanceTimeout",
+          "versions": "1+",
+          "type": "int32"
+        },
+        {
+          "name": "groupInstanceId",
path: core/src/main/resources/common/message/GroupMetadataResponse.json
html: https://github.com/apache/kafka/pull/9318#discussion_r495883449
id: 495886132
url: https://api.github.com/repos/apache/kafka/pulls/comments/495886132
body: I think that we can combine these two together. The field was only renamed in V1. Having `commitTimestamp` with versions `0+` and dropping `timestamp` entirely should be fine.
diff_hunk: @@ -0,0 +1,52 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "OffsetCommitResponse",
+  "validVersions": "0-3",
+  "fields": [
+    {
+      "name": "offset",
+      "versions": "0+",
+      "type": "int64"
+    },
+    {
+      "name": "metadata",
+      "versions": "0+",
+      "type": "string"
+    },
+    {
+      "name": "timestamp",
+      "versions": "0",
+      "type": "int64"
+    },
+    {
+      "name": "commitTimestamp",
+      "versions": "1+",
+      "type": "int64"
+    },
path: core/src/main/resources/common/message/OffsetCommitResponse.json
html: https://github.com/apache/kafka/pull/9318#discussion_r495886132
id: 495886436
url: https://api.github.com/repos/apache/kafka/pulls/comments/495886436
body: `leaderEpoch` should be before `metadata`.
diff_hunk: @@ -0,0 +1,52 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "OffsetCommitResponse",
+  "validVersions": "0-3",
+  "fields": [
+    {
+      "name": "offset",
+      "versions": "0+",
+      "type": "int64"
+    },
+    {
+      "name": "metadata",
+      "versions": "0+",
+      "type": "string"
+    },
+    {
+      "name": "timestamp",
+      "versions": "0",
+      "type": "int64"
+    },
+    {
+      "name": "commitTimestamp",
+      "versions": "1+",
+      "type": "int64"
+    },
+    {
+      "name": "expireTimestamp",
+      "versions": "1",
+      "type": "int64"
+    },
+    {
+      "name": "leaderEpoch",
path: core/src/main/resources/common/message/OffsetCommitResponse.json
html: https://github.com/apache/kafka/pull/9318#discussion_r495886436
id: 495890291
url: https://api.github.com/repos/apache/kafka/pulls/comments/495890291
body: I suggest to fix the versions to `0-1` for all fields. `OffsetCommitRequest` and `GroupMetadataRequest` are in the same topic and we use the version to differentiate the two so it sounds better to use fix ranges here for the time being. The same for `GroupMetadataRequest`.

A meta comment about this. At the moment, the spec only supports ranges such as `A-B` or `A+`. In this case, I wonder how we will involve this schema as the version `2` is used by the other schema. This is not an issue for now but we may need to extend the spec to support discontinuous ranges in the future.
diff_hunk: @@ -0,0 +1,37 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "OffsetCommitRequest",
+  "validVersions": "0-1",
+  "fields": [
+    {
+      "name": "group",
+      "versions": "0+",
path: core/src/main/resources/common/message/OffsetCommitRequest.json
html: https://github.com/apache/kafka/pull/9318#discussion_r495890291
id: 495892315
url: https://api.github.com/repos/apache/kafka/pulls/comments/495892315
body: We have merged my PR that contains this piece of code as well: https://github.com/apache/kafka/commit/466f8fd21c6651ea5daa50154239e85fa629dbb4#diff-bad29ccb1aba700e1badeff62f1a86b7R178. I think that we should find a common place where we could put that piece in order to avoid having it twice.

`org.apache.kafka.common.protocol.MessageUtil` may be a good place. What do you think?
diff_hunk: @@ -997,173 +996,45 @@ object GroupMetadataManager {
   val MetricsGroup: String = "group-coordinator-metrics"
   val LoadTimeSensor: String = "GroupPartitionLoadTime"
 
-  private val CURRENT_OFFSET_KEY_SCHEMA_VERSION = 1.toShort
-  private val CURRENT_GROUP_KEY_SCHEMA_VERSION = 2.toShort
-
-  private val OFFSET_COMMIT_KEY_SCHEMA = new Schema(new Field("group", STRING),
-    new Field("topic", STRING),
-    new Field("partition", INT32))
-  private val OFFSET_KEY_GROUP_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("group")
-  private val OFFSET_KEY_TOPIC_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("topic")
-  private val OFFSET_KEY_PARTITION_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("partition")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V0 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("metadata")
-  private val OFFSET_VALUE_TIMESTAMP_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V1 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64),
-    new Field("expire_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("commit_timestamp")
-  private val OFFSET_VALUE_EXPIRE_TIMESTAMP_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("expire_timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V2 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("commit_timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V3 = new Schema(
-    new Field("offset", INT64),
-    new Field("leader_epoch", INT32),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("offset")
-  private val OFFSET_VALUE_LEADER_EPOCH_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("leader_epoch")
-  private val OFFSET_VALUE_METADATA_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("commit_timestamp")
-
-  private val GROUP_METADATA_KEY_SCHEMA = new Schema(new Field("group", STRING))
-  private val GROUP_KEY_GROUP_FIELD = GROUP_METADATA_KEY_SCHEMA.get("group")
-
-  private val MEMBER_ID_KEY = "member_id"
-  private val GROUP_INSTANCE_ID_KEY = "group_instance_id"
-  private val CLIENT_ID_KEY = "client_id"
-  private val CLIENT_HOST_KEY = "client_host"
-  private val REBALANCE_TIMEOUT_KEY = "rebalance_timeout"
-  private val SESSION_TIMEOUT_KEY = "session_timeout"
-  private val SUBSCRIPTION_KEY = "subscription"
-  private val ASSIGNMENT_KEY = "assignment"
-
-  private val MEMBER_METADATA_V0 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val MEMBER_METADATA_V1 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(REBALANCE_TIMEOUT_KEY, INT32),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val MEMBER_METADATA_V2 = MEMBER_METADATA_V1
-
-  private val MEMBER_METADATA_V3 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(GROUP_INSTANCE_ID_KEY, NULLABLE_STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(REBALANCE_TIMEOUT_KEY, INT32),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val PROTOCOL_TYPE_KEY = "protocol_type"
-  private val GENERATION_KEY = "generation"
-  private val PROTOCOL_KEY = "protocol"
-  private val LEADER_KEY = "leader"
-  private val CURRENT_STATE_TIMESTAMP_KEY = "current_state_timestamp"
-  private val MEMBERS_KEY = "members"
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V0 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V0)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V1 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V1)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V2 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(CURRENT_STATE_TIMESTAMP_KEY, INT64),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V2)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V3 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(CURRENT_STATE_TIMESTAMP_KEY, INT64),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V3)))
-
-  // map of versions to key schemas as data types
-  private val MESSAGE_TYPE_SCHEMAS = Map(
-    0 -> OFFSET_COMMIT_KEY_SCHEMA,
-    1 -> OFFSET_COMMIT_KEY_SCHEMA,
-    2 -> GROUP_METADATA_KEY_SCHEMA)
-
-  // map of version of offset value schemas
-  private val OFFSET_VALUE_SCHEMAS = Map(
-    0 -> OFFSET_COMMIT_VALUE_SCHEMA_V0,
-    1 -> OFFSET_COMMIT_VALUE_SCHEMA_V1,
-    2 -> OFFSET_COMMIT_VALUE_SCHEMA_V2,
-    3 -> OFFSET_COMMIT_VALUE_SCHEMA_V3)
-
-  // map of version of group metadata value schemas
-  private val GROUP_VALUE_SCHEMAS = Map(
-    0 -> GROUP_METADATA_VALUE_SCHEMA_V0,
-    1 -> GROUP_METADATA_VALUE_SCHEMA_V1,
-    2 -> GROUP_METADATA_VALUE_SCHEMA_V2,
-    3 -> GROUP_METADATA_VALUE_SCHEMA_V3)
-
-  private val CURRENT_OFFSET_KEY_SCHEMA = schemaForKey(CURRENT_OFFSET_KEY_SCHEMA_VERSION)
-  private val CURRENT_GROUP_KEY_SCHEMA = schemaForKey(CURRENT_GROUP_KEY_SCHEMA_VERSION)
-  private val CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION = GROUP_VALUE_SCHEMAS.keySet.max
-
-  private def schemaForKey(version: Int) = {
-    val schemaOpt = MESSAGE_TYPE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown message key schema version " + version)
-    }
-  }
-
-  private def schemaForOffsetValue(version: Int) = {
-    val schemaOpt = OFFSET_VALUE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown offset schema version " + version)
+  /**
+   *
+   * Statically check to make sure that the generated code always stays in sync with the overall protocol
+   * @param clz generated class
+   * @param actual actual version
+   * @param expected expected version
+   * @return correct version
+   */
+  private def checkVersionOfGeneratedCode(clz: Class[_], actual: Short, expected: Short): Short = {
+    if (actual != expected) {
+      throw new IllegalArgumentException(
+        s"core/src/main/resources/common/message/${clz.getSimpleName}.json needs to be updated to match the " +
+          s"latest assignment protocol version. ${clz.getSimpleName} only supports up to  ["
+          + actual + "] but needs to support up to [" + expected + "].");
     }
+    expected
   }
 
-  private def schemaForGroupValue(version: Int) = {
-    val schemaOpt = GROUP_VALUE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown group metadata version " + version)
-    }
+  private val CURRENT_OFFSET_KEY_SCHEMA_VERSION = checkVersionOfGeneratedCode(
+    clz = classOf[GenOffsetCommitRequest],
+    actual = (GenOffsetCommitRequest.SCHEMAS.length - 1).toShort,
+    expected = 1.toShort)
+  private val CURRENT_GROUP_KEY_SCHEMA_VERSION = checkVersionOfGeneratedCode(
+    clz = classOf[GroupMetadataRequest],
+    actual = (GroupMetadataRequest.SCHEMAS.length - 1).toShort,
+    expected = 2.toShort)
+  private val CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION = checkVersionOfGeneratedCode(
+    clz = classOf[GroupMetadataResponse],
+    actual = (GroupMetadataResponse.SCHEMAS.length - 1).toShort,
+    expected = 3.toShort)
+
+  private def serializeMessage(version: Short, message: Message): Array[Byte] = {
+    val cache = new ObjectSerializationCache()
+    val size = message.size(cache, version)
+    val bytes = ByteBuffer.allocate(2 + size)
+    val accessor = new ByteBufferAccessor(bytes)
+    accessor.writeShort(version)
+    message.write(accessor, cache, version)
+    bytes.array()
path: core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
html: https://github.com/apache/kafka/pull/9318#discussion_r495892315
id: 495894079
url: https://api.github.com/repos/apache/kafka/pulls/comments/495894079
body: We can use `GenOffsetCommitRequest. HIGHEST_SUPPORTED_VERSION` here. The same applies to the other below.
diff_hunk: @@ -997,173 +996,45 @@ object GroupMetadataManager {
   val MetricsGroup: String = "group-coordinator-metrics"
   val LoadTimeSensor: String = "GroupPartitionLoadTime"
 
-  private val CURRENT_OFFSET_KEY_SCHEMA_VERSION = 1.toShort
-  private val CURRENT_GROUP_KEY_SCHEMA_VERSION = 2.toShort
-
-  private val OFFSET_COMMIT_KEY_SCHEMA = new Schema(new Field("group", STRING),
-    new Field("topic", STRING),
-    new Field("partition", INT32))
-  private val OFFSET_KEY_GROUP_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("group")
-  private val OFFSET_KEY_TOPIC_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("topic")
-  private val OFFSET_KEY_PARTITION_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("partition")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V0 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("metadata")
-  private val OFFSET_VALUE_TIMESTAMP_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V1 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64),
-    new Field("expire_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("commit_timestamp")
-  private val OFFSET_VALUE_EXPIRE_TIMESTAMP_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("expire_timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V2 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("commit_timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V3 = new Schema(
-    new Field("offset", INT64),
-    new Field("leader_epoch", INT32),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("offset")
-  private val OFFSET_VALUE_LEADER_EPOCH_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("leader_epoch")
-  private val OFFSET_VALUE_METADATA_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("commit_timestamp")
-
-  private val GROUP_METADATA_KEY_SCHEMA = new Schema(new Field("group", STRING))
-  private val GROUP_KEY_GROUP_FIELD = GROUP_METADATA_KEY_SCHEMA.get("group")
-
-  private val MEMBER_ID_KEY = "member_id"
-  private val GROUP_INSTANCE_ID_KEY = "group_instance_id"
-  private val CLIENT_ID_KEY = "client_id"
-  private val CLIENT_HOST_KEY = "client_host"
-  private val REBALANCE_TIMEOUT_KEY = "rebalance_timeout"
-  private val SESSION_TIMEOUT_KEY = "session_timeout"
-  private val SUBSCRIPTION_KEY = "subscription"
-  private val ASSIGNMENT_KEY = "assignment"
-
-  private val MEMBER_METADATA_V0 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val MEMBER_METADATA_V1 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(REBALANCE_TIMEOUT_KEY, INT32),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val MEMBER_METADATA_V2 = MEMBER_METADATA_V1
-
-  private val MEMBER_METADATA_V3 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(GROUP_INSTANCE_ID_KEY, NULLABLE_STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(REBALANCE_TIMEOUT_KEY, INT32),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val PROTOCOL_TYPE_KEY = "protocol_type"
-  private val GENERATION_KEY = "generation"
-  private val PROTOCOL_KEY = "protocol"
-  private val LEADER_KEY = "leader"
-  private val CURRENT_STATE_TIMESTAMP_KEY = "current_state_timestamp"
-  private val MEMBERS_KEY = "members"
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V0 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V0)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V1 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V1)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V2 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(CURRENT_STATE_TIMESTAMP_KEY, INT64),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V2)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V3 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(CURRENT_STATE_TIMESTAMP_KEY, INT64),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V3)))
-
-  // map of versions to key schemas as data types
-  private val MESSAGE_TYPE_SCHEMAS = Map(
-    0 -> OFFSET_COMMIT_KEY_SCHEMA,
-    1 -> OFFSET_COMMIT_KEY_SCHEMA,
-    2 -> GROUP_METADATA_KEY_SCHEMA)
-
-  // map of version of offset value schemas
-  private val OFFSET_VALUE_SCHEMAS = Map(
-    0 -> OFFSET_COMMIT_VALUE_SCHEMA_V0,
-    1 -> OFFSET_COMMIT_VALUE_SCHEMA_V1,
-    2 -> OFFSET_COMMIT_VALUE_SCHEMA_V2,
-    3 -> OFFSET_COMMIT_VALUE_SCHEMA_V3)
-
-  // map of version of group metadata value schemas
-  private val GROUP_VALUE_SCHEMAS = Map(
-    0 -> GROUP_METADATA_VALUE_SCHEMA_V0,
-    1 -> GROUP_METADATA_VALUE_SCHEMA_V1,
-    2 -> GROUP_METADATA_VALUE_SCHEMA_V2,
-    3 -> GROUP_METADATA_VALUE_SCHEMA_V3)
-
-  private val CURRENT_OFFSET_KEY_SCHEMA = schemaForKey(CURRENT_OFFSET_KEY_SCHEMA_VERSION)
-  private val CURRENT_GROUP_KEY_SCHEMA = schemaForKey(CURRENT_GROUP_KEY_SCHEMA_VERSION)
-  private val CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION = GROUP_VALUE_SCHEMAS.keySet.max
-
-  private def schemaForKey(version: Int) = {
-    val schemaOpt = MESSAGE_TYPE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown message key schema version " + version)
-    }
-  }
-
-  private def schemaForOffsetValue(version: Int) = {
-    val schemaOpt = OFFSET_VALUE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown offset schema version " + version)
+  /**
+   *
+   * Statically check to make sure that the generated code always stays in sync with the overall protocol
+   * @param clz generated class
+   * @param actual actual version
+   * @param expected expected version
+   * @return correct version
+   */
+  private def checkVersionOfGeneratedCode(clz: Class[_], actual: Short, expected: Short): Short = {
+    if (actual != expected) {
+      throw new IllegalArgumentException(
+        s"core/src/main/resources/common/message/${clz.getSimpleName}.json needs to be updated to match the " +
+          s"latest assignment protocol version. ${clz.getSimpleName} only supports up to  ["
+          + actual + "] but needs to support up to [" + expected + "].");
     }
+    expected
   }
 
-  private def schemaForGroupValue(version: Int) = {
-    val schemaOpt = GROUP_VALUE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown group metadata version " + version)
-    }
+  private val CURRENT_OFFSET_KEY_SCHEMA_VERSION = checkVersionOfGeneratedCode(
+    clz = classOf[GenOffsetCommitRequest],
+    actual = (GenOffsetCommitRequest.SCHEMAS.length - 1).toShort,
path: core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
html: https://github.com/apache/kafka/pull/9318#discussion_r495894079
id: 495895653
url: https://api.github.com/repos/apache/kafka/pulls/comments/495895653
body: It seems that we don't check the version of `OffsetCommitResponse`. Is it intentional? Also, I wonder if doing these checks is really necessary. Having to maintain the versions in the spec and the expected version here sounds quite painful to me.
diff_hunk: @@ -997,173 +996,45 @@ object GroupMetadataManager {
   val MetricsGroup: String = "group-coordinator-metrics"
   val LoadTimeSensor: String = "GroupPartitionLoadTime"
 
-  private val CURRENT_OFFSET_KEY_SCHEMA_VERSION = 1.toShort
-  private val CURRENT_GROUP_KEY_SCHEMA_VERSION = 2.toShort
-
-  private val OFFSET_COMMIT_KEY_SCHEMA = new Schema(new Field("group", STRING),
-    new Field("topic", STRING),
-    new Field("partition", INT32))
-  private val OFFSET_KEY_GROUP_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("group")
-  private val OFFSET_KEY_TOPIC_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("topic")
-  private val OFFSET_KEY_PARTITION_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("partition")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V0 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("metadata")
-  private val OFFSET_VALUE_TIMESTAMP_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V1 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64),
-    new Field("expire_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("commit_timestamp")
-  private val OFFSET_VALUE_EXPIRE_TIMESTAMP_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("expire_timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V2 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("commit_timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V3 = new Schema(
-    new Field("offset", INT64),
-    new Field("leader_epoch", INT32),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("offset")
-  private val OFFSET_VALUE_LEADER_EPOCH_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("leader_epoch")
-  private val OFFSET_VALUE_METADATA_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("commit_timestamp")
-
-  private val GROUP_METADATA_KEY_SCHEMA = new Schema(new Field("group", STRING))
-  private val GROUP_KEY_GROUP_FIELD = GROUP_METADATA_KEY_SCHEMA.get("group")
-
-  private val MEMBER_ID_KEY = "member_id"
-  private val GROUP_INSTANCE_ID_KEY = "group_instance_id"
-  private val CLIENT_ID_KEY = "client_id"
-  private val CLIENT_HOST_KEY = "client_host"
-  private val REBALANCE_TIMEOUT_KEY = "rebalance_timeout"
-  private val SESSION_TIMEOUT_KEY = "session_timeout"
-  private val SUBSCRIPTION_KEY = "subscription"
-  private val ASSIGNMENT_KEY = "assignment"
-
-  private val MEMBER_METADATA_V0 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val MEMBER_METADATA_V1 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(REBALANCE_TIMEOUT_KEY, INT32),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val MEMBER_METADATA_V2 = MEMBER_METADATA_V1
-
-  private val MEMBER_METADATA_V3 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(GROUP_INSTANCE_ID_KEY, NULLABLE_STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(REBALANCE_TIMEOUT_KEY, INT32),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val PROTOCOL_TYPE_KEY = "protocol_type"
-  private val GENERATION_KEY = "generation"
-  private val PROTOCOL_KEY = "protocol"
-  private val LEADER_KEY = "leader"
-  private val CURRENT_STATE_TIMESTAMP_KEY = "current_state_timestamp"
-  private val MEMBERS_KEY = "members"
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V0 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V0)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V1 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V1)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V2 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(CURRENT_STATE_TIMESTAMP_KEY, INT64),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V2)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V3 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(CURRENT_STATE_TIMESTAMP_KEY, INT64),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V3)))
-
-  // map of versions to key schemas as data types
-  private val MESSAGE_TYPE_SCHEMAS = Map(
-    0 -> OFFSET_COMMIT_KEY_SCHEMA,
-    1 -> OFFSET_COMMIT_KEY_SCHEMA,
-    2 -> GROUP_METADATA_KEY_SCHEMA)
-
-  // map of version of offset value schemas
-  private val OFFSET_VALUE_SCHEMAS = Map(
-    0 -> OFFSET_COMMIT_VALUE_SCHEMA_V0,
-    1 -> OFFSET_COMMIT_VALUE_SCHEMA_V1,
-    2 -> OFFSET_COMMIT_VALUE_SCHEMA_V2,
-    3 -> OFFSET_COMMIT_VALUE_SCHEMA_V3)
-
-  // map of version of group metadata value schemas
-  private val GROUP_VALUE_SCHEMAS = Map(
-    0 -> GROUP_METADATA_VALUE_SCHEMA_V0,
-    1 -> GROUP_METADATA_VALUE_SCHEMA_V1,
-    2 -> GROUP_METADATA_VALUE_SCHEMA_V2,
-    3 -> GROUP_METADATA_VALUE_SCHEMA_V3)
-
-  private val CURRENT_OFFSET_KEY_SCHEMA = schemaForKey(CURRENT_OFFSET_KEY_SCHEMA_VERSION)
-  private val CURRENT_GROUP_KEY_SCHEMA = schemaForKey(CURRENT_GROUP_KEY_SCHEMA_VERSION)
-  private val CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION = GROUP_VALUE_SCHEMAS.keySet.max
-
-  private def schemaForKey(version: Int) = {
-    val schemaOpt = MESSAGE_TYPE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown message key schema version " + version)
-    }
-  }
-
-  private def schemaForOffsetValue(version: Int) = {
-    val schemaOpt = OFFSET_VALUE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown offset schema version " + version)
+  /**
+   *
+   * Statically check to make sure that the generated code always stays in sync with the overall protocol
+   * @param clz generated class
+   * @param actual actual version
+   * @param expected expected version
+   * @return correct version
+   */
+  private def checkVersionOfGeneratedCode(clz: Class[_], actual: Short, expected: Short): Short = {
+    if (actual != expected) {
+      throw new IllegalArgumentException(
+        s"core/src/main/resources/common/message/${clz.getSimpleName}.json needs to be updated to match the " +
+          s"latest assignment protocol version. ${clz.getSimpleName} only supports up to  ["
+          + actual + "] but needs to support up to [" + expected + "].");
     }
+    expected
   }
 
-  private def schemaForGroupValue(version: Int) = {
-    val schemaOpt = GROUP_VALUE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown group metadata version " + version)
-    }
+  private val CURRENT_OFFSET_KEY_SCHEMA_VERSION = checkVersionOfGeneratedCode(
+    clz = classOf[GenOffsetCommitRequest],
+    actual = (GenOffsetCommitRequest.SCHEMAS.length - 1).toShort,
+    expected = 1.toShort)
+  private val CURRENT_GROUP_KEY_SCHEMA_VERSION = checkVersionOfGeneratedCode(
+    clz = classOf[GroupMetadataRequest],
+    actual = (GroupMetadataRequest.SCHEMAS.length - 1).toShort,
+    expected = 2.toShort)
+  private val CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION = checkVersionOfGeneratedCode(
path: core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
html: https://github.com/apache/kafka/pull/9318#discussion_r495895653
id: 495896380
url: https://api.github.com/repos/apache/kafka/pulls/comments/495896380
body: nit: Could we break this line? Having each setYXZ on a new line would improve the readability.
diff_hunk: @@ -1174,15 +1045,8 @@ object GroupMetadataManager {
    * @return key for offset commit message
    */
   def offsetCommitKey(groupId: String, topicPartition: TopicPartition): Array[Byte] = {
-    val key = new Struct(CURRENT_OFFSET_KEY_SCHEMA)
-    key.set(OFFSET_KEY_GROUP_FIELD, groupId)
-    key.set(OFFSET_KEY_TOPIC_FIELD, topicPartition.topic)
-    key.set(OFFSET_KEY_PARTITION_FIELD, topicPartition.partition)
-
-    val byteBuffer = ByteBuffer.allocate(2 /* version */ + key.sizeOf)
-    byteBuffer.putShort(CURRENT_OFFSET_KEY_SCHEMA_VERSION)
-    key.writeTo(byteBuffer)
-    byteBuffer.array()
+    serializeMessage(CURRENT_OFFSET_KEY_SCHEMA_VERSION,
+      new GenOffsetCommitRequest().setGroup(groupId).setTopic(topicPartition.topic()).setPartition(topicPartition.partition()))
path: core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
html: https://github.com/apache/kafka/pull/9318#discussion_r495896380
id: 495899047
url: https://api.github.com/repos/apache/kafka/pulls/comments/495899047
body: nit: The parenthesis may not be necessary for all the getters. It is worth checking the other cases below as well.
diff_hunk: @@ -1321,22 +1159,15 @@ object GroupMetadataManager {
    */
   def readMessageKey(buffer: ByteBuffer): BaseKey = {
     val version = buffer.getShort
-    val keySchema = schemaForKey(version)
-    val key = keySchema.read(buffer)
 
     if (version <= CURRENT_OFFSET_KEY_SCHEMA_VERSION) {
       // version 0 and 1 refer to offset
-      val group = key.get(OFFSET_KEY_GROUP_FIELD).asInstanceOf[String]
-      val topic = key.get(OFFSET_KEY_TOPIC_FIELD).asInstanceOf[String]
-      val partition = key.get(OFFSET_KEY_PARTITION_FIELD).asInstanceOf[Int]
-
-      OffsetKey(version, GroupTopicPartition(group, new TopicPartition(topic, partition)))
-
+      val key = new GenOffsetCommitRequest(new ByteBufferAccessor(buffer), version)
+      OffsetKey(version, GroupTopicPartition(key.group(), new TopicPartition(key.topic(), key.partition())))
path: core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
html: https://github.com/apache/kafka/pull/9318#discussion_r495899047
id: 495901173
url: https://api.github.com/repos/apache/kafka/pulls/comments/495901173
body: We may want to use `"zeroCopy": true` for both `subscription` and `assignment` like we did for the consumer protocol.
diff_hunk: @@ -0,0 +1,103 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "GroupMetadataResponse",
+  "validVersions": "0-3",
+  "fields": [
+    {
+      "name": "protocolType",
+      "versions": "0+",
+      "type": "string"
+    },
+    {
+      "name": "generation",
+      "versions": "0+",
+      "type": "int32"
+    },
+    {
+      "name": "protocol",
+      "versions": "0+",
+      "type": "string",
+      "nullableVersions": "0+"
+    },
+    {
+      "name": "leader",
+      "versions": "0+",
+      "type": "string",
+      "nullableVersions": "0+"
+    },
+    {
+      "name": "members",
+      "versions": "0+",
+      "type": "[]MemberMetadata"
+    },
+    {
+      "name": "currentStateTimestamp",
+      "versions": "2+",
+      "type": "int64"
+    }
+  ],
+  "commonStructs": [
+    {
+      "name": "MemberMetadata",
+      "versions": "0-3",
+      "fields": [
+        {
+          "name": "memberId",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "clientId",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "clientHost",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "sessionTimeout",
+          "versions": "0+",
+          "type": "int32"
+        },
+        {
+          "name": "subscription",
+          "versions": "0+",
+          "type": "bytes"
path: core/src/main/resources/common/message/GroupMetadataResponse.json
html: https://github.com/apache/kafka/pull/9318#discussion_r495901173
id: 495918349
url: https://api.github.com/repos/apache/kafka/pulls/comments/495918349
body: Sorry for misleading your comment :(

will follow the format in next commit


diff_hunk: @@ -0,0 +1,27 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "GroupMetadataRequest",
path: core/src/main/resources/common/message/GroupMetadataRequest.json
html: https://github.com/apache/kafka/pull/9318#discussion_r495918349
id: 495919910
url: https://api.github.com/repos/apache/kafka/pulls/comments/495919910
body: good idea!
diff_hunk: @@ -0,0 +1,52 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "OffsetCommitResponse",
+  "validVersions": "0-3",
+  "fields": [
+    {
+      "name": "offset",
+      "versions": "0+",
+      "type": "int64"
+    },
+    {
+      "name": "metadata",
+      "versions": "0+",
+      "type": "string"
+    },
+    {
+      "name": "timestamp",
+      "versions": "0",
+      "type": "int64"
+    },
+    {
+      "name": "commitTimestamp",
+      "versions": "1+",
+      "type": "int64"
+    },
path: core/src/main/resources/common/message/OffsetCommitResponse.json
html: https://github.com/apache/kafka/pull/9318#discussion_r495919910
id: 495932581
url: https://api.github.com/repos/apache/kafka/pulls/comments/495932581
body: > Also, I wonder if doing these checks is really necessary. Having to maintain the versions in the spec and the expected version here sounds quite painful to me.

This check makes sure the code always stays in sync. However, if we can make great code reviews (like yours), this static check should be unnecessary :)

I will remove this painful check (to me also) in next commit.
diff_hunk: @@ -997,173 +996,45 @@ object GroupMetadataManager {
   val MetricsGroup: String = "group-coordinator-metrics"
   val LoadTimeSensor: String = "GroupPartitionLoadTime"
 
-  private val CURRENT_OFFSET_KEY_SCHEMA_VERSION = 1.toShort
-  private val CURRENT_GROUP_KEY_SCHEMA_VERSION = 2.toShort
-
-  private val OFFSET_COMMIT_KEY_SCHEMA = new Schema(new Field("group", STRING),
-    new Field("topic", STRING),
-    new Field("partition", INT32))
-  private val OFFSET_KEY_GROUP_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("group")
-  private val OFFSET_KEY_TOPIC_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("topic")
-  private val OFFSET_KEY_PARTITION_FIELD = OFFSET_COMMIT_KEY_SCHEMA.get("partition")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V0 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("metadata")
-  private val OFFSET_VALUE_TIMESTAMP_FIELD_V0 = OFFSET_COMMIT_VALUE_SCHEMA_V0.get("timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V1 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64),
-    new Field("expire_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("commit_timestamp")
-  private val OFFSET_VALUE_EXPIRE_TIMESTAMP_FIELD_V1 = OFFSET_COMMIT_VALUE_SCHEMA_V1.get("expire_timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V2 = new Schema(new Field("offset", INT64),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("offset")
-  private val OFFSET_VALUE_METADATA_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V2 = OFFSET_COMMIT_VALUE_SCHEMA_V2.get("commit_timestamp")
-
-  private val OFFSET_COMMIT_VALUE_SCHEMA_V3 = new Schema(
-    new Field("offset", INT64),
-    new Field("leader_epoch", INT32),
-    new Field("metadata", STRING, "Associated metadata.", ""),
-    new Field("commit_timestamp", INT64))
-  private val OFFSET_VALUE_OFFSET_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("offset")
-  private val OFFSET_VALUE_LEADER_EPOCH_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("leader_epoch")
-  private val OFFSET_VALUE_METADATA_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("metadata")
-  private val OFFSET_VALUE_COMMIT_TIMESTAMP_FIELD_V3 = OFFSET_COMMIT_VALUE_SCHEMA_V3.get("commit_timestamp")
-
-  private val GROUP_METADATA_KEY_SCHEMA = new Schema(new Field("group", STRING))
-  private val GROUP_KEY_GROUP_FIELD = GROUP_METADATA_KEY_SCHEMA.get("group")
-
-  private val MEMBER_ID_KEY = "member_id"
-  private val GROUP_INSTANCE_ID_KEY = "group_instance_id"
-  private val CLIENT_ID_KEY = "client_id"
-  private val CLIENT_HOST_KEY = "client_host"
-  private val REBALANCE_TIMEOUT_KEY = "rebalance_timeout"
-  private val SESSION_TIMEOUT_KEY = "session_timeout"
-  private val SUBSCRIPTION_KEY = "subscription"
-  private val ASSIGNMENT_KEY = "assignment"
-
-  private val MEMBER_METADATA_V0 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val MEMBER_METADATA_V1 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(REBALANCE_TIMEOUT_KEY, INT32),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val MEMBER_METADATA_V2 = MEMBER_METADATA_V1
-
-  private val MEMBER_METADATA_V3 = new Schema(
-    new Field(MEMBER_ID_KEY, STRING),
-    new Field(GROUP_INSTANCE_ID_KEY, NULLABLE_STRING),
-    new Field(CLIENT_ID_KEY, STRING),
-    new Field(CLIENT_HOST_KEY, STRING),
-    new Field(REBALANCE_TIMEOUT_KEY, INT32),
-    new Field(SESSION_TIMEOUT_KEY, INT32),
-    new Field(SUBSCRIPTION_KEY, BYTES),
-    new Field(ASSIGNMENT_KEY, BYTES))
-
-  private val PROTOCOL_TYPE_KEY = "protocol_type"
-  private val GENERATION_KEY = "generation"
-  private val PROTOCOL_KEY = "protocol"
-  private val LEADER_KEY = "leader"
-  private val CURRENT_STATE_TIMESTAMP_KEY = "current_state_timestamp"
-  private val MEMBERS_KEY = "members"
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V0 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V0)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V1 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V1)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V2 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(CURRENT_STATE_TIMESTAMP_KEY, INT64),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V2)))
-
-  private val GROUP_METADATA_VALUE_SCHEMA_V3 = new Schema(
-    new Field(PROTOCOL_TYPE_KEY, STRING),
-    new Field(GENERATION_KEY, INT32),
-    new Field(PROTOCOL_KEY, NULLABLE_STRING),
-    new Field(LEADER_KEY, NULLABLE_STRING),
-    new Field(CURRENT_STATE_TIMESTAMP_KEY, INT64),
-    new Field(MEMBERS_KEY, new ArrayOf(MEMBER_METADATA_V3)))
-
-  // map of versions to key schemas as data types
-  private val MESSAGE_TYPE_SCHEMAS = Map(
-    0 -> OFFSET_COMMIT_KEY_SCHEMA,
-    1 -> OFFSET_COMMIT_KEY_SCHEMA,
-    2 -> GROUP_METADATA_KEY_SCHEMA)
-
-  // map of version of offset value schemas
-  private val OFFSET_VALUE_SCHEMAS = Map(
-    0 -> OFFSET_COMMIT_VALUE_SCHEMA_V0,
-    1 -> OFFSET_COMMIT_VALUE_SCHEMA_V1,
-    2 -> OFFSET_COMMIT_VALUE_SCHEMA_V2,
-    3 -> OFFSET_COMMIT_VALUE_SCHEMA_V3)
-
-  // map of version of group metadata value schemas
-  private val GROUP_VALUE_SCHEMAS = Map(
-    0 -> GROUP_METADATA_VALUE_SCHEMA_V0,
-    1 -> GROUP_METADATA_VALUE_SCHEMA_V1,
-    2 -> GROUP_METADATA_VALUE_SCHEMA_V2,
-    3 -> GROUP_METADATA_VALUE_SCHEMA_V3)
-
-  private val CURRENT_OFFSET_KEY_SCHEMA = schemaForKey(CURRENT_OFFSET_KEY_SCHEMA_VERSION)
-  private val CURRENT_GROUP_KEY_SCHEMA = schemaForKey(CURRENT_GROUP_KEY_SCHEMA_VERSION)
-  private val CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION = GROUP_VALUE_SCHEMAS.keySet.max
-
-  private def schemaForKey(version: Int) = {
-    val schemaOpt = MESSAGE_TYPE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown message key schema version " + version)
-    }
-  }
-
-  private def schemaForOffsetValue(version: Int) = {
-    val schemaOpt = OFFSET_VALUE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown offset schema version " + version)
+  /**
+   *
+   * Statically check to make sure that the generated code always stays in sync with the overall protocol
+   * @param clz generated class
+   * @param actual actual version
+   * @param expected expected version
+   * @return correct version
+   */
+  private def checkVersionOfGeneratedCode(clz: Class[_], actual: Short, expected: Short): Short = {
+    if (actual != expected) {
+      throw new IllegalArgumentException(
+        s"core/src/main/resources/common/message/${clz.getSimpleName}.json needs to be updated to match the " +
+          s"latest assignment protocol version. ${clz.getSimpleName} only supports up to  ["
+          + actual + "] but needs to support up to [" + expected + "].");
     }
+    expected
   }
 
-  private def schemaForGroupValue(version: Int) = {
-    val schemaOpt = GROUP_VALUE_SCHEMAS.get(version)
-    schemaOpt match {
-      case Some(schema) => schema
-      case _ => throw new KafkaException("Unknown group metadata version " + version)
-    }
+  private val CURRENT_OFFSET_KEY_SCHEMA_VERSION = checkVersionOfGeneratedCode(
+    clz = classOf[GenOffsetCommitRequest],
+    actual = (GenOffsetCommitRequest.SCHEMAS.length - 1).toShort,
+    expected = 1.toShort)
+  private val CURRENT_GROUP_KEY_SCHEMA_VERSION = checkVersionOfGeneratedCode(
+    clz = classOf[GroupMetadataRequest],
+    actual = (GroupMetadataRequest.SCHEMAS.length - 1).toShort,
+    expected = 2.toShort)
+  private val CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION = checkVersionOfGeneratedCode(
path: core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
html: https://github.com/apache/kafka/pull/9318#discussion_r495932581
id: 495940420
url: https://api.github.com/repos/apache/kafka/pulls/comments/495940420
body: > I suggest to fix the versions to 0-1 for all fields. OffsetCommitRequest and GroupMetadataRequest are in the same topic and we use the version to differentiate the two so it sounds better to use fix ranges here for the time being. The same for GroupMetadataRequest.

I'd like to merge GroupMetadataRequest and OffsetCommitRequest so we can fix the version issue in generated code. WDYT?
diff_hunk: @@ -0,0 +1,37 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "OffsetCommitRequest",
+  "validVersions": "0-1",
+  "fields": [
+    {
+      "name": "group",
+      "versions": "0+",
path: core/src/main/resources/common/message/OffsetCommitRequest.json
html: https://github.com/apache/kafka/pull/9318#discussion_r495940420
id: 495966600
url: https://api.github.com/repos/apache/kafka/pulls/comments/495966600
body: Could I address it in a separate PR? The true used type is ```byte[]``` rather than ```ByteBuffer``` so it may bring a lot changes.
diff_hunk: @@ -0,0 +1,103 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "GroupMetadataResponse",
+  "validVersions": "0-3",
+  "fields": [
+    {
+      "name": "protocolType",
+      "versions": "0+",
+      "type": "string"
+    },
+    {
+      "name": "generation",
+      "versions": "0+",
+      "type": "int32"
+    },
+    {
+      "name": "protocol",
+      "versions": "0+",
+      "type": "string",
+      "nullableVersions": "0+"
+    },
+    {
+      "name": "leader",
+      "versions": "0+",
+      "type": "string",
+      "nullableVersions": "0+"
+    },
+    {
+      "name": "members",
+      "versions": "0+",
+      "type": "[]MemberMetadata"
+    },
+    {
+      "name": "currentStateTimestamp",
+      "versions": "2+",
+      "type": "int64"
+    }
+  ],
+  "commonStructs": [
+    {
+      "name": "MemberMetadata",
+      "versions": "0-3",
+      "fields": [
+        {
+          "name": "memberId",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "clientId",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "clientHost",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "sessionTimeout",
+          "versions": "0+",
+          "type": "int32"
+        },
+        {
+          "name": "subscription",
+          "versions": "0+",
+          "type": "bytes"
path: core/src/main/resources/common/message/GroupMetadataResponse.json
html: https://github.com/apache/kafka/pull/9318#discussion_r495966600
id: 497375844
url: https://api.github.com/repos/apache/kafka/pulls/comments/497375844
body: I have though about doing this as well and I am not fully convinced by it. What do we gain by doing so? It sounds a bit confusing and error prone as one without the historical context may do mistakes while evolving the two schemas in the future. Moreover, as we still have logic in the code which relies on the version to build up the correct object, we don't gain that much there neither.

As an example, let imagine that we want to add new field `foo` to `GroupMetadata` part of the schema and a new field `bar` to `OffsetCommit` part. We would end up with the following:

```
{
  "type": "data",
  "name": "OffsetCommitKey",
  "validVersions": "0-4",
  "fields": [
    { "name": "group", "type": "string", "versions": "0-4" },
    { "name": "topic", "type": "string", "versions": "0-1, 4" },
    { "name": "partition", "type": "int32", "versions": "0-1, 4" }
    { "name": "foo", "type": "int32", "versions": "3" }
    { "name": "bar", "type": "int32", "versions": "0-1, 4" }
  ]
}
```

v3 would be the new version of the `GroupMetadata` part and v4 the new version of the `OffsetCommit`.

Personally, I find this hard to reason about because it is not easy to see that there are in fact two distinct-overlapping schemas in there which shares the `group` field. I lean towards keeping two separate schemas for the time being. I think that we can revise this when we will have to evolve them.
diff_hunk: @@ -0,0 +1,37 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "OffsetCommitRequest",
+  "validVersions": "0-1",
+  "fields": [
+    {
+      "name": "group",
+      "versions": "0+",
path: core/src/main/resources/common/message/OffsetCommitRequest.json
html: https://github.com/apache/kafka/pull/9318#discussion_r497375844
id: 497382684
url: https://api.github.com/repos/apache/kafka/pulls/comments/497382684
body: I am not sure if we gain much by using `"zeroCopy": true` in the end. I suggested this because the Struct based schemas were using `ByteBuffer`. Using `bytes` should be ok here, isn't it?
diff_hunk: @@ -0,0 +1,103 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "GroupMetadataResponse",
+  "validVersions": "0-3",
+  "fields": [
+    {
+      "name": "protocolType",
+      "versions": "0+",
+      "type": "string"
+    },
+    {
+      "name": "generation",
+      "versions": "0+",
+      "type": "int32"
+    },
+    {
+      "name": "protocol",
+      "versions": "0+",
+      "type": "string",
+      "nullableVersions": "0+"
+    },
+    {
+      "name": "leader",
+      "versions": "0+",
+      "type": "string",
+      "nullableVersions": "0+"
+    },
+    {
+      "name": "members",
+      "versions": "0+",
+      "type": "[]MemberMetadata"
+    },
+    {
+      "name": "currentStateTimestamp",
+      "versions": "2+",
+      "type": "int64"
+    }
+  ],
+  "commonStructs": [
+    {
+      "name": "MemberMetadata",
+      "versions": "0-3",
+      "fields": [
+        {
+          "name": "memberId",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "clientId",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "clientHost",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "sessionTimeout",
+          "versions": "0+",
+          "type": "int32"
+        },
+        {
+          "name": "subscription",
+          "versions": "0+",
+          "type": "bytes"
path: core/src/main/resources/common/message/GroupMetadataResponse.json
html: https://github.com/apache/kafka/pull/9318#discussion_r497382684
id: 497391110
url: https://api.github.com/repos/apache/kafka/pulls/comments/497391110
body: > Using bytes should be ok here, isn't it?

It would be better to use bytes currently since ```MemberMetadata.scala``` is using bytes rather than ```ByteBuffer```(https://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/coordinator/group/MemberMetadata.scala#L64). The previous code make deep copy of ```ByteBuffer``` from struct to get bytes

```scala
member.assignment = Utils.toArray(memberMetadata.get(ASSIGNMENT_KEY).asInstanceOf[ByteBuffer])
```
diff_hunk: @@ -0,0 +1,103 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "GroupMetadataResponse",
+  "validVersions": "0-3",
+  "fields": [
+    {
+      "name": "protocolType",
+      "versions": "0+",
+      "type": "string"
+    },
+    {
+      "name": "generation",
+      "versions": "0+",
+      "type": "int32"
+    },
+    {
+      "name": "protocol",
+      "versions": "0+",
+      "type": "string",
+      "nullableVersions": "0+"
+    },
+    {
+      "name": "leader",
+      "versions": "0+",
+      "type": "string",
+      "nullableVersions": "0+"
+    },
+    {
+      "name": "members",
+      "versions": "0+",
+      "type": "[]MemberMetadata"
+    },
+    {
+      "name": "currentStateTimestamp",
+      "versions": "2+",
+      "type": "int64"
+    }
+  ],
+  "commonStructs": [
+    {
+      "name": "MemberMetadata",
+      "versions": "0-3",
+      "fields": [
+        {
+          "name": "memberId",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "clientId",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "clientHost",
+          "versions": "0+",
+          "type": "string"
+        },
+        {
+          "name": "sessionTimeout",
+          "versions": "0+",
+          "type": "int32"
+        },
+        {
+          "name": "subscription",
+          "versions": "0+",
+          "type": "bytes"
path: core/src/main/resources/common/message/GroupMetadataResponse.json
html: https://github.com/apache/kafka/pull/9318#discussion_r497391110
id: 497391530
url: https://api.github.com/repos/apache/kafka/pulls/comments/497391530
body: you are right. I will keep two separate schemas.
diff_hunk: @@ -0,0 +1,37 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "name": "OffsetCommitRequest",
+  "validVersions": "0-1",
+  "fields": [
+    {
+      "name": "group",
+      "versions": "0+",
path: core/src/main/resources/common/message/OffsetCommitRequest.json
html: https://github.com/apache/kafka/pull/9318#discussion_r497391530
id: 498717745
url: https://api.github.com/repos/apache/kafka/pulls/comments/498717745
body: `0-1`?
diff_hunk: @@ -0,0 +1,25 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "type": "data",
+  "name": "OffsetCommitKey",
+  "validVersions": "0-2",
path: core/src/main/resources/common/message/OffsetCommitKey.json
html: https://github.com/apache/kafka/pull/9318#discussion_r498717745
id: 498717814
url: https://api.github.com/repos/apache/kafka/pulls/comments/498717814
body: `0-1`?
diff_hunk: @@ -0,0 +1,25 @@
+// Licensed to the Apache Software Foundation (ASF) under one or more
+// contributor license agreements.  See the NOTICE file distributed with
+// this work for additional information regarding copyright ownership.
+// The ASF licenses this file to You under the Apache License, Version 2.0
+// (the "License"); you may not use this file except in compliance with
+// the License.  You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+{
+  "type": "data",
+  "name": "OffsetCommitKey",
+  "validVersions": "0-2",
+  "fields": [
+    { "name": "group", "type": "string", "versions": "0-2" },
path: core/src/main/resources/common/message/OffsetCommitKey.json
html: https://github.com/apache/kafka/pull/9318#discussion_r498717814
id: 498720164
url: https://api.github.com/repos/apache/kafka/pulls/comments/498720164
body: nit: I think that the parenthesis after `topic` and `partition` could be removed in both cases.
diff_hunk: @@ -1174,15 +1013,11 @@ object GroupMetadataManager {
    * @return key for offset commit message
    */
   def offsetCommitKey(groupId: String, topicPartition: TopicPartition): Array[Byte] = {
-    val key = new Struct(CURRENT_OFFSET_KEY_SCHEMA)
-    key.set(OFFSET_KEY_GROUP_FIELD, groupId)
-    key.set(OFFSET_KEY_TOPIC_FIELD, topicPartition.topic)
-    key.set(OFFSET_KEY_PARTITION_FIELD, topicPartition.partition)
-
-    val byteBuffer = ByteBuffer.allocate(2 /* version */ + key.sizeOf)
-    byteBuffer.putShort(CURRENT_OFFSET_KEY_SCHEMA_VERSION)
-    key.writeTo(byteBuffer)
-    byteBuffer.array()
+    serializeMessage(CURRENT_OFFSET_KEY_SCHEMA_VERSION,
+      new OffsetCommitKey()
+        .setGroup(groupId)
+        .setTopic(topicPartition.topic())
+        .setPartition(topicPartition.partition()))
path: core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
html: https://github.com/apache/kafka/pull/9318#discussion_r498720164
pull_request_number: 9318
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9315/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9315/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9315"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9315"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9315/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9315"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/8aabf665feb02610d6903c2daa20650aeeb1fbb2"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "4b6d8da9fd5bbc7e90c062c4d2131437183349a0",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "As ticket suggested I’ve tried to introduce an in-memory DNS server for testing purposes, but unfortunately capability to change default DNS provider has been removed in Java 9: https://bugs.openjdk.java.net/browse/JDK-8134577.  There is a request for restoring it: https://bugs.openjdk.java.net/browse/JDK-8192780, but so far has not been implemented.\r\n\r\nTherefore this PR decouples DNS resolution from `InetAddress.getAllByName` implementation in order to mock its behavior in tests. \r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9315/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9315/commits",
  "created_at": "2020-09-21T18:34:56Z",
  "diff_url": "https://github.com/apache/kafka/pull/9315.diff",
  "draft": false,
  "head": {
    "label": "piotrrzysko:dns-resolver",
    "ref": "dns-resolver",
    "repo": {
      "archive_url": "https://api.github.com/repos/piotrrzysko/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/piotrrzysko/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/piotrrzysko/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/piotrrzysko/kafka/branches{/branch}",
      "clone_url": "https://github.com/piotrrzysko/kafka.git",
      "collaborators_url": "https://api.github.com/repos/piotrrzysko/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/piotrrzysko/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/piotrrzysko/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/piotrrzysko/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/piotrrzysko/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/piotrrzysko/kafka/contributors",
      "created_at": "2020-03-10T22:33:26Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/piotrrzysko/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/piotrrzysko/kafka/downloads",
      "events_url": "https://api.github.com/repos/piotrrzysko/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/piotrrzysko/kafka/forks",
      "full_name": "piotrrzysko/kafka",
      "git_commits_url": "https://api.github.com/repos/piotrrzysko/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/piotrrzysko/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/piotrrzysko/kafka/git/tags{/sha}",
      "git_url": "git://github.com/piotrrzysko/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/piotrrzysko/kafka/hooks",
      "html_url": "https://github.com/piotrrzysko/kafka",
      "id": 246422075,
      "issue_comment_url": "https://api.github.com/repos/piotrrzysko/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/piotrrzysko/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/piotrrzysko/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/piotrrzysko/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/piotrrzysko/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/piotrrzysko/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/piotrrzysko/kafka/merges",
      "milestones_url": "https://api.github.com/repos/piotrrzysko/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyNDY0MjIwNzU=",
      "notifications_url": "https://api.github.com/repos/piotrrzysko/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/6481553?v=4",
        "events_url": "https://api.github.com/users/piotrrzysko/events{/privacy}",
        "followers_url": "https://api.github.com/users/piotrrzysko/followers",
        "following_url": "https://api.github.com/users/piotrrzysko/following{/other_user}",
        "gists_url": "https://api.github.com/users/piotrrzysko/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/piotrrzysko",
        "id": 6481553,
        "login": "piotrrzysko",
        "node_id": "MDQ6VXNlcjY0ODE1NTM=",
        "organizations_url": "https://api.github.com/users/piotrrzysko/orgs",
        "received_events_url": "https://api.github.com/users/piotrrzysko/received_events",
        "repos_url": "https://api.github.com/users/piotrrzysko/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/piotrrzysko/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/piotrrzysko/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/piotrrzysko"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/piotrrzysko/kafka/pulls{/number}",
      "pushed_at": "2020-10-05T07:24:28Z",
      "releases_url": "https://api.github.com/repos/piotrrzysko/kafka/releases{/id}",
      "size": 105693,
      "ssh_url": "git@github.com:piotrrzysko/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/piotrrzysko/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/piotrrzysko/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/piotrrzysko/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/piotrrzysko/kafka/subscription",
      "svn_url": "https://github.com/piotrrzysko/kafka",
      "tags_url": "https://api.github.com/repos/piotrrzysko/kafka/tags",
      "teams_url": "https://api.github.com/repos/piotrrzysko/kafka/teams",
      "trees_url": "https://api.github.com/repos/piotrrzysko/kafka/git/trees{/sha}",
      "updated_at": "2020-10-04T14:46:39Z",
      "url": "https://api.github.com/repos/piotrrzysko/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "8aabf665feb02610d6903c2daa20650aeeb1fbb2",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/6481553?v=4",
      "events_url": "https://api.github.com/users/piotrrzysko/events{/privacy}",
      "followers_url": "https://api.github.com/users/piotrrzysko/followers",
      "following_url": "https://api.github.com/users/piotrrzysko/following{/other_user}",
      "gists_url": "https://api.github.com/users/piotrrzysko/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/piotrrzysko",
      "id": 6481553,
      "login": "piotrrzysko",
      "node_id": "MDQ6VXNlcjY0ODE1NTM=",
      "organizations_url": "https://api.github.com/users/piotrrzysko/orgs",
      "received_events_url": "https://api.github.com/users/piotrrzysko/received_events",
      "repos_url": "https://api.github.com/users/piotrrzysko/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/piotrrzysko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/piotrrzysko/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/piotrrzysko"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9315",
  "id": 490484341,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9315",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "1dc691ae2064be7da24b138463fb2b2c3c45b2ae",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDkwNDg0MzQx",
  "number": 9315,
  "patch_url": "https://github.com/apache/kafka/pull/9315.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9315/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/8aabf665feb02610d6903c2daa20650aeeb1fbb2",
  "title": "KAFKA-10496: Removed relying on external DNS servers in tests",
  "updated_at": "2020-09-23T17:11:02Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9315",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/6481553?v=4",
    "events_url": "https://api.github.com/users/piotrrzysko/events{/privacy}",
    "followers_url": "https://api.github.com/users/piotrrzysko/followers",
    "following_url": "https://api.github.com/users/piotrrzysko/following{/other_user}",
    "gists_url": "https://api.github.com/users/piotrrzysko/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/piotrrzysko",
    "id": 6481553,
    "login": "piotrrzysko",
    "node_id": "MDQ6VXNlcjY0ODE1NTM=",
    "organizations_url": "https://api.github.com/users/piotrrzysko/orgs",
    "received_events_url": "https://api.github.com/users/piotrrzysko/received_events",
    "repos_url": "https://api.github.com/users/piotrrzysko/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/piotrrzysko/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/piotrrzysko/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/piotrrzysko"
  }
}
json_root is_array: false
json_root is_object: true
number: 9315
url: https://api.github.com/repos/apache/kafka/pulls/9315
title: KAFKA-10496: Removed relying on external DNS servers in tests
body: As ticket suggested I’ve tried to introduce an in-memory DNS server for testing purposes, but unfortunately capability to change default DNS provider has been removed in Java 9: https://bugs.openjdk.java.net/browse/JDK-8134577.  There is a request for restoring it: https://bugs.openjdk.java.net/browse/JDK-8192780, but so far has not been implemented.

Therefore this PR decouples DNS resolution from `InetAddress.getAllByName` implementation in order to mock its behavior in tests. 

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9315/comments
pull_request_number: 9315
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9311/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9311/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9311"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9311"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9311/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9311"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/ae5f065e9cc97c388049f095df3108525614975d"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "a73bf5931aaf1510f0efa86bc7d61ff8aab046c2",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "The producer recovers by internally sending InitProducerId with the current epoch when received TRANSACTION_TIMED_OUT error.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9311/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9311/commits",
  "created_at": "2020-09-19T15:00:26Z",
  "diff_url": "https://github.com/apache/kafka/pull/9311.diff",
  "draft": false,
  "head": {
    "label": "zhaohaidao:feat/timeout-err1",
    "ref": "feat/timeout-err1",
    "repo": {
      "archive_url": "https://api.github.com/repos/zhaohaidao/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/zhaohaidao/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/zhaohaidao/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/zhaohaidao/kafka/branches{/branch}",
      "clone_url": "https://github.com/zhaohaidao/kafka.git",
      "collaborators_url": "https://api.github.com/repos/zhaohaidao/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/zhaohaidao/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/zhaohaidao/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/zhaohaidao/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/zhaohaidao/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/zhaohaidao/kafka/contributors",
      "created_at": "2020-04-24T16:59:53Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/zhaohaidao/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/zhaohaidao/kafka/downloads",
      "events_url": "https://api.github.com/repos/zhaohaidao/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/zhaohaidao/kafka/forks",
      "full_name": "zhaohaidao/kafka",
      "git_commits_url": "https://api.github.com/repos/zhaohaidao/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/zhaohaidao/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/zhaohaidao/kafka/git/tags{/sha}",
      "git_url": "git://github.com/zhaohaidao/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/zhaohaidao/kafka/hooks",
      "html_url": "https://github.com/zhaohaidao/kafka",
      "id": 258572321,
      "issue_comment_url": "https://api.github.com/repos/zhaohaidao/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/zhaohaidao/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/zhaohaidao/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/zhaohaidao/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/zhaohaidao/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/zhaohaidao/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/zhaohaidao/kafka/merges",
      "milestones_url": "https://api.github.com/repos/zhaohaidao/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyNTg1NzIzMjE=",
      "notifications_url": "https://api.github.com/repos/zhaohaidao/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/6216286?v=4",
        "events_url": "https://api.github.com/users/zhaohaidao/events{/privacy}",
        "followers_url": "https://api.github.com/users/zhaohaidao/followers",
        "following_url": "https://api.github.com/users/zhaohaidao/following{/other_user}",
        "gists_url": "https://api.github.com/users/zhaohaidao/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/zhaohaidao",
        "id": 6216286,
        "login": "zhaohaidao",
        "node_id": "MDQ6VXNlcjYyMTYyODY=",
        "organizations_url": "https://api.github.com/users/zhaohaidao/orgs",
        "received_events_url": "https://api.github.com/users/zhaohaidao/received_events",
        "repos_url": "https://api.github.com/users/zhaohaidao/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/zhaohaidao/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zhaohaidao/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/zhaohaidao"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/zhaohaidao/kafka/pulls{/number}",
      "pushed_at": "2020-10-15T17:37:22Z",
      "releases_url": "https://api.github.com/repos/zhaohaidao/kafka/releases{/id}",
      "size": 106375,
      "ssh_url": "git@github.com:zhaohaidao/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/zhaohaidao/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/zhaohaidao/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/zhaohaidao/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/zhaohaidao/kafka/subscription",
      "svn_url": "https://github.com/zhaohaidao/kafka",
      "tags_url": "https://api.github.com/repos/zhaohaidao/kafka/tags",
      "teams_url": "https://api.github.com/repos/zhaohaidao/kafka/teams",
      "trees_url": "https://api.github.com/repos/zhaohaidao/kafka/git/trees{/sha}",
      "updated_at": "2020-05-14T05:48:02Z",
      "url": "https://api.github.com/repos/zhaohaidao/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "ae5f065e9cc97c388049f095df3108525614975d",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/6216286?v=4",
      "events_url": "https://api.github.com/users/zhaohaidao/events{/privacy}",
      "followers_url": "https://api.github.com/users/zhaohaidao/followers",
      "following_url": "https://api.github.com/users/zhaohaidao/following{/other_user}",
      "gists_url": "https://api.github.com/users/zhaohaidao/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/zhaohaidao",
      "id": 6216286,
      "login": "zhaohaidao",
      "node_id": "MDQ6VXNlcjYyMTYyODY=",
      "organizations_url": "https://api.github.com/users/zhaohaidao/orgs",
      "received_events_url": "https://api.github.com/users/zhaohaidao/received_events",
      "repos_url": "https://api.github.com/users/zhaohaidao/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/zhaohaidao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zhaohaidao/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/zhaohaidao"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9311",
  "id": 489737924,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9311",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "94f014ace6c428cce06a3b8998f0e2518e82e7e7",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDg5NzM3OTI0",
  "number": 9311,
  "patch_url": "https://github.com/apache/kafka/pull/9311.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9311/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/ae5f065e9cc97c388049f095df3108525614975d",
  "title": "KAFKA-9910: Implement new transaction timed out error",
  "updated_at": "2020-10-15T17:38:01Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9311",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/6216286?v=4",
    "events_url": "https://api.github.com/users/zhaohaidao/events{/privacy}",
    "followers_url": "https://api.github.com/users/zhaohaidao/followers",
    "following_url": "https://api.github.com/users/zhaohaidao/following{/other_user}",
    "gists_url": "https://api.github.com/users/zhaohaidao/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/zhaohaidao",
    "id": 6216286,
    "login": "zhaohaidao",
    "node_id": "MDQ6VXNlcjYyMTYyODY=",
    "organizations_url": "https://api.github.com/users/zhaohaidao/orgs",
    "received_events_url": "https://api.github.com/users/zhaohaidao/received_events",
    "repos_url": "https://api.github.com/users/zhaohaidao/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/zhaohaidao/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zhaohaidao/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/zhaohaidao"
  }
}
json_root is_array: false
json_root is_object: true
number: 9311
url: https://api.github.com/repos/apache/kafka/pulls/9311
title: KAFKA-9910: Implement new transaction timed out error
body: The producer recovers by internally sending InitProducerId with the current epoch when received TRANSACTION_TIMED_OUT error.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9311/comments
id: 491655692
url: https://api.github.com/repos/apache/kafka/pulls/comments/491655692
body: Do we need all other constructors?
diff_hunk: @@ -0,0 +1,43 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.common.errors;
+
+/**
+ * This exception indicates that the last ongoing transaction timed out on the coordinator.
+ * When encountering this exception, the producer should retry initialization with current epoch.
+ */
+public class TransactionTimeoutException extends ApiException {
+
+    private static final long serialVersionUID = 1L;
+
+    public TransactionTimeoutException() {
+        super();
+    }
+
+    public TransactionTimeoutException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+    public TransactionTimeoutException(String message) {
path: clients/src/main/java/org/apache/kafka/common/errors/TransactionTimeoutException.java
html: https://github.com/apache/kafka/pull/9311#discussion_r491655692
id: 491655717
url: https://api.github.com/repos/apache/kafka/pulls/comments/491655717
body: `TransactionTimedOut`
diff_hunk: @@ -0,0 +1,43 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.common.errors;
+
+/**
+ * This exception indicates that the last ongoing transaction timed out on the coordinator.
+ * When encountering this exception, the producer should retry initialization with current epoch.
+ */
+public class TransactionTimeoutException extends ApiException {
path: clients/src/main/java/org/apache/kafka/common/errors/TransactionTimeoutException.java
html: https://github.com/apache/kafka/pull/9311#discussion_r491655717
id: 491655814
url: https://api.github.com/repos/apache/kafka/pulls/comments/491655814
body: nit: remove empty line
diff_hunk: @@ -1577,6 +1578,59 @@ public void testInvalidProducerEpochConvertToProducerFencedInAddPartitionToTxn()
         verifyProducerFencedForAddPartitionsToTxn(Errors.INVALID_PRODUCER_EPOCH);
     }
 
+    @Test
+    public void testTxnTimeoutForAddPartitionsToTxn() throws InterruptedException {
+        doInitTransactions();
+
+        transactionManager.beginTransaction();
+        transactionManager.failIfNotReadyForSend();
+        Future<RecordMetadata> responseFuture = appendToAccumulator(tp0);
+        transactionManager.maybeAddPartitionToTransaction(tp0);
+
+        assertFalse(responseFuture.isDone());
+        prepareAddPartitionsToTxnResponse(Errors.TRANSACTION_TIMED_OUT, tp0, epoch, producerId);
+
+        verifyTxnTimeout(responseFuture);
+    }
+
+    @Test
+    public void testTxnTimeoutForAddOffsetsToTxn() throws InterruptedException {
+        doInitTransactions();
+
+        transactionManager.beginTransaction();
+        transactionManager.failIfNotReadyForSend();
+        transactionManager.sendOffsetsToTransaction(Collections.emptyMap(), new ConsumerGroupMetadata(consumerGroupId));
+
+        Future<RecordMetadata> responseFuture = appendToAccumulator(tp0);
+
+        assertFalse(responseFuture.isDone());
+        prepareAddOffsetsToTxnResponse(Errors.TRANSACTION_TIMED_OUT, consumerGroupId, producerId, epoch);
+
+        verifyTxnTimeout(responseFuture);
+    }
+
+    @Test
+    public void testTxnTimeoutInEndTxn() throws InterruptedException {
+
path: clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java
html: https://github.com/apache/kafka/pull/9311#discussion_r491655814
id: 491655827
url: https://api.github.com/repos/apache/kafka/pulls/comments/491655827
body: nit: remove empty line


diff_hunk: @@ -1577,6 +1578,59 @@ public void testInvalidProducerEpochConvertToProducerFencedInAddPartitionToTxn()
         verifyProducerFencedForAddPartitionsToTxn(Errors.INVALID_PRODUCER_EPOCH);
     }
 
+    @Test
+    public void testTxnTimeoutForAddPartitionsToTxn() throws InterruptedException {
+        doInitTransactions();
+
+        transactionManager.beginTransaction();
+        transactionManager.failIfNotReadyForSend();
+        Future<RecordMetadata> responseFuture = appendToAccumulator(tp0);
+        transactionManager.maybeAddPartitionToTransaction(tp0);
+
+        assertFalse(responseFuture.isDone());
+        prepareAddPartitionsToTxnResponse(Errors.TRANSACTION_TIMED_OUT, tp0, epoch, producerId);
+
+        verifyTxnTimeout(responseFuture);
+    }
+
+    @Test
+    public void testTxnTimeoutForAddOffsetsToTxn() throws InterruptedException {
+        doInitTransactions();
+
+        transactionManager.beginTransaction();
+        transactionManager.failIfNotReadyForSend();
+        transactionManager.sendOffsetsToTransaction(Collections.emptyMap(), new ConsumerGroupMetadata(consumerGroupId));
+
+        Future<RecordMetadata> responseFuture = appendToAccumulator(tp0);
+
+        assertFalse(responseFuture.isDone());
+        prepareAddOffsetsToTxnResponse(Errors.TRANSACTION_TIMED_OUT, consumerGroupId, producerId, epoch);
+
+        verifyTxnTimeout(responseFuture);
+    }
+
+    @Test
+    public void testTxnTimeoutInEndTxn() throws InterruptedException {
+
+        doInitTransactions();
+
+        transactionManager.beginTransaction();
+        transactionManager.failIfNotReadyForSend();
+        transactionManager.maybeAddPartitionToTransaction(tp0);
+        TransactionalRequestResult commitResult = transactionManager.beginCommit();
+
+        Future<RecordMetadata> responseFuture = appendToAccumulator(tp0);
+
+        assertFalse(responseFuture.isDone());
+        prepareAddPartitionsToTxnResponse(Errors.NONE, tp0, epoch, producerId);
+        prepareProduceResponse(Errors.NONE, producerId, epoch);
+        prepareEndTxnResponse(Errors.TRANSACTION_TIMED_OUT, TransactionResult.COMMIT, producerId, epoch);
+
+        runUntil(commitResult::isCompleted);
+        runUntil(responseFuture::isDone);
+
path: clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java
html: https://github.com/apache/kafka/pull/9311#discussion_r491655827
id: 492416910
url: https://api.github.com/repos/apache/kafka/pulls/comments/492416910
body: Does this relate to the optimization https://issues.apache.org/jira/browse/KAFKA-10504?
diff_hunk: @@ -1072,7 +1076,11 @@ private void transitionTo(State target, RuntimeException error) {
             if (error == null)
                 throw new IllegalArgumentException("Cannot transition to " + target + " with a null exception");
             lastError = error;
+            abortableError = error;
         } else {
+            if (target != State.ABORTING_TRANSACTION) {
path: clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java
html: https://github.com/apache/kafka/pull/9311#discussion_r492416910
id: 492418335
url: https://api.github.com/repos/apache/kafka/pulls/comments/492418335
body: Could we merge with other cases on L1452?
diff_hunk: @@ -1585,6 +1596,8 @@ public void handleResponse(AbstractResponse response) {
                 // We could still receive INVALID_PRODUCER_EPOCH from old versioned transaction coordinator,
                 // just treat it the same as PRODUCE_FENCED.
                 fatalError(Errors.PRODUCER_FENCED.exception());
+            } else if (error == Errors.TRANSACTION_TIMED_OUT) {
path: clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java
html: https://github.com/apache/kafka/pull/9311#discussion_r492418335
id: 492419463
url: https://api.github.com/repos/apache/kafka/pulls/comments/492419463
body: nit: this func could be put after the callers
diff_hunk: @@ -2959,8 +3035,7 @@ public void testBumpTransactionalEpochOnRecoverableAddPartitionRequestError() {
         assertTrue(transactionManager.isReady());  // make sure we are ready for a transaction now.
     }
 
-    @Test
-    public void testBumpTransactionalEpochOnRecoverableAddOffsetsRequestError() throws InterruptedException {
+    private void verifyBumpTransactionalEpochOnRecoverableAddOffsetsRequestError(Errors errors) throws InterruptedException {
path: clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java
html: https://github.com/apache/kafka/pull/9311#discussion_r492419463
id: 492419931
url: https://api.github.com/repos/apache/kafka/pulls/comments/492419931
body: nit: could remove the braces
diff_hunk: @@ -381,24 +385,35 @@ class TransactionCoordinator(brokerId: Int,
             if (txnMetadata.producerId != producerId)
               Left(Errors.INVALID_PRODUCER_ID_MAPPING)
             // Strict equality is enforced on the client side requests, as they shouldn't bump the producer epoch.
-            else if ((isFromClient && producerEpoch != txnMetadata.producerEpoch) || producerEpoch < txnMetadata.producerEpoch)
+            else if (isFromClient && producerEpoch != txnMetadata.producerEpoch) {
+              if (producerEpoch == txnMetadata.lastProducerEpoch) {
+                Left(Errors.TRANSACTION_TIMED_OUT)
+              } else {
+                Left(Errors.PRODUCER_FENCED)
+              }
+            } else if (producerEpoch < txnMetadata.producerEpoch) {
               Left(Errors.PRODUCER_FENCED)
-            else if (txnMetadata.pendingTransitionInProgress && txnMetadata.pendingState.get != PrepareEpochFence)
+            } else if (txnMetadata.pendingTransitionInProgress
+              && !txnMetadata.pendingState.contains(PrepareEpochFence)
+              && !txnMetadata.pendingState.contains(PrepareEpochBumpThenAbort))
               Left(Errors.CONCURRENT_TRANSACTIONS)
             else txnMetadata.state match {
               case Ongoing =>
                 val nextState = if (txnMarkerResult == TransactionResult.COMMIT)
                   PrepareCommit
-                else
+                else {
path: core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala
html: https://github.com/apache/kafka/pull/9311#discussion_r492419931
id: 492422540
url: https://api.github.com/repos/apache/kafka/pulls/comments/492422540
body: Correct me if wrong, but it seems that the reasoning for adding `PrepareEpochBumpThenAbort` is to avoid setting `lastProducerEpoch` to -1 in the time out state? If so, I was wondering whether we have a simpler way to set the lastProducerEpoch when we make the transition, just as in `prepareTransitionTo`
diff_hunk: @@ -381,24 +385,35 @@ class TransactionCoordinator(brokerId: Int,
             if (txnMetadata.producerId != producerId)
               Left(Errors.INVALID_PRODUCER_ID_MAPPING)
             // Strict equality is enforced on the client side requests, as they shouldn't bump the producer epoch.
-            else if ((isFromClient && producerEpoch != txnMetadata.producerEpoch) || producerEpoch < txnMetadata.producerEpoch)
+            else if (isFromClient && producerEpoch != txnMetadata.producerEpoch) {
+              if (producerEpoch == txnMetadata.lastProducerEpoch) {
+                Left(Errors.TRANSACTION_TIMED_OUT)
+              } else {
+                Left(Errors.PRODUCER_FENCED)
+              }
+            } else if (producerEpoch < txnMetadata.producerEpoch) {
               Left(Errors.PRODUCER_FENCED)
-            else if (txnMetadata.pendingTransitionInProgress && txnMetadata.pendingState.get != PrepareEpochFence)
+            } else if (txnMetadata.pendingTransitionInProgress
+              && !txnMetadata.pendingState.contains(PrepareEpochFence)
+              && !txnMetadata.pendingState.contains(PrepareEpochBumpThenAbort))
               Left(Errors.CONCURRENT_TRANSACTIONS)
             else txnMetadata.state match {
               case Ongoing =>
                 val nextState = if (txnMarkerResult == TransactionResult.COMMIT)
                   PrepareCommit
-                else
+                else {
                   PrepareAbort
-
-                if (nextState == PrepareAbort && txnMetadata.pendingState.contains(PrepareEpochFence)) {
+                }
+                if (nextState == PrepareAbort && (txnMetadata.pendingState.get == PrepareEpochFence
+                  || txnMetadata.pendingState.get == PrepareEpochBumpThenAbort)) {
                   // We should clear the pending state to make way for the transition to PrepareAbort and also bump
                   // the epoch in the transaction metadata we are about to append.
-                  isEpochFence = true
+                  isEpochFence = txnMetadata.pendingState.get == PrepareEpochFence
path: core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala
html: https://github.com/apache/kafka/pull/9311#discussion_r492422540
id: 492423283
url: https://api.github.com/repos/apache/kafka/pulls/comments/492423283
body: We should add a helper to return old error code, such as `maybeReturnOldClientError(Errors error, short requestVersion)` 
diff_hunk: @@ -2045,9 +2045,11 @@ class KafkaApis(val requestChannel: RequestChannel,
     if (authorize(request.context, WRITE, TRANSACTIONAL_ID, transactionalId)) {
       def sendResponseCallback(error: Errors): Unit = {
         def createResponse(requestThrottleMs: Int): AbstractResponse = {
+          val needOld = endTxnRequest.version < 2 && (error == Errors.PRODUCER_FENCED || error == Errors
+            .TRANSACTION_TIMED_OUT)
           val finalError =
-            if (endTxnRequest.version < 2 && error == Errors.PRODUCER_FENCED) {
-              // For older clients, they could not understand the new PRODUCER_FENCED error code,
+            if (needOld) {
path: core/src/main/scala/kafka/server/KafkaApis.scala
html: https://github.com/apache/kafka/pull/9311#discussion_r492423283
id: 493695444
url: https://api.github.com/repos/apache/kafka/pulls/comments/493695444
body: yes
diff_hunk: @@ -1072,7 +1076,11 @@ private void transitionTo(State target, RuntimeException error) {
             if (error == null)
                 throw new IllegalArgumentException("Cannot transition to " + target + " with a null exception");
             lastError = error;
+            abortableError = error;
         } else {
+            if (target != State.ABORTING_TRANSACTION) {
path: clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java
html: https://github.com/apache/kafka/pull/9311#discussion_r493695444
id: 493708455
url: https://api.github.com/repos/apache/kafka/pulls/comments/493708455
body: According to my understanding, the semantics of PrepareEpochFence and  PrepareEpochBumpThenAbort 
 are different. If a new state is not introduced, what should the parameter `newState` fill in when transitionTo is called?
diff_hunk: @@ -381,24 +385,35 @@ class TransactionCoordinator(brokerId: Int,
             if (txnMetadata.producerId != producerId)
               Left(Errors.INVALID_PRODUCER_ID_MAPPING)
             // Strict equality is enforced on the client side requests, as they shouldn't bump the producer epoch.
-            else if ((isFromClient && producerEpoch != txnMetadata.producerEpoch) || producerEpoch < txnMetadata.producerEpoch)
+            else if (isFromClient && producerEpoch != txnMetadata.producerEpoch) {
+              if (producerEpoch == txnMetadata.lastProducerEpoch) {
+                Left(Errors.TRANSACTION_TIMED_OUT)
+              } else {
+                Left(Errors.PRODUCER_FENCED)
+              }
+            } else if (producerEpoch < txnMetadata.producerEpoch) {
               Left(Errors.PRODUCER_FENCED)
-            else if (txnMetadata.pendingTransitionInProgress && txnMetadata.pendingState.get != PrepareEpochFence)
+            } else if (txnMetadata.pendingTransitionInProgress
+              && !txnMetadata.pendingState.contains(PrepareEpochFence)
+              && !txnMetadata.pendingState.contains(PrepareEpochBumpThenAbort))
               Left(Errors.CONCURRENT_TRANSACTIONS)
             else txnMetadata.state match {
               case Ongoing =>
                 val nextState = if (txnMarkerResult == TransactionResult.COMMIT)
                   PrepareCommit
-                else
+                else {
                   PrepareAbort
-
-                if (nextState == PrepareAbort && txnMetadata.pendingState.contains(PrepareEpochFence)) {
+                }
+                if (nextState == PrepareAbort && (txnMetadata.pendingState.get == PrepareEpochFence
+                  || txnMetadata.pendingState.get == PrepareEpochBumpThenAbort)) {
                   // We should clear the pending state to make way for the transition to PrepareAbort and also bump
                   // the epoch in the transaction metadata we are about to append.
-                  isEpochFence = true
+                  isEpochFence = txnMetadata.pendingState.get == PrepareEpochFence
path: core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala
html: https://github.com/apache/kafka/pull/9311#discussion_r493708455
id: 497217290
url: https://api.github.com/repos/apache/kafka/pulls/comments/497217290
body: Thanks for your advice. I found a simpler way to set the lastProducerEpoch and PrepareEpochBumpThenAbort is removed
diff_hunk: @@ -381,24 +385,35 @@ class TransactionCoordinator(brokerId: Int,
             if (txnMetadata.producerId != producerId)
               Left(Errors.INVALID_PRODUCER_ID_MAPPING)
             // Strict equality is enforced on the client side requests, as they shouldn't bump the producer epoch.
-            else if ((isFromClient && producerEpoch != txnMetadata.producerEpoch) || producerEpoch < txnMetadata.producerEpoch)
+            else if (isFromClient && producerEpoch != txnMetadata.producerEpoch) {
+              if (producerEpoch == txnMetadata.lastProducerEpoch) {
+                Left(Errors.TRANSACTION_TIMED_OUT)
+              } else {
+                Left(Errors.PRODUCER_FENCED)
+              }
+            } else if (producerEpoch < txnMetadata.producerEpoch) {
               Left(Errors.PRODUCER_FENCED)
-            else if (txnMetadata.pendingTransitionInProgress && txnMetadata.pendingState.get != PrepareEpochFence)
+            } else if (txnMetadata.pendingTransitionInProgress
+              && !txnMetadata.pendingState.contains(PrepareEpochFence)
+              && !txnMetadata.pendingState.contains(PrepareEpochBumpThenAbort))
               Left(Errors.CONCURRENT_TRANSACTIONS)
             else txnMetadata.state match {
               case Ongoing =>
                 val nextState = if (txnMarkerResult == TransactionResult.COMMIT)
                   PrepareCommit
-                else
+                else {
                   PrepareAbort
-
-                if (nextState == PrepareAbort && txnMetadata.pendingState.contains(PrepareEpochFence)) {
+                }
+                if (nextState == PrepareAbort && (txnMetadata.pendingState.get == PrepareEpochFence
+                  || txnMetadata.pendingState.get == PrepareEpochBumpThenAbort)) {
                   // We should clear the pending state to make way for the transition to PrepareAbort and also bump
                   // the epoch in the transaction metadata we are about to append.
-                  isEpochFence = true
+                  isEpochFence = txnMetadata.pendingState.get == PrepareEpochFence
path: core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala
html: https://github.com/apache/kafka/pull/9311#discussion_r497217290
id: 501155923
url: https://api.github.com/repos/apache/kafka/pulls/comments/501155923
body: nit: remove new line
diff_hunk: @@ -1198,18 +1209,23 @@ boolean canBumpEpoch() {
         return coordinatorSupportsBumpingEpoch;
     }
 
+    private void resetTransactions() {
+        newPartitionsInTransaction.clear();
+        pendingPartitionsInTransaction.clear();
+        partitionsInTransaction.clear();
+
path: clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java
html: https://github.com/apache/kafka/pull/9311#discussion_r501155923
id: 501157677
url: https://api.github.com/repos/apache/kafka/pulls/comments/501157677
body: We should also add this to the `AddOffsetsToTxnResponse`
diff_hunk: @@ -34,6 +34,7 @@
  *   - {@link Errors#INVALID_PRODUCER_ID_MAPPING}
  *   - {@link Errors#INVALID_PRODUCER_EPOCH} // for version <=1
  *   - {@link Errors#PRODUCER_FENCED}
+ *   - {@link Errors#TRANSACTION_TIMED_OUT}
path: clients/src/main/java/org/apache/kafka/common/requests/EndTxnResponse.java
html: https://github.com/apache/kafka/pull/9311#discussion_r501157677
id: 501158001
url: https://api.github.com/repos/apache/kafka/pulls/comments/501158001
body: Can we change the name to `TransactionTimeoutException`. Seems more consistent to use lower-case 'o' (see e.g. `TimeoutException`).
diff_hunk: @@ -0,0 +1,30 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.common.errors;
+
+/**
+ * This exception indicates that the last ongoing transaction timed out on the coordinator.
+ * When encountering this exception, the producer should retry initialization with current epoch.
+ */
+public class TransactionTimeOutException extends ApiException {
path: clients/src/main/java/org/apache/kafka/common/errors/TransactionTimeOutException.java
html: https://github.com/apache/kafka/pull/9311#discussion_r501158001
id: 501165522
url: https://api.github.com/repos/apache/kafka/pulls/comments/501165522
body: We should also update the comment above. And I think we could extract `needEndTxn` as a helper function, if it is true universally to check abortableError for txn ending.
diff_hunk: @@ -369,7 +372,9 @@ private TransactionalRequestResult beginCompletingTransaction(TransactionResult
         // If the error is an INVALID_PRODUCER_ID_MAPPING error, the server will not accept an EndTxnRequest, so skip
         // directly to InitProducerId. Otherwise, we must first abort the transaction, because the producer will be
         // fenced if we directly call InitProducerId.
-        if (!(lastError instanceof InvalidPidMappingException)) {
+        boolean needEndTxn = !(abortableError instanceof InvalidPidMappingException)
path: clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java
html: https://github.com/apache/kafka/pull/9311#discussion_r501165522
id: 501166682
url: https://api.github.com/repos/apache/kafka/pulls/comments/501166682
body: We should also update the comment in corresponding JSON files to mention about the new error code, such as AddPartition/AddOffsets/EndTxn request/response.json
diff_hunk: @@ -40,6 +40,7 @@
  *   - {@link Errors#INVALID_PRODUCER_ID_MAPPING}
  *   - {@link Errors#INVALID_PRODUCER_EPOCH} // for version <=1
  *   - {@link Errors#PRODUCER_FENCED}
+ *   - {@link Errors#TRANSACTION_TIMED_OUT}
path: clients/src/main/java/org/apache/kafka/common/requests/AddPartitionsToTxnResponse.java
html: https://github.com/apache/kafka/pull/9311#discussion_r501166682
id: 501168361
url: https://api.github.com/repos/apache/kafka/pulls/comments/501168361
body: We need to bump the protocol versions for the new error code. Otherwise older clients using version 2 will not know how to handle `TRANSACTION_TIMED_OUT` and will translate it to `UNKNOWN_SERVER_ERROR`, which is a regression.
diff_hunk: @@ -2336,6 +2335,11 @@ class KafkaApis(val requestChannel: RequestChannel,
     }
   }
 
+  def maybeReturnOldClientError(error: Errors, requestVersion: Short): Boolean = {
+    requestVersion < 2 && (error == Errors.PRODUCER_FENCED || error == Errors
path: core/src/main/scala/kafka/server/KafkaApis.scala
html: https://github.com/apache/kafka/pull/9311#discussion_r501168361
id: 501170471
url: https://api.github.com/repos/apache/kafka/pulls/comments/501170471
body: nit: I am not sure this helper is worthwhile because it only works if the versions are aligned consistently. That is true as of now, but likely untrue in the future. Explicit version checks for each api would be safer.
diff_hunk: @@ -2083,8 +2083,8 @@ class KafkaApis(val requestChannel: RequestChannel,
       def sendResponseCallback(error: Errors): Unit = {
         def createResponse(requestThrottleMs: Int): AbstractResponse = {
           val finalError =
-            if (endTxnRequest.version < 2 && error == Errors.PRODUCER_FENCED) {
-              // For older clients, they could not understand the new PRODUCER_FENCED error code,
+            if (maybeReturnOldClientError(error, endTxnRequest.version)) {
path: core/src/main/scala/kafka/server/KafkaApis.scala
html: https://github.com/apache/kafka/pull/9311#discussion_r501170471
id: 501171514
url: https://api.github.com/repos/apache/kafka/pulls/comments/501171514
body: @abbccdda clarified offline that the version has already been bumped for 2.7, so this is not needed.
diff_hunk: @@ -2336,6 +2335,11 @@ class KafkaApis(val requestChannel: RequestChannel,
     }
   }
 
+  def maybeReturnOldClientError(error: Errors, requestVersion: Short): Boolean = {
+    requestVersion < 2 && (error == Errors.PRODUCER_FENCED || error == Errors
path: core/src/main/scala/kafka/server/KafkaApis.scala
html: https://github.com/apache/kafka/pull/9311#discussion_r501171514
id: 501172484
url: https://api.github.com/repos/apache/kafka/pulls/comments/501172484
body: I'm not sure the logic here is actually simplified since we still return `PRODUCER_FENCED` twice. If not, we could still just add the inner if-else to the existing condition ` ((isFromClient && producerEpoch != txnMetadata.producerEpoch) || producerEpoch < txnMetadata.producerEpoch)`
diff_hunk: @@ -381,9 +386,16 @@ class TransactionCoordinator(brokerId: Int,
             if (txnMetadata.producerId != producerId)
               Left(Errors.INVALID_PRODUCER_ID_MAPPING)
             // Strict equality is enforced on the client side requests, as they shouldn't bump the producer epoch.
-            else if ((isFromClient && producerEpoch != txnMetadata.producerEpoch) || producerEpoch < txnMetadata.producerEpoch)
+            else if (isFromClient && producerEpoch != txnMetadata.producerEpoch) {
path: core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala
html: https://github.com/apache/kafka/pull/9311#discussion_r501172484
id: 501176093
url: https://api.github.com/repos/apache/kafka/pulls/comments/501176093
body: nit: can we avoid optional fields? it is better for the caller to be explicit
diff_hunk: @@ -364,7 +368,8 @@ class TransactionCoordinator(brokerId: Int,
                              producerEpoch: Short,
                              txnMarkerResult: TransactionResult,
                              isFromClient: Boolean,
-                             responseCallback: EndTxnCallback): Unit = {
+                             responseCallback: EndTxnCallback,
+                             timeoutAbort: Boolean = false): Unit = {
path: core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala
html: https://github.com/apache/kafka/pull/9311#discussion_r501176093
id: 501196960
url: https://api.github.com/repos/apache/kafka/pulls/comments/501196960
body: The code assumes that if we get a receive an EndTxn request and `lastProducerEpoch` has been set, then it must be because the coordinator timed out the transaction. That is definitely true in the common case, but I'm wondering if it is worth adding some state to `TransactionMetadata` which explicitly indicates that the transaction was timed out. Not super important and could be done in a follow-up.
diff_hunk: @@ -381,9 +386,16 @@ class TransactionCoordinator(brokerId: Int,
             if (txnMetadata.producerId != producerId)
               Left(Errors.INVALID_PRODUCER_ID_MAPPING)
             // Strict equality is enforced on the client side requests, as they shouldn't bump the producer epoch.
-            else if ((isFromClient && producerEpoch != txnMetadata.producerEpoch) || producerEpoch < txnMetadata.producerEpoch)
+            else if (isFromClient && producerEpoch != txnMetadata.producerEpoch) {
+              if (producerEpoch == txnMetadata.lastProducerEpoch) {
path: core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala
html: https://github.com/apache/kafka/pull/9311#discussion_r501196960
id: 501204644
url: https://api.github.com/repos/apache/kafka/pulls/comments/501204644
body: The main thing we need to test here is that the producer remains usable after the timeout.
diff_hunk: @@ -555,11 +555,11 @@ class TransactionsTest extends KafkaServerTestHarness {
     try {
       // Now that the transaction has expired, the second send should fail with a ProducerFencedException.
       producer.send(TestUtils.producerRecordWithExpectedTransactionStatus(topic1, null, "2", "2", willBeCommitted = false)).get()
-      fail("should have raised a ProducerFencedException since the transaction has expired")
+      fail("should have raised a TransactionTimeOutException since the transaction has expired")
     } catch {
-      case _: ProducerFencedException =>
+      case _: TransactionTimeOutException =>
       case e: ExecutionException =>
-      assertTrue(e.getCause.isInstanceOf[ProducerFencedException])
+      assertTrue(e.getCause.isInstanceOf[TransactionTimeOutException])
path: core/src/test/scala/integration/kafka/api/TransactionsTest.scala
html: https://github.com/apache/kafka/pull/9311#discussion_r501204644
id: 501208834
url: https://api.github.com/repos/apache/kafka/pulls/comments/501208834
body: The documentation suggests that after catching `TransactionTimeoutException`, the user can just begin a new transaction. Unless I'm missing something, however, it seems like we still require an explicit call to `abortTransaction`. That is actually what I prefer, but we should clarify the expectation in the documentation. It is super important for the integration test to cover the full expected flow.
diff_hunk: @@ -1589,7 +1607,8 @@ public void handleResponse(AbstractResponse response) {
                 fatalError(error.exception());
             } else if (error == Errors.INVALID_TXN_STATE) {
                 fatalError(error.exception());
-            } else if (error == Errors.UNKNOWN_PRODUCER_ID || error == Errors.INVALID_PRODUCER_ID_MAPPING) {
+            } else if (error == Errors.UNKNOWN_PRODUCER_ID || error == Errors.INVALID_PRODUCER_ID_MAPPING
+                    || error == Errors.TRANSACTION_TIMED_OUT) {
path: clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java
html: https://github.com/apache/kafka/pull/9311#discussion_r501208834
id: 502740233
url: https://api.github.com/repos/apache/kafka/pulls/comments/502740233
body: I am not sure this helper is worthwhile because it is only used in beginCompletingTransaction.
diff_hunk: @@ -369,7 +372,9 @@ private TransactionalRequestResult beginCompletingTransaction(TransactionResult
         // If the error is an INVALID_PRODUCER_ID_MAPPING error, the server will not accept an EndTxnRequest, so skip
         // directly to InitProducerId. Otherwise, we must first abort the transaction, because the producer will be
         // fenced if we directly call InitProducerId.
-        if (!(lastError instanceof InvalidPidMappingException)) {
+        boolean needEndTxn = !(abortableError instanceof InvalidPidMappingException)
path: clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java
html: https://github.com/apache/kafka/pull/9311#discussion_r502740233
id: 502744351
url: https://api.github.com/repos/apache/kafka/pulls/comments/502744351
body: Thanks for your adivce. I have create an issue to track this follow-up: https://issues.apache.org/jira/projects/KAFKA/issues/KAFKA-10596?filter=allissues#
diff_hunk: @@ -381,9 +386,16 @@ class TransactionCoordinator(brokerId: Int,
             if (txnMetadata.producerId != producerId)
               Left(Errors.INVALID_PRODUCER_ID_MAPPING)
             // Strict equality is enforced on the client side requests, as they shouldn't bump the producer epoch.
-            else if ((isFromClient && producerEpoch != txnMetadata.producerEpoch) || producerEpoch < txnMetadata.producerEpoch)
+            else if (isFromClient && producerEpoch != txnMetadata.producerEpoch) {
+              if (producerEpoch == txnMetadata.lastProducerEpoch) {
path: core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala
html: https://github.com/apache/kafka/pull/9311#discussion_r502744351
id: 502751077
url: https://api.github.com/repos/apache/kafka/pulls/comments/502751077
body: Thanks for your advice. I will update doc and the kip later
diff_hunk: @@ -1589,7 +1607,8 @@ public void handleResponse(AbstractResponse response) {
                 fatalError(error.exception());
             } else if (error == Errors.INVALID_TXN_STATE) {
                 fatalError(error.exception());
-            } else if (error == Errors.UNKNOWN_PRODUCER_ID || error == Errors.INVALID_PRODUCER_ID_MAPPING) {
+            } else if (error == Errors.UNKNOWN_PRODUCER_ID || error == Errors.INVALID_PRODUCER_ID_MAPPING
+                    || error == Errors.TRANSACTION_TIMED_OUT) {
path: clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java
html: https://github.com/apache/kafka/pull/9311#discussion_r502751077
id: 502752681
url: https://api.github.com/repos/apache/kafka/pulls/comments/502752681
body: Thanks for your reminding.
I added a case to verify the producer remains usable after the timeout
https://github.com/apache/kafka/pull/9311/files#diff-231b8aacf24c8458f322b4a9f872d4efR584
diff_hunk: @@ -555,11 +555,11 @@ class TransactionsTest extends KafkaServerTestHarness {
     try {
       // Now that the transaction has expired, the second send should fail with a ProducerFencedException.
       producer.send(TestUtils.producerRecordWithExpectedTransactionStatus(topic1, null, "2", "2", willBeCommitted = false)).get()
-      fail("should have raised a ProducerFencedException since the transaction has expired")
+      fail("should have raised a TransactionTimeOutException since the transaction has expired")
     } catch {
-      case _: ProducerFencedException =>
+      case _: TransactionTimeOutException =>
       case e: ExecutionException =>
-      assertTrue(e.getCause.isInstanceOf[ProducerFencedException])
+      assertTrue(e.getCause.isInstanceOf[TransactionTimeOutException])
path: core/src/test/scala/integration/kafka/api/TransactionsTest.scala
html: https://github.com/apache/kafka/pull/9311#discussion_r502752681
pull_request_number: 9311
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9310/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9310/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9310"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9310"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9310/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9310"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/8c370013b904a9a0ed2e85d303af3645c4475642"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "821c1ac6641845aeca96a43bc2b946ecec5cba4f",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "\r\nKafka-8805 introduced an optimization for txn abort process: If the last error is an INVALID_PRODUCER_ID_MAPPING error, skip directly to InitProduceId.\r\n\r\nHowever this optimization will not work as the var lastError is always null. Because the txn state will transit to ABORTING_TRANSACTION from ABORTABLE_ERROR when beginAbort is called, and the lastError will updated to null.\r\n\r\nWe can use abortableError to skip directly to InitProduceId. abortableError is used for recording the last abortable error.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9310/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9310/commits",
  "created_at": "2020-09-19T14:55:29Z",
  "diff_url": "https://github.com/apache/kafka/pull/9310.diff",
  "draft": false,
  "head": {
    "label": "zhaohaidao:fix/abortable-err",
    "ref": "fix/abortable-err",
    "repo": {
      "archive_url": "https://api.github.com/repos/zhaohaidao/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/zhaohaidao/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/zhaohaidao/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/zhaohaidao/kafka/branches{/branch}",
      "clone_url": "https://github.com/zhaohaidao/kafka.git",
      "collaborators_url": "https://api.github.com/repos/zhaohaidao/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/zhaohaidao/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/zhaohaidao/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/zhaohaidao/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/zhaohaidao/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/zhaohaidao/kafka/contributors",
      "created_at": "2020-04-24T16:59:53Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/zhaohaidao/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/zhaohaidao/kafka/downloads",
      "events_url": "https://api.github.com/repos/zhaohaidao/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/zhaohaidao/kafka/forks",
      "full_name": "zhaohaidao/kafka",
      "git_commits_url": "https://api.github.com/repos/zhaohaidao/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/zhaohaidao/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/zhaohaidao/kafka/git/tags{/sha}",
      "git_url": "git://github.com/zhaohaidao/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/zhaohaidao/kafka/hooks",
      "html_url": "https://github.com/zhaohaidao/kafka",
      "id": 258572321,
      "issue_comment_url": "https://api.github.com/repos/zhaohaidao/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/zhaohaidao/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/zhaohaidao/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/zhaohaidao/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/zhaohaidao/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/zhaohaidao/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/zhaohaidao/kafka/merges",
      "milestones_url": "https://api.github.com/repos/zhaohaidao/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyNTg1NzIzMjE=",
      "notifications_url": "https://api.github.com/repos/zhaohaidao/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/6216286?v=4",
        "events_url": "https://api.github.com/users/zhaohaidao/events{/privacy}",
        "followers_url": "https://api.github.com/users/zhaohaidao/followers",
        "following_url": "https://api.github.com/users/zhaohaidao/following{/other_user}",
        "gists_url": "https://api.github.com/users/zhaohaidao/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/zhaohaidao",
        "id": 6216286,
        "login": "zhaohaidao",
        "node_id": "MDQ6VXNlcjYyMTYyODY=",
        "organizations_url": "https://api.github.com/users/zhaohaidao/orgs",
        "received_events_url": "https://api.github.com/users/zhaohaidao/received_events",
        "repos_url": "https://api.github.com/users/zhaohaidao/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/zhaohaidao/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zhaohaidao/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/zhaohaidao"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/zhaohaidao/kafka/pulls{/number}",
      "pushed_at": "2020-10-15T17:37:22Z",
      "releases_url": "https://api.github.com/repos/zhaohaidao/kafka/releases{/id}",
      "size": 106375,
      "ssh_url": "git@github.com:zhaohaidao/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/zhaohaidao/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/zhaohaidao/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/zhaohaidao/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/zhaohaidao/kafka/subscription",
      "svn_url": "https://github.com/zhaohaidao/kafka",
      "tags_url": "https://api.github.com/repos/zhaohaidao/kafka/tags",
      "teams_url": "https://api.github.com/repos/zhaohaidao/kafka/teams",
      "trees_url": "https://api.github.com/repos/zhaohaidao/kafka/git/trees{/sha}",
      "updated_at": "2020-05-14T05:48:02Z",
      "url": "https://api.github.com/repos/zhaohaidao/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "8c370013b904a9a0ed2e85d303af3645c4475642",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/6216286?v=4",
      "events_url": "https://api.github.com/users/zhaohaidao/events{/privacy}",
      "followers_url": "https://api.github.com/users/zhaohaidao/followers",
      "following_url": "https://api.github.com/users/zhaohaidao/following{/other_user}",
      "gists_url": "https://api.github.com/users/zhaohaidao/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/zhaohaidao",
      "id": 6216286,
      "login": "zhaohaidao",
      "node_id": "MDQ6VXNlcjYyMTYyODY=",
      "organizations_url": "https://api.github.com/users/zhaohaidao/orgs",
      "received_events_url": "https://api.github.com/users/zhaohaidao/received_events",
      "repos_url": "https://api.github.com/users/zhaohaidao/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/zhaohaidao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zhaohaidao/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/zhaohaidao"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9310",
  "id": 489737298,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9310",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "abcaaf79fd2294467caa7a3c3b9892ba8768bdf6",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDg5NzM3Mjk4",
  "number": 9310,
  "patch_url": "https://github.com/apache/kafka/pull/9310.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9310/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/8c370013b904a9a0ed2e85d303af3645c4475642",
  "title": "KAFKA-10504: It will not work to skip to InitProducerId as lastError is always null",
  "updated_at": "2020-10-10T03:57:09Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9310",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/6216286?v=4",
    "events_url": "https://api.github.com/users/zhaohaidao/events{/privacy}",
    "followers_url": "https://api.github.com/users/zhaohaidao/followers",
    "following_url": "https://api.github.com/users/zhaohaidao/following{/other_user}",
    "gists_url": "https://api.github.com/users/zhaohaidao/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/zhaohaidao",
    "id": 6216286,
    "login": "zhaohaidao",
    "node_id": "MDQ6VXNlcjYyMTYyODY=",
    "organizations_url": "https://api.github.com/users/zhaohaidao/orgs",
    "received_events_url": "https://api.github.com/users/zhaohaidao/received_events",
    "repos_url": "https://api.github.com/users/zhaohaidao/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/zhaohaidao/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zhaohaidao/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/zhaohaidao"
  }
}
json_root is_array: false
json_root is_object: true
number: 9310
url: https://api.github.com/repos/apache/kafka/pulls/9310
title: KAFKA-10504: It will not work to skip to InitProducerId as lastError is always null
body: 
Kafka-8805 introduced an optimization for txn abort process: If the last error is an INVALID_PRODUCER_ID_MAPPING error, skip directly to InitProduceId.

However this optimization will not work as the var lastError is always null. Because the txn state will transit to ABORTING_TRANSACTION from ABORTABLE_ERROR when beginAbort is called, and the lastError will updated to null.

We can use abortableError to skip directly to InitProduceId. abortableError is used for recording the last abortable error.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9310/comments
pull_request_number: 9310
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9302/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9302/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9302"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9302"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9302/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9302"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/94249e1a9f4cc98a3fbeec16be143b441299ffcb"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "97d1a3248a4184da1e8ef47c1b94986665b941bf",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This patch removes the check for reassigning partitions when determining whether to trigger automatic leader election. This check can cause problems during long-running reassignments because a crashed broker can leave the partition leaderships in an unexpectedly unbalanced state. \r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9302/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9302/commits",
  "created_at": "2020-09-18T05:58:37Z",
  "diff_url": "https://github.com/apache/kafka/pull/9302.diff",
  "draft": false,
  "head": {
    "label": "bob-barrett:KAFKA-10149",
    "ref": "KAFKA-10149",
    "repo": {
      "archive_url": "https://api.github.com/repos/bob-barrett/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/bob-barrett/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/bob-barrett/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/bob-barrett/kafka/branches{/branch}",
      "clone_url": "https://github.com/bob-barrett/kafka.git",
      "collaborators_url": "https://api.github.com/repos/bob-barrett/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/bob-barrett/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/bob-barrett/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/bob-barrett/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/bob-barrett/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/bob-barrett/kafka/contributors",
      "created_at": "2018-10-02T15:28:01Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/bob-barrett/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/bob-barrett/kafka/downloads",
      "events_url": "https://api.github.com/repos/bob-barrett/kafka/events",
      "fork": true,
      "forks": 1,
      "forks_count": 1,
      "forks_url": "https://api.github.com/repos/bob-barrett/kafka/forks",
      "full_name": "bob-barrett/kafka",
      "git_commits_url": "https://api.github.com/repos/bob-barrett/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/bob-barrett/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/bob-barrett/kafka/git/tags{/sha}",
      "git_url": "git://github.com/bob-barrett/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/bob-barrett/kafka/hooks",
      "html_url": "https://github.com/bob-barrett/kafka",
      "id": 151277854,
      "issue_comment_url": "https://api.github.com/repos/bob-barrett/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/bob-barrett/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/bob-barrett/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/bob-barrett/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/bob-barrett/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/bob-barrett/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/bob-barrett/kafka/merges",
      "milestones_url": "https://api.github.com/repos/bob-barrett/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxNTEyNzc4NTQ=",
      "notifications_url": "https://api.github.com/repos/bob-barrett/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/12191224?v=4",
        "events_url": "https://api.github.com/users/bob-barrett/events{/privacy}",
        "followers_url": "https://api.github.com/users/bob-barrett/followers",
        "following_url": "https://api.github.com/users/bob-barrett/following{/other_user}",
        "gists_url": "https://api.github.com/users/bob-barrett/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/bob-barrett",
        "id": 12191224,
        "login": "bob-barrett",
        "node_id": "MDQ6VXNlcjEyMTkxMjI0",
        "organizations_url": "https://api.github.com/users/bob-barrett/orgs",
        "received_events_url": "https://api.github.com/users/bob-barrett/received_events",
        "repos_url": "https://api.github.com/users/bob-barrett/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/bob-barrett/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bob-barrett/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/bob-barrett"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/bob-barrett/kafka/pulls{/number}",
      "pushed_at": "2020-09-18T05:45:46Z",
      "releases_url": "https://api.github.com/repos/bob-barrett/kafka/releases{/id}",
      "size": 101821,
      "ssh_url": "git@github.com:bob-barrett/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/bob-barrett/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/bob-barrett/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/bob-barrett/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/bob-barrett/kafka/subscription",
      "svn_url": "https://github.com/bob-barrett/kafka",
      "tags_url": "https://api.github.com/repos/bob-barrett/kafka/tags",
      "teams_url": "https://api.github.com/repos/bob-barrett/kafka/teams",
      "trees_url": "https://api.github.com/repos/bob-barrett/kafka/git/trees{/sha}",
      "updated_at": "2018-11-09T21:29:20Z",
      "url": "https://api.github.com/repos/bob-barrett/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "94249e1a9f4cc98a3fbeec16be143b441299ffcb",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/12191224?v=4",
      "events_url": "https://api.github.com/users/bob-barrett/events{/privacy}",
      "followers_url": "https://api.github.com/users/bob-barrett/followers",
      "following_url": "https://api.github.com/users/bob-barrett/following{/other_user}",
      "gists_url": "https://api.github.com/users/bob-barrett/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bob-barrett",
      "id": 12191224,
      "login": "bob-barrett",
      "node_id": "MDQ6VXNlcjEyMTkxMjI0",
      "organizations_url": "https://api.github.com/users/bob-barrett/orgs",
      "received_events_url": "https://api.github.com/users/bob-barrett/received_events",
      "repos_url": "https://api.github.com/users/bob-barrett/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bob-barrett/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bob-barrett/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bob-barrett"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9302",
  "id": 489094733,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9302",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "df2ba11c96f14c03075f5ff46f68450edfe3f768",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDg5MDk0NzMz",
  "number": 9302,
  "patch_url": "https://github.com/apache/kafka/pull/9302.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9302/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/94249e1a9f4cc98a3fbeec16be143b441299ffcb",
  "title": "KAFKA-10149: Allow auto preferred leader election when partitions are reassigning",
  "updated_at": "2020-09-25T15:32:34Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9302",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/12191224?v=4",
    "events_url": "https://api.github.com/users/bob-barrett/events{/privacy}",
    "followers_url": "https://api.github.com/users/bob-barrett/followers",
    "following_url": "https://api.github.com/users/bob-barrett/following{/other_user}",
    "gists_url": "https://api.github.com/users/bob-barrett/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/bob-barrett",
    "id": 12191224,
    "login": "bob-barrett",
    "node_id": "MDQ6VXNlcjEyMTkxMjI0",
    "organizations_url": "https://api.github.com/users/bob-barrett/orgs",
    "received_events_url": "https://api.github.com/users/bob-barrett/received_events",
    "repos_url": "https://api.github.com/users/bob-barrett/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/bob-barrett/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bob-barrett/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/bob-barrett"
  }
}
json_root is_array: false
json_root is_object: true
number: 9302
url: https://api.github.com/repos/apache/kafka/pulls/9302
title: KAFKA-10149: Allow auto preferred leader election when partitions are reassigning
body: This patch removes the check for reassigning partitions when determining whether to trigger automatic leader election. This check can cause problems during long-running reassignments because a crashed broker can leave the partition leaderships in an unexpectedly unbalanced state. 

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9302/comments
id: 490794812
url: https://api.github.com/repos/apache/kafka/pulls/comments/490794812
body: @bob-barrett It totally makes sense to not block it the auto preferred leader election if there is any ongoing reassignments in the cluster. However, I wonder if we should continue to disallow it for the partitions being reassigned in order to not mess up with the their ongoing reassignment. I am not sure if this is a real concern or not though. Have you thought about this case?
diff_hunk: @@ -1067,10 +1067,7 @@ class KafkaController(val config: KafkaConfig,
       // check ratio and if greater than desired ratio, trigger a rebalance for the topic partitions
       // that need to be on this broker
       if (imbalanceRatio > (config.leaderImbalancePerBrokerPercentage.toDouble / 100)) {
-        // do this check only if the broker is live and there are no partitions being reassigned currently
-        // and preferred replica election is not in progress
         val candidatePartitions = topicsNotInPreferredReplica.keys.filter(tp =>
-          controllerContext.partitionsBeingReassigned.isEmpty &&
path: core/src/main/scala/kafka/controller/KafkaController.scala
html: https://github.com/apache/kafka/pull/9302#discussion_r490794812
id: 491094781
url: https://api.github.com/repos/apache/kafka/pulls/comments/491094781
body: It's a good question. During a reassignment, the adding replicas are always listed first which means the preferred leader is among the target replicas. My take is that we want to move the leadership onto the new preferred leader as soon as possible since the whole point of the reassignment is to take load off the removing replicas.
diff_hunk: @@ -1067,10 +1067,7 @@ class KafkaController(val config: KafkaConfig,
       // check ratio and if greater than desired ratio, trigger a rebalance for the topic partitions
       // that need to be on this broker
       if (imbalanceRatio > (config.leaderImbalancePerBrokerPercentage.toDouble / 100)) {
-        // do this check only if the broker is live and there are no partitions being reassigned currently
-        // and preferred replica election is not in progress
         val candidatePartitions = topicsNotInPreferredReplica.keys.filter(tp =>
-          controllerContext.partitionsBeingReassigned.isEmpty &&
path: core/src/main/scala/kafka/controller/KafkaController.scala
html: https://github.com/apache/kafka/pull/9302#discussion_r491094781
id: 491099373
url: https://api.github.com/repos/apache/kafka/pulls/comments/491099373
body: Feels a bit nasty to dip into the controller context directly. An alternative way of testing this might be something like this:

1. Start with two partitions
2. Reassign one partition to a new replica with a low throttle
3. Reassign the other partition so that just the preferred leader changes
4. Trigger preferred election and verify that the leader of the second partition has changed

diff_hunk: @@ -444,6 +444,29 @@ class ControllerIntegrationTest extends ZooKeeperTestHarness {
       "failed to get expected partition state upon broker startup")
   }
 
+  @Test
+  def testAutoPreferredReplicaLeaderElectionWithReassigningPartitions(): Unit = {
+    servers = makeServers(2, autoLeaderRebalanceEnable = true)
+    val controllerId = TestUtils.waitUntilControllerElected(zkClient)
+    val otherBrokerId = servers.map(_.config.brokerId).filter(_ != controllerId).head
+    val tp = new TopicPartition("t", 0)
+    val assignment = Map(tp.partition -> Seq(1, 0))
+    TestUtils.createTopic(zkClient, tp.topic, partitionReplicaAssignment = assignment, servers = servers)
+    val reassigningTp = new TopicPartition("reassigning", 0)
+    val reassigningAssignment = Map(reassigningTp.partition -> Seq(0))
+    TestUtils.createTopic(zkClient, reassigningTp.topic, partitionReplicaAssignment = reassigningAssignment, servers = servers)
+    servers(otherBrokerId).shutdown()
+    servers(otherBrokerId).awaitShutdown()
+    waitForPartitionState(tp, firstControllerEpoch, controllerId, LeaderAndIsr.initialLeaderEpoch + 1,
+      "failed to get expected partition state upon broker shutdown")
+
+    // Directly edit the controller context to simulate a reassigning partition
+    servers(controllerId).kafkaController.controllerContext.partitionsBeingReassigned.add(reassigningTp)
path: core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala
html: https://github.com/apache/kafka/pull/9302#discussion_r491099373
id: 495068017
url: https://api.github.com/repos/apache/kafka/pulls/comments/495068017
body: I totally agree. The sooner the better. I was wondering if there could be any conflicts with the reassignment logic. I have looked at it and I haven't seen anything. 👍 
diff_hunk: @@ -1067,10 +1067,7 @@ class KafkaController(val config: KafkaConfig,
       // check ratio and if greater than desired ratio, trigger a rebalance for the topic partitions
       // that need to be on this broker
       if (imbalanceRatio > (config.leaderImbalancePerBrokerPercentage.toDouble / 100)) {
-        // do this check only if the broker is live and there are no partitions being reassigned currently
-        // and preferred replica election is not in progress
         val candidatePartitions = topicsNotInPreferredReplica.keys.filter(tp =>
-          controllerContext.partitionsBeingReassigned.isEmpty &&
path: core/src/main/scala/kafka/controller/KafkaController.scala
html: https://github.com/apache/kafka/pull/9302#discussion_r495068017
pull_request_number: 9302
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9300/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9300/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9300"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9300"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9300/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9300"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/f73ca15d36ddee5d0593c3173a6011ebb50248ac"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "aa5263fba903c85812c0c31443f7d49ee371e9db",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "*More detailed description of your change,\r\nif necessary. The PR title and PR message become\r\nthe squashed commit message, so use a separate\r\ncomment to ping reviewers.*\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9300/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9300/commits",
  "created_at": "2020-09-17T17:44:49Z",
  "diff_url": "https://github.com/apache/kafka/pull/9300.diff",
  "draft": false,
  "head": {
    "label": "rondagostino:KAFKA-10491",
    "ref": "KAFKA-10491",
    "repo": {
      "archive_url": "https://api.github.com/repos/rondagostino/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/rondagostino/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/rondagostino/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/rondagostino/kafka/branches{/branch}",
      "clone_url": "https://github.com/rondagostino/kafka.git",
      "collaborators_url": "https://api.github.com/repos/rondagostino/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/rondagostino/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/rondagostino/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/rondagostino/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/rondagostino/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/rondagostino/kafka/contributors",
      "created_at": "2018-01-17T15:15:29Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/rondagostino/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/rondagostino/kafka/downloads",
      "events_url": "https://api.github.com/repos/rondagostino/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/rondagostino/kafka/forks",
      "full_name": "rondagostino/kafka",
      "git_commits_url": "https://api.github.com/repos/rondagostino/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/rondagostino/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/rondagostino/kafka/git/tags{/sha}",
      "git_url": "git://github.com/rondagostino/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/rondagostino/kafka/hooks",
      "html_url": "https://github.com/rondagostino/kafka",
      "id": 117853091,
      "issue_comment_url": "https://api.github.com/repos/rondagostino/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/rondagostino/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/rondagostino/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/rondagostino/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/rondagostino/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/rondagostino/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/rondagostino/kafka/merges",
      "milestones_url": "https://api.github.com/repos/rondagostino/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxMTc4NTMwOTE=",
      "notifications_url": "https://api.github.com/repos/rondagostino/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/6076159?v=4",
        "events_url": "https://api.github.com/users/rondagostino/events{/privacy}",
        "followers_url": "https://api.github.com/users/rondagostino/followers",
        "following_url": "https://api.github.com/users/rondagostino/following{/other_user}",
        "gists_url": "https://api.github.com/users/rondagostino/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/rondagostino",
        "id": 6076159,
        "login": "rondagostino",
        "node_id": "MDQ6VXNlcjYwNzYxNTk=",
        "organizations_url": "https://api.github.com/users/rondagostino/orgs",
        "received_events_url": "https://api.github.com/users/rondagostino/received_events",
        "repos_url": "https://api.github.com/users/rondagostino/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/rondagostino/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rondagostino/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/rondagostino"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/rondagostino/kafka/pulls{/number}",
      "pushed_at": "2020-10-23T20:43:54Z",
      "releases_url": "https://api.github.com/repos/rondagostino/kafka/releases{/id}",
      "size": 103424,
      "ssh_url": "git@github.com:rondagostino/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/rondagostino/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/rondagostino/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/rondagostino/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/rondagostino/kafka/subscription",
      "svn_url": "https://github.com/rondagostino/kafka",
      "tags_url": "https://api.github.com/repos/rondagostino/kafka/tags",
      "teams_url": "https://api.github.com/repos/rondagostino/kafka/teams",
      "trees_url": "https://api.github.com/repos/rondagostino/kafka/git/trees{/sha}",
      "updated_at": "2020-10-23T20:44:04Z",
      "url": "https://api.github.com/repos/rondagostino/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "f73ca15d36ddee5d0593c3173a6011ebb50248ac",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/6076159?v=4",
      "events_url": "https://api.github.com/users/rondagostino/events{/privacy}",
      "followers_url": "https://api.github.com/users/rondagostino/followers",
      "following_url": "https://api.github.com/users/rondagostino/following{/other_user}",
      "gists_url": "https://api.github.com/users/rondagostino/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rondagostino",
      "id": 6076159,
      "login": "rondagostino",
      "node_id": "MDQ6VXNlcjYwNzYxNTk=",
      "organizations_url": "https://api.github.com/users/rondagostino/orgs",
      "received_events_url": "https://api.github.com/users/rondagostino/received_events",
      "repos_url": "https://api.github.com/users/rondagostino/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rondagostino/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rondagostino/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rondagostino"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9300",
  "id": 488830876,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9300",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "f56d0fa76c40693b790e27777a053889a7974d41",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDg4ODMwODc2",
  "number": 9300,
  "patch_url": "https://github.com/apache/kafka/pull/9300.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9300/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/f73ca15d36ddee5d0593c3173a6011ebb50248ac",
  "title": "KAFKA-10491: Check authorizations first in KafkaApis",
  "updated_at": "2020-09-17T23:10:08Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9300",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/6076159?v=4",
    "events_url": "https://api.github.com/users/rondagostino/events{/privacy}",
    "followers_url": "https://api.github.com/users/rondagostino/followers",
    "following_url": "https://api.github.com/users/rondagostino/following{/other_user}",
    "gists_url": "https://api.github.com/users/rondagostino/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/rondagostino",
    "id": 6076159,
    "login": "rondagostino",
    "node_id": "MDQ6VXNlcjYwNzYxNTk=",
    "organizations_url": "https://api.github.com/users/rondagostino/orgs",
    "received_events_url": "https://api.github.com/users/rondagostino/received_events",
    "repos_url": "https://api.github.com/users/rondagostino/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/rondagostino/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rondagostino/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/rondagostino"
  }
}
json_root is_array: false
json_root is_object: true
number: 9300
url: https://api.github.com/repos/apache/kafka/pulls/9300
title: KAFKA-10491: Check authorizations first in KafkaApis
body: *More detailed description of your change,
if necessary. The PR title and PR message become
the squashed commit message, so use a separate
comment to ping reviewers.*

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9300/comments
id: 490604721
url: https://api.github.com/repos/apache/kafka/pulls/comments/490604721
body: Might not matter since `CreateTopics` requests are infrequent, but the two passes for authorization are a bit vexing. Feels like we are missing a good intermediate type between this handler and `AdminManager`. Maybe we can replace the 3 maps that we pass to `AdminManager.createTopic` with a single map which contains all the state we need for each topic.
diff_hunk: @@ -1732,45 +1732,57 @@ class KafkaApis(val requestChannel: RequestChannel,
       sendResponseMaybeThrottle(controllerMutationQuota, request, createResponse, onComplete = None)
     }
 
+    // be sure to check authorization first, before checking if this is the controller, to avoid leaking
+    // information about the system (i.e. who is the controller) to principals unauthorized for that information
+
     val createTopicsRequest = request.body[CreateTopicsRequest]
     val results = new CreatableTopicResultCollection(createTopicsRequest.data.topics.size)
-    if (!controller.isActive) {
-      createTopicsRequest.data.topics.forEach { topic =>
-        results.add(new CreatableTopicResult().setName(topic.name)
-          .setErrorCode(Errors.NOT_CONTROLLER.code))
-      }
-      sendResponseCallback(results)
-    } else {
-      createTopicsRequest.data.topics.forEach { topic =>
-        results.add(new CreatableTopicResult().setName(topic.name))
-      }
-      val hasClusterAuthorization = authorize(request.context, CREATE, CLUSTER, CLUSTER_NAME,
-        logIfDenied = false)
-      val topics = createTopicsRequest.data.topics.asScala.map(_.name)
-      val authorizedTopics =
-        if (hasClusterAuthorization) topics.toSet
-        else filterByAuthorized(request.context, CREATE, TOPIC, topics)(identity)
-      val authorizedForDescribeConfigs = filterByAuthorized(request.context, DESCRIBE_CONFIGS, TOPIC,
-        topics, logIfDenied = false)(identity).map(name => name -> results.find(name)).toMap
+    createTopicsRequest.data.topics.forEach { topic =>
+      results.add(new CreatableTopicResult().setName(topic.name))
+    }
+    val hasClusterAuthorization = authorize(request.context, CREATE, CLUSTER, CLUSTER_NAME,
+      logIfDenied = false)
+    val topics = createTopicsRequest.data.topics.asScala.map(_.name)
+    val authorizedTopics =
+      if (hasClusterAuthorization) topics.toSet
+      else filterByAuthorized(request.context, CREATE, TOPIC, topics)(identity)
+    val authorizedForDescribeConfigs = filterByAuthorized(request.context, DESCRIBE_CONFIGS, TOPIC,
path: core/src/main/scala/kafka/server/KafkaApis.scala
html: https://github.com/apache/kafka/pull/9300#discussion_r490604721
id: 490610251
url: https://api.github.com/repos/apache/kafka/pulls/comments/490610251
body: Hmm.. If a topic is unauthorized, I think it's more important to return the authorization failure. There's not any reason I can think of why `NOT_CONTROLLER` should take precedence. It would just cause the request to be unnecessarily retried against the new coordinator. Similarly for the other APIs.
diff_hunk: @@ -1732,45 +1732,57 @@ class KafkaApis(val requestChannel: RequestChannel,
       sendResponseMaybeThrottle(controllerMutationQuota, request, createResponse, onComplete = None)
     }
 
+    // be sure to check authorization first, before checking if this is the controller, to avoid leaking
+    // information about the system (i.e. who is the controller) to principals unauthorized for that information
+
     val createTopicsRequest = request.body[CreateTopicsRequest]
     val results = new CreatableTopicResultCollection(createTopicsRequest.data.topics.size)
-    if (!controller.isActive) {
-      createTopicsRequest.data.topics.forEach { topic =>
-        results.add(new CreatableTopicResult().setName(topic.name)
-          .setErrorCode(Errors.NOT_CONTROLLER.code))
-      }
-      sendResponseCallback(results)
-    } else {
-      createTopicsRequest.data.topics.forEach { topic =>
-        results.add(new CreatableTopicResult().setName(topic.name))
-      }
-      val hasClusterAuthorization = authorize(request.context, CREATE, CLUSTER, CLUSTER_NAME,
-        logIfDenied = false)
-      val topics = createTopicsRequest.data.topics.asScala.map(_.name)
-      val authorizedTopics =
-        if (hasClusterAuthorization) topics.toSet
-        else filterByAuthorized(request.context, CREATE, TOPIC, topics)(identity)
-      val authorizedForDescribeConfigs = filterByAuthorized(request.context, DESCRIBE_CONFIGS, TOPIC,
-        topics, logIfDenied = false)(identity).map(name => name -> results.find(name)).toMap
+    createTopicsRequest.data.topics.forEach { topic =>
+      results.add(new CreatableTopicResult().setName(topic.name))
+    }
+    val hasClusterAuthorization = authorize(request.context, CREATE, CLUSTER, CLUSTER_NAME,
+      logIfDenied = false)
+    val topics = createTopicsRequest.data.topics.asScala.map(_.name)
+    val authorizedTopics =
+      if (hasClusterAuthorization) topics.toSet
+      else filterByAuthorized(request.context, CREATE, TOPIC, topics)(identity)
+    val authorizedForDescribeConfigs = filterByAuthorized(request.context, DESCRIBE_CONFIGS, TOPIC,
+      topics, logIfDenied = false)(identity).map(name => name -> results.find(name)).toMap
 
-      results.forEach { topic =>
-        if (results.findAll(topic.name).size > 1) {
-          topic.setErrorCode(Errors.INVALID_REQUEST.code)
-          topic.setErrorMessage("Found multiple entries for this topic.")
-        } else if (!authorizedTopics.contains(topic.name)) {
-          topic.setErrorCode(Errors.TOPIC_AUTHORIZATION_FAILED.code)
-          topic.setErrorMessage("Authorization failed.")
-        }
-        if (!authorizedForDescribeConfigs.contains(topic.name)) {
-          topic.setTopicConfigErrorCode(Errors.TOPIC_AUTHORIZATION_FAILED.code)
-        }
+    results.forEach { topic =>
+      if (results.findAll(topic.name).size > 1) {
+        topic.setErrorCode(Errors.INVALID_REQUEST.code)
+        topic.setErrorMessage("Found multiple entries for this topic.")
+      } else if (!authorizedTopics.contains(topic.name)) {
+        topic.setErrorCode(Errors.TOPIC_AUTHORIZATION_FAILED.code)
+        topic.setErrorMessage("Authorization failed.")
       }
-      val toCreate = mutable.Map[String, CreatableTopic]()
-      createTopicsRequest.data.topics.forEach { topic =>
-        if (results.find(topic.name).errorCode == Errors.NONE.code) {
-          toCreate += topic.name -> topic
-        }
+      if (!authorizedForDescribeConfigs.contains(topic.name)) {
+        topic.setTopicConfigErrorCode(Errors.TOPIC_AUTHORIZATION_FAILED.code)
       }
+    }
+    val toCreate = mutable.Map[String, CreatableTopic]()
+    createTopicsRequest.data.topics.forEach { topic =>
+      if (results.find(topic.name).errorCode == Errors.NONE.code) {
+        toCreate += topic.name -> topic
+      }
+    }
+    if (!controller.isActive) {
+      // don't provide the information that this node is not the controller unless they were authorized
+      // to perform at least one of their requests
+      sendResponseCallback(
+        if (toCreate.isEmpty) {
path: core/src/main/scala/kafka/server/KafkaApis.scala
html: https://github.com/apache/kafka/pull/9300#discussion_r490610251
pull_request_number: 9300
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9293/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9293/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9293"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9293"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9293/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9293"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/e13573f5e490a3ac0f9d8cf54d5296ed016fa297"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "aa5263fba903c85812c0c31443f7d49ee371e9db",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Just a quick POC of how we can optionally bypass the caching layer in IQ. Some queries that are common in IQ but rare in the PAPI perform really poorly with the caching layer involved. We should have a comprehensive solution to this in the future, but for now it seems worth considering just giving a way to bypass it.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9293/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9293/commits",
  "created_at": "2020-09-16T18:16:56Z",
  "diff_url": "https://github.com/apache/kafka/pull/9293.diff",
  "draft": false,
  "head": {
    "label": "vvcephei:poc-iq-skip-cache",
    "ref": "poc-iq-skip-cache",
    "repo": null,
    "sha": "e13573f5e490a3ac0f9d8cf54d5296ed016fa297",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/832787?v=4",
      "events_url": "https://api.github.com/users/vvcephei/events{/privacy}",
      "followers_url": "https://api.github.com/users/vvcephei/followers",
      "following_url": "https://api.github.com/users/vvcephei/following{/other_user}",
      "gists_url": "https://api.github.com/users/vvcephei/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vvcephei",
      "id": 832787,
      "login": "vvcephei",
      "node_id": "MDQ6VXNlcjgzMjc4Nw==",
      "organizations_url": "https://api.github.com/users/vvcephei/orgs",
      "received_events_url": "https://api.github.com/users/vvcephei/received_events",
      "repos_url": "https://api.github.com/users/vvcephei/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vvcephei/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vvcephei/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vvcephei"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9293",
  "id": 488165246,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9293",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "130012278537d827751c1d0fdb1e58b9a8a5301d",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDg4MTY1MjQ2",
  "number": 9293,
  "patch_url": "https://github.com/apache/kafka/pull/9293.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9293/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/e13573f5e490a3ac0f9d8cf54d5296ed016fa297",
  "title": "POC: Allow bypassing the cache layer in IQ",
  "updated_at": "2020-09-16T18:31:13Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9293",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/832787?v=4",
    "events_url": "https://api.github.com/users/vvcephei/events{/privacy}",
    "followers_url": "https://api.github.com/users/vvcephei/followers",
    "following_url": "https://api.github.com/users/vvcephei/following{/other_user}",
    "gists_url": "https://api.github.com/users/vvcephei/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/vvcephei",
    "id": 832787,
    "login": "vvcephei",
    "node_id": "MDQ6VXNlcjgzMjc4Nw==",
    "organizations_url": "https://api.github.com/users/vvcephei/orgs",
    "received_events_url": "https://api.github.com/users/vvcephei/received_events",
    "repos_url": "https://api.github.com/users/vvcephei/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/vvcephei/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vvcephei/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/vvcephei"
  }
}
json_root is_array: false
json_root is_object: true
number: 9293
url: https://api.github.com/repos/apache/kafka/pulls/9293
title: POC: Allow bypassing the cache layer in IQ
body: Just a quick POC of how we can optionally bypass the caching layer in IQ. Some queries that are common in IQ but rare in the PAPI perform really poorly with the caching layer involved. We should have a comprehensive solution to this in the future, but for now it seems worth considering just giving a way to bypass it.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9293/comments
id: 489632127
url: https://api.github.com/repos/apache/kafka/pulls/comments/489632127
body: The self-type reference is pretty mind-bending, but basically what it's for is to let `reWrap` return the same type you call it on. So, `MeteredKeyValueStore#reWrap` returns a `MeteredKeyValueStore` with the same generic types, and `MeteredTimestampedKeyValueStore#reWrap` returns a `MeteredTimestampedKeyValueStore` with the same generic parameters.
diff_hunk: @@ -46,43 +46,90 @@
  * @param <K>
  * @param <V>
  */
-public class MeteredKeyValueStore<K, V>
-    extends WrappedStateStore<KeyValueStore<Bytes, byte[]>, K, V>
+public class MeteredKeyValueStore<K, V, OwnType extends MeteredKeyValueStore<K, V, OwnType>>
path: streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java
html: https://github.com/apache/kafka/pull/9293#discussion_r489632127
id: 489632438
url: https://api.github.com/repos/apache/kafka/pulls/comments/489632438
body: need to be protected so that we can set them in `copyInit`
diff_hunk: @@ -46,43 +46,90 @@
  * @param <K>
  * @param <V>
  */
-public class MeteredKeyValueStore<K, V>
-    extends WrappedStateStore<KeyValueStore<Bytes, byte[]>, K, V>
+public class MeteredKeyValueStore<K, V, OwnType extends MeteredKeyValueStore<K, V, OwnType>>
+    extends MeteredStore<K, V, MeteredKeyValueStore<K, V, OwnType>, KeyValueStore<Bytes, byte[]>>
     implements KeyValueStore<K, V> {
 
     final Serde<K> keySerde;
     final Serde<V> valueSerde;
     StateSerdes<K, V> serdes;
 
-    private final String metricsScope;
+    protected final String metricsScope;
path: streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java
html: https://github.com/apache/kafka/pull/9293#discussion_r489632438
id: 489633808
url: https://api.github.com/repos/apache/kafka/pulls/comments/489633808
body: This is the basic way that the cache bypass is implemented. You descend the stack of wrapped stores until you find the cache, then you pop it off, then you re-wrap the remaining store layers. 
diff_hunk: @@ -46,43 +46,90 @@
  * @param <K>
  * @param <V>
  */
-public class MeteredKeyValueStore<K, V>
-    extends WrappedStateStore<KeyValueStore<Bytes, byte[]>, K, V>
+public class MeteredKeyValueStore<K, V, OwnType extends MeteredKeyValueStore<K, V, OwnType>>
+    extends MeteredStore<K, V, MeteredKeyValueStore<K, V, OwnType>, KeyValueStore<Bytes, byte[]>>
     implements KeyValueStore<K, V> {
 
     final Serde<K> keySerde;
     final Serde<V> valueSerde;
     StateSerdes<K, V> serdes;
 
-    private final String metricsScope;
+    protected final String metricsScope;
     protected final Time time;
     protected Sensor putSensor;
-    private Sensor putIfAbsentSensor;
+    protected Sensor putIfAbsentSensor;
     protected Sensor getSensor;
-    private Sensor deleteSensor;
-    private Sensor putAllSensor;
-    private Sensor allSensor;
-    private Sensor rangeSensor;
-    private Sensor flushSensor;
-    private Sensor e2eLatencySensor;
-    private ProcessorContext context;
-    private StreamsMetricsImpl streamsMetrics;
-    private final String threadId;
-    private String taskId;
+    protected Sensor deleteSensor;
+    protected Sensor putAllSensor;
+    protected Sensor allSensor;
+    protected Sensor rangeSensor;
+    protected Sensor flushSensor;
+    protected Sensor e2eLatencySensor;
+    protected ProcessorContext context;
+    protected StreamsMetricsImpl streamsMetrics;
+    protected final String threadId;
+    protected String taskId;
 
     MeteredKeyValueStore(final KeyValueStore<Bytes, byte[]> inner,
                          final String metricsScope,
                          final Time time,
                          final Serde<K> keySerde,
                          final Serde<V> valueSerde) {
+        this(
+            inner,
+            metricsScope,
+            Thread.currentThread().getName(),
+            time != null ? time : Time.SYSTEM,
+            keySerde,
+            valueSerde
+        );
+    }
+
+    protected MeteredKeyValueStore(final KeyValueStore<Bytes, byte[]> inner,
+                         final String metricsScope,
+                         final String threadId,
+                         final Time time,
+                         final Serde<K> keySerde,
+                         final Serde<V> valueSerde) {
         super(inner);
         this.metricsScope = metricsScope;
-        threadId = Thread.currentThread().getName();
-        this.time = time != null ? time : Time.SYSTEM;
+        this.threadId = threadId;
+        this.time = time;
         this.keySerde = keySerde;
         this.valueSerde = valueSerde;
     }
 
+    public MeteredKeyValueStore<K, V, OwnType> reWrap(final KeyValueStore<Bytes, byte[]> inner) {
path: streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java
html: https://github.com/apache/kafka/pull/9293#discussion_r489633808
id: 489634164
url: https://api.github.com/repos/apache/kafka/pulls/comments/489634164
body: We're basically cloning an already initialized Metered store, so we need to copy over everything that gets set in init.
diff_hunk: @@ -46,43 +46,90 @@
  * @param <K>
  * @param <V>
  */
-public class MeteredKeyValueStore<K, V>
-    extends WrappedStateStore<KeyValueStore<Bytes, byte[]>, K, V>
+public class MeteredKeyValueStore<K, V, OwnType extends MeteredKeyValueStore<K, V, OwnType>>
+    extends MeteredStore<K, V, MeteredKeyValueStore<K, V, OwnType>, KeyValueStore<Bytes, byte[]>>
     implements KeyValueStore<K, V> {
 
     final Serde<K> keySerde;
     final Serde<V> valueSerde;
     StateSerdes<K, V> serdes;
 
-    private final String metricsScope;
+    protected final String metricsScope;
     protected final Time time;
     protected Sensor putSensor;
-    private Sensor putIfAbsentSensor;
+    protected Sensor putIfAbsentSensor;
     protected Sensor getSensor;
-    private Sensor deleteSensor;
-    private Sensor putAllSensor;
-    private Sensor allSensor;
-    private Sensor rangeSensor;
-    private Sensor flushSensor;
-    private Sensor e2eLatencySensor;
-    private ProcessorContext context;
-    private StreamsMetricsImpl streamsMetrics;
-    private final String threadId;
-    private String taskId;
+    protected Sensor deleteSensor;
+    protected Sensor putAllSensor;
+    protected Sensor allSensor;
+    protected Sensor rangeSensor;
+    protected Sensor flushSensor;
+    protected Sensor e2eLatencySensor;
+    protected ProcessorContext context;
+    protected StreamsMetricsImpl streamsMetrics;
+    protected final String threadId;
+    protected String taskId;
 
     MeteredKeyValueStore(final KeyValueStore<Bytes, byte[]> inner,
                          final String metricsScope,
                          final Time time,
                          final Serde<K> keySerde,
                          final Serde<V> valueSerde) {
+        this(
+            inner,
+            metricsScope,
+            Thread.currentThread().getName(),
+            time != null ? time : Time.SYSTEM,
+            keySerde,
+            valueSerde
+        );
+    }
+
+    protected MeteredKeyValueStore(final KeyValueStore<Bytes, byte[]> inner,
+                         final String metricsScope,
+                         final String threadId,
+                         final Time time,
+                         final Serde<K> keySerde,
+                         final Serde<V> valueSerde) {
         super(inner);
         this.metricsScope = metricsScope;
-        threadId = Thread.currentThread().getName();
-        this.time = time != null ? time : Time.SYSTEM;
+        this.threadId = threadId;
+        this.time = time;
         this.keySerde = keySerde;
         this.valueSerde = valueSerde;
     }
 
+    public MeteredKeyValueStore<K, V, OwnType> reWrap(final KeyValueStore<Bytes, byte[]> inner) {
+        final MeteredKeyValueStore<K, V, OwnType> reWrapped = new MeteredKeyValueStore<>(
+            inner,
+            metricsScope,
+            threadId,
+            time,
+            keySerde,
+            valueSerde
+        );
+
+        copyInit(reWrapped);
+
+        return reWrapped;
+    }
+
+    protected void copyInit(final MeteredKeyValueStore<K, V, OwnType> reWrapped) {
path: streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java
html: https://github.com/apache/kafka/pull/9293#discussion_r489634164
id: 489634850
url: https://api.github.com/repos/apache/kafka/pulls/comments/489634850
body: In retrospect, this actually belongs in `WrappedStateStore`. I'd fix it if we choose to go this way.
diff_hunk: @@ -0,0 +1,40 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.streams.state.internals;
+
+import org.apache.kafka.common.serialization.Serde;
+import org.apache.kafka.streams.processor.StateStore;
+import org.apache.kafka.streams.state.KeyValueStore;
+
+/**
+ * A Metered {@link KeyValueStore} wrapper that is used for recording operation metrics, and hence its
+ * inner KeyValueStore implementation do not need to provide its own metrics collecting functionality.
+ * The inner {@link KeyValueStore} of this class is of type &lt;Bytes,byte[]&gt;, hence we use {@link Serde}s
+ * to convert from &lt;K,V&gt; to &lt;Bytes,byte[]&gt;
+ *
+ * @param <K>
+ * @param <V>
+ */
+public abstract class MeteredStore<K, V, OwnType extends MeteredStore<K, V, OwnType, InnerType>, InnerType extends StateStore>
+    extends WrappedStateStore<InnerType, K, V> {
+
+    public MeteredStore(final InnerType wrapped) {
+        super(wrapped);
+    }
+
+    abstract OwnType reWrap(final InnerType inner);
path: streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredStore.java
html: https://github.com/apache/kafka/pull/9293#discussion_r489634850
id: 489635540
url: https://api.github.com/repos/apache/kafka/pulls/comments/489635540
body: Overriding this here lets us preserve the correct type of the store when re-wrapping.
diff_hunk: @@ -50,6 +50,31 @@
         super(inner, metricScope, time, keySerde, valueSerde);
     }
 
+    private MeteredTimestampedKeyValueStore(final KeyValueStore<Bytes, byte[]> inner,
+                                            final String metricsScope,
+                                            final String threadId,
+                                            final Time time,
+                                            final Serde<K> keySerde,
+                                            final Serde<ValueAndTimestamp<V>> valueSerde) {
+        super(inner, metricsScope, threadId, time, keySerde, valueSerde);
+    }
+
+    @Override
+    public MeteredTimestampedKeyValueStore<K, V> reWrap(final KeyValueStore<Bytes, byte[]> inner) {
path: streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredTimestampedKeyValueStore.java
html: https://github.com/apache/kafka/pull/9293#discussion_r489635540
id: 489636757
url: https://api.github.com/repos/apache/kafka/pulls/comments/489636757
body: Here's where we actually bypass the cache. I've just realized that `reWrap` should be in `WrappedStateStore`, in which case, this logic should change a little, but the basic idea is there.
diff_hunk: @@ -84,26 +96,53 @@ public StreamThreadStateStoreProvider(final StreamThread streamThread,
     }
 
     @SuppressWarnings("unchecked")
-    private <T> T validateAndListStores(final StateStore store, final QueryableStoreType<T> queryableStoreType, final String storeName, final TaskId taskId) {
+    private static <T> T validateAndListStores(final StateStore store,
+                                               final QueryableStoreType<T> queryableStoreType,
+                                               final String storeName,
+                                               final TaskId taskId,
+                                               final boolean bypassCache) {
         if (store != null && queryableStoreType.accepts(store)) {
             if (!store.isOpen()) {
                 throw new InvalidStateStoreException(
                         "Cannot get state store " + storeName + " for task " + taskId +
                             " because the store is not open. " +
                             "The state store may have migrated to another instances.");
             }
+            final StateStore maybeUncached = maybeBypassCache(store, bypassCache);
             if (store instanceof TimestampedKeyValueStore && queryableStoreType instanceof QueryableStoreTypes.KeyValueStoreType) {
-                return (T) new ReadOnlyKeyValueStoreFacade<>((TimestampedKeyValueStore<Object, Object>) store);
+                return (T) new ReadOnlyKeyValueStoreFacade<>((TimestampedKeyValueStore<Object, Object>) maybeUncached);
             } else if (store instanceof TimestampedWindowStore && queryableStoreType instanceof QueryableStoreTypes.WindowStoreType) {
-                return (T) new ReadOnlyWindowStoreFacade<>((TimestampedWindowStore<Object, Object>) store);
+                return (T) new ReadOnlyWindowStoreFacade<>((TimestampedWindowStore<Object, Object>) maybeUncached);
             } else {
-                return (T) store;
+                return (T) maybeUncached;
             }
         } else {
             return null;
         }
     }
 
+    @SuppressWarnings({"rawtypes", "unchecked"})
+    private static StateStore maybeBypassCache(final StateStore store, final boolean bypassCache) {
path: streams/src/main/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProvider.java
html: https://github.com/apache/kafka/pull/9293#discussion_r489636757
id: 489637407
url: https://api.github.com/repos/apache/kafka/pulls/comments/489637407
body: Specifically, this is where we drop the caching layer from the returned store hierarchy.
diff_hunk: @@ -84,26 +96,53 @@ public StreamThreadStateStoreProvider(final StreamThread streamThread,
     }
 
     @SuppressWarnings("unchecked")
-    private <T> T validateAndListStores(final StateStore store, final QueryableStoreType<T> queryableStoreType, final String storeName, final TaskId taskId) {
+    private static <T> T validateAndListStores(final StateStore store,
+                                               final QueryableStoreType<T> queryableStoreType,
+                                               final String storeName,
+                                               final TaskId taskId,
+                                               final boolean bypassCache) {
         if (store != null && queryableStoreType.accepts(store)) {
             if (!store.isOpen()) {
                 throw new InvalidStateStoreException(
                         "Cannot get state store " + storeName + " for task " + taskId +
                             " because the store is not open. " +
                             "The state store may have migrated to another instances.");
             }
+            final StateStore maybeUncached = maybeBypassCache(store, bypassCache);
             if (store instanceof TimestampedKeyValueStore && queryableStoreType instanceof QueryableStoreTypes.KeyValueStoreType) {
-                return (T) new ReadOnlyKeyValueStoreFacade<>((TimestampedKeyValueStore<Object, Object>) store);
+                return (T) new ReadOnlyKeyValueStoreFacade<>((TimestampedKeyValueStore<Object, Object>) maybeUncached);
             } else if (store instanceof TimestampedWindowStore && queryableStoreType instanceof QueryableStoreTypes.WindowStoreType) {
-                return (T) new ReadOnlyWindowStoreFacade<>((TimestampedWindowStore<Object, Object>) store);
+                return (T) new ReadOnlyWindowStoreFacade<>((TimestampedWindowStore<Object, Object>) maybeUncached);
             } else {
-                return (T) store;
+                return (T) maybeUncached;
             }
         } else {
             return null;
         }
     }
 
+    @SuppressWarnings({"rawtypes", "unchecked"})
+    private static StateStore maybeBypassCache(final StateStore store, final boolean bypassCache) {
+        if (!bypassCache) {
+            return store;
+        } else if (store instanceof MeteredStore) {
+            final MeteredStore meteredStore = (MeteredStore) store;
+            final StateStore wrapped = meteredStore.wrapped();
+            final StateStore uncached = maybeBypassCache(wrapped, bypassCache);
+            if (uncached == wrapped) {
+                return store;
+            } else {
+                return meteredStore.reWrap(uncached);
+            }
+        } else if (WrappedStateStore.isCachingLayer(store)) {
+            return ((WrappedStateStore) store).wrapped();
path: streams/src/main/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProvider.java
html: https://github.com/apache/kafka/pull/9293#discussion_r489637407
id: 489638990
url: https://api.github.com/repos/apache/kafka/pulls/comments/489638990
body: And this is where, if we did actually strip out the caching layer, we restore the layers "above" it.
diff_hunk: @@ -84,26 +96,53 @@ public StreamThreadStateStoreProvider(final StreamThread streamThread,
     }
 
     @SuppressWarnings("unchecked")
-    private <T> T validateAndListStores(final StateStore store, final QueryableStoreType<T> queryableStoreType, final String storeName, final TaskId taskId) {
+    private static <T> T validateAndListStores(final StateStore store,
+                                               final QueryableStoreType<T> queryableStoreType,
+                                               final String storeName,
+                                               final TaskId taskId,
+                                               final boolean bypassCache) {
         if (store != null && queryableStoreType.accepts(store)) {
             if (!store.isOpen()) {
                 throw new InvalidStateStoreException(
                         "Cannot get state store " + storeName + " for task " + taskId +
                             " because the store is not open. " +
                             "The state store may have migrated to another instances.");
             }
+            final StateStore maybeUncached = maybeBypassCache(store, bypassCache);
             if (store instanceof TimestampedKeyValueStore && queryableStoreType instanceof QueryableStoreTypes.KeyValueStoreType) {
-                return (T) new ReadOnlyKeyValueStoreFacade<>((TimestampedKeyValueStore<Object, Object>) store);
+                return (T) new ReadOnlyKeyValueStoreFacade<>((TimestampedKeyValueStore<Object, Object>) maybeUncached);
             } else if (store instanceof TimestampedWindowStore && queryableStoreType instanceof QueryableStoreTypes.WindowStoreType) {
-                return (T) new ReadOnlyWindowStoreFacade<>((TimestampedWindowStore<Object, Object>) store);
+                return (T) new ReadOnlyWindowStoreFacade<>((TimestampedWindowStore<Object, Object>) maybeUncached);
             } else {
-                return (T) store;
+                return (T) maybeUncached;
             }
         } else {
             return null;
         }
     }
 
+    @SuppressWarnings({"rawtypes", "unchecked"})
+    private static StateStore maybeBypassCache(final StateStore store, final boolean bypassCache) {
+        if (!bypassCache) {
+            return store;
+        } else if (store instanceof MeteredStore) {
+            final MeteredStore meteredStore = (MeteredStore) store;
+            final StateStore wrapped = meteredStore.wrapped();
+            final StateStore uncached = maybeBypassCache(wrapped, bypassCache);
+            if (uncached == wrapped) {
+                return store;
+            } else {
+                return meteredStore.reWrap(uncached);
path: streams/src/main/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProvider.java
html: https://github.com/apache/kafka/pull/9293#discussion_r489638990
id: 489641542
url: https://api.github.com/repos/apache/kafka/pulls/comments/489641542
body: This is the test I used to verify the behavior. Note: this test does not verify that the cache is skipped, just that the query works with the cache skipped. I set breakpoints in the code to additionally verify that the cache is actually skipped.

If we go this route, I'd add unit tests so we can mechanically verify that we're skipping the cache.
diff_hunk: @@ -800,6 +811,76 @@ public void shouldBeAbleToQueryMapValuesAfterFilterState() throws Exception {
         }
     }
 
+    @Test
+    public void shouldQueryKeyValueWithCacheBypassed() throws Exception {
path: streams/src/test/java/org/apache/kafka/streams/integration/QueryableStateIntegrationTest.java
html: https://github.com/apache/kafka/pull/9293#discussion_r489641542
pull_request_number: 9293
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9292/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9292/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9292"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9292"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9292/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9292"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/8d42e4e1cc01efa56f89794311a8cb13cfac4789"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "aa5263fba903c85812c0c31443f7d49ee371e9db",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "*More detailed description of your change,\r\nif necessary. The PR title and PR message become\r\nthe squashed commit message, so use a separate\r\ncomment to ping reviewers.*\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9292/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9292/commits",
  "created_at": "2020-09-16T15:00:44Z",
  "diff_url": "https://github.com/apache/kafka/pull/9292.diff",
  "draft": false,
  "head": {
    "label": "vamossagar12:kafka-6669",
    "ref": "kafka-6669",
    "repo": {
      "archive_url": "https://api.github.com/repos/vamossagar12/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/vamossagar12/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/vamossagar12/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/vamossagar12/kafka/branches{/branch}",
      "clone_url": "https://github.com/vamossagar12/kafka.git",
      "collaborators_url": "https://api.github.com/repos/vamossagar12/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/vamossagar12/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/vamossagar12/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/vamossagar12/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/vamossagar12/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/vamossagar12/kafka/contributors",
      "created_at": "2019-11-16T18:57:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/vamossagar12/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/vamossagar12/kafka/downloads",
      "events_url": "https://api.github.com/repos/vamossagar12/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/vamossagar12/kafka/forks",
      "full_name": "vamossagar12/kafka",
      "git_commits_url": "https://api.github.com/repos/vamossagar12/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/vamossagar12/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/vamossagar12/kafka/git/tags{/sha}",
      "git_url": "git://github.com/vamossagar12/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/vamossagar12/kafka/hooks",
      "html_url": "https://github.com/vamossagar12/kafka",
      "id": 222145451,
      "issue_comment_url": "https://api.github.com/repos/vamossagar12/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/vamossagar12/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/vamossagar12/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/vamossagar12/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/vamossagar12/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/vamossagar12/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/vamossagar12/kafka/merges",
      "milestones_url": "https://api.github.com/repos/vamossagar12/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjIxNDU0NTE=",
      "notifications_url": "https://api.github.com/repos/vamossagar12/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/10499430?v=4",
        "events_url": "https://api.github.com/users/vamossagar12/events{/privacy}",
        "followers_url": "https://api.github.com/users/vamossagar12/followers",
        "following_url": "https://api.github.com/users/vamossagar12/following{/other_user}",
        "gists_url": "https://api.github.com/users/vamossagar12/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vamossagar12",
        "id": 10499430,
        "login": "vamossagar12",
        "node_id": "MDQ6VXNlcjEwNDk5NDMw",
        "organizations_url": "https://api.github.com/users/vamossagar12/orgs",
        "received_events_url": "https://api.github.com/users/vamossagar12/received_events",
        "repos_url": "https://api.github.com/users/vamossagar12/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vamossagar12/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vamossagar12/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vamossagar12"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/vamossagar12/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T05:17:37Z",
      "releases_url": "https://api.github.com/repos/vamossagar12/kafka/releases{/id}",
      "size": 106369,
      "ssh_url": "git@github.com:vamossagar12/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/vamossagar12/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/vamossagar12/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/vamossagar12/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/vamossagar12/kafka/subscription",
      "svn_url": "https://github.com/vamossagar12/kafka",
      "tags_url": "https://api.github.com/repos/vamossagar12/kafka/tags",
      "teams_url": "https://api.github.com/repos/vamossagar12/kafka/teams",
      "trees_url": "https://api.github.com/repos/vamossagar12/kafka/git/trees{/sha}",
      "updated_at": "2019-11-16T18:57:19Z",
      "url": "https://api.github.com/repos/vamossagar12/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "8d42e4e1cc01efa56f89794311a8cb13cfac4789",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/10499430?v=4",
      "events_url": "https://api.github.com/users/vamossagar12/events{/privacy}",
      "followers_url": "https://api.github.com/users/vamossagar12/followers",
      "following_url": "https://api.github.com/users/vamossagar12/following{/other_user}",
      "gists_url": "https://api.github.com/users/vamossagar12/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vamossagar12",
      "id": 10499430,
      "login": "vamossagar12",
      "node_id": "MDQ6VXNlcjEwNDk5NDMw",
      "organizations_url": "https://api.github.com/users/vamossagar12/orgs",
      "received_events_url": "https://api.github.com/users/vamossagar12/received_events",
      "repos_url": "https://api.github.com/users/vamossagar12/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vamossagar12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vamossagar12/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vamossagar12"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9292",
  "id": 488052503,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9292",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "ab9de119ae88d9ad372c1f63f686d334358d0d33",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDg4MDUyNTAz",
  "number": 9292,
  "patch_url": "https://github.com/apache/kafka/pull/9292.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9292/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/8d42e4e1cc01efa56f89794311a8cb13cfac4789",
  "title": "KAFKA-8238: adding number of messages/bytes read",
  "updated_at": "2020-10-27T03:33:28Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9292",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/10499430?v=4",
    "events_url": "https://api.github.com/users/vamossagar12/events{/privacy}",
    "followers_url": "https://api.github.com/users/vamossagar12/followers",
    "following_url": "https://api.github.com/users/vamossagar12/following{/other_user}",
    "gists_url": "https://api.github.com/users/vamossagar12/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/vamossagar12",
    "id": 10499430,
    "login": "vamossagar12",
    "node_id": "MDQ6VXNlcjEwNDk5NDMw",
    "organizations_url": "https://api.github.com/users/vamossagar12/orgs",
    "received_events_url": "https://api.github.com/users/vamossagar12/received_events",
    "repos_url": "https://api.github.com/users/vamossagar12/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/vamossagar12/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vamossagar12/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/vamossagar12"
  }
}
json_root is_array: false
json_root is_object: true
number: 9292
url: https://api.github.com/repos/apache/kafka/pulls/9292
title: KAFKA-8238: adding number of messages/bytes read
body: *More detailed description of your change,
if necessary. The PR title and PR message become
the squashed commit message, so use a separate
comment to ping reviewers.*

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9292/comments
id: 489931752
url: https://api.github.com/repos/apache/kafka/pulls/comments/489931752
body: how about replacing "for topic $topicPartition" by "for partition $topicPartition"
diff_hunk: @@ -670,12 +675,16 @@ class GroupMetadataManager(brokerId: Int,
                   case unknownKey =>
                     throw new IllegalStateException(s"Unexpected message key $unknownKey while loading offsets and group metadata")
                 }
+                messagesRead += 1
+                bytesRead += record.sizeInBytes()
               }
             }
+            batchesRead += 1
             currOffset = batch.nextOffset
           }
         }
 
+        info(s"Number of messages/bytes/batches read: $messagesRead/$bytesRead/$batchesRead for topic $topicPartition")
path: core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
html: https://github.com/apache/kafka/pull/9292#discussion_r489931752
id: 489956487
url: https://api.github.com/repos/apache/kafka/pulls/comments/489956487
body: done..
diff_hunk: @@ -670,12 +675,16 @@ class GroupMetadataManager(brokerId: Int,
                   case unknownKey =>
                     throw new IllegalStateException(s"Unexpected message key $unknownKey while loading offsets and group metadata")
                 }
+                messagesRead += 1
+                bytesRead += record.sizeInBytes()
               }
             }
+            batchesRead += 1
             currOffset = batch.nextOffset
           }
         }
 
+        info(s"Number of messages/bytes/batches read: $messagesRead/$bytesRead/$batchesRead for topic $topicPartition")
path: core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
html: https://github.com/apache/kafka/pull/9292#discussion_r489956487
id: 508812929
url: https://api.github.com/repos/apache/kafka/pulls/comments/508812929
body: Will this be too noisy if there are lots of partitions? Do we want to have the log output be for all partitions instead?
diff_hunk: @@ -670,12 +675,16 @@ class GroupMetadataManager(brokerId: Int,
                   case unknownKey =>
                     throw new IllegalStateException(s"Unexpected message key $unknownKey while loading offsets and group metadata")
                 }
+                messagesRead += 1
+                bytesRead += record.sizeInBytes()
               }
             }
+            batchesRead += 1
             currOffset = batch.nextOffset
           }
         }
 
+        info(s"Number of messages/bytes/batches read: $messagesRead/$bytesRead/$batchesRead for partition $topicPartition")
path: core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
html: https://github.com/apache/kafka/pull/9292#discussion_r508812929
id: 509005854
url: https://api.github.com/repos/apache/kafka/pulls/comments/509005854
body: So, you are saying we add up all items like messages/bytes/batches read across all partitions and print them for the total number of partitions? 
And what you are saying is true, if we have a lot of partitions, then logs can be flooded with just these lines... 
The only thought there is, sometimes it might be useful debugging information.. So, instead of info, if we print it at a debug level?
diff_hunk: @@ -670,12 +675,16 @@ class GroupMetadataManager(brokerId: Int,
                   case unknownKey =>
                     throw new IllegalStateException(s"Unexpected message key $unknownKey while loading offsets and group metadata")
                 }
+                messagesRead += 1
+                bytesRead += record.sizeInBytes()
               }
             }
+            batchesRead += 1
             currOffset = batch.nextOffset
           }
         }
 
+        info(s"Number of messages/bytes/batches read: $messagesRead/$bytesRead/$batchesRead for partition $topicPartition")
path: core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
html: https://github.com/apache/kafka/pull/9292#discussion_r509005854
id: 509077846
url: https://api.github.com/repos/apache/kafka/pulls/comments/509077846
body: We already log a message when the loading for a partition is completed: https://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala#L552. We could perhaps add more information to that one instead of adding a new one.
diff_hunk: @@ -670,12 +675,16 @@ class GroupMetadataManager(brokerId: Int,
                   case unknownKey =>
                     throw new IllegalStateException(s"Unexpected message key $unknownKey while loading offsets and group metadata")
                 }
+                messagesRead += 1
+                bytesRead += record.sizeInBytes()
               }
             }
+            batchesRead += 1
             currOffset = batch.nextOffset
           }
         }
 
+        info(s"Number of messages/bytes/batches read: $messagesRead/$bytesRead/$batchesRead for partition $topicPartition")
path: core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
html: https://github.com/apache/kafka/pull/9292#discussion_r509077846
id: 512396470
url: https://api.github.com/repos/apache/kafka/pulls/comments/512396470
body: ok.. @dajac @ijuma , let me know what you guys think about this PR.. 
diff_hunk: @@ -670,12 +675,16 @@ class GroupMetadataManager(brokerId: Int,
                   case unknownKey =>
                     throw new IllegalStateException(s"Unexpected message key $unknownKey while loading offsets and group metadata")
                 }
+                messagesRead += 1
+                bytesRead += record.sizeInBytes()
               }
             }
+            batchesRead += 1
             currOffset = batch.nextOffset
           }
         }
 
+        info(s"Number of messages/bytes/batches read: $messagesRead/$bytesRead/$batchesRead for partition $topicPartition")
path: core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
html: https://github.com/apache/kafka/pull/9292#discussion_r512396470
pull_request_number: 9292
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9291/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9291/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9291"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9291"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9291/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9291"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/94630595e3e57d0d9762ce293b706051b285bd1e"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "f28713f92218f41d21d5149cdc6034fa374821ca",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "issue: https://issues.apache.org/jira/browse/KAFKA-10264\r\n\r\nThe test case sends two records before killing broker. The failure is caused by that the both records are NOT in a single batch and so the failure of first record can abort second batch. The exception produced by abort is KafkaException rather than TimeoutException.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9291/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9291/commits",
  "created_at": "2020-09-16T06:39:28Z",
  "diff_url": "https://github.com/apache/kafka/pull/9291.diff",
  "draft": false,
  "head": {
    "label": "chia7712:KAFKA-10264",
    "ref": "KAFKA-10264",
    "repo": {
      "archive_url": "https://api.github.com/repos/chia7712/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/chia7712/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/chia7712/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/chia7712/kafka/branches{/branch}",
      "clone_url": "https://github.com/chia7712/kafka.git",
      "collaborators_url": "https://api.github.com/repos/chia7712/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/chia7712/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/chia7712/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/chia7712/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/chia7712/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/chia7712/kafka/contributors",
      "created_at": "2018-03-14T12:43:46Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/chia7712/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/chia7712/kafka/downloads",
      "events_url": "https://api.github.com/repos/chia7712/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/chia7712/kafka/forks",
      "full_name": "chia7712/kafka",
      "git_commits_url": "https://api.github.com/repos/chia7712/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/chia7712/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/chia7712/kafka/git/tags{/sha}",
      "git_url": "git://github.com/chia7712/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/chia7712/kafka/hooks",
      "html_url": "https://github.com/chia7712/kafka",
      "id": 125210946,
      "issue_comment_url": "https://api.github.com/repos/chia7712/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/chia7712/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/chia7712/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/chia7712/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/chia7712/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/chia7712/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/chia7712/kafka/merges",
      "milestones_url": "https://api.github.com/repos/chia7712/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjUyMTA5NDY=",
      "notifications_url": "https://api.github.com/repos/chia7712/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
        "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
        "followers_url": "https://api.github.com/users/chia7712/followers",
        "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
        "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/chia7712",
        "id": 6234750,
        "login": "chia7712",
        "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
        "organizations_url": "https://api.github.com/users/chia7712/orgs",
        "received_events_url": "https://api.github.com/users/chia7712/received_events",
        "repos_url": "https://api.github.com/users/chia7712/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/chia7712"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/chia7712/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T03:45:34Z",
      "releases_url": "https://api.github.com/repos/chia7712/kafka/releases{/id}",
      "size": 102819,
      "ssh_url": "git@github.com:chia7712/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/chia7712/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/chia7712/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/chia7712/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/chia7712/kafka/subscription",
      "svn_url": "https://github.com/chia7712/kafka",
      "tags_url": "https://api.github.com/repos/chia7712/kafka/tags",
      "teams_url": "https://api.github.com/repos/chia7712/kafka/teams",
      "trees_url": "https://api.github.com/repos/chia7712/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:44:24Z",
      "url": "https://api.github.com/repos/chia7712/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "94630595e3e57d0d9762ce293b706051b285bd1e",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
      "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
      "followers_url": "https://api.github.com/users/chia7712/followers",
      "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
      "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chia7712",
      "id": 6234750,
      "login": "chia7712",
      "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
      "organizations_url": "https://api.github.com/users/chia7712/orgs",
      "received_events_url": "https://api.github.com/users/chia7712/received_events",
      "repos_url": "https://api.github.com/users/chia7712/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chia7712"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9291",
  "id": 487767568,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9291",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "2c14e1647fd73407906d599caf438d7025bc0a74",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDg3NzY3NTY4",
  "number": 9291,
  "patch_url": "https://github.com/apache/kafka/pull/9291.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9291/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/94630595e3e57d0d9762ce293b706051b285bd1e",
  "title": "KAFKA-10264 Flaky Test TransactionsTest.testBumpTransactionalEpoch",
  "updated_at": "2020-09-16T06:39:28Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9291",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
    "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
    "followers_url": "https://api.github.com/users/chia7712/followers",
    "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
    "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/chia7712",
    "id": 6234750,
    "login": "chia7712",
    "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
    "organizations_url": "https://api.github.com/users/chia7712/orgs",
    "received_events_url": "https://api.github.com/users/chia7712/received_events",
    "repos_url": "https://api.github.com/users/chia7712/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/chia7712"
  }
}
json_root is_array: false
json_root is_object: true
number: 9291
url: https://api.github.com/repos/apache/kafka/pulls/9291
title: KAFKA-10264 Flaky Test TransactionsTest.testBumpTransactionalEpoch
body: issue: https://issues.apache.org/jira/browse/KAFKA-10264

The test case sends two records before killing broker. The failure is caused by that the both records are NOT in a single batch and so the failure of first record can abort second batch. The exception produced by abort is KafkaException rather than TimeoutException.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9291/comments
pull_request_number: 9291
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9289/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9289/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9289"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9289"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9289/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9289"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/5e9d2cdd10849bed43301d1b52db6cf2470520fc"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "12d98a3d7ad9b023c600bdbb5e3ffb42b07406b1",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "*More detailed description of your change,\r\nif necessary. The PR title and PR message become\r\nthe squashed commit message, so use a separate\r\ncomment to ping reviewers.*\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9289/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9289/commits",
  "created_at": "2020-09-15T12:24:53Z",
  "diff_url": "https://github.com/apache/kafka/pull/9289.diff",
  "draft": false,
  "head": {
    "label": "microsoft:dev/pasriva/JsonAcl",
    "ref": "dev/pasriva/JsonAcl",
    "repo": {
      "archive_url": "https://api.github.com/repos/microsoft/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/microsoft/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/microsoft/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/microsoft/kafka/branches{/branch}",
      "clone_url": "https://github.com/microsoft/kafka.git",
      "collaborators_url": "https://api.github.com/repos/microsoft/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/microsoft/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/microsoft/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/microsoft/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/microsoft/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/microsoft/kafka/contributors",
      "created_at": "2016-03-08T06:45:42Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/microsoft/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/microsoft/kafka/downloads",
      "events_url": "https://api.github.com/repos/microsoft/kafka/events",
      "fork": true,
      "forks": 8,
      "forks_count": 8,
      "forks_url": "https://api.github.com/repos/microsoft/kafka/forks",
      "full_name": "microsoft/kafka",
      "git_commits_url": "https://api.github.com/repos/microsoft/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/microsoft/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/microsoft/kafka/git/tags{/sha}",
      "git_url": "git://github.com/microsoft/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/microsoft/kafka/hooks",
      "html_url": "https://github.com/microsoft/kafka",
      "id": 53389477,
      "issue_comment_url": "https://api.github.com/repos/microsoft/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/microsoft/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/microsoft/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/microsoft/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/microsoft/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/microsoft/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/microsoft/kafka/merges",
      "milestones_url": "https://api.github.com/repos/microsoft/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk1MzM4OTQ3Nw==",
      "notifications_url": "https://api.github.com/repos/microsoft/kafka/notifications{?since,all,participating}",
      "open_issues": 5,
      "open_issues_count": 5,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/6154722?v=4",
        "events_url": "https://api.github.com/users/microsoft/events{/privacy}",
        "followers_url": "https://api.github.com/users/microsoft/followers",
        "following_url": "https://api.github.com/users/microsoft/following{/other_user}",
        "gists_url": "https://api.github.com/users/microsoft/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/microsoft",
        "id": 6154722,
        "login": "microsoft",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjYxNTQ3MjI=",
        "organizations_url": "https://api.github.com/users/microsoft/orgs",
        "received_events_url": "https://api.github.com/users/microsoft/received_events",
        "repos_url": "https://api.github.com/users/microsoft/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/microsoft/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/microsoft/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/microsoft"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/microsoft/kafka/pulls{/number}",
      "pushed_at": "2020-10-21T07:32:00Z",
      "releases_url": "https://api.github.com/repos/microsoft/kafka/releases{/id}",
      "size": 93647,
      "ssh_url": "git@github.com:microsoft/kafka.git",
      "stargazers_count": 8,
      "stargazers_url": "https://api.github.com/repos/microsoft/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/microsoft/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/microsoft/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/microsoft/kafka/subscription",
      "svn_url": "https://github.com/microsoft/kafka",
      "tags_url": "https://api.github.com/repos/microsoft/kafka/tags",
      "teams_url": "https://api.github.com/repos/microsoft/kafka/teams",
      "trees_url": "https://api.github.com/repos/microsoft/kafka/git/trees{/sha}",
      "updated_at": "2020-06-23T16:13:00Z",
      "url": "https://api.github.com/repos/microsoft/kafka",
      "watchers": 8,
      "watchers_count": 8
    },
    "sha": "5e9d2cdd10849bed43301d1b52db6cf2470520fc",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/6154722?v=4",
      "events_url": "https://api.github.com/users/microsoft/events{/privacy}",
      "followers_url": "https://api.github.com/users/microsoft/followers",
      "following_url": "https://api.github.com/users/microsoft/following{/other_user}",
      "gists_url": "https://api.github.com/users/microsoft/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/microsoft",
      "id": 6154722,
      "login": "microsoft",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjYxNTQ3MjI=",
      "organizations_url": "https://api.github.com/users/microsoft/orgs",
      "received_events_url": "https://api.github.com/users/microsoft/received_events",
      "repos_url": "https://api.github.com/users/microsoft/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/microsoft/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/microsoft/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/microsoft"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9289",
  "id": 487259429,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9289",
  "labels": [],
  "locked": false,
  "merge_commit_sha": null,
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDg3MjU5NDI5",
  "number": 9289,
  "patch_url": "https://github.com/apache/kafka/pull/9289.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9289/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/5e9d2cdd10849bed43301d1b52db6cf2470520fc",
  "title": "Dev/pasriva/json acl",
  "updated_at": "2020-10-21T07:32:00Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9289",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/69874241?v=4",
    "events_url": "https://api.github.com/users/pasriva/events{/privacy}",
    "followers_url": "https://api.github.com/users/pasriva/followers",
    "following_url": "https://api.github.com/users/pasriva/following{/other_user}",
    "gists_url": "https://api.github.com/users/pasriva/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/pasriva",
    "id": 69874241,
    "login": "pasriva",
    "node_id": "MDQ6VXNlcjY5ODc0MjQx",
    "organizations_url": "https://api.github.com/users/pasriva/orgs",
    "received_events_url": "https://api.github.com/users/pasriva/received_events",
    "repos_url": "https://api.github.com/users/pasriva/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/pasriva/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pasriva/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/pasriva"
  }
}
json_root is_array: false
json_root is_object: true
number: 9289
url: https://api.github.com/repos/apache/kafka/pulls/9289
title: Dev/pasriva/json acl
body: *More detailed description of your change,
if necessary. The PR title and PR message become
the squashed commit message, so use a separate
comment to ping reviewers.*

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9289/comments
pull_request_number: 9289
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9287/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9287/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9287"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9287"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9287/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9287"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/fb2f94d4e2696e44826155c21c6a5c3600963794"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "12d98a3d7ad9b023c600bdbb5e3ffb42b07406b1",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "The idea is to centralize the common functions of current `MirrorSourceConnector` and `MirrorSourceTask` to prepare for reusing them in new Sink Connector and Sink Task.\r\n\r\nTwo new files are proposed:\r\n- `MirrorConnectorCommon`: contains the reusable functions from `MirrorSourceConnector`\r\n- `MirrorSourceTask`: contains the reusable functions from `MirrorSourceTask`\r\n\r\nno functional changes to current behaviors",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9287/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9287/commits",
  "created_at": "2020-09-15T06:13:44Z",
  "diff_url": "https://github.com/apache/kafka/pull/9287.diff",
  "draft": false,
  "head": {
    "label": "ning2008wisc:mm2_common",
    "ref": "mm2_common",
    "repo": {
      "archive_url": "https://api.github.com/repos/ning2008wisc/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/ning2008wisc/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/ning2008wisc/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/ning2008wisc/kafka/branches{/branch}",
      "clone_url": "https://github.com/ning2008wisc/kafka.git",
      "collaborators_url": "https://api.github.com/repos/ning2008wisc/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/ning2008wisc/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/ning2008wisc/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/ning2008wisc/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/ning2008wisc/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/ning2008wisc/kafka/contributors",
      "created_at": "2020-08-07T16:36:54Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/ning2008wisc/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/ning2008wisc/kafka/downloads",
      "events_url": "https://api.github.com/repos/ning2008wisc/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/ning2008wisc/kafka/forks",
      "full_name": "ning2008wisc/kafka",
      "git_commits_url": "https://api.github.com/repos/ning2008wisc/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/ning2008wisc/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/ning2008wisc/kafka/git/tags{/sha}",
      "git_url": "git://github.com/ning2008wisc/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/ning2008wisc/kafka/hooks",
      "html_url": "https://github.com/ning2008wisc/kafka",
      "id": 285876041,
      "issue_comment_url": "https://api.github.com/repos/ning2008wisc/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/ning2008wisc/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/ning2008wisc/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/ning2008wisc/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/ning2008wisc/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/ning2008wisc/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/ning2008wisc/kafka/merges",
      "milestones_url": "https://api.github.com/repos/ning2008wisc/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyODU4NzYwNDE=",
      "notifications_url": "https://api.github.com/repos/ning2008wisc/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/32080381?v=4",
        "events_url": "https://api.github.com/users/ning2008wisc/events{/privacy}",
        "followers_url": "https://api.github.com/users/ning2008wisc/followers",
        "following_url": "https://api.github.com/users/ning2008wisc/following{/other_user}",
        "gists_url": "https://api.github.com/users/ning2008wisc/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ning2008wisc",
        "id": 32080381,
        "login": "ning2008wisc",
        "node_id": "MDQ6VXNlcjMyMDgwMzgx",
        "organizations_url": "https://api.github.com/users/ning2008wisc/orgs",
        "received_events_url": "https://api.github.com/users/ning2008wisc/received_events",
        "repos_url": "https://api.github.com/users/ning2008wisc/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ning2008wisc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ning2008wisc/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ning2008wisc"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/ning2008wisc/kafka/pulls{/number}",
      "pushed_at": "2020-10-23T06:09:47Z",
      "releases_url": "https://api.github.com/repos/ning2008wisc/kafka/releases{/id}",
      "size": 107417,
      "ssh_url": "git@github.com:ning2008wisc/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/ning2008wisc/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/ning2008wisc/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/ning2008wisc/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/ning2008wisc/kafka/subscription",
      "svn_url": "https://github.com/ning2008wisc/kafka",
      "tags_url": "https://api.github.com/repos/ning2008wisc/kafka/tags",
      "teams_url": "https://api.github.com/repos/ning2008wisc/kafka/teams",
      "trees_url": "https://api.github.com/repos/ning2008wisc/kafka/git/trees{/sha}",
      "updated_at": "2020-10-17T07:34:53Z",
      "url": "https://api.github.com/repos/ning2008wisc/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "fb2f94d4e2696e44826155c21c6a5c3600963794",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/32080381?v=4",
      "events_url": "https://api.github.com/users/ning2008wisc/events{/privacy}",
      "followers_url": "https://api.github.com/users/ning2008wisc/followers",
      "following_url": "https://api.github.com/users/ning2008wisc/following{/other_user}",
      "gists_url": "https://api.github.com/users/ning2008wisc/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ning2008wisc",
      "id": 32080381,
      "login": "ning2008wisc",
      "node_id": "MDQ6VXNlcjMyMDgwMzgx",
      "organizations_url": "https://api.github.com/users/ning2008wisc/orgs",
      "received_events_url": "https://api.github.com/users/ning2008wisc/received_events",
      "repos_url": "https://api.github.com/users/ning2008wisc/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ning2008wisc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ning2008wisc/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ning2008wisc"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9287",
  "id": 487061014,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9287",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "3d6de4ba7ebe88bc543019ba5478b50ae1a79b0f",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDg3MDYxMDE0",
  "number": 9287,
  "patch_url": "https://github.com/apache/kafka/pull/9287.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9287/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/fb2f94d4e2696e44826155c21c6a5c3600963794",
  "title": "extract common functions from SourceConnector and SourceTask",
  "updated_at": "2020-09-15T06:42:27Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9287",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/32080381?v=4",
    "events_url": "https://api.github.com/users/ning2008wisc/events{/privacy}",
    "followers_url": "https://api.github.com/users/ning2008wisc/followers",
    "following_url": "https://api.github.com/users/ning2008wisc/following{/other_user}",
    "gists_url": "https://api.github.com/users/ning2008wisc/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ning2008wisc",
    "id": 32080381,
    "login": "ning2008wisc",
    "node_id": "MDQ6VXNlcjMyMDgwMzgx",
    "organizations_url": "https://api.github.com/users/ning2008wisc/orgs",
    "received_events_url": "https://api.github.com/users/ning2008wisc/received_events",
    "repos_url": "https://api.github.com/users/ning2008wisc/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ning2008wisc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ning2008wisc/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ning2008wisc"
  }
}
json_root is_array: false
json_root is_object: true
number: 9287
url: https://api.github.com/repos/apache/kafka/pulls/9287
title: extract common functions from SourceConnector and SourceTask
body: The idea is to centralize the common functions of current `MirrorSourceConnector` and `MirrorSourceTask` to prepare for reusing them in new Sink Connector and Sink Task.

Two new files are proposed:
- `MirrorConnectorCommon`: contains the reusable functions from `MirrorSourceConnector`
- `MirrorSourceTask`: contains the reusable functions from `MirrorSourceTask`

no functional changes to current behaviors
review_comments: https://api.github.com/repos/apache/kafka/pulls/9287/comments
pull_request_number: 9287
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9276/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9276/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9276"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9276"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9276/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9276"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/062c134a833857e13dcd3099c01e42c7e25dced5"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "46e48d7f22c274768bbbb24cda3cc7765e71ae18",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Add docs on the following JMX metrics\r\n\r\nkafka.log,type=Log,name=Size\r\nkafka.log,type=Log,name=NumLogSegments\r\nkafka.log,type=Log,name=LogStartOffset\r\nkafka.log,type=Log,name=LogEndOffset\r\n\r\nTo test this, I opened the docs in a web browser\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9276/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9276/commits",
  "created_at": "2020-09-09T22:20:40Z",
  "diff_url": "https://github.com/apache/kafka/pull/9276.diff",
  "draft": false,
  "head": {
    "label": "wushujames:add-to-docs-kafka-log-metrics",
    "ref": "add-to-docs-kafka-log-metrics",
    "repo": {
      "archive_url": "https://api.github.com/repos/wushujames/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/wushujames/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/wushujames/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/wushujames/kafka/branches{/branch}",
      "clone_url": "https://github.com/wushujames/kafka.git",
      "collaborators_url": "https://api.github.com/repos/wushujames/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/wushujames/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/wushujames/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/wushujames/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/wushujames/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/wushujames/kafka/contributors",
      "created_at": "2016-01-24T06:22:52Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/wushujames/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/wushujames/kafka/downloads",
      "events_url": "https://api.github.com/repos/wushujames/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/wushujames/kafka/forks",
      "full_name": "wushujames/kafka",
      "git_commits_url": "https://api.github.com/repos/wushujames/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/wushujames/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/wushujames/kafka/git/tags{/sha}",
      "git_url": "git://github.com/wushujames/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/wushujames/kafka/hooks",
      "html_url": "https://github.com/wushujames/kafka",
      "id": 50275204,
      "issue_comment_url": "https://api.github.com/repos/wushujames/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/wushujames/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/wushujames/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/wushujames/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/wushujames/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/wushujames/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/wushujames/kafka/merges",
      "milestones_url": "https://api.github.com/repos/wushujames/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk1MDI3NTIwNA==",
      "notifications_url": "https://api.github.com/repos/wushujames/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/677529?v=4",
        "events_url": "https://api.github.com/users/wushujames/events{/privacy}",
        "followers_url": "https://api.github.com/users/wushujames/followers",
        "following_url": "https://api.github.com/users/wushujames/following{/other_user}",
        "gists_url": "https://api.github.com/users/wushujames/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/wushujames",
        "id": 677529,
        "login": "wushujames",
        "node_id": "MDQ6VXNlcjY3NzUyOQ==",
        "organizations_url": "https://api.github.com/users/wushujames/orgs",
        "received_events_url": "https://api.github.com/users/wushujames/received_events",
        "repos_url": "https://api.github.com/users/wushujames/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/wushujames/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/wushujames/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/wushujames"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/wushujames/kafka/pulls{/number}",
      "pushed_at": "2020-10-09T18:42:35Z",
      "releases_url": "https://api.github.com/repos/wushujames/kafka/releases{/id}",
      "size": 100234,
      "ssh_url": "git@github.com:wushujames/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/wushujames/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/wushujames/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/wushujames/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/wushujames/kafka/subscription",
      "svn_url": "https://github.com/wushujames/kafka",
      "tags_url": "https://api.github.com/repos/wushujames/kafka/tags",
      "teams_url": "https://api.github.com/repos/wushujames/kafka/teams",
      "trees_url": "https://api.github.com/repos/wushujames/kafka/git/trees{/sha}",
      "updated_at": "2020-10-09T18:42:36Z",
      "url": "https://api.github.com/repos/wushujames/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "062c134a833857e13dcd3099c01e42c7e25dced5",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/677529?v=4",
      "events_url": "https://api.github.com/users/wushujames/events{/privacy}",
      "followers_url": "https://api.github.com/users/wushujames/followers",
      "following_url": "https://api.github.com/users/wushujames/following{/other_user}",
      "gists_url": "https://api.github.com/users/wushujames/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/wushujames",
      "id": 677529,
      "login": "wushujames",
      "node_id": "MDQ6VXNlcjY3NzUyOQ==",
      "organizations_url": "https://api.github.com/users/wushujames/orgs",
      "received_events_url": "https://api.github.com/users/wushujames/received_events",
      "repos_url": "https://api.github.com/users/wushujames/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/wushujames/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wushujames/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/wushujames"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9276",
  "id": 483171326,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9276",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "163588902f86e609f20556fd3791096a617eda17",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDgzMTcxMzI2",
  "number": 9276,
  "patch_url": "https://github.com/apache/kafka/pull/9276.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9276/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/062c134a833857e13dcd3099c01e42c7e25dced5",
  "title": "KAFKA-10473: Add docs on partition size-on-disk, and other log-related metrics",
  "updated_at": "2020-10-10T00:18:23Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9276",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/677529?v=4",
    "events_url": "https://api.github.com/users/wushujames/events{/privacy}",
    "followers_url": "https://api.github.com/users/wushujames/followers",
    "following_url": "https://api.github.com/users/wushujames/following{/other_user}",
    "gists_url": "https://api.github.com/users/wushujames/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/wushujames",
    "id": 677529,
    "login": "wushujames",
    "node_id": "MDQ6VXNlcjY3NzUyOQ==",
    "organizations_url": "https://api.github.com/users/wushujames/orgs",
    "received_events_url": "https://api.github.com/users/wushujames/received_events",
    "repos_url": "https://api.github.com/users/wushujames/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/wushujames/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wushujames/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/wushujames"
  }
}
json_root is_array: false
json_root is_object: true
number: 9276
url: https://api.github.com/repos/apache/kafka/pulls/9276
title: KAFKA-10473: Add docs on partition size-on-disk, and other log-related metrics
body: Add docs on the following JMX metrics

kafka.log,type=Log,name=Size
kafka.log,type=Log,name=NumLogSegments
kafka.log,type=Log,name=LogStartOffset
kafka.log,type=Log,name=LogEndOffset

To test this, I opened the docs in a web browser

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9276/comments
id: 485955266
url: https://api.github.com/repos/apache/kafka/pulls/comments/485955266
body: I wasn't sure what information to add for this column of "normal value". 
* For date-based retention topics, it should roughly be sizeOfTopic/segmentSize
* But for compacted topics, that isn't the case
* If this is too high, it will mean more file handles.
* If it is too high, it might inefficient (is this true?)

Anyway, I wasn't sure what to put, so I left it simple.
diff_hunk: @@ -1129,6 +1128,26 @@ <h4><a id="remote_jmx" href="#remote_jmx">Security Considerations for Remote Mon
         <td>kafka.server:type=BrokerTopicMetrics,name=ReassignmentBytesInPerSec</td>
         <td></td>
       </tr>
+      <tr>
+        <td>Size of a partition on disk (in bytes)</td>
+        <td>kafka.log:type=Log,name=Size,topic=([-.\w]+),partition=([0-9]+)</td>
+        <td>The size of a partition on disk, measured in bytes.</td>
+      </tr>
+      <tr>
+        <td>Number of log segments in a partition</td>
+        <td>kafka.log:type=Log,name=NumLogSegments,topic=([-.\w]+),partition=([0-9]+)</td>
+        <td>The number of log segments in a partition.</td>
path: docs/ops.html
html: https://github.com/apache/kafka/pull/9276#discussion_r485955266
id: 485955567
url: https://api.github.com/repos/apache/kafka/pulls/comments/485955567
body: Is this the last committed offset? Or, is it uncommitted offsets? Meaning, if a producer appends a record there but the followers haven't yet acked it, will this value get incremented?

Does that level of detail matter, in the docs?

diff_hunk: @@ -1129,6 +1128,26 @@ <h4><a id="remote_jmx" href="#remote_jmx">Security Considerations for Remote Mon
         <td>kafka.server:type=BrokerTopicMetrics,name=ReassignmentBytesInPerSec</td>
         <td></td>
       </tr>
+      <tr>
+        <td>Size of a partition on disk (in bytes)</td>
+        <td>kafka.log:type=Log,name=Size,topic=([-.\w]+),partition=([0-9]+)</td>
+        <td>The size of a partition on disk, measured in bytes.</td>
+      </tr>
+      <tr>
+        <td>Number of log segments in a partition</td>
+        <td>kafka.log:type=Log,name=NumLogSegments,topic=([-.\w]+),partition=([0-9]+)</td>
+        <td>The number of log segments in a partition.</td>
+      </tr>
+      <tr>
+        <td>First offset in a partition</td>
+        <td>kafka.log:type=Log,name=LogStartOffset,topic=([-.\w]+),partition=([0-9]+)</td>
+        <td>The first offset in a partition.</td>
+      </tr>
+      <tr>
+        <td>Last offset in a partition</td>
+        <td>kafka.log:type=Log,name=LogEndOffset,topic=([-.\w]+),partition=([0-9]+)</td>
+        <td>The last offset in a partition.</td>
path: docs/ops.html
html: https://github.com/apache/kafka/pull/9276#discussion_r485955567
id: 485956062
url: https://api.github.com/repos/apache/kafka/pulls/comments/485956062
body: Tag @hachikuji 
diff_hunk: @@ -1129,6 +1128,26 @@ <h4><a id="remote_jmx" href="#remote_jmx">Security Considerations for Remote Mon
         <td>kafka.server:type=BrokerTopicMetrics,name=ReassignmentBytesInPerSec</td>
         <td></td>
       </tr>
+      <tr>
+        <td>Size of a partition on disk (in bytes)</td>
+        <td>kafka.log:type=Log,name=Size,topic=([-.\w]+),partition=([0-9]+)</td>
+        <td>The size of a partition on disk, measured in bytes.</td>
+      </tr>
+      <tr>
+        <td>Number of log segments in a partition</td>
+        <td>kafka.log:type=Log,name=NumLogSegments,topic=([-.\w]+),partition=([0-9]+)</td>
+        <td>The number of log segments in a partition.</td>
+      </tr>
+      <tr>
+        <td>First offset in a partition</td>
+        <td>kafka.log:type=Log,name=LogStartOffset,topic=([-.\w]+),partition=([0-9]+)</td>
+        <td>The first offset in a partition.</td>
+      </tr>
+      <tr>
+        <td>Last offset in a partition</td>
+        <td>kafka.log:type=Log,name=LogEndOffset,topic=([-.\w]+),partition=([0-9]+)</td>
+        <td>The last offset in a partition.</td>
path: docs/ops.html
html: https://github.com/apache/kafka/pull/9276#discussion_r485956062
pull_request_number: 9276
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9268/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9268/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9268"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9268"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9268/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9268"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/e7250d5760ababafb2e6cf03cf82ac432d458792"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "9fda3d206fb6b4ff58792f6dcebd9275e46427f7",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This patch adds support for the new transactional APIs from KIP-664: https://cwiki.apache.org/confluence/display/KAFKA/KIP-664%3A+Provide+tooling+to+detect+and+abort+hanging+transactions#KIP664:Providetoolingtodetectandaborthangingtransactions-DescribeTransactions. \r\n\r\nNote that this does not include support for the `--find-hanging` action. I will add this separately.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9268/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9268/commits",
  "created_at": "2020-09-08T18:00:47Z",
  "diff_url": "https://github.com/apache/kafka/pull/9268.diff",
  "draft": false,
  "head": {
    "label": "hachikuji:KAFKA-10442",
    "ref": "KAFKA-10442",
    "repo": {
      "archive_url": "https://api.github.com/repos/hachikuji/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/hachikuji/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/hachikuji/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/hachikuji/kafka/branches{/branch}",
      "clone_url": "https://github.com/hachikuji/kafka.git",
      "collaborators_url": "https://api.github.com/repos/hachikuji/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/hachikuji/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/hachikuji/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/hachikuji/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/hachikuji/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/hachikuji/kafka/contributors",
      "created_at": "2015-05-18T20:54:26Z",
      "default_branch": "0.8.2",
      "deployments_url": "https://api.github.com/repos/hachikuji/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/hachikuji/kafka/downloads",
      "events_url": "https://api.github.com/repos/hachikuji/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/hachikuji/kafka/forks",
      "full_name": "hachikuji/kafka",
      "git_commits_url": "https://api.github.com/repos/hachikuji/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/hachikuji/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/hachikuji/kafka/git/tags{/sha}",
      "git_url": "git://github.com/hachikuji/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/hachikuji/kafka/hooks",
      "html_url": "https://github.com/hachikuji/kafka",
      "id": 35842084,
      "issue_comment_url": "https://api.github.com/repos/hachikuji/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/hachikuji/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/hachikuji/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/hachikuji/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/hachikuji/kafka/labels{/name}",
      "language": "Scala",
      "languages_url": "https://api.github.com/repos/hachikuji/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/hachikuji/kafka/merges",
      "milestones_url": "https://api.github.com/repos/hachikuji/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzNTg0MjA4NA==",
      "notifications_url": "https://api.github.com/repos/hachikuji/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/12502538?v=4",
        "events_url": "https://api.github.com/users/hachikuji/events{/privacy}",
        "followers_url": "https://api.github.com/users/hachikuji/followers",
        "following_url": "https://api.github.com/users/hachikuji/following{/other_user}",
        "gists_url": "https://api.github.com/users/hachikuji/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/hachikuji",
        "id": 12502538,
        "login": "hachikuji",
        "node_id": "MDQ6VXNlcjEyNTAyNTM4",
        "organizations_url": "https://api.github.com/users/hachikuji/orgs",
        "received_events_url": "https://api.github.com/users/hachikuji/received_events",
        "repos_url": "https://api.github.com/users/hachikuji/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/hachikuji/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hachikuji/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/hachikuji"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/hachikuji/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T03:23:22Z",
      "releases_url": "https://api.github.com/repos/hachikuji/kafka/releases{/id}",
      "size": 111604,
      "ssh_url": "git@github.com:hachikuji/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/hachikuji/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/hachikuji/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/hachikuji/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/hachikuji/kafka/subscription",
      "svn_url": "https://github.com/hachikuji/kafka",
      "tags_url": "https://api.github.com/repos/hachikuji/kafka/tags",
      "teams_url": "https://api.github.com/repos/hachikuji/kafka/teams",
      "trees_url": "https://api.github.com/repos/hachikuji/kafka/git/trees{/sha}",
      "updated_at": "2018-12-20T09:55:26Z",
      "url": "https://api.github.com/repos/hachikuji/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "e7250d5760ababafb2e6cf03cf82ac432d458792",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/12502538?v=4",
      "events_url": "https://api.github.com/users/hachikuji/events{/privacy}",
      "followers_url": "https://api.github.com/users/hachikuji/followers",
      "following_url": "https://api.github.com/users/hachikuji/following{/other_user}",
      "gists_url": "https://api.github.com/users/hachikuji/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/hachikuji",
      "id": 12502538,
      "login": "hachikuji",
      "node_id": "MDQ6VXNlcjEyNTAyNTM4",
      "organizations_url": "https://api.github.com/users/hachikuji/orgs",
      "received_events_url": "https://api.github.com/users/hachikuji/received_events",
      "repos_url": "https://api.github.com/users/hachikuji/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/hachikuji/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hachikuji/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/hachikuji"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9268",
  "id": 482208814,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9268",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "1cd7ec245a38cb4b67ffac8359e235f51e787ac7",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDgyMjA4ODE0",
  "number": 9268,
  "patch_url": "https://github.com/apache/kafka/pull/9268.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9268/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/e7250d5760ababafb2e6cf03cf82ac432d458792",
  "title": "KAFKA-10442; Add transaction admin APIs for KIP-664",
  "updated_at": "2020-09-21T19:02:12Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9268",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/12502538?v=4",
    "events_url": "https://api.github.com/users/hachikuji/events{/privacy}",
    "followers_url": "https://api.github.com/users/hachikuji/followers",
    "following_url": "https://api.github.com/users/hachikuji/following{/other_user}",
    "gists_url": "https://api.github.com/users/hachikuji/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/hachikuji",
    "id": 12502538,
    "login": "hachikuji",
    "node_id": "MDQ6VXNlcjEyNTAyNTM4",
    "organizations_url": "https://api.github.com/users/hachikuji/orgs",
    "received_events_url": "https://api.github.com/users/hachikuji/received_events",
    "repos_url": "https://api.github.com/users/hachikuji/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/hachikuji/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hachikuji/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/hachikuji"
  }
}
json_root is_array: false
json_root is_object: true
number: 9268
url: https://api.github.com/repos/apache/kafka/pulls/9268
title: KAFKA-10442; Add transaction admin APIs for KIP-664
body: This patch adds support for the new transactional APIs from KIP-664: https://cwiki.apache.org/confluence/display/KAFKA/KIP-664%3A+Provide+tooling+to+detect+and+abort+hanging+transactions#KIP664:Providetoolingtodetectandaborthangingtransactions-DescribeTransactions. 

Note that this does not include support for the `--find-hanging` action. I will add this separately.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9268/comments
pull_request_number: 9268
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9259/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9259/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9259"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9259"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9259/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9259"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/1274e4e827e5d668c7b2ddfc4db22dee3b1e3b87"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "e8524ccd8fca0caac79b844d87e98e9c055f76fb",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "*Requires KIP - do not merge*\r\n\r\n### Goal\r\n\r\nAllow regex for MaskField SMT to replacement\r\n\r\n### Details\r\n\r\nThe existing `org.apache.kafka.connect.transforms.MaskField` SMT allow to masking with literal replacement. This PR introduces addtional config param `regex`, which will be applied to match for replacement.\r\n\r\nexample config :\r\n\r\n```\r\ntransforms=IPMask\r\ntransforms.IPMask.type=org.apache.kafka.connect.transforms.MaskField$Value\r\ntransforms.IPMask.fields=ipAddress\r\ntransforms.IPMask.replacement=$1.$2.xxx.xxx\r\ntransforms.IPMask.regex=(\\\\d*)\\\\.(\\\\d*)\\\\.\\\\d*\\\\.\\\\d*\r\n```\r\n\r\nexample input & output : \r\n\r\n```\r\n# input \r\n{    \"no\" : 1, \"name\" : \"who\", \"ipAddress\" : \"123.45.67.89\" }\r\n\r\n# output\r\n{    \"no\" : 1, \"name\" : \"who\", \"ipAddress\" : \"123.45.***.***\" }\r\n```\r\n\r\n### Restrictions :\r\n\r\n* only string values ar supported\r\n* regex is ignored when `replacement` is not set up.\r\n\r\nif `regex` config is set without `replacement` config, the `regex` config is ignored. and then field value will be replaced with null value.\r\n\r\n```\r\ntransforms=RegexMask\r\ntransforms.RegexMask.type=org.apache.kafka.connect.transforms.MaskField$Value\r\ntransforms.RegexMask.fields=message\r\ntransforms.RegexMask.regex=^.*\r\n```\r\n\r\n### Testing \r\n\r\n* Unit tests are provided.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9259/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9259/commits",
  "created_at": "2020-09-07T16:06:03Z",
  "diff_url": "https://github.com/apache/kafka/pull/9259.diff",
  "draft": false,
  "head": {
    "label": "daehokimm:KAFKA-10466",
    "ref": "KAFKA-10466",
    "repo": {
      "archive_url": "https://api.github.com/repos/daehokimm/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/daehokimm/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/daehokimm/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/daehokimm/kafka/branches{/branch}",
      "clone_url": "https://github.com/daehokimm/kafka.git",
      "collaborators_url": "https://api.github.com/repos/daehokimm/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/daehokimm/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/daehokimm/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/daehokimm/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/daehokimm/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/daehokimm/kafka/contributors",
      "created_at": "2020-09-03T07:13:17Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/daehokimm/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/daehokimm/kafka/downloads",
      "events_url": "https://api.github.com/repos/daehokimm/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/daehokimm/kafka/forks",
      "full_name": "daehokimm/kafka",
      "git_commits_url": "https://api.github.com/repos/daehokimm/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/daehokimm/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/daehokimm/kafka/git/tags{/sha}",
      "git_url": "git://github.com/daehokimm/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/daehokimm/kafka/hooks",
      "html_url": "https://github.com/daehokimm/kafka",
      "id": 292495016,
      "issue_comment_url": "https://api.github.com/repos/daehokimm/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/daehokimm/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/daehokimm/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/daehokimm/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/daehokimm/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/daehokimm/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/daehokimm/kafka/merges",
      "milestones_url": "https://api.github.com/repos/daehokimm/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyOTI0OTUwMTY=",
      "notifications_url": "https://api.github.com/repos/daehokimm/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/22341220?v=4",
        "events_url": "https://api.github.com/users/daehokimm/events{/privacy}",
        "followers_url": "https://api.github.com/users/daehokimm/followers",
        "following_url": "https://api.github.com/users/daehokimm/following{/other_user}",
        "gists_url": "https://api.github.com/users/daehokimm/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/daehokimm",
        "id": 22341220,
        "login": "daehokimm",
        "node_id": "MDQ6VXNlcjIyMzQxMjIw",
        "organizations_url": "https://api.github.com/users/daehokimm/orgs",
        "received_events_url": "https://api.github.com/users/daehokimm/received_events",
        "repos_url": "https://api.github.com/users/daehokimm/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/daehokimm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/daehokimm/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/daehokimm"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/daehokimm/kafka/pulls{/number}",
      "pushed_at": "2020-09-07T16:00:08Z",
      "releases_url": "https://api.github.com/repos/daehokimm/kafka/releases{/id}",
      "size": 105389,
      "ssh_url": "git@github.com:daehokimm/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/daehokimm/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/daehokimm/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/daehokimm/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/daehokimm/kafka/subscription",
      "svn_url": "https://github.com/daehokimm/kafka",
      "tags_url": "https://api.github.com/repos/daehokimm/kafka/tags",
      "teams_url": "https://api.github.com/repos/daehokimm/kafka/teams",
      "trees_url": "https://api.github.com/repos/daehokimm/kafka/git/trees{/sha}",
      "updated_at": "2020-09-07T15:55:57Z",
      "url": "https://api.github.com/repos/daehokimm/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "1274e4e827e5d668c7b2ddfc4db22dee3b1e3b87",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/22341220?v=4",
      "events_url": "https://api.github.com/users/daehokimm/events{/privacy}",
      "followers_url": "https://api.github.com/users/daehokimm/followers",
      "following_url": "https://api.github.com/users/daehokimm/following{/other_user}",
      "gists_url": "https://api.github.com/users/daehokimm/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daehokimm",
      "id": 22341220,
      "login": "daehokimm",
      "node_id": "MDQ6VXNlcjIyMzQxMjIw",
      "organizations_url": "https://api.github.com/users/daehokimm/orgs",
      "received_events_url": "https://api.github.com/users/daehokimm/received_events",
      "repos_url": "https://api.github.com/users/daehokimm/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daehokimm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daehokimm/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daehokimm"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9259",
  "id": 481513751,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9259",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "9e34c148612f6affb20f99512baeb94caa245da6",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDgxNTEzNzUx",
  "number": 9259,
  "patch_url": "https://github.com/apache/kafka/pull/9259.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9259/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/1274e4e827e5d668c7b2ddfc4db22dee3b1e3b87",
  "title": "KAFKA-10466: Allow regex for MaskField SMT to replacement",
  "updated_at": "2020-09-07T16:06:03Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9259",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/22341220?v=4",
    "events_url": "https://api.github.com/users/daehokimm/events{/privacy}",
    "followers_url": "https://api.github.com/users/daehokimm/followers",
    "following_url": "https://api.github.com/users/daehokimm/following{/other_user}",
    "gists_url": "https://api.github.com/users/daehokimm/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/daehokimm",
    "id": 22341220,
    "login": "daehokimm",
    "node_id": "MDQ6VXNlcjIyMzQxMjIw",
    "organizations_url": "https://api.github.com/users/daehokimm/orgs",
    "received_events_url": "https://api.github.com/users/daehokimm/received_events",
    "repos_url": "https://api.github.com/users/daehokimm/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/daehokimm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/daehokimm/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/daehokimm"
  }
}
json_root is_array: false
json_root is_object: true
number: 9259
url: https://api.github.com/repos/apache/kafka/pulls/9259
title: KAFKA-10466: Allow regex for MaskField SMT to replacement
body: *Requires KIP - do not merge*

### Goal

Allow regex for MaskField SMT to replacement

### Details

The existing `org.apache.kafka.connect.transforms.MaskField` SMT allow to masking with literal replacement. This PR introduces addtional config param `regex`, which will be applied to match for replacement.

example config :

```
transforms=IPMask
transforms.IPMask.type=org.apache.kafka.connect.transforms.MaskField$Value
transforms.IPMask.fields=ipAddress
transforms.IPMask.replacement=$1.$2.xxx.xxx
transforms.IPMask.regex=(\\d*)\\.(\\d*)\\.\\d*\\.\\d*
```

example input & output : 

```
# input 
{    "no" : 1, "name" : "who", "ipAddress" : "123.45.67.89" }

# output
{    "no" : 1, "name" : "who", "ipAddress" : "123.45.***.***" }
```

### Restrictions :

* only string values ar supported
* regex is ignored when `replacement` is not set up.

if `regex` config is set without `replacement` config, the `regex` config is ignored. and then field value will be replaced with null value.

```
transforms=RegexMask
transforms.RegexMask.type=org.apache.kafka.connect.transforms.MaskField$Value
transforms.RegexMask.fields=message
transforms.RegexMask.regex=^.*
```

### Testing 

* Unit tests are provided.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9259/comments
pull_request_number: 9259
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9256/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9256/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9256"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9256"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9256/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9256"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/0ec3b4de8aa922e64074752f911b231d9a7b1993"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "d7f3505a212a8e97b39b3baae5f347bd859c87e4",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Find the guide for upgrading here: https://docs.gradle.org/6.6/userguide/upgrading_version_5.html#changes_6.0\r\n\r\nChanges made in this PR:\r\n- Use `java-library` instead of `java` plugin (to have access to the `api` configuration)\r\n- Use `api` instead of `compile`\r\n- Use `testImplementation` instead of `testCompile`\r\n- Use `testRuntimeOnly` instead of `testRuntime`\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9256/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9256/commits",
  "created_at": "2020-09-05T20:56:17Z",
  "diff_url": "https://github.com/apache/kafka/pull/9256.diff",
  "draft": false,
  "head": {
    "label": "jonhkr:fix-gradle-deprecation-warnings",
    "ref": "fix-gradle-deprecation-warnings",
    "repo": {
      "archive_url": "https://api.github.com/repos/jonhkr/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/jonhkr/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/jonhkr/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/jonhkr/kafka/branches{/branch}",
      "clone_url": "https://github.com/jonhkr/kafka.git",
      "collaborators_url": "https://api.github.com/repos/jonhkr/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/jonhkr/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/jonhkr/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/jonhkr/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/jonhkr/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/jonhkr/kafka/contributors",
      "created_at": "2020-09-05T20:39:10Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/jonhkr/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/jonhkr/kafka/downloads",
      "events_url": "https://api.github.com/repos/jonhkr/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/jonhkr/kafka/forks",
      "full_name": "jonhkr/kafka",
      "git_commits_url": "https://api.github.com/repos/jonhkr/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/jonhkr/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/jonhkr/kafka/git/tags{/sha}",
      "git_url": "git://github.com/jonhkr/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/jonhkr/kafka/hooks",
      "html_url": "https://github.com/jonhkr/kafka",
      "id": 293150778,
      "issue_comment_url": "https://api.github.com/repos/jonhkr/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/jonhkr/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/jonhkr/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/jonhkr/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/jonhkr/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/jonhkr/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/jonhkr/kafka/merges",
      "milestones_url": "https://api.github.com/repos/jonhkr/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyOTMxNTA3Nzg=",
      "notifications_url": "https://api.github.com/repos/jonhkr/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/767866?v=4",
        "events_url": "https://api.github.com/users/jonhkr/events{/privacy}",
        "followers_url": "https://api.github.com/users/jonhkr/followers",
        "following_url": "https://api.github.com/users/jonhkr/following{/other_user}",
        "gists_url": "https://api.github.com/users/jonhkr/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jonhkr",
        "id": 767866,
        "login": "jonhkr",
        "node_id": "MDQ6VXNlcjc2Nzg2Ng==",
        "organizations_url": "https://api.github.com/users/jonhkr/orgs",
        "received_events_url": "https://api.github.com/users/jonhkr/received_events",
        "repos_url": "https://api.github.com/users/jonhkr/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jonhkr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jonhkr/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jonhkr"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/jonhkr/kafka/pulls{/number}",
      "pushed_at": "2020-09-08T18:50:07Z",
      "releases_url": "https://api.github.com/repos/jonhkr/kafka/releases{/id}",
      "size": 105389,
      "ssh_url": "git@github.com:jonhkr/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/jonhkr/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/jonhkr/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/jonhkr/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/jonhkr/kafka/subscription",
      "svn_url": "https://github.com/jonhkr/kafka",
      "tags_url": "https://api.github.com/repos/jonhkr/kafka/tags",
      "teams_url": "https://api.github.com/repos/jonhkr/kafka/teams",
      "trees_url": "https://api.github.com/repos/jonhkr/kafka/git/trees{/sha}",
      "updated_at": "2020-09-05T20:39:13Z",
      "url": "https://api.github.com/repos/jonhkr/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "0ec3b4de8aa922e64074752f911b231d9a7b1993",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/767866?v=4",
      "events_url": "https://api.github.com/users/jonhkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/jonhkr/followers",
      "following_url": "https://api.github.com/users/jonhkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonhkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jonhkr",
      "id": 767866,
      "login": "jonhkr",
      "node_id": "MDQ6VXNlcjc2Nzg2Ng==",
      "organizations_url": "https://api.github.com/users/jonhkr/orgs",
      "received_events_url": "https://api.github.com/users/jonhkr/received_events",
      "repos_url": "https://api.github.com/users/jonhkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jonhkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonhkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jonhkr"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9256",
  "id": 480596790,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9256",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "b0ebc3d398ced218e0d03bbbf8fab103e55456b3",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDgwNTk2Nzkw",
  "number": 9256,
  "patch_url": "https://github.com/apache/kafka/pull/9256.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9256/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/0ec3b4de8aa922e64074752f911b231d9a7b1993",
  "title": "Fix some Gradle deprecation warnings",
  "updated_at": "2020-09-09T19:05:30Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9256",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/767866?v=4",
    "events_url": "https://api.github.com/users/jonhkr/events{/privacy}",
    "followers_url": "https://api.github.com/users/jonhkr/followers",
    "following_url": "https://api.github.com/users/jonhkr/following{/other_user}",
    "gists_url": "https://api.github.com/users/jonhkr/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/jonhkr",
    "id": 767866,
    "login": "jonhkr",
    "node_id": "MDQ6VXNlcjc2Nzg2Ng==",
    "organizations_url": "https://api.github.com/users/jonhkr/orgs",
    "received_events_url": "https://api.github.com/users/jonhkr/received_events",
    "repos_url": "https://api.github.com/users/jonhkr/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/jonhkr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jonhkr/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/jonhkr"
  }
}
json_root is_array: false
json_root is_object: true
number: 9256
url: https://api.github.com/repos/apache/kafka/pulls/9256
title: Fix some Gradle deprecation warnings
body: Find the guide for upgrading here: https://docs.gradle.org/6.6/userguide/upgrading_version_5.html#changes_6.0

Changes made in this PR:
- Use `java-library` instead of `java` plugin (to have access to the `api` configuration)
- Use `api` instead of `compile`
- Use `testImplementation` instead of `testCompile`
- Use `testRuntimeOnly` instead of `testRuntime`

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9256/comments
pull_request_number: 9256
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9254/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9254/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9254"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9254"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9254/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9254"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/08bd3276cb3ecfad27cecb3b3af6a4fdcfc21e11"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "e8524ccd8fca0caac79b844d87e98e9c055f76fb",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "*More detailed description of your change,\r\nif necessary. The PR title and PR message become\r\nthe squashed commit message, so use a separate\r\ncomment to ping reviewers.*\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9254/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9254/commits",
  "created_at": "2020-09-05T07:44:45Z",
  "diff_url": "https://github.com/apache/kafka/pull/9254.diff",
  "draft": false,
  "head": {
    "label": "vgvineet4:AddHeadersPerfPerformance",
    "ref": "AddHeadersPerfPerformance",
    "repo": {
      "archive_url": "https://api.github.com/repos/vgvineet4/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/vgvineet4/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/vgvineet4/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/vgvineet4/kafka/branches{/branch}",
      "clone_url": "https://github.com/vgvineet4/kafka.git",
      "collaborators_url": "https://api.github.com/repos/vgvineet4/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/vgvineet4/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/vgvineet4/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/vgvineet4/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/vgvineet4/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/vgvineet4/kafka/contributors",
      "created_at": "2020-09-02T16:51:25Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/vgvineet4/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/vgvineet4/kafka/downloads",
      "events_url": "https://api.github.com/repos/vgvineet4/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/vgvineet4/kafka/forks",
      "full_name": "vgvineet4/kafka",
      "git_commits_url": "https://api.github.com/repos/vgvineet4/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/vgvineet4/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/vgvineet4/kafka/git/tags{/sha}",
      "git_url": "git://github.com/vgvineet4/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/vgvineet4/kafka/hooks",
      "html_url": "https://github.com/vgvineet4/kafka",
      "id": 292341102,
      "issue_comment_url": "https://api.github.com/repos/vgvineet4/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/vgvineet4/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/vgvineet4/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/vgvineet4/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/vgvineet4/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/vgvineet4/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/vgvineet4/kafka/merges",
      "milestones_url": "https://api.github.com/repos/vgvineet4/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyOTIzNDExMDI=",
      "notifications_url": "https://api.github.com/repos/vgvineet4/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/2417528?v=4",
        "events_url": "https://api.github.com/users/vgvineet4/events{/privacy}",
        "followers_url": "https://api.github.com/users/vgvineet4/followers",
        "following_url": "https://api.github.com/users/vgvineet4/following{/other_user}",
        "gists_url": "https://api.github.com/users/vgvineet4/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/vgvineet4",
        "id": 2417528,
        "login": "vgvineet4",
        "node_id": "MDQ6VXNlcjI0MTc1Mjg=",
        "organizations_url": "https://api.github.com/users/vgvineet4/orgs",
        "received_events_url": "https://api.github.com/users/vgvineet4/received_events",
        "repos_url": "https://api.github.com/users/vgvineet4/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/vgvineet4/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vgvineet4/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/vgvineet4"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/vgvineet4/kafka/pulls{/number}",
      "pushed_at": "2020-09-20T10:59:34Z",
      "releases_url": "https://api.github.com/repos/vgvineet4/kafka/releases{/id}",
      "size": 105228,
      "ssh_url": "git@github.com:vgvineet4/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/vgvineet4/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/vgvineet4/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/vgvineet4/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/vgvineet4/kafka/subscription",
      "svn_url": "https://github.com/vgvineet4/kafka",
      "tags_url": "https://api.github.com/repos/vgvineet4/kafka/tags",
      "teams_url": "https://api.github.com/repos/vgvineet4/kafka/teams",
      "trees_url": "https://api.github.com/repos/vgvineet4/kafka/git/trees{/sha}",
      "updated_at": "2020-09-02T16:51:30Z",
      "url": "https://api.github.com/repos/vgvineet4/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "08bd3276cb3ecfad27cecb3b3af6a4fdcfc21e11",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/2417528?v=4",
      "events_url": "https://api.github.com/users/vgvineet4/events{/privacy}",
      "followers_url": "https://api.github.com/users/vgvineet4/followers",
      "following_url": "https://api.github.com/users/vgvineet4/following{/other_user}",
      "gists_url": "https://api.github.com/users/vgvineet4/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vgvineet4",
      "id": 2417528,
      "login": "vgvineet4",
      "node_id": "MDQ6VXNlcjI0MTc1Mjg=",
      "organizations_url": "https://api.github.com/users/vgvineet4/orgs",
      "received_events_url": "https://api.github.com/users/vgvineet4/received_events",
      "repos_url": "https://api.github.com/users/vgvineet4/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vgvineet4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vgvineet4/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vgvineet4"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9254",
  "id": 480475015,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9254",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "bdf3565cdd8066d40bf1f48c6563240d357a0da9",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDgwNDc1MDE1",
  "number": 9254,
  "patch_url": "https://github.com/apache/kafka/pull/9254.patch",
  "requested_reviewers": [
    {
      "avatar_url": "https://avatars2.githubusercontent.com/u/8134545?v=4",
      "events_url": "https://api.github.com/users/omkreddy/events{/privacy}",
      "followers_url": "https://api.github.com/users/omkreddy/followers",
      "following_url": "https://api.github.com/users/omkreddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/omkreddy/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/omkreddy",
      "id": 8134545,
      "login": "omkreddy",
      "node_id": "MDQ6VXNlcjgxMzQ1NDU=",
      "organizations_url": "https://api.github.com/users/omkreddy/orgs",
      "received_events_url": "https://api.github.com/users/omkreddy/received_events",
      "repos_url": "https://api.github.com/users/omkreddy/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/omkreddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/omkreddy/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/omkreddy"
    }
  ],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9254/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/08bd3276cb3ecfad27cecb3b3af6a4fdcfc21e11",
  "title": "KAFKA-10462: Added support to pass headers in producerPerformance script",
  "updated_at": "2020-09-20T13:12:59Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9254",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/2417528?v=4",
    "events_url": "https://api.github.com/users/vgvineet4/events{/privacy}",
    "followers_url": "https://api.github.com/users/vgvineet4/followers",
    "following_url": "https://api.github.com/users/vgvineet4/following{/other_user}",
    "gists_url": "https://api.github.com/users/vgvineet4/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/vgvineet4",
    "id": 2417528,
    "login": "vgvineet4",
    "node_id": "MDQ6VXNlcjI0MTc1Mjg=",
    "organizations_url": "https://api.github.com/users/vgvineet4/orgs",
    "received_events_url": "https://api.github.com/users/vgvineet4/received_events",
    "repos_url": "https://api.github.com/users/vgvineet4/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/vgvineet4/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vgvineet4/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/vgvineet4"
  }
}
json_root is_array: false
json_root is_object: true
number: 9254
url: https://api.github.com/repos/apache/kafka/pulls/9254
title: KAFKA-10462: Added support to pass headers in producerPerformance script
body: *More detailed description of your change,
if necessary. The PR title and PR message become
the squashed commit message, so use a separate
comment to ping reviewers.*

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9254/comments
id: 491421315
url: https://api.github.com/repos/apache/kafka/pulls/comments/491421315
body: @vgvineet4 Thanks for the PR. we are adding same header values for each record. Should we set different values for each record?  maybe add string header value?
diff_hunk: @@ -87,6 +88,11 @@ public static void main(String[] args) throws Exception {
                     payloadByteList.add(payload.getBytes(StandardCharsets.UTF_8));
                 }
             }
+            
+            Properties headerProps = new Properties();
+            if (headersPath != null) {
+                headerProps.putAll(Utils.loadProps(headersPath));
path: tools/src/main/java/org/apache/kafka/tools/ProducerPerformance.java
html: https://github.com/apache/kafka/pull/9254#discussion_r491421315
id: 491421961
url: https://api.github.com/repos/apache/kafka/pulls/comments/491421961
body: Instead of adding headers each time, maybe we can pre-create the headers list and pass to ProducerRecord() constructor.
diff_hunk: @@ -132,12 +138,16 @@ public static void main(String[] args) throws Exception {
                     transactionStartTime = System.currentTimeMillis();
                 }
 
-
                 if (payloadFilePath != null) {
                     payload = payloadByteList.get(random.nextInt(payloadByteList.size()));
                 }
                 record = new ProducerRecord<>(topicName, payload);
-
+                Enumeration e = headerProps.propertyNames();
+                while (e.hasMoreElements()) {
+                    String key = (String) e.nextElement();
+                    System.out.println(key + " -- " + headerProps.getProperty(key));
+                    record.headers().add(key, headerProps.getProperty(key).getBytes("UTF-8"));
path: tools/src/main/java/org/apache/kafka/tools/ProducerPerformance.java
html: https://github.com/apache/kafka/pull/9254#discussion_r491421961
id: 491649810
url: https://api.github.com/repos/apache/kafka/pulls/comments/491649810
body: @omkreddy Thanks for reviewing the PR. Line number 142 <code>payload = payloadByteList.get(random.nextInt(payloadByteList.size()));</code> pulls the record in file randomly. It would be hard to map headers to the required payload. My thinking was this could serve well for those who want to check against a particular workflow where the payload or data in each record varies but header remain constant. 


diff_hunk: @@ -87,6 +88,11 @@ public static void main(String[] args) throws Exception {
                     payloadByteList.add(payload.getBytes(StandardCharsets.UTF_8));
                 }
             }
+            
+            Properties headerProps = new Properties();
+            if (headersPath != null) {
+                headerProps.putAll(Utils.loadProps(headersPath));
path: tools/src/main/java/org/apache/kafka/tools/ProducerPerformance.java
html: https://github.com/apache/kafka/pull/9254#discussion_r491649810
id: 491690401
url: https://api.github.com/repos/apache/kafka/pulls/comments/491690401
body: Nice catch!!..changes incorporated.
diff_hunk: @@ -132,12 +138,16 @@ public static void main(String[] args) throws Exception {
                     transactionStartTime = System.currentTimeMillis();
                 }
 
-
                 if (payloadFilePath != null) {
                     payload = payloadByteList.get(random.nextInt(payloadByteList.size()));
                 }
                 record = new ProducerRecord<>(topicName, payload);
-
+                Enumeration e = headerProps.propertyNames();
+                while (e.hasMoreElements()) {
+                    String key = (String) e.nextElement();
+                    System.out.println(key + " -- " + headerProps.getProperty(key));
+                    record.headers().add(key, headerProps.getProperty(key).getBytes("UTF-8"));
path: tools/src/main/java/org/apache/kafka/tools/ProducerPerformance.java
html: https://github.com/apache/kafka/pull/9254#discussion_r491690401
pull_request_number: 9254
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9253/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9253/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9253"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9253"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9253/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9253"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/ab62736c562df98a67b87c0cc1054cf2b212926a"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "c6d135e21fbd5f112477288a79501e4343b7a8b5",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "See KIP details and discussions here: https://cwiki.apache.org/confluence/display/KAFKA/KIP-659%3A+Improve+TimeWindowedDeserializer+and+TimeWindowedSerde+to+handle+window+size\r\n\r\nDeprecates methods that allow users to skip setting a window size when one is needed. Adds a window size streams config to allow the `timeWindowedDeserializer` to calculate window end time.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9253/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9253/commits",
  "created_at": "2020-09-04T18:44:38Z",
  "diff_url": "https://github.com/apache/kafka/pull/9253.diff",
  "draft": false,
  "head": {
    "label": "lct45:windowsconfig",
    "ref": "windowsconfig",
    "repo": {
      "archive_url": "https://api.github.com/repos/lct45/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/lct45/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/lct45/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/lct45/kafka/branches{/branch}",
      "clone_url": "https://github.com/lct45/kafka.git",
      "collaborators_url": "https://api.github.com/repos/lct45/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/lct45/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/lct45/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/lct45/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/lct45/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/lct45/kafka/contributors",
      "created_at": "2020-06-24T14:36:33Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/lct45/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/lct45/kafka/downloads",
      "events_url": "https://api.github.com/repos/lct45/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/lct45/kafka/forks",
      "full_name": "lct45/kafka",
      "git_commits_url": "https://api.github.com/repos/lct45/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/lct45/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/lct45/kafka/git/tags{/sha}",
      "git_url": "git://github.com/lct45/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/lct45/kafka/hooks",
      "html_url": "https://github.com/lct45/kafka",
      "id": 274691789,
      "issue_comment_url": "https://api.github.com/repos/lct45/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/lct45/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/lct45/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/lct45/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/lct45/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/lct45/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/lct45/kafka/merges",
      "milestones_url": "https://api.github.com/repos/lct45/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyNzQ2OTE3ODk=",
      "notifications_url": "https://api.github.com/repos/lct45/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/51764475?v=4",
        "events_url": "https://api.github.com/users/lct45/events{/privacy}",
        "followers_url": "https://api.github.com/users/lct45/followers",
        "following_url": "https://api.github.com/users/lct45/following{/other_user}",
        "gists_url": "https://api.github.com/users/lct45/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lct45",
        "id": 51764475,
        "login": "lct45",
        "node_id": "MDQ6VXNlcjUxNzY0NDc1",
        "organizations_url": "https://api.github.com/users/lct45/orgs",
        "received_events_url": "https://api.github.com/users/lct45/received_events",
        "repos_url": "https://api.github.com/users/lct45/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lct45/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lct45/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lct45"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/lct45/kafka/pulls{/number}",
      "pushed_at": "2020-10-16T15:32:55Z",
      "releases_url": "https://api.github.com/repos/lct45/kafka/releases{/id}",
      "size": 106698,
      "ssh_url": "git@github.com:lct45/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/lct45/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/lct45/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/lct45/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/lct45/kafka/subscription",
      "svn_url": "https://github.com/lct45/kafka",
      "tags_url": "https://api.github.com/repos/lct45/kafka/tags",
      "teams_url": "https://api.github.com/repos/lct45/kafka/teams",
      "trees_url": "https://api.github.com/repos/lct45/kafka/git/trees{/sha}",
      "updated_at": "2020-10-07T15:34:14Z",
      "url": "https://api.github.com/repos/lct45/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "ab62736c562df98a67b87c0cc1054cf2b212926a",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/51764475?v=4",
      "events_url": "https://api.github.com/users/lct45/events{/privacy}",
      "followers_url": "https://api.github.com/users/lct45/followers",
      "following_url": "https://api.github.com/users/lct45/following{/other_user}",
      "gists_url": "https://api.github.com/users/lct45/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lct45",
      "id": 51764475,
      "login": "lct45",
      "node_id": "MDQ6VXNlcjUxNzY0NDc1",
      "organizations_url": "https://api.github.com/users/lct45/orgs",
      "received_events_url": "https://api.github.com/users/lct45/received_events",
      "repos_url": "https://api.github.com/users/lct45/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lct45/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lct45/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lct45"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9253",
  "id": 479971707,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9253",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "0b1a1761ba85a022a9ee63fea1deff5bc4e7c000",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDc5OTcxNzA3",
  "number": 9253,
  "patch_url": "https://github.com/apache/kafka/pull/9253.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9253/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/ab62736c562df98a67b87c0cc1054cf2b212926a",
  "title": "KAFKA-10366 & KAFKA-9649: Implement KIP-659 to allow TimeWindowedDeserializer and TimeWindowedSerde to handle window size",
  "updated_at": "2020-09-08T22:24:51Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9253",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/51764475?v=4",
    "events_url": "https://api.github.com/users/lct45/events{/privacy}",
    "followers_url": "https://api.github.com/users/lct45/followers",
    "following_url": "https://api.github.com/users/lct45/following{/other_user}",
    "gists_url": "https://api.github.com/users/lct45/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/lct45",
    "id": 51764475,
    "login": "lct45",
    "node_id": "MDQ6VXNlcjUxNzY0NDc1",
    "organizations_url": "https://api.github.com/users/lct45/orgs",
    "received_events_url": "https://api.github.com/users/lct45/received_events",
    "repos_url": "https://api.github.com/users/lct45/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/lct45/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lct45/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/lct45"
  }
}
json_root is_array: false
json_root is_object: true
number: 9253
url: https://api.github.com/repos/apache/kafka/pulls/9253
title: KAFKA-10366 & KAFKA-9649: Implement KIP-659 to allow TimeWindowedDeserializer and TimeWindowedSerde to handle window size
body: See KIP details and discussions here: https://cwiki.apache.org/confluence/display/KAFKA/KIP-659%3A+Improve+TimeWindowedDeserializer+and+TimeWindowedSerde+to+handle+window+size

Deprecates methods that allow users to skip setting a window size when one is needed. Adds a window size streams config to allow the `timeWindowedDeserializer` to calculate window end time.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9253/comments
pull_request_number: 9253
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9252/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9252/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9252"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9252"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9252/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9252"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/6558745fc71593ae1c6fa45a3c4bce15dba9ce39"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "23cade850678eeae1bc1227a2a2a4bc09b02f2fc",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This test compares the current working tree version of protocol/message json\r\nfiles with the same versions of those files as released in previous versions\r\nof Kafka (and in git HEAD). As such it can detect when a message format is \r\nchanged in an incompabile way, for example by adding a field to an existing \r\nAPI version. The verification implements all the rules mentioned in the \r\nprotocol README.md plus a few others.\r\n\r\nThe test is factored into an abstract test class, which means it can be used in\r\nother places where message JSON is used. I added a test for Kafka Streams,\r\nfor example.\r\n\r\nBecause the test works by looking at git tags it wouldn't be robust to certain\r\nrefactorings (e.g. changing the directory in which the message JSON files\r\nreside). It also currently doesn't cope with refactoring field names.\r\n\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9252/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9252/commits",
  "created_at": "2020-09-04T15:44:11Z",
  "diff_url": "https://github.com/apache/kafka/pull/9252.diff",
  "draft": false,
  "head": {
    "label": "tombentley:KAFKA-10241-ignorable-rpc-field-test",
    "ref": "KAFKA-10241-ignorable-rpc-field-test",
    "repo": {
      "archive_url": "https://api.github.com/repos/tombentley/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/tombentley/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/tombentley/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/tombentley/kafka/branches{/branch}",
      "clone_url": "https://github.com/tombentley/kafka.git",
      "collaborators_url": "https://api.github.com/repos/tombentley/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/tombentley/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/tombentley/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/tombentley/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/tombentley/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/tombentley/kafka/contributors",
      "created_at": "2017-06-09T11:08:28Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/tombentley/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/tombentley/kafka/downloads",
      "events_url": "https://api.github.com/repos/tombentley/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/tombentley/kafka/forks",
      "full_name": "tombentley/kafka",
      "git_commits_url": "https://api.github.com/repos/tombentley/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/tombentley/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/tombentley/kafka/git/tags{/sha}",
      "git_url": "git://github.com/tombentley/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/tombentley/kafka/hooks",
      "html_url": "https://github.com/tombentley/kafka",
      "id": 93850932,
      "issue_comment_url": "https://api.github.com/repos/tombentley/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/tombentley/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/tombentley/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/tombentley/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/tombentley/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/tombentley/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/tombentley/kafka/merges",
      "milestones_url": "https://api.github.com/repos/tombentley/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk5Mzg1MDkzMg==",
      "notifications_url": "https://api.github.com/repos/tombentley/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/879487?v=4",
        "events_url": "https://api.github.com/users/tombentley/events{/privacy}",
        "followers_url": "https://api.github.com/users/tombentley/followers",
        "following_url": "https://api.github.com/users/tombentley/following{/other_user}",
        "gists_url": "https://api.github.com/users/tombentley/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tombentley",
        "id": 879487,
        "login": "tombentley",
        "node_id": "MDQ6VXNlcjg3OTQ4Nw==",
        "organizations_url": "https://api.github.com/users/tombentley/orgs",
        "received_events_url": "https://api.github.com/users/tombentley/received_events",
        "repos_url": "https://api.github.com/users/tombentley/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tombentley/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tombentley/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tombentley"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/tombentley/kafka/pulls{/number}",
      "pushed_at": "2020-10-23T15:12:00Z",
      "releases_url": "https://api.github.com/repos/tombentley/kafka/releases{/id}",
      "size": 100102,
      "ssh_url": "git@github.com:tombentley/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/tombentley/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/tombentley/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/tombentley/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/tombentley/kafka/subscription",
      "svn_url": "https://github.com/tombentley/kafka",
      "tags_url": "https://api.github.com/repos/tombentley/kafka/tags",
      "teams_url": "https://api.github.com/repos/tombentley/kafka/teams",
      "trees_url": "https://api.github.com/repos/tombentley/kafka/git/trees{/sha}",
      "updated_at": "2017-06-09T11:08:37Z",
      "url": "https://api.github.com/repos/tombentley/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "6558745fc71593ae1c6fa45a3c4bce15dba9ce39",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/879487?v=4",
      "events_url": "https://api.github.com/users/tombentley/events{/privacy}",
      "followers_url": "https://api.github.com/users/tombentley/followers",
      "following_url": "https://api.github.com/users/tombentley/following{/other_user}",
      "gists_url": "https://api.github.com/users/tombentley/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/tombentley",
      "id": 879487,
      "login": "tombentley",
      "node_id": "MDQ6VXNlcjg3OTQ4Nw==",
      "organizations_url": "https://api.github.com/users/tombentley/orgs",
      "received_events_url": "https://api.github.com/users/tombentley/received_events",
      "repos_url": "https://api.github.com/users/tombentley/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/tombentley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tombentley/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/tombentley"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9252",
  "id": 479818341,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9252",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "f6602b9055c2c2123c9b5a3a9afef3e649faa1cc",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDc5ODE4MzQx",
  "number": 9252,
  "patch_url": "https://github.com/apache/kafka/pull/9252.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9252/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/6558745fc71593ae1c6fa45a3c4bce15dba9ce39",
  "title": "KAFKA-10241: Add test for message compatibility",
  "updated_at": "2020-09-17T06:16:50Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9252",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/879487?v=4",
    "events_url": "https://api.github.com/users/tombentley/events{/privacy}",
    "followers_url": "https://api.github.com/users/tombentley/followers",
    "following_url": "https://api.github.com/users/tombentley/following{/other_user}",
    "gists_url": "https://api.github.com/users/tombentley/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/tombentley",
    "id": 879487,
    "login": "tombentley",
    "node_id": "MDQ6VXNlcjg3OTQ4Nw==",
    "organizations_url": "https://api.github.com/users/tombentley/orgs",
    "received_events_url": "https://api.github.com/users/tombentley/received_events",
    "repos_url": "https://api.github.com/users/tombentley/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/tombentley/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tombentley/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/tombentley"
  }
}
json_root is_array: false
json_root is_object: true
number: 9252
url: https://api.github.com/repos/apache/kafka/pulls/9252
title: KAFKA-10241: Add test for message compatibility
body: This test compares the current working tree version of protocol/message json
files with the same versions of those files as released in previous versions
of Kafka (and in git HEAD). As such it can detect when a message format is 
changed in an incompabile way, for example by adding a field to an existing 
API version. The verification implements all the rules mentioned in the 
protocol README.md plus a few others.

The test is factored into an abstract test class, which means it can be used in
other places where message JSON is used. I added a test for Kafka Streams,
for example.

Because the test works by looking at git tags it wouldn't be robust to certain
refactorings (e.g. changing the directory in which the message JSON files
reside). It also currently doesn't cope with refactoring field names.


review_comments: https://api.github.com/repos/apache/kafka/pulls/9252/comments
pull_request_number: 9252
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9243/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9243/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9243"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9243"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9243/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9243"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/b113c3104aad312c746e92b3f52391e0e1050a6b"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "e8524ccd8fca0caac79b844d87e98e9c055f76fb",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Added new option --remove-members to remove members from group in ConsumerGroupCommand. User can either remove member by providing member id (--member) or can delete all the members of group using (--all-members) option\r\n\r\n\r\nhttps://issues.apache.org/jira/browse/KAFKA-9440\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9243/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9243/commits",
  "created_at": "2020-09-02T06:48:37Z",
  "diff_url": "https://github.com/apache/kafka/pull/9243.diff",
  "draft": false,
  "head": {
    "label": "sndp2693:KAFKA-9440",
    "ref": "KAFKA-9440",
    "repo": {
      "archive_url": "https://api.github.com/repos/sndp2693/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/sndp2693/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/sndp2693/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/sndp2693/kafka/branches{/branch}",
      "clone_url": "https://github.com/sndp2693/kafka.git",
      "collaborators_url": "https://api.github.com/repos/sndp2693/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/sndp2693/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/sndp2693/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/sndp2693/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/sndp2693/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/sndp2693/kafka/contributors",
      "created_at": "2020-09-02T06:43:56Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/sndp2693/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/sndp2693/kafka/downloads",
      "events_url": "https://api.github.com/repos/sndp2693/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/sndp2693/kafka/forks",
      "full_name": "sndp2693/kafka",
      "git_commits_url": "https://api.github.com/repos/sndp2693/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/sndp2693/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/sndp2693/kafka/git/tags{/sha}",
      "git_url": "git://github.com/sndp2693/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/sndp2693/kafka/hooks",
      "html_url": "https://github.com/sndp2693/kafka",
      "id": 292201532,
      "issue_comment_url": "https://api.github.com/repos/sndp2693/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/sndp2693/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/sndp2693/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/sndp2693/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/sndp2693/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/sndp2693/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/sndp2693/kafka/merges",
      "milestones_url": "https://api.github.com/repos/sndp2693/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyOTIyMDE1MzI=",
      "notifications_url": "https://api.github.com/repos/sndp2693/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/58215145?v=4",
        "events_url": "https://api.github.com/users/sndp2693/events{/privacy}",
        "followers_url": "https://api.github.com/users/sndp2693/followers",
        "following_url": "https://api.github.com/users/sndp2693/following{/other_user}",
        "gists_url": "https://api.github.com/users/sndp2693/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/sndp2693",
        "id": 58215145,
        "login": "sndp2693",
        "node_id": "MDQ6VXNlcjU4MjE1MTQ1",
        "organizations_url": "https://api.github.com/users/sndp2693/orgs",
        "received_events_url": "https://api.github.com/users/sndp2693/received_events",
        "repos_url": "https://api.github.com/users/sndp2693/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/sndp2693/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sndp2693/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/sndp2693"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/sndp2693/kafka/pulls{/number}",
      "pushed_at": "2020-09-07T06:51:22Z",
      "releases_url": "https://api.github.com/repos/sndp2693/kafka/releases{/id}",
      "size": 105483,
      "ssh_url": "git@github.com:sndp2693/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/sndp2693/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/sndp2693/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/sndp2693/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/sndp2693/kafka/subscription",
      "svn_url": "https://github.com/sndp2693/kafka",
      "tags_url": "https://api.github.com/repos/sndp2693/kafka/tags",
      "teams_url": "https://api.github.com/repos/sndp2693/kafka/teams",
      "trees_url": "https://api.github.com/repos/sndp2693/kafka/git/trees{/sha}",
      "updated_at": "2020-09-02T06:43:58Z",
      "url": "https://api.github.com/repos/sndp2693/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "b113c3104aad312c746e92b3f52391e0e1050a6b",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/58215145?v=4",
      "events_url": "https://api.github.com/users/sndp2693/events{/privacy}",
      "followers_url": "https://api.github.com/users/sndp2693/followers",
      "following_url": "https://api.github.com/users/sndp2693/following{/other_user}",
      "gists_url": "https://api.github.com/users/sndp2693/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/sndp2693",
      "id": 58215145,
      "login": "sndp2693",
      "node_id": "MDQ6VXNlcjU4MjE1MTQ1",
      "organizations_url": "https://api.github.com/users/sndp2693/orgs",
      "received_events_url": "https://api.github.com/users/sndp2693/received_events",
      "repos_url": "https://api.github.com/users/sndp2693/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/sndp2693/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sndp2693/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/sndp2693"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9243",
  "id": 477611938,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9243",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "9a68e3a4173c9018bfc7f9250284acde53dc6e6e",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDc3NjExOTM4",
  "number": 9243,
  "patch_url": "https://github.com/apache/kafka/pull/9243.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9243/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/b113c3104aad312c746e92b3f52391e0e1050a6b",
  "title": "Add ConsumerGroupCommand to delete static members",
  "updated_at": "2020-09-07T06:51:38Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9243",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/58215145?v=4",
    "events_url": "https://api.github.com/users/sndp2693/events{/privacy}",
    "followers_url": "https://api.github.com/users/sndp2693/followers",
    "following_url": "https://api.github.com/users/sndp2693/following{/other_user}",
    "gists_url": "https://api.github.com/users/sndp2693/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/sndp2693",
    "id": 58215145,
    "login": "sndp2693",
    "node_id": "MDQ6VXNlcjU4MjE1MTQ1",
    "organizations_url": "https://api.github.com/users/sndp2693/orgs",
    "received_events_url": "https://api.github.com/users/sndp2693/received_events",
    "repos_url": "https://api.github.com/users/sndp2693/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/sndp2693/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sndp2693/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/sndp2693"
  }
}
json_root is_array: false
json_root is_object: true
number: 9243
url: https://api.github.com/repos/apache/kafka/pulls/9243
title: Add ConsumerGroupCommand to delete static members
body: Added new option --remove-members to remove members from group in ConsumerGroupCommand. User can either remove member by providing member id (--member) or can delete all the members of group using (--all-members) option


https://issues.apache.org/jira/browse/KAFKA-9440
### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9243/comments
pull_request_number: 9243
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9242/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9242/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9242"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9242"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9242/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9242"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/c9673fd548b0f4104c5e53fa8e238036327bcb88"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "241e1447fae8b85b3bb491f371357b8f92d2da72",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "- Current docs for replication quota config are bit confusing because they contain a term \"(for each topic)\" though actually they work as upper bound for \"total\" replication traffic listed in `{leader/follower}.replication.throttled.replicas`.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9242/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9242/commits",
  "created_at": "2020-09-02T05:03:45Z",
  "diff_url": "https://github.com/apache/kafka/pull/9242.diff",
  "draft": false,
  "head": {
    "label": "ocadaruma:minor-update-doc",
    "ref": "minor-update-doc",
    "repo": {
      "archive_url": "https://api.github.com/repos/ocadaruma/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/ocadaruma/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/ocadaruma/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/ocadaruma/kafka/branches{/branch}",
      "clone_url": "https://github.com/ocadaruma/kafka.git",
      "collaborators_url": "https://api.github.com/repos/ocadaruma/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/ocadaruma/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/ocadaruma/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/ocadaruma/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/ocadaruma/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/ocadaruma/kafka/contributors",
      "created_at": "2020-02-28T10:51:27Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/ocadaruma/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/ocadaruma/kafka/downloads",
      "events_url": "https://api.github.com/repos/ocadaruma/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/ocadaruma/kafka/forks",
      "full_name": "ocadaruma/kafka",
      "git_commits_url": "https://api.github.com/repos/ocadaruma/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/ocadaruma/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/ocadaruma/kafka/git/tags{/sha}",
      "git_url": "git://github.com/ocadaruma/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/ocadaruma/kafka/hooks",
      "html_url": "https://github.com/ocadaruma/kafka",
      "id": 243740530,
      "issue_comment_url": "https://api.github.com/repos/ocadaruma/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/ocadaruma/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/ocadaruma/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/ocadaruma/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/ocadaruma/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/ocadaruma/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/ocadaruma/kafka/merges",
      "milestones_url": "https://api.github.com/repos/ocadaruma/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyNDM3NDA1MzA=",
      "notifications_url": "https://api.github.com/repos/ocadaruma/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/6070684?v=4",
        "events_url": "https://api.github.com/users/ocadaruma/events{/privacy}",
        "followers_url": "https://api.github.com/users/ocadaruma/followers",
        "following_url": "https://api.github.com/users/ocadaruma/following{/other_user}",
        "gists_url": "https://api.github.com/users/ocadaruma/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ocadaruma",
        "id": 6070684,
        "login": "ocadaruma",
        "node_id": "MDQ6VXNlcjYwNzA2ODQ=",
        "organizations_url": "https://api.github.com/users/ocadaruma/orgs",
        "received_events_url": "https://api.github.com/users/ocadaruma/received_events",
        "repos_url": "https://api.github.com/users/ocadaruma/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ocadaruma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ocadaruma/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ocadaruma"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/ocadaruma/kafka/pulls{/number}",
      "pushed_at": "2020-10-20T03:05:21Z",
      "releases_url": "https://api.github.com/repos/ocadaruma/kafka/releases{/id}",
      "size": 106338,
      "ssh_url": "git@github.com:ocadaruma/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/ocadaruma/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/ocadaruma/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/ocadaruma/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/ocadaruma/kafka/subscription",
      "svn_url": "https://github.com/ocadaruma/kafka",
      "tags_url": "https://api.github.com/repos/ocadaruma/kafka/tags",
      "teams_url": "https://api.github.com/repos/ocadaruma/kafka/teams",
      "trees_url": "https://api.github.com/repos/ocadaruma/kafka/git/trees{/sha}",
      "updated_at": "2020-02-28T10:52:29Z",
      "url": "https://api.github.com/repos/ocadaruma/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "c9673fd548b0f4104c5e53fa8e238036327bcb88",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/6070684?v=4",
      "events_url": "https://api.github.com/users/ocadaruma/events{/privacy}",
      "followers_url": "https://api.github.com/users/ocadaruma/followers",
      "following_url": "https://api.github.com/users/ocadaruma/following{/other_user}",
      "gists_url": "https://api.github.com/users/ocadaruma/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ocadaruma",
      "id": 6070684,
      "login": "ocadaruma",
      "node_id": "MDQ6VXNlcjYwNzA2ODQ=",
      "organizations_url": "https://api.github.com/users/ocadaruma/orgs",
      "received_events_url": "https://api.github.com/users/ocadaruma/received_events",
      "repos_url": "https://api.github.com/users/ocadaruma/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ocadaruma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ocadaruma/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ocadaruma"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9242",
  "id": 477570881,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9242",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "9a600675cf0e690e4a274f08430d3bde7b9645f1",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDc3NTcwODgx",
  "number": 9242,
  "patch_url": "https://github.com/apache/kafka/pull/9242.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9242/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/c9673fd548b0f4104c5e53fa8e238036327bcb88",
  "title": "MINOR: Fix misleading doc for replication quota",
  "updated_at": "2020-09-02T05:03:45Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9242",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/6070684?v=4",
    "events_url": "https://api.github.com/users/ocadaruma/events{/privacy}",
    "followers_url": "https://api.github.com/users/ocadaruma/followers",
    "following_url": "https://api.github.com/users/ocadaruma/following{/other_user}",
    "gists_url": "https://api.github.com/users/ocadaruma/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ocadaruma",
    "id": 6070684,
    "login": "ocadaruma",
    "node_id": "MDQ6VXNlcjYwNzA2ODQ=",
    "organizations_url": "https://api.github.com/users/ocadaruma/orgs",
    "received_events_url": "https://api.github.com/users/ocadaruma/received_events",
    "repos_url": "https://api.github.com/users/ocadaruma/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ocadaruma/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ocadaruma/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ocadaruma"
  }
}
json_root is_array: false
json_root is_object: true
number: 9242
url: https://api.github.com/repos/apache/kafka/pulls/9242
title: MINOR: Fix misleading doc for replication quota
body: - Current docs for replication quota config are bit confusing because they contain a term "(for each topic)" though actually they work as upper bound for "total" replication traffic listed in `{leader/follower}.replication.throttled.replicas`.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9242/comments
pull_request_number: 9242
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9235/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9235/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9235"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9235"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9235/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9235"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/e390183ba1b15a31833bff0c851b93e158983afb"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "9da32b6bd014f1bdeeee5da8fcd00995a5916323",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "…rties.\r\n\r\n*More detailed description of your change,\r\nif necessary. The PR title and PR message become\r\nthe squashed commit message, so use a separate\r\ncomment to ping reviewers.*\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9235/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9235/commits",
  "created_at": "2020-08-31T21:56:01Z",
  "diff_url": "https://github.com/apache/kafka/pull/9235.diff",
  "draft": false,
  "head": {
    "label": "tinawenqiao:KAFKA-10449",
    "ref": "KAFKA-10449",
    "repo": {
      "archive_url": "https://api.github.com/repos/tinawenqiao/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/tinawenqiao/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/tinawenqiao/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/tinawenqiao/kafka/branches{/branch}",
      "clone_url": "https://github.com/tinawenqiao/kafka.git",
      "collaborators_url": "https://api.github.com/repos/tinawenqiao/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/tinawenqiao/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/tinawenqiao/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/tinawenqiao/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/tinawenqiao/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/tinawenqiao/kafka/contributors",
      "created_at": "2019-04-22T12:30:06Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/tinawenqiao/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/tinawenqiao/kafka/downloads",
      "events_url": "https://api.github.com/repos/tinawenqiao/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/tinawenqiao/kafka/forks",
      "full_name": "tinawenqiao/kafka",
      "git_commits_url": "https://api.github.com/repos/tinawenqiao/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/tinawenqiao/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/tinawenqiao/kafka/git/tags{/sha}",
      "git_url": "git://github.com/tinawenqiao/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/tinawenqiao/kafka/hooks",
      "html_url": "https://github.com/tinawenqiao/kafka",
      "id": 182782283,
      "issue_comment_url": "https://api.github.com/repos/tinawenqiao/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/tinawenqiao/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/tinawenqiao/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/tinawenqiao/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/tinawenqiao/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/tinawenqiao/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/tinawenqiao/kafka/merges",
      "milestones_url": "https://api.github.com/repos/tinawenqiao/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxODI3ODIyODM=",
      "notifications_url": "https://api.github.com/repos/tinawenqiao/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/15771296?v=4",
        "events_url": "https://api.github.com/users/tinawenqiao/events{/privacy}",
        "followers_url": "https://api.github.com/users/tinawenqiao/followers",
        "following_url": "https://api.github.com/users/tinawenqiao/following{/other_user}",
        "gists_url": "https://api.github.com/users/tinawenqiao/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/tinawenqiao",
        "id": 15771296,
        "login": "tinawenqiao",
        "node_id": "MDQ6VXNlcjE1NzcxMjk2",
        "organizations_url": "https://api.github.com/users/tinawenqiao/orgs",
        "received_events_url": "https://api.github.com/users/tinawenqiao/received_events",
        "repos_url": "https://api.github.com/users/tinawenqiao/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/tinawenqiao/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tinawenqiao/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/tinawenqiao"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/tinawenqiao/kafka/pulls{/number}",
      "pushed_at": "2020-08-31T21:52:59Z",
      "releases_url": "https://api.github.com/repos/tinawenqiao/kafka/releases{/id}",
      "size": 81931,
      "ssh_url": "git@github.com:tinawenqiao/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/tinawenqiao/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/tinawenqiao/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/tinawenqiao/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/tinawenqiao/kafka/subscription",
      "svn_url": "https://github.com/tinawenqiao/kafka",
      "tags_url": "https://api.github.com/repos/tinawenqiao/kafka/tags",
      "teams_url": "https://api.github.com/repos/tinawenqiao/kafka/teams",
      "trees_url": "https://api.github.com/repos/tinawenqiao/kafka/git/trees{/sha}",
      "updated_at": "2019-04-22T12:30:19Z",
      "url": "https://api.github.com/repos/tinawenqiao/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "e390183ba1b15a31833bff0c851b93e158983afb",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/15771296?v=4",
      "events_url": "https://api.github.com/users/tinawenqiao/events{/privacy}",
      "followers_url": "https://api.github.com/users/tinawenqiao/followers",
      "following_url": "https://api.github.com/users/tinawenqiao/following{/other_user}",
      "gists_url": "https://api.github.com/users/tinawenqiao/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/tinawenqiao",
      "id": 15771296,
      "login": "tinawenqiao",
      "node_id": "MDQ6VXNlcjE1NzcxMjk2",
      "organizations_url": "https://api.github.com/users/tinawenqiao/orgs",
      "received_events_url": "https://api.github.com/users/tinawenqiao/received_events",
      "repos_url": "https://api.github.com/users/tinawenqiao/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/tinawenqiao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tinawenqiao/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/tinawenqiao"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9235",
  "id": 476562592,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9235",
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "",
      "id": 851037639,
      "name": "connect",
      "node_id": "MDU6TGFiZWw4NTEwMzc2Mzk=",
      "url": "https://api.github.com/repos/apache/kafka/labels/connect"
    }
  ],
  "locked": false,
  "merge_commit_sha": "489572954d1d1004b44535e685acdbb32bff7e64",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDc2NTYyNTky",
  "number": 9235,
  "patch_url": "https://github.com/apache/kafka/pull/9235.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9235/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/e390183ba1b15a31833bff0c851b93e158983afb",
  "title": "KAFKA-10449: Add some important parameter desc in connect-distributed.properties",
  "updated_at": "2020-10-22T06:11:32Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9235",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/15771296?v=4",
    "events_url": "https://api.github.com/users/tinawenqiao/events{/privacy}",
    "followers_url": "https://api.github.com/users/tinawenqiao/followers",
    "following_url": "https://api.github.com/users/tinawenqiao/following{/other_user}",
    "gists_url": "https://api.github.com/users/tinawenqiao/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/tinawenqiao",
    "id": 15771296,
    "login": "tinawenqiao",
    "node_id": "MDQ6VXNlcjE1NzcxMjk2",
    "organizations_url": "https://api.github.com/users/tinawenqiao/orgs",
    "received_events_url": "https://api.github.com/users/tinawenqiao/received_events",
    "repos_url": "https://api.github.com/users/tinawenqiao/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/tinawenqiao/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tinawenqiao/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/tinawenqiao"
  }
}
json_root is_array: false
json_root is_object: true
number: 9235
url: https://api.github.com/repos/apache/kafka/pulls/9235
title: KAFKA-10449: Add some important parameter desc in connect-distributed.properties
body: …rties.

*More detailed description of your change,
if necessary. The PR title and PR message become
the squashed commit message, so use a separate
comment to ping reviewers.*

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9235/comments
pull_request_number: 9235
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9229/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9229/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9229"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9229"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9229/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9229"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/f9ea4155778397b1847d74259597d211078c53ab"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "9da32b6bd014f1bdeeee5da8fcd00995a5916323",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Use a caching BufferSupplier per request handler thread so that\r\ndecompression buffers are cached if supported by the underlying\r\nCompressionType. This reduces allocations significantly for LZ4 when the\r\nnumber of partitions is high. The decompression buffer size is typically\r\n64 KB, so a produce request with 1000 partitions results in 64 MB of\r\nallocations even if each produce batch is small (likely, when there are\r\nso many partitions).\r\n\r\nI did a quick producer perf local test with 5000 partitions, 1 KB record\r\nsize,\r\n1 broker, lz4 and ~0.5 for the producer compression rate metric:\r\n\r\nBefore this change:\r\n> 20000000 records sent, 346314.349535 records/sec (330.27 MB/sec),\r\n148.33 ms avg latency, 2267.00 ms max latency, 115 ms 50th, 383 ms 95th, 777 ms 99th, 1514 ms 99.9th.\r\n\r\nAfter this change:\r\n> 20000000 records sent, 431956.113259 records/sec (411.95 MB/sec),\r\n117.79 ms avg latency, 1219.00 ms max latency, 99 ms 50th, 295 ms 95th, 440 ms 99th, 662 ms 99.9th.\r\n\r\nThat's a 25% throughput improvement and p999 latency was reduced to\r\nunder half (in this test).\r\n\r\nTODO: Remove default arguments\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9229/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9229/commits",
  "created_at": "2020-08-29T20:14:29Z",
  "diff_url": "https://github.com/apache/kafka/pull/9229.diff",
  "draft": true,
  "head": {
    "label": "ijuma:reduce-produce-allocations-lz4",
    "ref": "reduce-produce-allocations-lz4",
    "repo": {
      "archive_url": "https://api.github.com/repos/ijuma/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/ijuma/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/ijuma/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/ijuma/kafka/branches{/branch}",
      "clone_url": "https://github.com/ijuma/kafka.git",
      "collaborators_url": "https://api.github.com/repos/ijuma/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/ijuma/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/ijuma/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/ijuma/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/ijuma/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/ijuma/kafka/contributors",
      "created_at": "2015-03-21T19:33:59Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/ijuma/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/ijuma/kafka/downloads",
      "events_url": "https://api.github.com/repos/ijuma/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/ijuma/kafka/forks",
      "full_name": "ijuma/kafka",
      "git_commits_url": "https://api.github.com/repos/ijuma/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/ijuma/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/ijuma/kafka/git/tags{/sha}",
      "git_url": "git://github.com/ijuma/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/ijuma/kafka/hooks",
      "html_url": "https://github.com/ijuma/kafka",
      "id": 32646946,
      "issue_comment_url": "https://api.github.com/repos/ijuma/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/ijuma/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/ijuma/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/ijuma/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/ijuma/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/ijuma/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/ijuma/kafka/merges",
      "milestones_url": "https://api.github.com/repos/ijuma/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkzMjY0Njk0Ng==",
      "notifications_url": "https://api.github.com/repos/ijuma/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/24747?v=4",
        "events_url": "https://api.github.com/users/ijuma/events{/privacy}",
        "followers_url": "https://api.github.com/users/ijuma/followers",
        "following_url": "https://api.github.com/users/ijuma/following{/other_user}",
        "gists_url": "https://api.github.com/users/ijuma/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ijuma",
        "id": 24747,
        "login": "ijuma",
        "node_id": "MDQ6VXNlcjI0NzQ3",
        "organizations_url": "https://api.github.com/users/ijuma/orgs",
        "received_events_url": "https://api.github.com/users/ijuma/received_events",
        "repos_url": "https://api.github.com/users/ijuma/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ijuma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ijuma/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ijuma"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/ijuma/kafka/pulls{/number}",
      "pushed_at": "2020-10-22T21:52:28Z",
      "releases_url": "https://api.github.com/repos/ijuma/kafka/releases{/id}",
      "size": 101835,
      "ssh_url": "git@github.com:ijuma/kafka.git",
      "stargazers_count": 1,
      "stargazers_url": "https://api.github.com/repos/ijuma/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/ijuma/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/ijuma/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/ijuma/kafka/subscription",
      "svn_url": "https://github.com/ijuma/kafka",
      "tags_url": "https://api.github.com/repos/ijuma/kafka/tags",
      "teams_url": "https://api.github.com/repos/ijuma/kafka/teams",
      "trees_url": "https://api.github.com/repos/ijuma/kafka/git/trees{/sha}",
      "updated_at": "2020-03-09T04:23:40Z",
      "url": "https://api.github.com/repos/ijuma/kafka",
      "watchers": 1,
      "watchers_count": 1
    },
    "sha": "f9ea4155778397b1847d74259597d211078c53ab",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/24747?v=4",
      "events_url": "https://api.github.com/users/ijuma/events{/privacy}",
      "followers_url": "https://api.github.com/users/ijuma/followers",
      "following_url": "https://api.github.com/users/ijuma/following{/other_user}",
      "gists_url": "https://api.github.com/users/ijuma/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ijuma",
      "id": 24747,
      "login": "ijuma",
      "node_id": "MDQ6VXNlcjI0NzQ3",
      "organizations_url": "https://api.github.com/users/ijuma/orgs",
      "received_events_url": "https://api.github.com/users/ijuma/received_events",
      "repos_url": "https://api.github.com/users/ijuma/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ijuma/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ijuma/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ijuma"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9229",
  "id": 475823658,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9229",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "0068d50bdee376c29f0c1afa03cecd23e968d28e",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDc1ODIzNjU4",
  "number": 9229,
  "patch_url": "https://github.com/apache/kafka/pull/9229.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9229/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/f9ea4155778397b1847d74259597d211078c53ab",
  "title": "MINOR: Reduce allocations in requests via buffer caching",
  "updated_at": "2020-09-19T11:04:16Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9229",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/24747?v=4",
    "events_url": "https://api.github.com/users/ijuma/events{/privacy}",
    "followers_url": "https://api.github.com/users/ijuma/followers",
    "following_url": "https://api.github.com/users/ijuma/following{/other_user}",
    "gists_url": "https://api.github.com/users/ijuma/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ijuma",
    "id": 24747,
    "login": "ijuma",
    "node_id": "MDQ6VXNlcjI0NzQ3",
    "organizations_url": "https://api.github.com/users/ijuma/orgs",
    "received_events_url": "https://api.github.com/users/ijuma/received_events",
    "repos_url": "https://api.github.com/users/ijuma/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ijuma/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ijuma/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ijuma"
  }
}
json_root is_array: false
json_root is_object: true
number: 9229
url: https://api.github.com/repos/apache/kafka/pulls/9229
title: MINOR: Reduce allocations in requests via buffer caching
body: Use a caching BufferSupplier per request handler thread so that
decompression buffers are cached if supported by the underlying
CompressionType. This reduces allocations significantly for LZ4 when the
number of partitions is high. The decompression buffer size is typically
64 KB, so a produce request with 1000 partitions results in 64 MB of
allocations even if each produce batch is small (likely, when there are
so many partitions).

I did a quick producer perf local test with 5000 partitions, 1 KB record
size,
1 broker, lz4 and ~0.5 for the producer compression rate metric:

Before this change:
> 20000000 records sent, 346314.349535 records/sec (330.27 MB/sec),
148.33 ms avg latency, 2267.00 ms max latency, 115 ms 50th, 383 ms 95th, 777 ms 99th, 1514 ms 99.9th.

After this change:
> 20000000 records sent, 431956.113259 records/sec (411.95 MB/sec),
117.79 ms avg latency, 1219.00 ms max latency, 99 ms 50th, 295 ms 95th, 440 ms 99th, 662 ms 99.9th.

That's a 25% throughput improvement and p999 latency was reduced to
under half (in this test).

TODO: Remove default arguments

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9229/comments
pull_request_number: 9229
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9228/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9228/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9228"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9228"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9228/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9228"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/ca8f526037e54dcc057dc452d133da22d38e5b03"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "9da32b6bd014f1bdeeee5da8fcd00995a5916323",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "[KIP-666](https://cwiki.apache.org/confluence/display/KAFKA/KIP-666%3A+Add+Instant-based+methods+to+ReadOnlySessionStore) proposal\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9228/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9228/commits",
  "created_at": "2020-08-29T16:25:05Z",
  "diff_url": "https://github.com/apache/kafka/pull/9228.diff",
  "draft": false,
  "head": {
    "label": "jeqo:align-sessionstore",
    "ref": "align-sessionstore",
    "repo": {
      "archive_url": "https://api.github.com/repos/jeqo/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/jeqo/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/jeqo/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/jeqo/kafka/branches{/branch}",
      "clone_url": "https://github.com/jeqo/kafka.git",
      "collaborators_url": "https://api.github.com/repos/jeqo/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/jeqo/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/jeqo/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/jeqo/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/jeqo/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/jeqo/kafka/contributors",
      "created_at": "2017-02-02T10:33:25Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/jeqo/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/jeqo/kafka/downloads",
      "events_url": "https://api.github.com/repos/jeqo/kafka/events",
      "fork": true,
      "forks": 1,
      "forks_count": 1,
      "forks_url": "https://api.github.com/repos/jeqo/kafka/forks",
      "full_name": "jeqo/kafka",
      "git_commits_url": "https://api.github.com/repos/jeqo/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/jeqo/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/jeqo/kafka/git/tags{/sha}",
      "git_url": "git://github.com/jeqo/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/jeqo/kafka/hooks",
      "html_url": "https://github.com/jeqo/kafka",
      "id": 80715060,
      "issue_comment_url": "https://api.github.com/repos/jeqo/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/jeqo/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/jeqo/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/jeqo/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/jeqo/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/jeqo/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/jeqo/kafka/merges",
      "milestones_url": "https://api.github.com/repos/jeqo/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk4MDcxNTA2MA==",
      "notifications_url": "https://api.github.com/repos/jeqo/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/6180701?v=4",
        "events_url": "https://api.github.com/users/jeqo/events{/privacy}",
        "followers_url": "https://api.github.com/users/jeqo/followers",
        "following_url": "https://api.github.com/users/jeqo/following{/other_user}",
        "gists_url": "https://api.github.com/users/jeqo/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/jeqo",
        "id": 6180701,
        "login": "jeqo",
        "node_id": "MDQ6VXNlcjYxODA3MDE=",
        "organizations_url": "https://api.github.com/users/jeqo/orgs",
        "received_events_url": "https://api.github.com/users/jeqo/received_events",
        "repos_url": "https://api.github.com/users/jeqo/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/jeqo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jeqo/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/jeqo"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/jeqo/kafka/pulls{/number}",
      "pushed_at": "2020-10-08T04:16:41Z",
      "releases_url": "https://api.github.com/repos/jeqo/kafka/releases{/id}",
      "size": 99174,
      "ssh_url": "git@github.com:jeqo/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/jeqo/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/jeqo/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/jeqo/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/jeqo/kafka/subscription",
      "svn_url": "https://github.com/jeqo/kafka",
      "tags_url": "https://api.github.com/repos/jeqo/kafka/tags",
      "teams_url": "https://api.github.com/repos/jeqo/kafka/teams",
      "trees_url": "https://api.github.com/repos/jeqo/kafka/git/trees{/sha}",
      "updated_at": "2018-06-02T10:54:03Z",
      "url": "https://api.github.com/repos/jeqo/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "ca8f526037e54dcc057dc452d133da22d38e5b03",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/6180701?v=4",
      "events_url": "https://api.github.com/users/jeqo/events{/privacy}",
      "followers_url": "https://api.github.com/users/jeqo/followers",
      "following_url": "https://api.github.com/users/jeqo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jeqo/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jeqo",
      "id": 6180701,
      "login": "jeqo",
      "node_id": "MDQ6VXNlcjYxODA3MDE=",
      "organizations_url": "https://api.github.com/users/jeqo/orgs",
      "received_events_url": "https://api.github.com/users/jeqo/received_events",
      "repos_url": "https://api.github.com/users/jeqo/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jeqo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jeqo/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jeqo"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9228",
  "id": 475798156,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9228",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "76f10692fd0736c5a6f8e9e4c240244db4cb280c",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDc1Nzk4MTU2",
  "number": 9228,
  "patch_url": "https://github.com/apache/kafka/pull/9228.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9228/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/ca8f526037e54dcc057dc452d133da22d38e5b03",
  "title": "KAFKA-10445: Align IQ SessionStore API with Instant-based methods as ReadOnlyWindowStore",
  "updated_at": "2020-10-07T14:22:34Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9228",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/6180701?v=4",
    "events_url": "https://api.github.com/users/jeqo/events{/privacy}",
    "followers_url": "https://api.github.com/users/jeqo/followers",
    "following_url": "https://api.github.com/users/jeqo/following{/other_user}",
    "gists_url": "https://api.github.com/users/jeqo/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/jeqo",
    "id": 6180701,
    "login": "jeqo",
    "node_id": "MDQ6VXNlcjYxODA3MDE=",
    "organizations_url": "https://api.github.com/users/jeqo/orgs",
    "received_events_url": "https://api.github.com/users/jeqo/received_events",
    "repos_url": "https://api.github.com/users/jeqo/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/jeqo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jeqo/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/jeqo"
  }
}
json_root is_array: false
json_root is_object: true
number: 9228
url: https://api.github.com/repos/apache/kafka/pulls/9228
title: KAFKA-10445: Align IQ SessionStore API with Instant-based methods as ReadOnlyWindowStore
body: [KIP-666](https://cwiki.apache.org/confluence/display/KAFKA/KIP-666%3A+Add+Instant-based+methods+to+ReadOnlySessionStore) proposal

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9228/comments
pull_request_number: 9228
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9225/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9225/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9225"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9225"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9225/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9225"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/45851303cc1b603aba1c557ce251c03914738d68"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "a73bf5931aaf1510f0efa86bc7d61ff8aab046c2",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "https://issues.apache.org/jira/browse/KAFKA-10431\r\n\r\nCurrently, ProducerPerformance randomly selects a payload from the payload file when sending message. This might cause the some payloads being selected more times than others. It's better to do sequential selection of payloads.\r\n\r\n*More detailed description of your change,\r\nif necessary. The PR title and PR message become\r\nthe squashed commit message, so use a separate\r\ncomment to ping reviewers.*\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9225/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9225/commits",
  "created_at": "2020-08-27T08:19:42Z",
  "diff_url": "https://github.com/apache/kafka/pull/9225.diff",
  "draft": false,
  "head": {
    "label": "huxihx:KAFKA-10431",
    "ref": "KAFKA-10431",
    "repo": {
      "archive_url": "https://api.github.com/repos/huxihx/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/huxihx/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/huxihx/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/huxihx/kafka/branches{/branch}",
      "clone_url": "https://github.com/huxihx/kafka.git",
      "collaborators_url": "https://api.github.com/repos/huxihx/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/huxihx/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/huxihx/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/huxihx/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/huxihx/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/huxihx/kafka/contributors",
      "created_at": "2017-04-24T06:37:14Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/huxihx/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/huxihx/kafka/downloads",
      "events_url": "https://api.github.com/repos/huxihx/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/huxihx/kafka/forks",
      "full_name": "huxihx/kafka",
      "git_commits_url": "https://api.github.com/repos/huxihx/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/huxihx/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/huxihx/kafka/git/tags{/sha}",
      "git_url": "git://github.com/huxihx/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/huxihx/kafka/hooks",
      "html_url": "https://github.com/huxihx/kafka",
      "id": 89205955,
      "issue_comment_url": "https://api.github.com/repos/huxihx/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/huxihx/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/huxihx/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/huxihx/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/huxihx/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/huxihx/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/huxihx/kafka/merges",
      "milestones_url": "https://api.github.com/repos/huxihx/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnk4OTIwNTk1NQ==",
      "notifications_url": "https://api.github.com/repos/huxihx/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/11549429?v=4",
        "events_url": "https://api.github.com/users/huxihx/events{/privacy}",
        "followers_url": "https://api.github.com/users/huxihx/followers",
        "following_url": "https://api.github.com/users/huxihx/following{/other_user}",
        "gists_url": "https://api.github.com/users/huxihx/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/huxihx",
        "id": 11549429,
        "login": "huxihx",
        "node_id": "MDQ6VXNlcjExNTQ5NDI5",
        "organizations_url": "https://api.github.com/users/huxihx/orgs",
        "received_events_url": "https://api.github.com/users/huxihx/received_events",
        "repos_url": "https://api.github.com/users/huxihx/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/huxihx/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/huxihx/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/huxihx"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/huxihx/kafka/pulls{/number}",
      "pushed_at": "2020-10-27T11:13:49Z",
      "releases_url": "https://api.github.com/repos/huxihx/kafka/releases{/id}",
      "size": 102688,
      "ssh_url": "git@github.com:huxihx/kafka.git",
      "stargazers_count": 3,
      "stargazers_url": "https://api.github.com/repos/huxihx/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/huxihx/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/huxihx/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/huxihx/kafka/subscription",
      "svn_url": "https://github.com/huxihx/kafka",
      "tags_url": "https://api.github.com/repos/huxihx/kafka/tags",
      "teams_url": "https://api.github.com/repos/huxihx/kafka/teams",
      "trees_url": "https://api.github.com/repos/huxihx/kafka/git/trees{/sha}",
      "updated_at": "2020-10-27T11:14:05Z",
      "url": "https://api.github.com/repos/huxihx/kafka",
      "watchers": 3,
      "watchers_count": 3
    },
    "sha": "45851303cc1b603aba1c557ce251c03914738d68",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/11549429?v=4",
      "events_url": "https://api.github.com/users/huxihx/events{/privacy}",
      "followers_url": "https://api.github.com/users/huxihx/followers",
      "following_url": "https://api.github.com/users/huxihx/following{/other_user}",
      "gists_url": "https://api.github.com/users/huxihx/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/huxihx",
      "id": 11549429,
      "login": "huxihx",
      "node_id": "MDQ6VXNlcjExNTQ5NDI5",
      "organizations_url": "https://api.github.com/users/huxihx/orgs",
      "received_events_url": "https://api.github.com/users/huxihx/received_events",
      "repos_url": "https://api.github.com/users/huxihx/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/huxihx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/huxihx/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/huxihx"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9225",
  "id": 474534195,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9225",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "512b3aecd004bb98cb78bd641c91c65c7438323e",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDc0NTM0MTk1",
  "number": 9225,
  "patch_url": "https://github.com/apache/kafka/pull/9225.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9225/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/45851303cc1b603aba1c557ce251c03914738d68",
  "title": "KAFKA-10431: Sequential selection of payload in ProducerPerformance",
  "updated_at": "2020-10-12T09:01:09Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9225",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/11549429?v=4",
    "events_url": "https://api.github.com/users/huxihx/events{/privacy}",
    "followers_url": "https://api.github.com/users/huxihx/followers",
    "following_url": "https://api.github.com/users/huxihx/following{/other_user}",
    "gists_url": "https://api.github.com/users/huxihx/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/huxihx",
    "id": 11549429,
    "login": "huxihx",
    "node_id": "MDQ6VXNlcjExNTQ5NDI5",
    "organizations_url": "https://api.github.com/users/huxihx/orgs",
    "received_events_url": "https://api.github.com/users/huxihx/received_events",
    "repos_url": "https://api.github.com/users/huxihx/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/huxihx/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/huxihx/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/huxihx"
  }
}
json_root is_array: false
json_root is_object: true
number: 9225
url: https://api.github.com/repos/apache/kafka/pulls/9225
title: KAFKA-10431: Sequential selection of payload in ProducerPerformance
body: https://issues.apache.org/jira/browse/KAFKA-10431

Currently, ProducerPerformance randomly selects a payload from the payload file when sending message. This might cause the some payloads being selected more times than others. It's better to do sequential selection of payloads.

*More detailed description of your change,
if necessary. The PR title and PR message become
the squashed commit message, so use a separate
comment to ping reviewers.*

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9225/comments
pull_request_number: 9225
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9224/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9224/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9224"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9224"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9224/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9224"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/4e7d62c9e44e092247397ddaf0d865fe60e50a99"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "94820ca652aceccef5f617e6ca139d139fa25a1b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "The main proposals of this PR:\r\n(1) extract the common functions into a base class `MirrorConnectorsIntegrationBaseTest`\r\n(2) add test for broker restart case with higher workload\r\n(3) try to address [some concerns](https://github.com/apache/kafka/pull/9029#issuecomment-663094946) from previous PR (e.g. \"at least once\" semantic)\r\n(4) test in SSL-enabled cluster\r\n\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9224/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9224/commits",
  "created_at": "2020-08-26T17:20:07Z",
  "diff_url": "https://github.com/apache/kafka/pull/9224.diff",
  "draft": false,
  "head": {
    "label": "ning2008wisc:kafka-10304",
    "ref": "kafka-10304",
    "repo": {
      "archive_url": "https://api.github.com/repos/ning2008wisc/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/ning2008wisc/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/ning2008wisc/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/ning2008wisc/kafka/branches{/branch}",
      "clone_url": "https://github.com/ning2008wisc/kafka.git",
      "collaborators_url": "https://api.github.com/repos/ning2008wisc/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/ning2008wisc/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/ning2008wisc/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/ning2008wisc/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/ning2008wisc/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/ning2008wisc/kafka/contributors",
      "created_at": "2020-08-07T16:36:54Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/ning2008wisc/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/ning2008wisc/kafka/downloads",
      "events_url": "https://api.github.com/repos/ning2008wisc/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/ning2008wisc/kafka/forks",
      "full_name": "ning2008wisc/kafka",
      "git_commits_url": "https://api.github.com/repos/ning2008wisc/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/ning2008wisc/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/ning2008wisc/kafka/git/tags{/sha}",
      "git_url": "git://github.com/ning2008wisc/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/ning2008wisc/kafka/hooks",
      "html_url": "https://github.com/ning2008wisc/kafka",
      "id": 285876041,
      "issue_comment_url": "https://api.github.com/repos/ning2008wisc/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/ning2008wisc/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/ning2008wisc/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/ning2008wisc/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/ning2008wisc/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/ning2008wisc/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/ning2008wisc/kafka/merges",
      "milestones_url": "https://api.github.com/repos/ning2008wisc/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyODU4NzYwNDE=",
      "notifications_url": "https://api.github.com/repos/ning2008wisc/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/32080381?v=4",
        "events_url": "https://api.github.com/users/ning2008wisc/events{/privacy}",
        "followers_url": "https://api.github.com/users/ning2008wisc/followers",
        "following_url": "https://api.github.com/users/ning2008wisc/following{/other_user}",
        "gists_url": "https://api.github.com/users/ning2008wisc/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/ning2008wisc",
        "id": 32080381,
        "login": "ning2008wisc",
        "node_id": "MDQ6VXNlcjMyMDgwMzgx",
        "organizations_url": "https://api.github.com/users/ning2008wisc/orgs",
        "received_events_url": "https://api.github.com/users/ning2008wisc/received_events",
        "repos_url": "https://api.github.com/users/ning2008wisc/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/ning2008wisc/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ning2008wisc/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/ning2008wisc"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/ning2008wisc/kafka/pulls{/number}",
      "pushed_at": "2020-10-23T06:09:47Z",
      "releases_url": "https://api.github.com/repos/ning2008wisc/kafka/releases{/id}",
      "size": 107417,
      "ssh_url": "git@github.com:ning2008wisc/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/ning2008wisc/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/ning2008wisc/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/ning2008wisc/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/ning2008wisc/kafka/subscription",
      "svn_url": "https://github.com/ning2008wisc/kafka",
      "tags_url": "https://api.github.com/repos/ning2008wisc/kafka/tags",
      "teams_url": "https://api.github.com/repos/ning2008wisc/kafka/teams",
      "trees_url": "https://api.github.com/repos/ning2008wisc/kafka/git/trees{/sha}",
      "updated_at": "2020-10-17T07:34:53Z",
      "url": "https://api.github.com/repos/ning2008wisc/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "4e7d62c9e44e092247397ddaf0d865fe60e50a99",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/32080381?v=4",
      "events_url": "https://api.github.com/users/ning2008wisc/events{/privacy}",
      "followers_url": "https://api.github.com/users/ning2008wisc/followers",
      "following_url": "https://api.github.com/users/ning2008wisc/following{/other_user}",
      "gists_url": "https://api.github.com/users/ning2008wisc/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ning2008wisc",
      "id": 32080381,
      "login": "ning2008wisc",
      "node_id": "MDQ6VXNlcjMyMDgwMzgx",
      "organizations_url": "https://api.github.com/users/ning2008wisc/orgs",
      "received_events_url": "https://api.github.com/users/ning2008wisc/received_events",
      "repos_url": "https://api.github.com/users/ning2008wisc/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ning2008wisc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ning2008wisc/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ning2008wisc"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9224",
  "id": 474046854,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9224",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "cd12ecc0af68abdb3fd2f701ecb8afa149baaaee",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDc0MDQ2ODU0",
  "number": 9224,
  "patch_url": "https://github.com/apache/kafka/pull/9224.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9224/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/4e7d62c9e44e092247397ddaf0d865fe60e50a99",
  "title": "KAFKA-10304: refactor MM2 integration tests",
  "updated_at": "2020-10-23T06:31:26Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9224",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/32080381?v=4",
    "events_url": "https://api.github.com/users/ning2008wisc/events{/privacy}",
    "followers_url": "https://api.github.com/users/ning2008wisc/followers",
    "following_url": "https://api.github.com/users/ning2008wisc/following{/other_user}",
    "gists_url": "https://api.github.com/users/ning2008wisc/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/ning2008wisc",
    "id": 32080381,
    "login": "ning2008wisc",
    "node_id": "MDQ6VXNlcjMyMDgwMzgx",
    "organizations_url": "https://api.github.com/users/ning2008wisc/orgs",
    "received_events_url": "https://api.github.com/users/ning2008wisc/received_events",
    "repos_url": "https://api.github.com/users/ning2008wisc/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/ning2008wisc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ning2008wisc/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/ning2008wisc"
  }
}
json_root is_array: false
json_root is_object: true
number: 9224
url: https://api.github.com/repos/apache/kafka/pulls/9224
title: KAFKA-10304: refactor MM2 integration tests
body: The main proposals of this PR:
(1) extract the common functions into a base class `MirrorConnectorsIntegrationBaseTest`
(2) add test for broker restart case with higher workload
(3) try to address [some concerns](https://github.com/apache/kafka/pull/9029#issuecomment-663094946) from previous PR (e.g. "at least once" semantic)
(4) test in SSL-enabled cluster


review_comments: https://api.github.com/repos/apache/kafka/pulls/9224/comments
id: 485337316
url: https://api.github.com/repos/apache/kafka/pulls/comments/485337316
body: propose `TestUtils` to be the central place to host common functions that will be used by integration tests 
diff_hunk: @@ -16,12 +16,51 @@
  */
 package org.apache.kafka.connect.mirror;
 
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.admin.Config;
+import org.apache.kafka.clients.admin.ConfigEntry;
+import org.apache.kafka.clients.admin.DescribeConfigsResult;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.common.config.ConfigResource;
+import org.apache.kafka.connect.util.clusters.EmbeddedConnectCluster;
+import org.apache.kafka.connect.util.clusters.EmbeddedKafkaCluster;
+
+import static org.apache.kafka.connect.mirror.TestUtils.NUM_WORKERS;
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import static org.apache.kafka.connect.util.clusters.EmbeddedConnectClusterAssertions.CONNECTOR_SETUP_DURATION_MS;
+import static org.junit.Assert.assertTrue;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class TestUtils {
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/TestUtils.java
html: https://github.com/apache/kafka/pull/9224#discussion_r485337316
id: 485337705
url: https://api.github.com/repos/apache/kafka/pulls/comments/485337705
body: This is the simple move from `MirrorConnectorsIntegrationTest` with generalization of connector class
diff_hunk: @@ -32,4 +71,141 @@
         }
         return props;
     }
+    
+    public static void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster, List<Class> mirrorClasses,
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/TestUtils.java
html: https://github.com/apache/kafka/pull/9224#discussion_r485337705
id: 485361003
url: https://api.github.com/repos/apache/kafka/pulls/comments/485361003
body: this is mostly copy-paste from `MirrorConnectorsIntegrationTest`
diff_hunk: @@ -32,4 +73,166 @@
         }
         return props;
     }
+    
+    /*
+     * launch the connectors on kafka connect cluster, then check if they are running
+     */
+    public static void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster, List<Class> connectorClasses,
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/TestUtils.java
html: https://github.com/apache/kafka/pull/9224#discussion_r485361003
id: 485362458
url: https://api.github.com/repos/apache/kafka/pulls/comments/485362458
body: Add a check for topic config sync, since the topic created on primary cluster has a "cleanup.policy" config
diff_hunk: @@ -207,13 +173,16 @@ public void testReplication() throws InterruptedException {
 
         mm2Config = new MirrorMakerConfig(mm2Props);
 
-        waitUntilMirrorMakerIsRunning(backup, mm2Config, "primary", "backup");
+        waitUntilMirrorMakerIsRunning(backup, CONNECTOR_LIST, mm2Config, "primary", "backup");
 
-        waitUntilMirrorMakerIsRunning(primary, mm2Config, "backup", "primary");
+        waitUntilMirrorMakerIsRunning(primary, CONNECTOR_LIST, mm2Config, "backup", "primary");   
 
         MirrorClient primaryClient = new MirrorClient(mm2Config.clientConfig("primary"));
         MirrorClient backupClient = new MirrorClient(mm2Config.clientConfig("backup"));
-
+        
+        assertEquals("topic config was not synced", TopicConfig.CLEANUP_POLICY_COMPACT, 
+                getTopicConfig(backup.kafka(), "primary.test-topic-1", TopicConfig.CLEANUP_POLICY_CONFIG));
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r485362458
id: 485363204
url: https://api.github.com/repos/apache/kafka/pulls/comments/485363204
body: when creating `test-topic-1` topic on primary cluster, add a topic config. Later on, we will check if the config is synced from primary to backup cluster.
diff_hunk: @@ -396,27 +330,67 @@ public void testOneWayReplicationWithAutoOffsetSync() throws InterruptedExceptio
         try (Consumer<byte[], byte[]> consumer1 = primary.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(
             "group.id", "consumer-group-1"), "test-topic-2")) {
             // we need to wait for consuming all the records for MM2 replicating the expected offsets
-            waitForConsumingAllRecords(consumer1);
+            waitForConsumingAllRecords(consumer1, NUM_RECORDS_PRODUCED);
         }
 
         // create a consumer at backup cluster with same consumer group Id to consume old and new topic
         consumer = backup.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(
             "group.id", "consumer-group-1"), "primary.test-topic-1", "primary.test-topic-2");
 
-        waitForConsumerGroupOffsetSync(consumer, Arrays.asList("primary.test-topic-1", "primary.test-topic-2"), "consumer-group-1");
+        waitForConsumerGroupOffsetSync(backup, consumer, Arrays.asList("primary.test-topic-1", "primary.test-topic-2"), 
+            "consumer-group-1", NUM_RECORDS_PRODUCED);
 
         records = consumer.poll(Duration.ofMillis(500));
         // similar reasoning as above, no more records to consume by the same consumer group at backup cluster
         assertEquals("consumer record size is not zero", 0, records.count());
         consumer.close();
-
     }
+    
+    @Test
+    public void testWithBrokerRestart() throws InterruptedException {
+        // test with a higher number of records
+        int numRecords = NUM_RECORDS_PRODUCED * 100;
+        
+        produceRecords(Arrays.asList(primary), Arrays.asList("test-topic-1"), numRecords);
 
-    private void deleteAllTopics(EmbeddedKafkaCluster cluster) {
-        Admin client = cluster.createAdminClient();
-        try {
-            client.deleteTopics(client.listTopics().names().get());
-        } catch (Throwable e) {
-        }
+        // one way replication from primary to backup
+        mm2Props.put("backup->primary.enabled", "false");
+        mm2Config = new MirrorMakerConfig(mm2Props);
+       
+        waitUntilMirrorMakerIsRunning(backup, SOURCE_CONNECTOR, mm2Config, "primary", "backup");
+        
+        // have to sleep a little for MM to be ready for the following the kafka broker restart
+        Thread.sleep(TimeUnit.SECONDS.toMillis(1));
+
+        // restart kafka broker at backup cluster
+        restartKafkaBroker(backup);
+        
+        Consumer<byte[], byte[]> consumer = backup.kafka().createConsumerAndSubscribeTo(
+                Collections.singletonMap("group.id", "consumer-group-1"), "primary.test-topic-1");
+        // verify the consumption equals to produce
+        waitForConsumingAllRecords(consumer, numRecords);
+        consumer.commitAsync();
+        
+        // produce another set of records
+        produceRecords(Arrays.asList(primary), Arrays.asList("test-topic-1"), numRecords);
+        // restart kafka broker at primary cluster
+        restartKafkaBroker(primary);
+        // verify the consumption equals to produce
+        waitForConsumingAllRecords(consumer, numRecords);
+        
+        consumer.close();
+    }
+    
+    void createTopics() {
+        // to verify topic config will be sync-ed across clusters
+        Map<String, String> topicConfig = new HashMap<>();
+        topicConfig.put(TopicConfig.CLEANUP_POLICY_CONFIG, TopicConfig.CLEANUP_POLICY_COMPACT);
+        // create these topics before starting the connectors so we don't need to wait for discovery
+        primary.kafka().createTopic("test-topic-1", NUM_PARTITIONS, 1, topicConfig);
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r485363204
id: 510011670
url: https://api.github.com/repos/apache/kafka/pulls/comments/510011670
body: We can remove this
diff_hunk: @@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.CommonClientConfigs;
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.admin.Config;
+import org.apache.kafka.clients.admin.ConfigEntry;
+import org.apache.kafka.clients.admin.DescribeConfigsResult;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerConfig;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.KafkaConsumer;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.ConfigResource;
+import org.apache.kafka.common.config.SslConfigs;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.config.types.Password;
+import org.apache.kafka.common.utils.Exit;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.errors.ConnectException;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.SourceAndTarget;
+import org.apache.kafka.connect.util.clusters.EmbeddedConnectCluster;
+import org.apache.kafka.connect.util.clusters.EmbeddedKafkaCluster;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.experimental.categories.Category;
+
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.connect.mirror.TestUtils.expectedRecords;
+import static org.apache.kafka.connect.util.clusters.EmbeddedConnectClusterAssertions.CONNECTOR_SETUP_DURATION_MS;
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import kafka.server.KafkaConfig$;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+//import org.junit.After;
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510011670
id: 510012101
url: https://api.github.com/repos/apache/kafka/pulls/comments/510012101
body: This can go with the other `org.junit` imports below
diff_hunk: @@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.CommonClientConfigs;
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.admin.Config;
+import org.apache.kafka.clients.admin.ConfigEntry;
+import org.apache.kafka.clients.admin.DescribeConfigsResult;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerConfig;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.KafkaConsumer;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.ConfigResource;
+import org.apache.kafka.common.config.SslConfigs;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.config.types.Password;
+import org.apache.kafka.common.utils.Exit;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.errors.ConnectException;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.SourceAndTarget;
+import org.apache.kafka.connect.util.clusters.EmbeddedConnectCluster;
+import org.apache.kafka.connect.util.clusters.EmbeddedKafkaCluster;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.experimental.categories.Category;
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510012101
id: 510027238
url: https://api.github.com/repos/apache/kafka/pulls/comments/510027238
body: `Iterator`-> `Iterator<ConfigEntry>`
diff_hunk: @@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.CommonClientConfigs;
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.admin.Config;
+import org.apache.kafka.clients.admin.ConfigEntry;
+import org.apache.kafka.clients.admin.DescribeConfigsResult;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerConfig;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.KafkaConsumer;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.ConfigResource;
+import org.apache.kafka.common.config.SslConfigs;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.config.types.Password;
+import org.apache.kafka.common.utils.Exit;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.errors.ConnectException;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.SourceAndTarget;
+import org.apache.kafka.connect.util.clusters.EmbeddedConnectCluster;
+import org.apache.kafka.connect.util.clusters.EmbeddedKafkaCluster;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.experimental.categories.Category;
+
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.connect.mirror.TestUtils.expectedRecords;
+import static org.apache.kafka.connect.util.clusters.EmbeddedConnectClusterAssertions.CONNECTOR_SETUP_DURATION_MS;
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import kafka.server.KafkaConfig$;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+//import org.junit.After;
+
+/**
+ * Common Test functions for MM2 integration tests
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationBaseTest {
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationBaseTest.class);
+    
+    protected static final int NUM_RECORDS_PER_PARTITION = 10;
+    public static final int NUM_PARTITIONS = 10;
+    protected static final int NUM_RECORDS_PRODUCED = NUM_PARTITIONS * NUM_RECORDS_PER_PARTITION;
+    protected static final int RECORD_TRANSFER_DURATION_MS = 30_000;
+    protected static final int CHECKPOINT_DURATION_MS = 20_000;
+    protected static final int RECORD_CONSUME_DURATION_MS = 20_000;
+    protected static final int OFFSET_SYNC_DURATION_MS = 30_000;
+    protected static final int NUM_WORKERS = 3;
+
+    
+    protected Map<String, String> mm2Props;
+    protected MirrorMakerConfig mm2Config; 
+    protected EmbeddedConnectCluster primary;
+    protected EmbeddedConnectCluster backup;
+    
+    private final AtomicBoolean exited = new AtomicBoolean(false);
+    private Properties primaryBrokerProps = new Properties();
+    protected Properties backupBrokerProps = new Properties();
+    private Map<String, String> primaryWorkerProps;
+    private Map<String, String> backupWorkerProps = new HashMap<>();
+    private Properties sslProps = new Properties();
+    
+    private void loadSslPropsFromBrokerConfig() {       
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG));
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ((Password) backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG)).value());
+        sslProps.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, "SSL");
+    }
+    
+    protected void setSslConfig() {
+        // set SSL config for kafka connect worker
+        backupWorkerProps.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        // set SSL config for producer used by source task in MM2
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup.producer." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+    }
+    
+    protected void startClusters() throws InterruptedException {
+        primaryBrokerProps.put("auto.create.topics.enable", "false");
+        backupBrokerProps.put("auto.create.topics.enable", "false");
+        
+        mm2Props = basicMM2Config();
+        
+        // if backup kafka cluster contains ssl config, enable ssl of kafka connect and mm2
+        final Object listeners = backupBrokerProps.get(KafkaConfig$.MODULE$.ListenersProp());
+        if (listeners != null && listeners.toString().contains("SSL")) {
+            loadSslPropsFromBrokerConfig();
+            setSslConfig();
+        }
+
+        mm2Config = new MirrorMakerConfig(mm2Props); 
+        primaryWorkerProps = mm2Config.workerConfig(new SourceAndTarget("backup", "primary"));
+        backupWorkerProps.putAll(mm2Config.workerConfig(new SourceAndTarget("primary", "backup")));
+        
+        primary = new EmbeddedConnectCluster.Builder()
+                .name("primary-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(primaryBrokerProps)
+                .workerProps(primaryWorkerProps)
+                .build();
+
+        backup = new EmbeddedConnectCluster.Builder()
+                .name("backup-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(backupBrokerProps)
+                .workerProps(backupWorkerProps)
+                .build();
+        
+        primary.start();
+        primary.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of primary-connect-cluster did not start in time.");
+        
+        backup.start();
+        backup.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of backup-connect-cluster did not start in time.");
+
+        createTopics();
+ 
+        dummyConsumption();
+        
+        log.info("primary REST service: {}", primary.endpointForResource("connectors"));
+        log.info("backup REST service: {}", backup.endpointForResource("connectors"));
+        log.info("primary brokers: {}", primary.kafka().bootstrapServers());
+        log.info("backup brokers: {}", backup.kafka().bootstrapServers());
+        
+        // now that the brokers are running, we can finish setting up the Connectors
+        mm2Props.put("primary.bootstrap.servers", primary.kafka().bootstrapServers());
+        mm2Props.put("backup.bootstrap.servers", backup.kafka().bootstrapServers());
+        
+        Exit.setExitProcedure((status, errorCode) -> exited.set(true));
+    }
+    
+    public void shutdownClusters() {
+        for (String x : primary.connectors()) {
+            primary.deleteConnector(x);
+        }
+        for (String x : backup.connectors()) {
+            backup.deleteConnector(x);
+        }
+        deleteAllTopics(primary.kafka());
+        deleteAllTopics(backup.kafka());
+        primary.stop();
+        backup.stop();
+        try {
+            assertFalse(exited.get());
+        } finally {
+            Exit.resetExitProcedure();
+        }
+    }
+    /*
+     * launch the connectors on kafka connect cluster and check if they are running
+     */
+    protected static void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster, 
+            List<Class> connectorClasses, MirrorMakerConfig mm2Config, 
+            String primary, String backup) throws InterruptedException {
+        for (int i = 0; i < connectorClasses.size(); i++) {
+            String connector = connectorClasses.get(i).getSimpleName();
+            connectCluster.configureConnector(connector, mm2Config.connectorBaseConfig(
+                new SourceAndTarget(primary, backup), connectorClasses.get(i)));
+        }
+        
+        // we wait for the connector and tasks to come up for each connector, so that when we do the
+        // actual testing, we are certain that the tasks are up and running; this will prevent
+        // flaky tests where the connector and tasks didn't start up in time for the tests to be
+        // run
+        List<String> connectorNames = connectorClasses.stream().map(x -> x.getSimpleName())
+                .collect(Collectors.toList());
+        for (String connector : connectorNames) {
+            connectCluster.assertions().assertConnectorAndAtLeastNumTasksAreRunning(connector, 1,
+                    "Connector " + connector + " tasks did not start in time on cluster: " + connectCluster);
+        }
+    }
+ 
+    /*
+     * delete all topics of the input kafka cluster
+     */
+    protected static void deleteAllTopics(EmbeddedKafkaCluster cluster) {
+        Admin client = cluster.createAdminClient();
+        try {
+            client.deleteTopics(client.listTopics().names().get());
+        } catch (Throwable e) {
+        }
+    }
+    
+    /*
+     * retrieve the config value based on the input cluster, topic and config name
+     */
+    protected static String getTopicConfig(EmbeddedKafkaCluster cluster, String topic, String configName) {
+        Admin client = cluster.createAdminClient();
+        Collection<ConfigResource> cr =  Collections.singleton(
+                new ConfigResource(ConfigResource.Type.TOPIC, topic)); 
+        try {
+            DescribeConfigsResult configsResult = client.describeConfigs(cr);
+            Config allConfigs = (Config) configsResult.all().get().values().toArray()[0];
+            Iterator configIterator = allConfigs.entries().iterator();
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510027238
id: 510028174
url: https://api.github.com/repos/apache/kafka/pulls/comments/510028174
body: It looks like this is not used, can we remove it?
diff_hunk: @@ -0,0 +1,372 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.errors.TimeoutException;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.mirror.MirrorCheckpointConnector;
+import org.apache.kafka.connect.mirror.MirrorClient;
+import org.apache.kafka.connect.mirror.MirrorHeartbeatConnector;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.MirrorSourceConnector;
+import org.apache.kafka.connect.mirror.utils.ThreadedConsumer;
+import org.apache.kafka.connect.mirror.utils.ThreadedProducer;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.Before;
+import org.junit.After;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.time.Duration;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Collections;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertNotNull;
+
+/**
+ * Tests MM2 replication and failover/failback logic.
+ *
+ * MM2 is configured with active/active replication between two Kafka clusters. Tests validate that
+ * records sent to either cluster arrive at the other cluster. Then, a consumer group is migrated from
+ * one cluster to the other and back. Tests validate that consumer offsets are translated and replicated
+ * between clusters during this failover and failback.
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationTest extends MirrorConnectorsIntegrationBaseTest {
+
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationTest.class);
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510028174
id: 510028393
url: https://api.github.com/repos/apache/kafka/pulls/comments/510028393
body: We can use `List<Class<? extends Connector>` to avoid the warning
diff_hunk: @@ -0,0 +1,372 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.errors.TimeoutException;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.mirror.MirrorCheckpointConnector;
+import org.apache.kafka.connect.mirror.MirrorClient;
+import org.apache.kafka.connect.mirror.MirrorHeartbeatConnector;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.MirrorSourceConnector;
+import org.apache.kafka.connect.mirror.utils.ThreadedConsumer;
+import org.apache.kafka.connect.mirror.utils.ThreadedProducer;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.Before;
+import org.junit.After;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.time.Duration;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Collections;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertNotNull;
+
+/**
+ * Tests MM2 replication and failover/failback logic.
+ *
+ * MM2 is configured with active/active replication between two Kafka clusters. Tests validate that
+ * records sent to either cluster arrive at the other cluster. Then, a consumer group is migrated from
+ * one cluster to the other and back. Tests validate that consumer offsets are translated and replicated
+ * between clusters during this failover and failback.
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationTest extends MirrorConnectorsIntegrationBaseTest {
+
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationTest.class);
+    
+    private static final List<Class> CONNECTOR_LIST = 
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510028393
id: 510028816
url: https://api.github.com/repos/apache/kafka/pulls/comments/510028816
body: This is not used, can we remove it?
diff_hunk: @@ -0,0 +1,372 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.errors.TimeoutException;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.mirror.MirrorCheckpointConnector;
+import org.apache.kafka.connect.mirror.MirrorClient;
+import org.apache.kafka.connect.mirror.MirrorHeartbeatConnector;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.MirrorSourceConnector;
+import org.apache.kafka.connect.mirror.utils.ThreadedConsumer;
+import org.apache.kafka.connect.mirror.utils.ThreadedProducer;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.Before;
+import org.junit.After;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.time.Duration;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Collections;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertNotNull;
+
+/**
+ * Tests MM2 replication and failover/failback logic.
+ *
+ * MM2 is configured with active/active replication between two Kafka clusters. Tests validate that
+ * records sent to either cluster arrive at the other cluster. Then, a consumer group is migrated from
+ * one cluster to the other and back. Tests validate that consumer offsets are translated and replicated
+ * between clusters during this failover and failback.
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationTest extends MirrorConnectorsIntegrationBaseTest {
+
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationTest.class);
+    
+    private static final List<Class> CONNECTOR_LIST = 
+            Arrays.asList(MirrorSourceConnector.class, MirrorCheckpointConnector.class, MirrorHeartbeatConnector.class);
+    
+    @Before
+    public void setup() throws InterruptedException {
+        startClusters();
+    }
+
+    @After
+    public void close() {
+        shutdownClusters();
+    }
+
+    @Test
+    public void testReplication() throws InterruptedException {
+        produceMessages(primary, "test-topic-1");
+        produceMessages(backup, "test-topic-1");
+        String consumerGroupName = "consumer-group-testReplication";
+        Map<String, Object> consumerProps = new HashMap<String, Object>() {{
+                put("group.id", consumerGroupName);
+                put("auto.offset.reset", "latest");
+            }};
+        // create consumers before starting the connectors so we don't need to wait for discovery
+        Consumer<byte[], byte[]> primaryConsumer = primary.kafka().createConsumerAndSubscribeTo(consumerProps, "test-topic-1");
+        waitForConsumingAllRecords(primaryConsumer, 0);
+
+        Consumer<byte[], byte[]> backupConsumer = backup.kafka().createConsumerAndSubscribeTo(consumerProps, "test-topic-1");
+        waitForConsumingAllRecords(backupConsumer, 0);
+        
+        mm2Config = new MirrorMakerConfig(mm2Props);
+
+        waitUntilMirrorMakerIsRunning(backup, CONNECTOR_LIST, mm2Config, "primary", "backup");
+        waitUntilMirrorMakerIsRunning(primary, CONNECTOR_LIST, mm2Config, "backup", "primary");   
+
+        MirrorClient primaryClient = new MirrorClient(mm2Config.clientConfig("primary"));
+        MirrorClient backupClient = new MirrorClient(mm2Config.clientConfig("backup"));
+        
+        assertEquals("topic config was not synced", TopicConfig.CLEANUP_POLICY_COMPACT, 
+                getTopicConfig(backup.kafka(), "primary.test-topic-1", TopicConfig.CLEANUP_POLICY_CONFIG));
+        
+        assertEquals("Records were not produced to primary cluster.", NUM_RECORDS_PRODUCED,
+            primary.kafka().consume(NUM_RECORDS_PRODUCED, RECORD_TRANSFER_DURATION_MS, "test-topic-1").count());
+        assertEquals("Records were not replicated to backup cluster.", NUM_RECORDS_PRODUCED,
+            backup.kafka().consume(NUM_RECORDS_PRODUCED, RECORD_TRANSFER_DURATION_MS, "primary.test-topic-1").count());
+        assertEquals("Records were not produced to backup cluster.", NUM_RECORDS_PRODUCED,
+            backup.kafka().consume(NUM_RECORDS_PRODUCED, RECORD_TRANSFER_DURATION_MS, "test-topic-1").count());
+        assertEquals("Records were not replicated to primary cluster.", NUM_RECORDS_PRODUCED,
+            primary.kafka().consume(NUM_RECORDS_PRODUCED, RECORD_TRANSFER_DURATION_MS, "backup.test-topic-1").count());
+        
+        assertEquals("Primary cluster doesn't have all records from both clusters.", NUM_RECORDS_PRODUCED * 2,
+            primary.kafka().consume(NUM_RECORDS_PRODUCED * 2, RECORD_TRANSFER_DURATION_MS, "backup.test-topic-1", "test-topic-1").count());
+        assertEquals("Backup cluster doesn't have all records from both clusters.", NUM_RECORDS_PRODUCED * 2,
+            backup.kafka().consume(NUM_RECORDS_PRODUCED * 2, RECORD_TRANSFER_DURATION_MS, "primary.test-topic-1", "test-topic-1").count());
+        
+        assertTrue("Heartbeats were not emitted to primary cluster.", primary.kafka().consume(1,
+            RECORD_TRANSFER_DURATION_MS, "heartbeats").count() > 0);
+        assertTrue("Heartbeats were not emitted to backup cluster.", backup.kafka().consume(1,
+            RECORD_TRANSFER_DURATION_MS, "heartbeats").count() > 0);
+        assertTrue("Heartbeats were not replicated downstream to backup cluster.", backup.kafka().consume(1,
+            RECORD_TRANSFER_DURATION_MS, "primary.heartbeats").count() > 0);
+        assertTrue("Heartbeats were not replicated downstream to primary cluster.", primary.kafka().consume(1,
+            RECORD_TRANSFER_DURATION_MS, "backup.heartbeats").count() > 0);
+        
+        assertTrue("Did not find upstream primary cluster.", backupClient.upstreamClusters().contains("primary"));
+        assertEquals("Did not calculate replication hops correctly.", 1, backupClient.replicationHops("primary"));
+        assertTrue("Did not find upstream backup cluster.", primaryClient.upstreamClusters().contains("backup"));
+        assertEquals("Did not calculate replication hops correctly.", 1, primaryClient.replicationHops("backup"));
+        assertTrue("Checkpoints were not emitted downstream to backup cluster.", backup.kafka().consume(1,
+            CHECKPOINT_DURATION_MS, "primary.checkpoints.internal").count() > 0);
+
+        Map<TopicPartition, OffsetAndMetadata> backupOffsets = backupClient.remoteConsumerOffsets(consumerGroupName, "primary",
+            Duration.ofMillis(CHECKPOINT_DURATION_MS));
+
+        assertTrue("Offsets not translated downstream to backup cluster. Found: " + backupOffsets, backupOffsets.containsKey(
+            new TopicPartition("primary.test-topic-1", 0)));
+
+        // Failover consumer group to backup cluster.
+        primaryConsumer = backup.kafka().createConsumer(Collections.singletonMap("group.id", consumerGroupName));
+        primaryConsumer.assign(backupOffsets.keySet());
+        backupOffsets.forEach(primaryConsumer::seek);
+        primaryConsumer.poll(Duration.ofMillis(500));
+        primaryConsumer.commitAsync();
+
+        assertTrue("Consumer failedover to zero offset.", primaryConsumer.position(new TopicPartition("primary.test-topic-1", 0)) > 0);
+        assertTrue("Consumer failedover beyond expected offset.", primaryConsumer.position(
+            new TopicPartition("primary.test-topic-1", 0)) <= NUM_RECORDS_PRODUCED);
+        assertTrue("Checkpoints were not emitted upstream to primary cluster.", primary.kafka().consume(1,
+            CHECKPOINT_DURATION_MS, "backup.checkpoints.internal").count() > 0);
+
+        primaryConsumer.close();
+
+        waitForCondition(() -> {
+            try {
+                return primaryClient.remoteConsumerOffsets(consumerGroupName, "backup",
+                    Duration.ofMillis(CHECKPOINT_DURATION_MS)).containsKey(new TopicPartition("backup.test-topic-1", 0));
+            } catch (Throwable e) {
+                return false;
+            }
+        }, CHECKPOINT_DURATION_MS, "Offsets not translated downstream to primary cluster.");
+
+        waitForCondition(() -> {
+            try {
+                return primaryClient.remoteConsumerOffsets(consumerGroupName, "backup",
+                    Duration.ofMillis(CHECKPOINT_DURATION_MS)).containsKey(new TopicPartition("test-topic-1", 0));
+            } catch (Throwable e) {
+                return false;
+            }
+        }, CHECKPOINT_DURATION_MS, "Offsets not translated upstream to primary cluster.");
+
+        Map<TopicPartition, OffsetAndMetadata> primaryOffsets = primaryClient.remoteConsumerOffsets(consumerGroupName, "backup",
+                Duration.ofMillis(CHECKPOINT_DURATION_MS));
+ 
+        // Failback consumer group to primary cluster
+        backupConsumer = primary.kafka().createConsumer(Collections.singletonMap("group.id", consumerGroupName));
+        backupConsumer.assign(primaryOffsets.keySet());
+        primaryOffsets.forEach(backupConsumer::seek);
+        backupConsumer.poll(Duration.ofMillis(500));
+        backupConsumer.commitAsync();
+        
+        assertTrue("Consumer failedback to zero upstream offset.", backupConsumer.position(new TopicPartition("test-topic-1", 0)) > 0);
+        assertTrue("Consumer failedback to zero downstream offset.", backupConsumer.position(new TopicPartition("backup.test-topic-1", 0)) > 0);
+        assertTrue("Consumer failedback beyond expected upstream offset.", backupConsumer.position(
+            new TopicPartition("test-topic-1", 0)) <= NUM_RECORDS_PRODUCED);
+        assertTrue("Consumer failedback beyond expected downstream offset.", backupConsumer.position(
+            new TopicPartition("backup.test-topic-1", 0)) <= NUM_RECORDS_PRODUCED);
+        
+        backupConsumer.close();
+      
+        // create more matching topics
+        primary.kafka().createTopic("test-topic-2", NUM_PARTITIONS);
+        backup.kafka().createTopic("test-topic-3", NUM_PARTITIONS);
+
+        // only produce messages to the first partition
+        produceMessages(primary, "test-topic-2", 1);
+        produceMessages(backup, "test-topic-3", 1);
+        
+        // expect total consumed messages equals to NUM_RECORDS_PER_PARTITION
+        assertEquals("Records were not produced to primary cluster.", NUM_RECORDS_PER_PARTITION,
+            primary.kafka().consume(NUM_RECORDS_PER_PARTITION, RECORD_TRANSFER_DURATION_MS, "test-topic-2").count());
+        assertEquals("Records were not produced to backup cluster.", NUM_RECORDS_PER_PARTITION,
+            backup.kafka().consume(NUM_RECORDS_PER_PARTITION, RECORD_TRANSFER_DURATION_MS, "test-topic-3").count());
+
+        assertEquals("New topic was not replicated to primary cluster.", NUM_RECORDS_PER_PARTITION,
+            primary.kafka().consume(NUM_RECORDS_PER_PARTITION, 2 * RECORD_TRANSFER_DURATION_MS, "backup.test-topic-3").count());
+        assertEquals("New topic was not replicated to backup cluster.", NUM_RECORDS_PER_PARTITION,
+            backup.kafka().consume(NUM_RECORDS_PER_PARTITION, 2 * RECORD_TRANSFER_DURATION_MS, "primary.test-topic-2").count());
+
+    }
+    
+    @Test
+    public void testReplicationWithEmptyPartition() throws Exception {
+        String consumerGroupName = "consumer-group-testReplicationWithEmptyPartition";
+        Map<String, Object> consumerProps  = Collections.singletonMap("group.id", consumerGroupName);
+
+        // create topic
+        String topic = "test-topic-with-empty-partition";
+        primary.kafka().createTopic(topic, NUM_PARTITIONS);
+
+        // produce to all test-topic-empty's partitions, except the last partition
+        produceMessages(primary, topic, NUM_PARTITIONS - 1);
+        
+        // consume before starting the connectors so we don't need to wait for discovery
+        int expectedRecords = NUM_RECORDS_PER_PARTITION * (NUM_PARTITIONS - 1);
+        try (Consumer<byte[], byte[]> primaryConsumer = primary.kafka().createConsumerAndSubscribeTo(consumerProps, topic)) {
+            waitForConsumingAllRecords(primaryConsumer, expectedRecords);
+        }
+        
+        // one way replication from primary to backup
+        mm2Props.put("backup->primary.enabled", "false");
+        mm2Config = new MirrorMakerConfig(mm2Props);
+        waitUntilMirrorMakerIsRunning(backup, CONNECTOR_LIST, mm2Config, "primary", "backup");
+        
+        // sleep few seconds to have MM2 finish replication so that "end" consumer will consume some record
+        Thread.sleep(TimeUnit.SECONDS.toMillis(3));
+
+        // consume all records from backup cluster
+        try (Consumer<byte[], byte[]> backupConsumer = backup.kafka().createConsumerAndSubscribeTo(consumerProps, "primary." + topic)) {
+            waitForConsumingAllRecords(backupConsumer, expectedRecords);
+        }
+        
+        Admin backupClient = backup.kafka().createAdminClient();
+        // retrieve the consumer group offset from backup cluster
+        Map<TopicPartition, OffsetAndMetadata> remoteOffsets =
+                backupClient.listConsumerGroupOffsets(consumerGroupName).partitionsToOffsetAndMetadata().get();
+        // pinpoint the offset of the last partition which does not receive records 
+        OffsetAndMetadata offset = remoteOffsets.get(new TopicPartition("primary." + topic, NUM_PARTITIONS - 1));
+        // offset of the last partition should exist, but its value should be 0
+        assertNotNull("Offset of last partition was not replicated", offset);
+        assertEquals("Offset of last partition is not zero", 0, offset.offset());
+    }
+    
+    @Test
+    public void testOneWayReplicationWithAutoOffsetSync() throws InterruptedException {
+        produceMessages(primary, "test-topic-1");
+        String consumerGroupName = "consumer-group-testOneWayReplicationWithAutoOffsetSync";
+        Map<String, Object> consumerProps  = new HashMap<String, Object>() {{
+                put("group.id", consumerGroupName);
+                put("auto.offset.reset", "earliest");
+            }};
+        // create consumers before starting the connectors so we don't need to wait for discovery
+        try (Consumer<byte[], byte[]> primaryConsumer = primary.kafka().createConsumerAndSubscribeTo(consumerProps, 
+                "test-topic-1")) {
+            // we need to wait for consuming all the records for MM2 replicating the expected offsets
+            waitForConsumingAllRecords(primaryConsumer, NUM_RECORDS_PRODUCED);
+        }
+
+        // enable automated consumer group offset sync
+        mm2Props.put("sync.group.offsets.enabled", "true");
+        mm2Props.put("sync.group.offsets.interval.seconds", "1");
+        // one way replication from primary to backup
+        mm2Props.put("backup->primary.enabled", "false");
+
+        mm2Config = new MirrorMakerConfig(mm2Props);
+
+        waitUntilMirrorMakerIsRunning(backup, CONNECTOR_LIST, mm2Config, "primary", "backup");
+
+        // create a consumer at backup cluster with same consumer group Id to consume 1 topic
+        Consumer<byte[], byte[]> backupConsumer = backup.kafka().createConsumerAndSubscribeTo(
+            consumerProps, "primary.test-topic-1");
+
+        waitForConsumerGroupOffsetSync(backup, backupConsumer, Collections.singletonList("primary.test-topic-1"), 
+            consumerGroupName, NUM_RECORDS_PRODUCED);
+
+        ConsumerRecords records = backupConsumer.poll(Duration.ofMillis(500));
+
+        // the size of consumer record should be zero, because the offsets of the same consumer group
+        // have been automatically synchronized from primary to backup by the background job, so no
+        // more records to consume from the replicated topic by the same consumer group at backup cluster
+        assertEquals("consumer record size is not zero", 0, records.count());
+
+        // now create a new topic in primary cluster
+        primary.kafka().createTopic("test-topic-2", NUM_PARTITIONS);
+        backup.kafka().createTopic("primary.test-topic-2", 1);
+        // produce some records to the new topic in primary cluster
+        produceMessages(primary, "test-topic-2");
+
+        // create a consumer at primary cluster to consume the new topic
+        try (Consumer<byte[], byte[]> consumer1 = primary.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(
+                "group.id", "consumer-group-1"), "test-topic-2")) {
+            // we need to wait for consuming all the records for MM2 replicating the expected offsets
+            waitForConsumingAllRecords(consumer1, NUM_RECORDS_PRODUCED);
+        }
+
+        // create a consumer at backup cluster with same consumer group Id to consume old and new topic
+        backupConsumer = backup.kafka().createConsumerAndSubscribeTo(Collections.singletonMap(
+            "group.id", consumerGroupName), "primary.test-topic-1", "primary.test-topic-2");
+
+        waitForConsumerGroupOffsetSync(backup, backupConsumer, Arrays.asList("primary.test-topic-1", "primary.test-topic-2"), 
+            consumerGroupName, NUM_RECORDS_PRODUCED);
+
+        records = backupConsumer.poll(Duration.ofMillis(500));
+        // similar reasoning as above, no more records to consume by the same consumer group at backup cluster
+        assertEquals("consumer record size is not zero", 0, records.count());
+        backupConsumer.close();
+    }
+    
+    /*
+     * This test is to validate MirrorSourceConnector follows "at most once" delivery guarantee
+     * under broker restart / failure
+     */
+    @Test
+    public void testWithBrokerRestart() throws InterruptedException {
+        String consumerGroupName = "consumer-group-testWithBrokerRestart";
+        // test with a higher number of records
+        int numRecords = NUM_RECORDS_PRODUCED * 8;
+        // the sleep time between two produces used by background producer 
+        int sleepMs = 50;
+        int joinTimeoutMs = 1000;
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510028816
id: 510030148
url: https://api.github.com/repos/apache/kafka/pulls/comments/510030148
body: `ConsumerRecords` -> `ConsumerRecords<byte[], byte[]>`
diff_hunk: @@ -0,0 +1,372 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.errors.TimeoutException;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.mirror.MirrorCheckpointConnector;
+import org.apache.kafka.connect.mirror.MirrorClient;
+import org.apache.kafka.connect.mirror.MirrorHeartbeatConnector;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.MirrorSourceConnector;
+import org.apache.kafka.connect.mirror.utils.ThreadedConsumer;
+import org.apache.kafka.connect.mirror.utils.ThreadedProducer;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.Before;
+import org.junit.After;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.time.Duration;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Collections;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertNotNull;
+
+/**
+ * Tests MM2 replication and failover/failback logic.
+ *
+ * MM2 is configured with active/active replication between two Kafka clusters. Tests validate that
+ * records sent to either cluster arrive at the other cluster. Then, a consumer group is migrated from
+ * one cluster to the other and back. Tests validate that consumer offsets are translated and replicated
+ * between clusters during this failover and failback.
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationTest extends MirrorConnectorsIntegrationBaseTest {
+
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationTest.class);
+    
+    private static final List<Class> CONNECTOR_LIST = 
+            Arrays.asList(MirrorSourceConnector.class, MirrorCheckpointConnector.class, MirrorHeartbeatConnector.class);
+    
+    @Before
+    public void setup() throws InterruptedException {
+        startClusters();
+    }
+
+    @After
+    public void close() {
+        shutdownClusters();
+    }
+
+    @Test
+    public void testReplication() throws InterruptedException {
+        produceMessages(primary, "test-topic-1");
+        produceMessages(backup, "test-topic-1");
+        String consumerGroupName = "consumer-group-testReplication";
+        Map<String, Object> consumerProps = new HashMap<String, Object>() {{
+                put("group.id", consumerGroupName);
+                put("auto.offset.reset", "latest");
+            }};
+        // create consumers before starting the connectors so we don't need to wait for discovery
+        Consumer<byte[], byte[]> primaryConsumer = primary.kafka().createConsumerAndSubscribeTo(consumerProps, "test-topic-1");
+        waitForConsumingAllRecords(primaryConsumer, 0);
+
+        Consumer<byte[], byte[]> backupConsumer = backup.kafka().createConsumerAndSubscribeTo(consumerProps, "test-topic-1");
+        waitForConsumingAllRecords(backupConsumer, 0);
+        
+        mm2Config = new MirrorMakerConfig(mm2Props);
+
+        waitUntilMirrorMakerIsRunning(backup, CONNECTOR_LIST, mm2Config, "primary", "backup");
+        waitUntilMirrorMakerIsRunning(primary, CONNECTOR_LIST, mm2Config, "backup", "primary");   
+
+        MirrorClient primaryClient = new MirrorClient(mm2Config.clientConfig("primary"));
+        MirrorClient backupClient = new MirrorClient(mm2Config.clientConfig("backup"));
+        
+        assertEquals("topic config was not synced", TopicConfig.CLEANUP_POLICY_COMPACT, 
+                getTopicConfig(backup.kafka(), "primary.test-topic-1", TopicConfig.CLEANUP_POLICY_CONFIG));
+        
+        assertEquals("Records were not produced to primary cluster.", NUM_RECORDS_PRODUCED,
+            primary.kafka().consume(NUM_RECORDS_PRODUCED, RECORD_TRANSFER_DURATION_MS, "test-topic-1").count());
+        assertEquals("Records were not replicated to backup cluster.", NUM_RECORDS_PRODUCED,
+            backup.kafka().consume(NUM_RECORDS_PRODUCED, RECORD_TRANSFER_DURATION_MS, "primary.test-topic-1").count());
+        assertEquals("Records were not produced to backup cluster.", NUM_RECORDS_PRODUCED,
+            backup.kafka().consume(NUM_RECORDS_PRODUCED, RECORD_TRANSFER_DURATION_MS, "test-topic-1").count());
+        assertEquals("Records were not replicated to primary cluster.", NUM_RECORDS_PRODUCED,
+            primary.kafka().consume(NUM_RECORDS_PRODUCED, RECORD_TRANSFER_DURATION_MS, "backup.test-topic-1").count());
+        
+        assertEquals("Primary cluster doesn't have all records from both clusters.", NUM_RECORDS_PRODUCED * 2,
+            primary.kafka().consume(NUM_RECORDS_PRODUCED * 2, RECORD_TRANSFER_DURATION_MS, "backup.test-topic-1", "test-topic-1").count());
+        assertEquals("Backup cluster doesn't have all records from both clusters.", NUM_RECORDS_PRODUCED * 2,
+            backup.kafka().consume(NUM_RECORDS_PRODUCED * 2, RECORD_TRANSFER_DURATION_MS, "primary.test-topic-1", "test-topic-1").count());
+        
+        assertTrue("Heartbeats were not emitted to primary cluster.", primary.kafka().consume(1,
+            RECORD_TRANSFER_DURATION_MS, "heartbeats").count() > 0);
+        assertTrue("Heartbeats were not emitted to backup cluster.", backup.kafka().consume(1,
+            RECORD_TRANSFER_DURATION_MS, "heartbeats").count() > 0);
+        assertTrue("Heartbeats were not replicated downstream to backup cluster.", backup.kafka().consume(1,
+            RECORD_TRANSFER_DURATION_MS, "primary.heartbeats").count() > 0);
+        assertTrue("Heartbeats were not replicated downstream to primary cluster.", primary.kafka().consume(1,
+            RECORD_TRANSFER_DURATION_MS, "backup.heartbeats").count() > 0);
+        
+        assertTrue("Did not find upstream primary cluster.", backupClient.upstreamClusters().contains("primary"));
+        assertEquals("Did not calculate replication hops correctly.", 1, backupClient.replicationHops("primary"));
+        assertTrue("Did not find upstream backup cluster.", primaryClient.upstreamClusters().contains("backup"));
+        assertEquals("Did not calculate replication hops correctly.", 1, primaryClient.replicationHops("backup"));
+        assertTrue("Checkpoints were not emitted downstream to backup cluster.", backup.kafka().consume(1,
+            CHECKPOINT_DURATION_MS, "primary.checkpoints.internal").count() > 0);
+
+        Map<TopicPartition, OffsetAndMetadata> backupOffsets = backupClient.remoteConsumerOffsets(consumerGroupName, "primary",
+            Duration.ofMillis(CHECKPOINT_DURATION_MS));
+
+        assertTrue("Offsets not translated downstream to backup cluster. Found: " + backupOffsets, backupOffsets.containsKey(
+            new TopicPartition("primary.test-topic-1", 0)));
+
+        // Failover consumer group to backup cluster.
+        primaryConsumer = backup.kafka().createConsumer(Collections.singletonMap("group.id", consumerGroupName));
+        primaryConsumer.assign(backupOffsets.keySet());
+        backupOffsets.forEach(primaryConsumer::seek);
+        primaryConsumer.poll(Duration.ofMillis(500));
+        primaryConsumer.commitAsync();
+
+        assertTrue("Consumer failedover to zero offset.", primaryConsumer.position(new TopicPartition("primary.test-topic-1", 0)) > 0);
+        assertTrue("Consumer failedover beyond expected offset.", primaryConsumer.position(
+            new TopicPartition("primary.test-topic-1", 0)) <= NUM_RECORDS_PRODUCED);
+        assertTrue("Checkpoints were not emitted upstream to primary cluster.", primary.kafka().consume(1,
+            CHECKPOINT_DURATION_MS, "backup.checkpoints.internal").count() > 0);
+
+        primaryConsumer.close();
+
+        waitForCondition(() -> {
+            try {
+                return primaryClient.remoteConsumerOffsets(consumerGroupName, "backup",
+                    Duration.ofMillis(CHECKPOINT_DURATION_MS)).containsKey(new TopicPartition("backup.test-topic-1", 0));
+            } catch (Throwable e) {
+                return false;
+            }
+        }, CHECKPOINT_DURATION_MS, "Offsets not translated downstream to primary cluster.");
+
+        waitForCondition(() -> {
+            try {
+                return primaryClient.remoteConsumerOffsets(consumerGroupName, "backup",
+                    Duration.ofMillis(CHECKPOINT_DURATION_MS)).containsKey(new TopicPartition("test-topic-1", 0));
+            } catch (Throwable e) {
+                return false;
+            }
+        }, CHECKPOINT_DURATION_MS, "Offsets not translated upstream to primary cluster.");
+
+        Map<TopicPartition, OffsetAndMetadata> primaryOffsets = primaryClient.remoteConsumerOffsets(consumerGroupName, "backup",
+                Duration.ofMillis(CHECKPOINT_DURATION_MS));
+ 
+        // Failback consumer group to primary cluster
+        backupConsumer = primary.kafka().createConsumer(Collections.singletonMap("group.id", consumerGroupName));
+        backupConsumer.assign(primaryOffsets.keySet());
+        primaryOffsets.forEach(backupConsumer::seek);
+        backupConsumer.poll(Duration.ofMillis(500));
+        backupConsumer.commitAsync();
+        
+        assertTrue("Consumer failedback to zero upstream offset.", backupConsumer.position(new TopicPartition("test-topic-1", 0)) > 0);
+        assertTrue("Consumer failedback to zero downstream offset.", backupConsumer.position(new TopicPartition("backup.test-topic-1", 0)) > 0);
+        assertTrue("Consumer failedback beyond expected upstream offset.", backupConsumer.position(
+            new TopicPartition("test-topic-1", 0)) <= NUM_RECORDS_PRODUCED);
+        assertTrue("Consumer failedback beyond expected downstream offset.", backupConsumer.position(
+            new TopicPartition("backup.test-topic-1", 0)) <= NUM_RECORDS_PRODUCED);
+        
+        backupConsumer.close();
+      
+        // create more matching topics
+        primary.kafka().createTopic("test-topic-2", NUM_PARTITIONS);
+        backup.kafka().createTopic("test-topic-3", NUM_PARTITIONS);
+
+        // only produce messages to the first partition
+        produceMessages(primary, "test-topic-2", 1);
+        produceMessages(backup, "test-topic-3", 1);
+        
+        // expect total consumed messages equals to NUM_RECORDS_PER_PARTITION
+        assertEquals("Records were not produced to primary cluster.", NUM_RECORDS_PER_PARTITION,
+            primary.kafka().consume(NUM_RECORDS_PER_PARTITION, RECORD_TRANSFER_DURATION_MS, "test-topic-2").count());
+        assertEquals("Records were not produced to backup cluster.", NUM_RECORDS_PER_PARTITION,
+            backup.kafka().consume(NUM_RECORDS_PER_PARTITION, RECORD_TRANSFER_DURATION_MS, "test-topic-3").count());
+
+        assertEquals("New topic was not replicated to primary cluster.", NUM_RECORDS_PER_PARTITION,
+            primary.kafka().consume(NUM_RECORDS_PER_PARTITION, 2 * RECORD_TRANSFER_DURATION_MS, "backup.test-topic-3").count());
+        assertEquals("New topic was not replicated to backup cluster.", NUM_RECORDS_PER_PARTITION,
+            backup.kafka().consume(NUM_RECORDS_PER_PARTITION, 2 * RECORD_TRANSFER_DURATION_MS, "primary.test-topic-2").count());
+
+    }
+    
+    @Test
+    public void testReplicationWithEmptyPartition() throws Exception {
+        String consumerGroupName = "consumer-group-testReplicationWithEmptyPartition";
+        Map<String, Object> consumerProps  = Collections.singletonMap("group.id", consumerGroupName);
+
+        // create topic
+        String topic = "test-topic-with-empty-partition";
+        primary.kafka().createTopic(topic, NUM_PARTITIONS);
+
+        // produce to all test-topic-empty's partitions, except the last partition
+        produceMessages(primary, topic, NUM_PARTITIONS - 1);
+        
+        // consume before starting the connectors so we don't need to wait for discovery
+        int expectedRecords = NUM_RECORDS_PER_PARTITION * (NUM_PARTITIONS - 1);
+        try (Consumer<byte[], byte[]> primaryConsumer = primary.kafka().createConsumerAndSubscribeTo(consumerProps, topic)) {
+            waitForConsumingAllRecords(primaryConsumer, expectedRecords);
+        }
+        
+        // one way replication from primary to backup
+        mm2Props.put("backup->primary.enabled", "false");
+        mm2Config = new MirrorMakerConfig(mm2Props);
+        waitUntilMirrorMakerIsRunning(backup, CONNECTOR_LIST, mm2Config, "primary", "backup");
+        
+        // sleep few seconds to have MM2 finish replication so that "end" consumer will consume some record
+        Thread.sleep(TimeUnit.SECONDS.toMillis(3));
+
+        // consume all records from backup cluster
+        try (Consumer<byte[], byte[]> backupConsumer = backup.kafka().createConsumerAndSubscribeTo(consumerProps, "primary." + topic)) {
+            waitForConsumingAllRecords(backupConsumer, expectedRecords);
+        }
+        
+        Admin backupClient = backup.kafka().createAdminClient();
+        // retrieve the consumer group offset from backup cluster
+        Map<TopicPartition, OffsetAndMetadata> remoteOffsets =
+                backupClient.listConsumerGroupOffsets(consumerGroupName).partitionsToOffsetAndMetadata().get();
+        // pinpoint the offset of the last partition which does not receive records 
+        OffsetAndMetadata offset = remoteOffsets.get(new TopicPartition("primary." + topic, NUM_PARTITIONS - 1));
+        // offset of the last partition should exist, but its value should be 0
+        assertNotNull("Offset of last partition was not replicated", offset);
+        assertEquals("Offset of last partition is not zero", 0, offset.offset());
+    }
+    
+    @Test
+    public void testOneWayReplicationWithAutoOffsetSync() throws InterruptedException {
+        produceMessages(primary, "test-topic-1");
+        String consumerGroupName = "consumer-group-testOneWayReplicationWithAutoOffsetSync";
+        Map<String, Object> consumerProps  = new HashMap<String, Object>() {{
+                put("group.id", consumerGroupName);
+                put("auto.offset.reset", "earliest");
+            }};
+        // create consumers before starting the connectors so we don't need to wait for discovery
+        try (Consumer<byte[], byte[]> primaryConsumer = primary.kafka().createConsumerAndSubscribeTo(consumerProps, 
+                "test-topic-1")) {
+            // we need to wait for consuming all the records for MM2 replicating the expected offsets
+            waitForConsumingAllRecords(primaryConsumer, NUM_RECORDS_PRODUCED);
+        }
+
+        // enable automated consumer group offset sync
+        mm2Props.put("sync.group.offsets.enabled", "true");
+        mm2Props.put("sync.group.offsets.interval.seconds", "1");
+        // one way replication from primary to backup
+        mm2Props.put("backup->primary.enabled", "false");
+
+        mm2Config = new MirrorMakerConfig(mm2Props);
+
+        waitUntilMirrorMakerIsRunning(backup, CONNECTOR_LIST, mm2Config, "primary", "backup");
+
+        // create a consumer at backup cluster with same consumer group Id to consume 1 topic
+        Consumer<byte[], byte[]> backupConsumer = backup.kafka().createConsumerAndSubscribeTo(
+            consumerProps, "primary.test-topic-1");
+
+        waitForConsumerGroupOffsetSync(backup, backupConsumer, Collections.singletonList("primary.test-topic-1"), 
+            consumerGroupName, NUM_RECORDS_PRODUCED);
+
+        ConsumerRecords records = backupConsumer.poll(Duration.ofMillis(500));
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510030148
id: 510030780
url: https://api.github.com/repos/apache/kafka/pulls/comments/510030780
body: What do we do if there's an exception? If it's expected, let's make it clear
diff_hunk: @@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.CommonClientConfigs;
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.admin.Config;
+import org.apache.kafka.clients.admin.ConfigEntry;
+import org.apache.kafka.clients.admin.DescribeConfigsResult;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerConfig;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.KafkaConsumer;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.ConfigResource;
+import org.apache.kafka.common.config.SslConfigs;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.config.types.Password;
+import org.apache.kafka.common.utils.Exit;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.errors.ConnectException;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.SourceAndTarget;
+import org.apache.kafka.connect.util.clusters.EmbeddedConnectCluster;
+import org.apache.kafka.connect.util.clusters.EmbeddedKafkaCluster;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.experimental.categories.Category;
+
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.connect.mirror.TestUtils.expectedRecords;
+import static org.apache.kafka.connect.util.clusters.EmbeddedConnectClusterAssertions.CONNECTOR_SETUP_DURATION_MS;
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import kafka.server.KafkaConfig$;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+//import org.junit.After;
+
+/**
+ * Common Test functions for MM2 integration tests
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationBaseTest {
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationBaseTest.class);
+    
+    protected static final int NUM_RECORDS_PER_PARTITION = 10;
+    public static final int NUM_PARTITIONS = 10;
+    protected static final int NUM_RECORDS_PRODUCED = NUM_PARTITIONS * NUM_RECORDS_PER_PARTITION;
+    protected static final int RECORD_TRANSFER_DURATION_MS = 30_000;
+    protected static final int CHECKPOINT_DURATION_MS = 20_000;
+    protected static final int RECORD_CONSUME_DURATION_MS = 20_000;
+    protected static final int OFFSET_SYNC_DURATION_MS = 30_000;
+    protected static final int NUM_WORKERS = 3;
+
+    
+    protected Map<String, String> mm2Props;
+    protected MirrorMakerConfig mm2Config; 
+    protected EmbeddedConnectCluster primary;
+    protected EmbeddedConnectCluster backup;
+    
+    private final AtomicBoolean exited = new AtomicBoolean(false);
+    private Properties primaryBrokerProps = new Properties();
+    protected Properties backupBrokerProps = new Properties();
+    private Map<String, String> primaryWorkerProps;
+    private Map<String, String> backupWorkerProps = new HashMap<>();
+    private Properties sslProps = new Properties();
+    
+    private void loadSslPropsFromBrokerConfig() {       
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG));
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ((Password) backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG)).value());
+        sslProps.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, "SSL");
+    }
+    
+    protected void setSslConfig() {
+        // set SSL config for kafka connect worker
+        backupWorkerProps.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        // set SSL config for producer used by source task in MM2
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup.producer." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+    }
+    
+    protected void startClusters() throws InterruptedException {
+        primaryBrokerProps.put("auto.create.topics.enable", "false");
+        backupBrokerProps.put("auto.create.topics.enable", "false");
+        
+        mm2Props = basicMM2Config();
+        
+        // if backup kafka cluster contains ssl config, enable ssl of kafka connect and mm2
+        final Object listeners = backupBrokerProps.get(KafkaConfig$.MODULE$.ListenersProp());
+        if (listeners != null && listeners.toString().contains("SSL")) {
+            loadSslPropsFromBrokerConfig();
+            setSslConfig();
+        }
+
+        mm2Config = new MirrorMakerConfig(mm2Props); 
+        primaryWorkerProps = mm2Config.workerConfig(new SourceAndTarget("backup", "primary"));
+        backupWorkerProps.putAll(mm2Config.workerConfig(new SourceAndTarget("primary", "backup")));
+        
+        primary = new EmbeddedConnectCluster.Builder()
+                .name("primary-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(primaryBrokerProps)
+                .workerProps(primaryWorkerProps)
+                .build();
+
+        backup = new EmbeddedConnectCluster.Builder()
+                .name("backup-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(backupBrokerProps)
+                .workerProps(backupWorkerProps)
+                .build();
+        
+        primary.start();
+        primary.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of primary-connect-cluster did not start in time.");
+        
+        backup.start();
+        backup.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of backup-connect-cluster did not start in time.");
+
+        createTopics();
+ 
+        dummyConsumption();
+        
+        log.info("primary REST service: {}", primary.endpointForResource("connectors"));
+        log.info("backup REST service: {}", backup.endpointForResource("connectors"));
+        log.info("primary brokers: {}", primary.kafka().bootstrapServers());
+        log.info("backup brokers: {}", backup.kafka().bootstrapServers());
+        
+        // now that the brokers are running, we can finish setting up the Connectors
+        mm2Props.put("primary.bootstrap.servers", primary.kafka().bootstrapServers());
+        mm2Props.put("backup.bootstrap.servers", backup.kafka().bootstrapServers());
+        
+        Exit.setExitProcedure((status, errorCode) -> exited.set(true));
+    }
+    
+    public void shutdownClusters() {
+        for (String x : primary.connectors()) {
+            primary.deleteConnector(x);
+        }
+        for (String x : backup.connectors()) {
+            backup.deleteConnector(x);
+        }
+        deleteAllTopics(primary.kafka());
+        deleteAllTopics(backup.kafka());
+        primary.stop();
+        backup.stop();
+        try {
+            assertFalse(exited.get());
+        } finally {
+            Exit.resetExitProcedure();
+        }
+    }
+    /*
+     * launch the connectors on kafka connect cluster and check if they are running
+     */
+    protected static void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster, 
+            List<Class> connectorClasses, MirrorMakerConfig mm2Config, 
+            String primary, String backup) throws InterruptedException {
+        for (int i = 0; i < connectorClasses.size(); i++) {
+            String connector = connectorClasses.get(i).getSimpleName();
+            connectCluster.configureConnector(connector, mm2Config.connectorBaseConfig(
+                new SourceAndTarget(primary, backup), connectorClasses.get(i)));
+        }
+        
+        // we wait for the connector and tasks to come up for each connector, so that when we do the
+        // actual testing, we are certain that the tasks are up and running; this will prevent
+        // flaky tests where the connector and tasks didn't start up in time for the tests to be
+        // run
+        List<String> connectorNames = connectorClasses.stream().map(x -> x.getSimpleName())
+                .collect(Collectors.toList());
+        for (String connector : connectorNames) {
+            connectCluster.assertions().assertConnectorAndAtLeastNumTasksAreRunning(connector, 1,
+                    "Connector " + connector + " tasks did not start in time on cluster: " + connectCluster);
+        }
+    }
+ 
+    /*
+     * delete all topics of the input kafka cluster
+     */
+    protected static void deleteAllTopics(EmbeddedKafkaCluster cluster) {
+        Admin client = cluster.createAdminClient();
+        try {
+            client.deleteTopics(client.listTopics().names().get());
+        } catch (Throwable e) {
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510030780
id: 510031563
url: https://api.github.com/repos/apache/kafka/pulls/comments/510031563
body: It looks like this is not used anywhere
diff_hunk: @@ -0,0 +1,98 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.common.network.Mode;
+import org.apache.kafka.connect.mirror.MirrorCheckpointConnector;
+import org.apache.kafka.connect.mirror.MirrorHeartbeatConnector;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.MirrorSourceConnector;
+import org.apache.kafka.test.IntegrationTest;
+import org.apache.kafka.test.TestSslUtils;
+import org.apache.kafka.test.TestUtils;
+import kafka.server.KafkaConfig$;
+
+import org.junit.experimental.categories.Category;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+
+import org.junit.Before;
+import org.junit.After;
+import org.junit.Test;
+
+/**
+ * Tests MM2 replication with SSL enabled at backup kafka cluster
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationSSLTest extends MirrorConnectorsIntegrationBaseTest {
+
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationSSLTest.class);
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationSSLTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510031563
id: 510034872
url: https://api.github.com/repos/apache/kafka/pulls/comments/510034872
body: Is this needed at compile time? As far as I can tell, it's only needed when running the SSL test, so it could be `testRuntime libs.bcpkix`
diff_hunk: @@ -2058,6 +2058,7 @@ project(':connect:mirror') {
     testCompile libs.junitJupiterApi
     testCompile libs.junitVintageEngine
     testCompile libs.mockitoCore
+    testCompile libs.bcpkix
path: build.gradle
html: https://github.com/apache/kafka/pull/9224#discussion_r510034872
id: 510112827
url: https://api.github.com/repos/apache/kafka/pulls/comments/510112827
body: I find having a method specific for SSL strange. Callers should not have to know, this should be retrieved automatically based on the cluster being targeted
diff_hunk: @@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.CommonClientConfigs;
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.admin.Config;
+import org.apache.kafka.clients.admin.ConfigEntry;
+import org.apache.kafka.clients.admin.DescribeConfigsResult;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerConfig;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.KafkaConsumer;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.ConfigResource;
+import org.apache.kafka.common.config.SslConfigs;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.config.types.Password;
+import org.apache.kafka.common.utils.Exit;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.errors.ConnectException;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.SourceAndTarget;
+import org.apache.kafka.connect.util.clusters.EmbeddedConnectCluster;
+import org.apache.kafka.connect.util.clusters.EmbeddedKafkaCluster;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.experimental.categories.Category;
+
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.connect.mirror.TestUtils.expectedRecords;
+import static org.apache.kafka.connect.util.clusters.EmbeddedConnectClusterAssertions.CONNECTOR_SETUP_DURATION_MS;
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import kafka.server.KafkaConfig$;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+//import org.junit.After;
+
+/**
+ * Common Test functions for MM2 integration tests
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationBaseTest {
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationBaseTest.class);
+    
+    protected static final int NUM_RECORDS_PER_PARTITION = 10;
+    public static final int NUM_PARTITIONS = 10;
+    protected static final int NUM_RECORDS_PRODUCED = NUM_PARTITIONS * NUM_RECORDS_PER_PARTITION;
+    protected static final int RECORD_TRANSFER_DURATION_MS = 30_000;
+    protected static final int CHECKPOINT_DURATION_MS = 20_000;
+    protected static final int RECORD_CONSUME_DURATION_MS = 20_000;
+    protected static final int OFFSET_SYNC_DURATION_MS = 30_000;
+    protected static final int NUM_WORKERS = 3;
+
+    
+    protected Map<String, String> mm2Props;
+    protected MirrorMakerConfig mm2Config; 
+    protected EmbeddedConnectCluster primary;
+    protected EmbeddedConnectCluster backup;
+    
+    private final AtomicBoolean exited = new AtomicBoolean(false);
+    private Properties primaryBrokerProps = new Properties();
+    protected Properties backupBrokerProps = new Properties();
+    private Map<String, String> primaryWorkerProps;
+    private Map<String, String> backupWorkerProps = new HashMap<>();
+    private Properties sslProps = new Properties();
+    
+    private void loadSslPropsFromBrokerConfig() {       
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG));
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ((Password) backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG)).value());
+        sslProps.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, "SSL");
+    }
+    
+    protected void setSslConfig() {
+        // set SSL config for kafka connect worker
+        backupWorkerProps.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        // set SSL config for producer used by source task in MM2
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup.producer." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+    }
+    
+    protected void startClusters() throws InterruptedException {
+        primaryBrokerProps.put("auto.create.topics.enable", "false");
+        backupBrokerProps.put("auto.create.topics.enable", "false");
+        
+        mm2Props = basicMM2Config();
+        
+        // if backup kafka cluster contains ssl config, enable ssl of kafka connect and mm2
+        final Object listeners = backupBrokerProps.get(KafkaConfig$.MODULE$.ListenersProp());
+        if (listeners != null && listeners.toString().contains("SSL")) {
+            loadSslPropsFromBrokerConfig();
+            setSslConfig();
+        }
+
+        mm2Config = new MirrorMakerConfig(mm2Props); 
+        primaryWorkerProps = mm2Config.workerConfig(new SourceAndTarget("backup", "primary"));
+        backupWorkerProps.putAll(mm2Config.workerConfig(new SourceAndTarget("primary", "backup")));
+        
+        primary = new EmbeddedConnectCluster.Builder()
+                .name("primary-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(primaryBrokerProps)
+                .workerProps(primaryWorkerProps)
+                .build();
+
+        backup = new EmbeddedConnectCluster.Builder()
+                .name("backup-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(backupBrokerProps)
+                .workerProps(backupWorkerProps)
+                .build();
+        
+        primary.start();
+        primary.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of primary-connect-cluster did not start in time.");
+        
+        backup.start();
+        backup.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of backup-connect-cluster did not start in time.");
+
+        createTopics();
+ 
+        dummyConsumption();
+        
+        log.info("primary REST service: {}", primary.endpointForResource("connectors"));
+        log.info("backup REST service: {}", backup.endpointForResource("connectors"));
+        log.info("primary brokers: {}", primary.kafka().bootstrapServers());
+        log.info("backup brokers: {}", backup.kafka().bootstrapServers());
+        
+        // now that the brokers are running, we can finish setting up the Connectors
+        mm2Props.put("primary.bootstrap.servers", primary.kafka().bootstrapServers());
+        mm2Props.put("backup.bootstrap.servers", backup.kafka().bootstrapServers());
+        
+        Exit.setExitProcedure((status, errorCode) -> exited.set(true));
+    }
+    
+    public void shutdownClusters() {
+        for (String x : primary.connectors()) {
+            primary.deleteConnector(x);
+        }
+        for (String x : backup.connectors()) {
+            backup.deleteConnector(x);
+        }
+        deleteAllTopics(primary.kafka());
+        deleteAllTopics(backup.kafka());
+        primary.stop();
+        backup.stop();
+        try {
+            assertFalse(exited.get());
+        } finally {
+            Exit.resetExitProcedure();
+        }
+    }
+    /*
+     * launch the connectors on kafka connect cluster and check if they are running
+     */
+    protected static void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster, 
+            List<Class> connectorClasses, MirrorMakerConfig mm2Config, 
+            String primary, String backup) throws InterruptedException {
+        for (int i = 0; i < connectorClasses.size(); i++) {
+            String connector = connectorClasses.get(i).getSimpleName();
+            connectCluster.configureConnector(connector, mm2Config.connectorBaseConfig(
+                new SourceAndTarget(primary, backup), connectorClasses.get(i)));
+        }
+        
+        // we wait for the connector and tasks to come up for each connector, so that when we do the
+        // actual testing, we are certain that the tasks are up and running; this will prevent
+        // flaky tests where the connector and tasks didn't start up in time for the tests to be
+        // run
+        List<String> connectorNames = connectorClasses.stream().map(x -> x.getSimpleName())
+                .collect(Collectors.toList());
+        for (String connector : connectorNames) {
+            connectCluster.assertions().assertConnectorAndAtLeastNumTasksAreRunning(connector, 1,
+                    "Connector " + connector + " tasks did not start in time on cluster: " + connectCluster);
+        }
+    }
+ 
+    /*
+     * delete all topics of the input kafka cluster
+     */
+    protected static void deleteAllTopics(EmbeddedKafkaCluster cluster) {
+        Admin client = cluster.createAdminClient();
+        try {
+            client.deleteTopics(client.listTopics().names().get());
+        } catch (Throwable e) {
+        }
+    }
+    
+    /*
+     * retrieve the config value based on the input cluster, topic and config name
+     */
+    protected static String getTopicConfig(EmbeddedKafkaCluster cluster, String topic, String configName) {
+        Admin client = cluster.createAdminClient();
+        Collection<ConfigResource> cr =  Collections.singleton(
+                new ConfigResource(ConfigResource.Type.TOPIC, topic)); 
+        try {
+            DescribeConfigsResult configsResult = client.describeConfigs(cr);
+            Config allConfigs = (Config) configsResult.all().get().values().toArray()[0];
+            Iterator configIterator = allConfigs.entries().iterator();
+            while (configIterator.hasNext()) {
+                ConfigEntry currentConfig = (ConfigEntry) configIterator.next();     
+                if (currentConfig.name().equals(configName)) {
+                    return currentConfig.value();
+                }
+            }
+        } catch (Throwable e) {
+        }
+        return null;
+    }
+    
+    /*
+     *  produce messages to the cluster and  topic 
+     */
+    protected void produceMessages(EmbeddedConnectCluster cluster, String topicName) {
+        Map<String, String> recordSent = expectedRecords(NUM_RECORDS_PRODUCED);
+        for (Map.Entry<String, String> entry : recordSent.entrySet()) {
+            cluster.kafka().produce(topicName, entry.getKey(), entry.getValue());
+        }
+    }
+
+    /*
+     * produce messages to the cluster and topic partition less than numPartitions 
+     */
+    protected void produceMessages(EmbeddedConnectCluster cluster, String topicName, int numPartitions) {
+        int cnt = 0;
+        for (int r = 0; r < NUM_RECORDS_PER_PARTITION; r++)
+            for (int p = 0; p < numPartitions; p++)
+                cluster.kafka().produce(topicName, p, "key", "value-" + cnt++);
+    }
+    
+    /*
+     * given consumer group, topics and expected number of records, make sure the consumer group
+     * offsets are eventually synced to the expected offset numbers
+     */
+    protected static <T> void waitForConsumerGroupOffsetSync(EmbeddedConnectCluster connect, 
+            Consumer<T, T> consumer, List<String> topics, String consumerGroupId, int numRecords)
+            throws InterruptedException {
+        Admin adminClient = connect.kafka().createAdminClient();
+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());
+        for (int partitionIndex = 0; partitionIndex < NUM_PARTITIONS; partitionIndex++) {
+            for (String topic : topics) {
+                tps.add(new TopicPartition(topic, partitionIndex));
+            }
+        }
+        long expectedTotalOffsets = numRecords * topics.size();
+
+        waitForCondition(() -> {
+            Map<TopicPartition, OffsetAndMetadata> consumerGroupOffsets =
+                    adminClient.listConsumerGroupOffsets(consumerGroupId).partitionsToOffsetAndMetadata().get();
+            long consumerGroupOffsetTotal = consumerGroupOffsets.values().stream()
+                    .mapToLong(metadata -> metadata.offset()).sum();
+
+            Map<TopicPartition, Long> offsets = consumer.endOffsets(tps, Duration.ofMillis(500));
+            long totalOffsets = offsets.values().stream().mapToLong(l -> l).sum();
+
+            // make sure the consumer group offsets are synced to expected number
+            return totalOffsets == expectedTotalOffsets && consumerGroupOffsetTotal > 0;
+        }, OFFSET_SYNC_DURATION_MS, "Consumer group offset sync is not complete in time");
+    }
+
+    /*
+     * make sure the consumer to consume expected number of records
+     */
+    protected static <T> void waitForConsumingAllRecords(Consumer<T, T> consumer, int numExpectedRecords) 
+            throws InterruptedException {
+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);
+        waitForCondition(() -> {
+            ConsumerRecords<T, T> records = consumer.poll(Duration.ofMillis(500));
+            return numExpectedRecords == totalConsumedRecords.addAndGet(records.count());
+        }, RECORD_CONSUME_DURATION_MS, "Consumer cannot consume all records in time");
+        consumer.commitSync();
+        consumer.close();
+    }
+   
+    /*
+     * MM2 config to use in integration tests
+     */
+    protected static Map<String, String> basicMM2Config() {
+        Map<String, String> mm2Props = new HashMap<>();
+        mm2Props.put("clusters", "primary, backup");
+        mm2Props.put("max.tasks", "10");
+        mm2Props.put("topics", "test-topic-.*, primary.test-topic-.*, backup.test-topic-.*");
+        mm2Props.put("groups", "consumer-group-.*");
+        mm2Props.put("primary->backup.enabled", "true");
+        mm2Props.put("backup->primary.enabled", "true");
+        mm2Props.put("sync.topic.acls.enabled", "false");
+        mm2Props.put("emit.checkpoints.interval.seconds", "1");
+        mm2Props.put("emit.heartbeats.interval.seconds", "1");
+        mm2Props.put("refresh.topics.interval.seconds", "1");
+        mm2Props.put("refresh.groups.interval.seconds", "1");
+        mm2Props.put("checkpoints.topic.replication.factor", "1");
+        mm2Props.put("heartbeats.topic.replication.factor", "1");
+        mm2Props.put("offset-syncs.topic.replication.factor", "1");
+        mm2Props.put("config.storage.replication.factor", "1");
+        mm2Props.put("offset.storage.replication.factor", "1");
+        mm2Props.put("status.storage.replication.factor", "1");
+        mm2Props.put("replication.factor", "1");
+        
+        return mm2Props;
+    }
+    
+    /*
+     * restart kafka broker and make sure it is successful
+     */
+    protected static void restartKafkaBroker(EmbeddedConnectCluster connect) throws InterruptedException {
+
+        connect.kafka().stopOnlyKafka();
+        log.trace("issue kafka stop");
+        connect.assertions().assertExactlyNumWorkersAreUp(NUM_WORKERS,
+                "Group of workers did not remain the same after broker shutdown");
+
+        // Allow for the workers to discover that the coordinator is unavailable, if the connector
+        // is set up on this current EmbeddedConnectCluster
+        Thread.sleep(TimeUnit.SECONDS.toMillis(10));
+
+        // Wait for the broker to be stopped
+        assertTrue("Failed to stop kafka broker within " + CONNECTOR_SETUP_DURATION_MS + "ms",
+                connect.kafka().runningBrokers().size() == 0);
+
+        connect.kafka().startOnlyKafkaOnSamePorts();
+        log.trace("issue kafka start");
+        // Allow for the kafka brokers to come back online
+        Thread.sleep(TimeUnit.SECONDS.toMillis(10));
+
+        connect.assertions().assertExactlyNumWorkersAreUp(NUM_WORKERS,
+                "Group of workers did not remain the same within the designated time.");
+
+        // Allow for the workers to rebalance and reach a steady state
+        Thread.sleep(TimeUnit.SECONDS.toMillis(10));
+
+        // Expect that the broker has started again
+        assertTrue("Failed to start kafka broker within " + CONNECTOR_SETUP_DURATION_MS + "ms",
+                connect.kafka().runningBrokers().size() > 0);
+    }
+    
+    protected void createTopics() {
+        // to verify topic config will be sync-ed across clusters
+        Map<String, String> topicConfig = new HashMap<>();
+        topicConfig.put(TopicConfig.CLEANUP_POLICY_CONFIG, TopicConfig.CLEANUP_POLICY_COMPACT);
+        // create these topics before starting the connectors so we don't need to wait for discovery
+        primary.kafka().createTopic("test-topic-1", NUM_PARTITIONS, 1, topicConfig);
+        primary.kafka().createTopic("backup.test-topic-1", 1);
+        primary.kafka().createTopic("heartbeats", 1);
+        backup.kafka().createTopic("test-topic-1", NUM_PARTITIONS);
+        backup.kafka().createTopic("primary.test-topic-1", 1);
+        backup.kafka().createTopic("heartbeats", 1);
+    }
+    
+    protected KafkaConsumer<String, String> createSslConsumer(Map<String, Object> consumerProps, String... topics) {
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510112827
id: 510114995
url: https://api.github.com/repos/apache/kafka/pulls/comments/510114995
body: Why are we rethrowing as `RuntimeException`?
diff_hunk: @@ -0,0 +1,98 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.common.network.Mode;
+import org.apache.kafka.connect.mirror.MirrorCheckpointConnector;
+import org.apache.kafka.connect.mirror.MirrorHeartbeatConnector;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.MirrorSourceConnector;
+import org.apache.kafka.test.IntegrationTest;
+import org.apache.kafka.test.TestSslUtils;
+import org.apache.kafka.test.TestUtils;
+import kafka.server.KafkaConfig$;
+
+import org.junit.experimental.categories.Category;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+
+import org.junit.Before;
+import org.junit.After;
+import org.junit.Test;
+
+/**
+ * Tests MM2 replication with SSL enabled at backup kafka cluster
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationSSLTest extends MirrorConnectorsIntegrationBaseTest {
+
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationSSLTest.class);
+    
+    private static final List<Class> CONNECTOR_LIST = 
+            Arrays.asList(MirrorSourceConnector.class, MirrorCheckpointConnector.class, MirrorHeartbeatConnector.class);
+    
+    @Before
+    public void setup() throws InterruptedException {
+        try {
+            Map<String, Object> sslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, TestUtils.tempFile(), "testCert");
+            backupBrokerProps.put(KafkaConfig$.MODULE$.ListenersProp(), "SSL://localhost:0");
+            backupBrokerProps.put(KafkaConfig$.MODULE$.InterBrokerListenerNameProp(), "SSL");
+            backupBrokerProps.putAll(sslConfig);
+        } catch (final Exception e) {
+            throw new RuntimeException(e);
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationSSLTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510114995
id: 510115664
url: https://api.github.com/repos/apache/kafka/pulls/comments/510115664
body: That looks pretty brittle? Is there a condition we can wait on?
diff_hunk: @@ -0,0 +1,98 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.common.network.Mode;
+import org.apache.kafka.connect.mirror.MirrorCheckpointConnector;
+import org.apache.kafka.connect.mirror.MirrorHeartbeatConnector;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.MirrorSourceConnector;
+import org.apache.kafka.test.IntegrationTest;
+import org.apache.kafka.test.TestSslUtils;
+import org.apache.kafka.test.TestUtils;
+import kafka.server.KafkaConfig$;
+
+import org.junit.experimental.categories.Category;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+
+import org.junit.Before;
+import org.junit.After;
+import org.junit.Test;
+
+/**
+ * Tests MM2 replication with SSL enabled at backup kafka cluster
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationSSLTest extends MirrorConnectorsIntegrationBaseTest {
+
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationSSLTest.class);
+    
+    private static final List<Class> CONNECTOR_LIST = 
+            Arrays.asList(MirrorSourceConnector.class, MirrorCheckpointConnector.class, MirrorHeartbeatConnector.class);
+    
+    @Before
+    public void setup() throws InterruptedException {
+        try {
+            Map<String, Object> sslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, TestUtils.tempFile(), "testCert");
+            backupBrokerProps.put(KafkaConfig$.MODULE$.ListenersProp(), "SSL://localhost:0");
+            backupBrokerProps.put(KafkaConfig$.MODULE$.InterBrokerListenerNameProp(), "SSL");
+            backupBrokerProps.putAll(sslConfig);
+        } catch (final Exception e) {
+            throw new RuntimeException(e);
+        }
+        startClusters();
+    }
+    
+    @After
+    public void close() {
+        shutdownClusters();
+    }
+    
+    @Test
+    public void testReplicationSSL() throws InterruptedException {
+        produceMessages(primary, "test-topic-1");
+
+        // create consumers before starting the connectors so we don't need to wait for discovery
+        try (Consumer<byte[], byte[]> primaryConsumer = primary.kafka().createConsumerAndSubscribeTo(
+            Collections.singletonMap("group.id", "consumer-group-1"), "test-topic-1")) {
+            // we need to wait for consuming all the records for MM2 replicating the expected offsets
+            waitForConsumingAllRecords(primaryConsumer, NUM_RECORDS_PRODUCED);
+        }
+
+        // one-way replication from primary -> backup
+        mm2Props.put("backup->primary.enabled", "false");
+        mm2Config = new MirrorMakerConfig(mm2Props);
+
+        waitUntilMirrorMakerIsRunning(backup, CONNECTOR_LIST, mm2Config, "primary", "backup");
+
+        // sleep few seconds to let MM2 replicate some records for "end" consumer to consume them
+        Thread.sleep(TimeUnit.SECONDS.toMillis(3));
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationSSLTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510115664
id: 510117000
url: https://api.github.com/repos/apache/kafka/pulls/comments/510117000
body: Could the cluster aliases be constant as these are used all over the place
diff_hunk: @@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.CommonClientConfigs;
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.admin.Config;
+import org.apache.kafka.clients.admin.ConfigEntry;
+import org.apache.kafka.clients.admin.DescribeConfigsResult;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerConfig;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.KafkaConsumer;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.ConfigResource;
+import org.apache.kafka.common.config.SslConfigs;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.config.types.Password;
+import org.apache.kafka.common.utils.Exit;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.errors.ConnectException;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.SourceAndTarget;
+import org.apache.kafka.connect.util.clusters.EmbeddedConnectCluster;
+import org.apache.kafka.connect.util.clusters.EmbeddedKafkaCluster;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.experimental.categories.Category;
+
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.connect.mirror.TestUtils.expectedRecords;
+import static org.apache.kafka.connect.util.clusters.EmbeddedConnectClusterAssertions.CONNECTOR_SETUP_DURATION_MS;
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import kafka.server.KafkaConfig$;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+//import org.junit.After;
+
+/**
+ * Common Test functions for MM2 integration tests
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationBaseTest {
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationBaseTest.class);
+    
+    protected static final int NUM_RECORDS_PER_PARTITION = 10;
+    public static final int NUM_PARTITIONS = 10;
+    protected static final int NUM_RECORDS_PRODUCED = NUM_PARTITIONS * NUM_RECORDS_PER_PARTITION;
+    protected static final int RECORD_TRANSFER_DURATION_MS = 30_000;
+    protected static final int CHECKPOINT_DURATION_MS = 20_000;
+    protected static final int RECORD_CONSUME_DURATION_MS = 20_000;
+    protected static final int OFFSET_SYNC_DURATION_MS = 30_000;
+    protected static final int NUM_WORKERS = 3;
+
+    
+    protected Map<String, String> mm2Props;
+    protected MirrorMakerConfig mm2Config; 
+    protected EmbeddedConnectCluster primary;
+    protected EmbeddedConnectCluster backup;
+    
+    private final AtomicBoolean exited = new AtomicBoolean(false);
+    private Properties primaryBrokerProps = new Properties();
+    protected Properties backupBrokerProps = new Properties();
+    private Map<String, String> primaryWorkerProps;
+    private Map<String, String> backupWorkerProps = new HashMap<>();
+    private Properties sslProps = new Properties();
+    
+    private void loadSslPropsFromBrokerConfig() {       
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG));
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ((Password) backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG)).value());
+        sslProps.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, "SSL");
+    }
+    
+    protected void setSslConfig() {
+        // set SSL config for kafka connect worker
+        backupWorkerProps.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        // set SSL config for producer used by source task in MM2
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup.producer." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+    }
+    
+    protected void startClusters() throws InterruptedException {
+        primaryBrokerProps.put("auto.create.topics.enable", "false");
+        backupBrokerProps.put("auto.create.topics.enable", "false");
+        
+        mm2Props = basicMM2Config();
+        
+        // if backup kafka cluster contains ssl config, enable ssl of kafka connect and mm2
+        final Object listeners = backupBrokerProps.get(KafkaConfig$.MODULE$.ListenersProp());
+        if (listeners != null && listeners.toString().contains("SSL")) {
+            loadSslPropsFromBrokerConfig();
+            setSslConfig();
+        }
+
+        mm2Config = new MirrorMakerConfig(mm2Props); 
+        primaryWorkerProps = mm2Config.workerConfig(new SourceAndTarget("backup", "primary"));
+        backupWorkerProps.putAll(mm2Config.workerConfig(new SourceAndTarget("primary", "backup")));
+        
+        primary = new EmbeddedConnectCluster.Builder()
+                .name("primary-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(primaryBrokerProps)
+                .workerProps(primaryWorkerProps)
+                .build();
+
+        backup = new EmbeddedConnectCluster.Builder()
+                .name("backup-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(backupBrokerProps)
+                .workerProps(backupWorkerProps)
+                .build();
+        
+        primary.start();
+        primary.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of primary-connect-cluster did not start in time.");
+        
+        backup.start();
+        backup.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of backup-connect-cluster did not start in time.");
+
+        createTopics();
+ 
+        dummyConsumption();
+        
+        log.info("primary REST service: {}", primary.endpointForResource("connectors"));
+        log.info("backup REST service: {}", backup.endpointForResource("connectors"));
+        log.info("primary brokers: {}", primary.kafka().bootstrapServers());
+        log.info("backup brokers: {}", backup.kafka().bootstrapServers());
+        
+        // now that the brokers are running, we can finish setting up the Connectors
+        mm2Props.put("primary.bootstrap.servers", primary.kafka().bootstrapServers());
+        mm2Props.put("backup.bootstrap.servers", backup.kafka().bootstrapServers());
+        
+        Exit.setExitProcedure((status, errorCode) -> exited.set(true));
+    }
+    
+    public void shutdownClusters() {
+        for (String x : primary.connectors()) {
+            primary.deleteConnector(x);
+        }
+        for (String x : backup.connectors()) {
+            backup.deleteConnector(x);
+        }
+        deleteAllTopics(primary.kafka());
+        deleteAllTopics(backup.kafka());
+        primary.stop();
+        backup.stop();
+        try {
+            assertFalse(exited.get());
+        } finally {
+            Exit.resetExitProcedure();
+        }
+    }
+    /*
+     * launch the connectors on kafka connect cluster and check if they are running
+     */
+    protected static void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster, 
+            List<Class> connectorClasses, MirrorMakerConfig mm2Config, 
+            String primary, String backup) throws InterruptedException {
+        for (int i = 0; i < connectorClasses.size(); i++) {
+            String connector = connectorClasses.get(i).getSimpleName();
+            connectCluster.configureConnector(connector, mm2Config.connectorBaseConfig(
+                new SourceAndTarget(primary, backup), connectorClasses.get(i)));
+        }
+        
+        // we wait for the connector and tasks to come up for each connector, so that when we do the
+        // actual testing, we are certain that the tasks are up and running; this will prevent
+        // flaky tests where the connector and tasks didn't start up in time for the tests to be
+        // run
+        List<String> connectorNames = connectorClasses.stream().map(x -> x.getSimpleName())
+                .collect(Collectors.toList());
+        for (String connector : connectorNames) {
+            connectCluster.assertions().assertConnectorAndAtLeastNumTasksAreRunning(connector, 1,
+                    "Connector " + connector + " tasks did not start in time on cluster: " + connectCluster);
+        }
+    }
+ 
+    /*
+     * delete all topics of the input kafka cluster
+     */
+    protected static void deleteAllTopics(EmbeddedKafkaCluster cluster) {
+        Admin client = cluster.createAdminClient();
+        try {
+            client.deleteTopics(client.listTopics().names().get());
+        } catch (Throwable e) {
+        }
+    }
+    
+    /*
+     * retrieve the config value based on the input cluster, topic and config name
+     */
+    protected static String getTopicConfig(EmbeddedKafkaCluster cluster, String topic, String configName) {
+        Admin client = cluster.createAdminClient();
+        Collection<ConfigResource> cr =  Collections.singleton(
+                new ConfigResource(ConfigResource.Type.TOPIC, topic)); 
+        try {
+            DescribeConfigsResult configsResult = client.describeConfigs(cr);
+            Config allConfigs = (Config) configsResult.all().get().values().toArray()[0];
+            Iterator configIterator = allConfigs.entries().iterator();
+            while (configIterator.hasNext()) {
+                ConfigEntry currentConfig = (ConfigEntry) configIterator.next();     
+                if (currentConfig.name().equals(configName)) {
+                    return currentConfig.value();
+                }
+            }
+        } catch (Throwable e) {
+        }
+        return null;
+    }
+    
+    /*
+     *  produce messages to the cluster and  topic 
+     */
+    protected void produceMessages(EmbeddedConnectCluster cluster, String topicName) {
+        Map<String, String> recordSent = expectedRecords(NUM_RECORDS_PRODUCED);
+        for (Map.Entry<String, String> entry : recordSent.entrySet()) {
+            cluster.kafka().produce(topicName, entry.getKey(), entry.getValue());
+        }
+    }
+
+    /*
+     * produce messages to the cluster and topic partition less than numPartitions 
+     */
+    protected void produceMessages(EmbeddedConnectCluster cluster, String topicName, int numPartitions) {
+        int cnt = 0;
+        for (int r = 0; r < NUM_RECORDS_PER_PARTITION; r++)
+            for (int p = 0; p < numPartitions; p++)
+                cluster.kafka().produce(topicName, p, "key", "value-" + cnt++);
+    }
+    
+    /*
+     * given consumer group, topics and expected number of records, make sure the consumer group
+     * offsets are eventually synced to the expected offset numbers
+     */
+    protected static <T> void waitForConsumerGroupOffsetSync(EmbeddedConnectCluster connect, 
+            Consumer<T, T> consumer, List<String> topics, String consumerGroupId, int numRecords)
+            throws InterruptedException {
+        Admin adminClient = connect.kafka().createAdminClient();
+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());
+        for (int partitionIndex = 0; partitionIndex < NUM_PARTITIONS; partitionIndex++) {
+            for (String topic : topics) {
+                tps.add(new TopicPartition(topic, partitionIndex));
+            }
+        }
+        long expectedTotalOffsets = numRecords * topics.size();
+
+        waitForCondition(() -> {
+            Map<TopicPartition, OffsetAndMetadata> consumerGroupOffsets =
+                    adminClient.listConsumerGroupOffsets(consumerGroupId).partitionsToOffsetAndMetadata().get();
+            long consumerGroupOffsetTotal = consumerGroupOffsets.values().stream()
+                    .mapToLong(metadata -> metadata.offset()).sum();
+
+            Map<TopicPartition, Long> offsets = consumer.endOffsets(tps, Duration.ofMillis(500));
+            long totalOffsets = offsets.values().stream().mapToLong(l -> l).sum();
+
+            // make sure the consumer group offsets are synced to expected number
+            return totalOffsets == expectedTotalOffsets && consumerGroupOffsetTotal > 0;
+        }, OFFSET_SYNC_DURATION_MS, "Consumer group offset sync is not complete in time");
+    }
+
+    /*
+     * make sure the consumer to consume expected number of records
+     */
+    protected static <T> void waitForConsumingAllRecords(Consumer<T, T> consumer, int numExpectedRecords) 
+            throws InterruptedException {
+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);
+        waitForCondition(() -> {
+            ConsumerRecords<T, T> records = consumer.poll(Duration.ofMillis(500));
+            return numExpectedRecords == totalConsumedRecords.addAndGet(records.count());
+        }, RECORD_CONSUME_DURATION_MS, "Consumer cannot consume all records in time");
+        consumer.commitSync();
+        consumer.close();
+    }
+   
+    /*
+     * MM2 config to use in integration tests
+     */
+    protected static Map<String, String> basicMM2Config() {
+        Map<String, String> mm2Props = new HashMap<>();
+        mm2Props.put("clusters", "primary, backup");
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510117000
id: 510118124
url: https://api.github.com/repos/apache/kafka/pulls/comments/510118124
body: We can use `putIfAbstent()`
diff_hunk: @@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.CommonClientConfigs;
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.admin.Config;
+import org.apache.kafka.clients.admin.ConfigEntry;
+import org.apache.kafka.clients.admin.DescribeConfigsResult;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerConfig;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.KafkaConsumer;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.ConfigResource;
+import org.apache.kafka.common.config.SslConfigs;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.config.types.Password;
+import org.apache.kafka.common.utils.Exit;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.errors.ConnectException;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.SourceAndTarget;
+import org.apache.kafka.connect.util.clusters.EmbeddedConnectCluster;
+import org.apache.kafka.connect.util.clusters.EmbeddedKafkaCluster;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.experimental.categories.Category;
+
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.connect.mirror.TestUtils.expectedRecords;
+import static org.apache.kafka.connect.util.clusters.EmbeddedConnectClusterAssertions.CONNECTOR_SETUP_DURATION_MS;
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import kafka.server.KafkaConfig$;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+//import org.junit.After;
+
+/**
+ * Common Test functions for MM2 integration tests
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationBaseTest {
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationBaseTest.class);
+    
+    protected static final int NUM_RECORDS_PER_PARTITION = 10;
+    public static final int NUM_PARTITIONS = 10;
+    protected static final int NUM_RECORDS_PRODUCED = NUM_PARTITIONS * NUM_RECORDS_PER_PARTITION;
+    protected static final int RECORD_TRANSFER_DURATION_MS = 30_000;
+    protected static final int CHECKPOINT_DURATION_MS = 20_000;
+    protected static final int RECORD_CONSUME_DURATION_MS = 20_000;
+    protected static final int OFFSET_SYNC_DURATION_MS = 30_000;
+    protected static final int NUM_WORKERS = 3;
+
+    
+    protected Map<String, String> mm2Props;
+    protected MirrorMakerConfig mm2Config; 
+    protected EmbeddedConnectCluster primary;
+    protected EmbeddedConnectCluster backup;
+    
+    private final AtomicBoolean exited = new AtomicBoolean(false);
+    private Properties primaryBrokerProps = new Properties();
+    protected Properties backupBrokerProps = new Properties();
+    private Map<String, String> primaryWorkerProps;
+    private Map<String, String> backupWorkerProps = new HashMap<>();
+    private Properties sslProps = new Properties();
+    
+    private void loadSslPropsFromBrokerConfig() {       
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG));
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ((Password) backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG)).value());
+        sslProps.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, "SSL");
+    }
+    
+    protected void setSslConfig() {
+        // set SSL config for kafka connect worker
+        backupWorkerProps.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        // set SSL config for producer used by source task in MM2
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup.producer." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+    }
+    
+    protected void startClusters() throws InterruptedException {
+        primaryBrokerProps.put("auto.create.topics.enable", "false");
+        backupBrokerProps.put("auto.create.topics.enable", "false");
+        
+        mm2Props = basicMM2Config();
+        
+        // if backup kafka cluster contains ssl config, enable ssl of kafka connect and mm2
+        final Object listeners = backupBrokerProps.get(KafkaConfig$.MODULE$.ListenersProp());
+        if (listeners != null && listeners.toString().contains("SSL")) {
+            loadSslPropsFromBrokerConfig();
+            setSslConfig();
+        }
+
+        mm2Config = new MirrorMakerConfig(mm2Props); 
+        primaryWorkerProps = mm2Config.workerConfig(new SourceAndTarget("backup", "primary"));
+        backupWorkerProps.putAll(mm2Config.workerConfig(new SourceAndTarget("primary", "backup")));
+        
+        primary = new EmbeddedConnectCluster.Builder()
+                .name("primary-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(primaryBrokerProps)
+                .workerProps(primaryWorkerProps)
+                .build();
+
+        backup = new EmbeddedConnectCluster.Builder()
+                .name("backup-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(backupBrokerProps)
+                .workerProps(backupWorkerProps)
+                .build();
+        
+        primary.start();
+        primary.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of primary-connect-cluster did not start in time.");
+        
+        backup.start();
+        backup.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of backup-connect-cluster did not start in time.");
+
+        createTopics();
+ 
+        dummyConsumption();
+        
+        log.info("primary REST service: {}", primary.endpointForResource("connectors"));
+        log.info("backup REST service: {}", backup.endpointForResource("connectors"));
+        log.info("primary brokers: {}", primary.kafka().bootstrapServers());
+        log.info("backup brokers: {}", backup.kafka().bootstrapServers());
+        
+        // now that the brokers are running, we can finish setting up the Connectors
+        mm2Props.put("primary.bootstrap.servers", primary.kafka().bootstrapServers());
+        mm2Props.put("backup.bootstrap.servers", backup.kafka().bootstrapServers());
+        
+        Exit.setExitProcedure((status, errorCode) -> exited.set(true));
+    }
+    
+    public void shutdownClusters() {
+        for (String x : primary.connectors()) {
+            primary.deleteConnector(x);
+        }
+        for (String x : backup.connectors()) {
+            backup.deleteConnector(x);
+        }
+        deleteAllTopics(primary.kafka());
+        deleteAllTopics(backup.kafka());
+        primary.stop();
+        backup.stop();
+        try {
+            assertFalse(exited.get());
+        } finally {
+            Exit.resetExitProcedure();
+        }
+    }
+    /*
+     * launch the connectors on kafka connect cluster and check if they are running
+     */
+    protected static void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster, 
+            List<Class> connectorClasses, MirrorMakerConfig mm2Config, 
+            String primary, String backup) throws InterruptedException {
+        for (int i = 0; i < connectorClasses.size(); i++) {
+            String connector = connectorClasses.get(i).getSimpleName();
+            connectCluster.configureConnector(connector, mm2Config.connectorBaseConfig(
+                new SourceAndTarget(primary, backup), connectorClasses.get(i)));
+        }
+        
+        // we wait for the connector and tasks to come up for each connector, so that when we do the
+        // actual testing, we are certain that the tasks are up and running; this will prevent
+        // flaky tests where the connector and tasks didn't start up in time for the tests to be
+        // run
+        List<String> connectorNames = connectorClasses.stream().map(x -> x.getSimpleName())
+                .collect(Collectors.toList());
+        for (String connector : connectorNames) {
+            connectCluster.assertions().assertConnectorAndAtLeastNumTasksAreRunning(connector, 1,
+                    "Connector " + connector + " tasks did not start in time on cluster: " + connectCluster);
+        }
+    }
+ 
+    /*
+     * delete all topics of the input kafka cluster
+     */
+    protected static void deleteAllTopics(EmbeddedKafkaCluster cluster) {
+        Admin client = cluster.createAdminClient();
+        try {
+            client.deleteTopics(client.listTopics().names().get());
+        } catch (Throwable e) {
+        }
+    }
+    
+    /*
+     * retrieve the config value based on the input cluster, topic and config name
+     */
+    protected static String getTopicConfig(EmbeddedKafkaCluster cluster, String topic, String configName) {
+        Admin client = cluster.createAdminClient();
+        Collection<ConfigResource> cr =  Collections.singleton(
+                new ConfigResource(ConfigResource.Type.TOPIC, topic)); 
+        try {
+            DescribeConfigsResult configsResult = client.describeConfigs(cr);
+            Config allConfigs = (Config) configsResult.all().get().values().toArray()[0];
+            Iterator configIterator = allConfigs.entries().iterator();
+            while (configIterator.hasNext()) {
+                ConfigEntry currentConfig = (ConfigEntry) configIterator.next();     
+                if (currentConfig.name().equals(configName)) {
+                    return currentConfig.value();
+                }
+            }
+        } catch (Throwable e) {
+        }
+        return null;
+    }
+    
+    /*
+     *  produce messages to the cluster and  topic 
+     */
+    protected void produceMessages(EmbeddedConnectCluster cluster, String topicName) {
+        Map<String, String> recordSent = expectedRecords(NUM_RECORDS_PRODUCED);
+        for (Map.Entry<String, String> entry : recordSent.entrySet()) {
+            cluster.kafka().produce(topicName, entry.getKey(), entry.getValue());
+        }
+    }
+
+    /*
+     * produce messages to the cluster and topic partition less than numPartitions 
+     */
+    protected void produceMessages(EmbeddedConnectCluster cluster, String topicName, int numPartitions) {
+        int cnt = 0;
+        for (int r = 0; r < NUM_RECORDS_PER_PARTITION; r++)
+            for (int p = 0; p < numPartitions; p++)
+                cluster.kafka().produce(topicName, p, "key", "value-" + cnt++);
+    }
+    
+    /*
+     * given consumer group, topics and expected number of records, make sure the consumer group
+     * offsets are eventually synced to the expected offset numbers
+     */
+    protected static <T> void waitForConsumerGroupOffsetSync(EmbeddedConnectCluster connect, 
+            Consumer<T, T> consumer, List<String> topics, String consumerGroupId, int numRecords)
+            throws InterruptedException {
+        Admin adminClient = connect.kafka().createAdminClient();
+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());
+        for (int partitionIndex = 0; partitionIndex < NUM_PARTITIONS; partitionIndex++) {
+            for (String topic : topics) {
+                tps.add(new TopicPartition(topic, partitionIndex));
+            }
+        }
+        long expectedTotalOffsets = numRecords * topics.size();
+
+        waitForCondition(() -> {
+            Map<TopicPartition, OffsetAndMetadata> consumerGroupOffsets =
+                    adminClient.listConsumerGroupOffsets(consumerGroupId).partitionsToOffsetAndMetadata().get();
+            long consumerGroupOffsetTotal = consumerGroupOffsets.values().stream()
+                    .mapToLong(metadata -> metadata.offset()).sum();
+
+            Map<TopicPartition, Long> offsets = consumer.endOffsets(tps, Duration.ofMillis(500));
+            long totalOffsets = offsets.values().stream().mapToLong(l -> l).sum();
+
+            // make sure the consumer group offsets are synced to expected number
+            return totalOffsets == expectedTotalOffsets && consumerGroupOffsetTotal > 0;
+        }, OFFSET_SYNC_DURATION_MS, "Consumer group offset sync is not complete in time");
+    }
+
+    /*
+     * make sure the consumer to consume expected number of records
+     */
+    protected static <T> void waitForConsumingAllRecords(Consumer<T, T> consumer, int numExpectedRecords) 
+            throws InterruptedException {
+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);
+        waitForCondition(() -> {
+            ConsumerRecords<T, T> records = consumer.poll(Duration.ofMillis(500));
+            return numExpectedRecords == totalConsumedRecords.addAndGet(records.count());
+        }, RECORD_CONSUME_DURATION_MS, "Consumer cannot consume all records in time");
+        consumer.commitSync();
+        consumer.close();
+    }
+   
+    /*
+     * MM2 config to use in integration tests
+     */
+    protected static Map<String, String> basicMM2Config() {
+        Map<String, String> mm2Props = new HashMap<>();
+        mm2Props.put("clusters", "primary, backup");
+        mm2Props.put("max.tasks", "10");
+        mm2Props.put("topics", "test-topic-.*, primary.test-topic-.*, backup.test-topic-.*");
+        mm2Props.put("groups", "consumer-group-.*");
+        mm2Props.put("primary->backup.enabled", "true");
+        mm2Props.put("backup->primary.enabled", "true");
+        mm2Props.put("sync.topic.acls.enabled", "false");
+        mm2Props.put("emit.checkpoints.interval.seconds", "1");
+        mm2Props.put("emit.heartbeats.interval.seconds", "1");
+        mm2Props.put("refresh.topics.interval.seconds", "1");
+        mm2Props.put("refresh.groups.interval.seconds", "1");
+        mm2Props.put("checkpoints.topic.replication.factor", "1");
+        mm2Props.put("heartbeats.topic.replication.factor", "1");
+        mm2Props.put("offset-syncs.topic.replication.factor", "1");
+        mm2Props.put("config.storage.replication.factor", "1");
+        mm2Props.put("offset.storage.replication.factor", "1");
+        mm2Props.put("status.storage.replication.factor", "1");
+        mm2Props.put("replication.factor", "1");
+        
+        return mm2Props;
+    }
+    
+    /*
+     * restart kafka broker and make sure it is successful
+     */
+    protected static void restartKafkaBroker(EmbeddedConnectCluster connect) throws InterruptedException {
+
+        connect.kafka().stopOnlyKafka();
+        log.trace("issue kafka stop");
+        connect.assertions().assertExactlyNumWorkersAreUp(NUM_WORKERS,
+                "Group of workers did not remain the same after broker shutdown");
+
+        // Allow for the workers to discover that the coordinator is unavailable, if the connector
+        // is set up on this current EmbeddedConnectCluster
+        Thread.sleep(TimeUnit.SECONDS.toMillis(10));
+
+        // Wait for the broker to be stopped
+        assertTrue("Failed to stop kafka broker within " + CONNECTOR_SETUP_DURATION_MS + "ms",
+                connect.kafka().runningBrokers().size() == 0);
+
+        connect.kafka().startOnlyKafkaOnSamePorts();
+        log.trace("issue kafka start");
+        // Allow for the kafka brokers to come back online
+        Thread.sleep(TimeUnit.SECONDS.toMillis(10));
+
+        connect.assertions().assertExactlyNumWorkersAreUp(NUM_WORKERS,
+                "Group of workers did not remain the same within the designated time.");
+
+        // Allow for the workers to rebalance and reach a steady state
+        Thread.sleep(TimeUnit.SECONDS.toMillis(10));
+
+        // Expect that the broker has started again
+        assertTrue("Failed to start kafka broker within " + CONNECTOR_SETUP_DURATION_MS + "ms",
+                connect.kafka().runningBrokers().size() > 0);
+    }
+    
+    protected void createTopics() {
+        // to verify topic config will be sync-ed across clusters
+        Map<String, String> topicConfig = new HashMap<>();
+        topicConfig.put(TopicConfig.CLEANUP_POLICY_CONFIG, TopicConfig.CLEANUP_POLICY_COMPACT);
+        // create these topics before starting the connectors so we don't need to wait for discovery
+        primary.kafka().createTopic("test-topic-1", NUM_PARTITIONS, 1, topicConfig);
+        primary.kafka().createTopic("backup.test-topic-1", 1);
+        primary.kafka().createTopic("heartbeats", 1);
+        backup.kafka().createTopic("test-topic-1", NUM_PARTITIONS);
+        backup.kafka().createTopic("primary.test-topic-1", 1);
+        backup.kafka().createTopic("heartbeats", 1);
+    }
+    
+    protected KafkaConsumer<String, String> createSslConsumer(Map<String, Object> consumerProps, String... topics) {
+        Map<String, Object> props = new HashMap<>(consumerProps);
+
+        if (props.get(ConsumerConfig.GROUP_ID_CONFIG) == null) {
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510118124
id: 510118905
url: https://api.github.com/repos/apache/kafka/pulls/comments/510118905
body: Why are we rethrowing as `ConnectException`?
diff_hunk: @@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.CommonClientConfigs;
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.admin.Config;
+import org.apache.kafka.clients.admin.ConfigEntry;
+import org.apache.kafka.clients.admin.DescribeConfigsResult;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerConfig;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.KafkaConsumer;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.ConfigResource;
+import org.apache.kafka.common.config.SslConfigs;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.config.types.Password;
+import org.apache.kafka.common.utils.Exit;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.errors.ConnectException;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.SourceAndTarget;
+import org.apache.kafka.connect.util.clusters.EmbeddedConnectCluster;
+import org.apache.kafka.connect.util.clusters.EmbeddedKafkaCluster;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.experimental.categories.Category;
+
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.connect.mirror.TestUtils.expectedRecords;
+import static org.apache.kafka.connect.util.clusters.EmbeddedConnectClusterAssertions.CONNECTOR_SETUP_DURATION_MS;
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import kafka.server.KafkaConfig$;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+//import org.junit.After;
+
+/**
+ * Common Test functions for MM2 integration tests
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationBaseTest {
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationBaseTest.class);
+    
+    protected static final int NUM_RECORDS_PER_PARTITION = 10;
+    public static final int NUM_PARTITIONS = 10;
+    protected static final int NUM_RECORDS_PRODUCED = NUM_PARTITIONS * NUM_RECORDS_PER_PARTITION;
+    protected static final int RECORD_TRANSFER_DURATION_MS = 30_000;
+    protected static final int CHECKPOINT_DURATION_MS = 20_000;
+    protected static final int RECORD_CONSUME_DURATION_MS = 20_000;
+    protected static final int OFFSET_SYNC_DURATION_MS = 30_000;
+    protected static final int NUM_WORKERS = 3;
+
+    
+    protected Map<String, String> mm2Props;
+    protected MirrorMakerConfig mm2Config; 
+    protected EmbeddedConnectCluster primary;
+    protected EmbeddedConnectCluster backup;
+    
+    private final AtomicBoolean exited = new AtomicBoolean(false);
+    private Properties primaryBrokerProps = new Properties();
+    protected Properties backupBrokerProps = new Properties();
+    private Map<String, String> primaryWorkerProps;
+    private Map<String, String> backupWorkerProps = new HashMap<>();
+    private Properties sslProps = new Properties();
+    
+    private void loadSslPropsFromBrokerConfig() {       
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG));
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ((Password) backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG)).value());
+        sslProps.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, "SSL");
+    }
+    
+    protected void setSslConfig() {
+        // set SSL config for kafka connect worker
+        backupWorkerProps.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        // set SSL config for producer used by source task in MM2
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup.producer." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+    }
+    
+    protected void startClusters() throws InterruptedException {
+        primaryBrokerProps.put("auto.create.topics.enable", "false");
+        backupBrokerProps.put("auto.create.topics.enable", "false");
+        
+        mm2Props = basicMM2Config();
+        
+        // if backup kafka cluster contains ssl config, enable ssl of kafka connect and mm2
+        final Object listeners = backupBrokerProps.get(KafkaConfig$.MODULE$.ListenersProp());
+        if (listeners != null && listeners.toString().contains("SSL")) {
+            loadSslPropsFromBrokerConfig();
+            setSslConfig();
+        }
+
+        mm2Config = new MirrorMakerConfig(mm2Props); 
+        primaryWorkerProps = mm2Config.workerConfig(new SourceAndTarget("backup", "primary"));
+        backupWorkerProps.putAll(mm2Config.workerConfig(new SourceAndTarget("primary", "backup")));
+        
+        primary = new EmbeddedConnectCluster.Builder()
+                .name("primary-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(primaryBrokerProps)
+                .workerProps(primaryWorkerProps)
+                .build();
+
+        backup = new EmbeddedConnectCluster.Builder()
+                .name("backup-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(backupBrokerProps)
+                .workerProps(backupWorkerProps)
+                .build();
+        
+        primary.start();
+        primary.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of primary-connect-cluster did not start in time.");
+        
+        backup.start();
+        backup.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of backup-connect-cluster did not start in time.");
+
+        createTopics();
+ 
+        dummyConsumption();
+        
+        log.info("primary REST service: {}", primary.endpointForResource("connectors"));
+        log.info("backup REST service: {}", backup.endpointForResource("connectors"));
+        log.info("primary brokers: {}", primary.kafka().bootstrapServers());
+        log.info("backup brokers: {}", backup.kafka().bootstrapServers());
+        
+        // now that the brokers are running, we can finish setting up the Connectors
+        mm2Props.put("primary.bootstrap.servers", primary.kafka().bootstrapServers());
+        mm2Props.put("backup.bootstrap.servers", backup.kafka().bootstrapServers());
+        
+        Exit.setExitProcedure((status, errorCode) -> exited.set(true));
+    }
+    
+    public void shutdownClusters() {
+        for (String x : primary.connectors()) {
+            primary.deleteConnector(x);
+        }
+        for (String x : backup.connectors()) {
+            backup.deleteConnector(x);
+        }
+        deleteAllTopics(primary.kafka());
+        deleteAllTopics(backup.kafka());
+        primary.stop();
+        backup.stop();
+        try {
+            assertFalse(exited.get());
+        } finally {
+            Exit.resetExitProcedure();
+        }
+    }
+    /*
+     * launch the connectors on kafka connect cluster and check if they are running
+     */
+    protected static void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster, 
+            List<Class> connectorClasses, MirrorMakerConfig mm2Config, 
+            String primary, String backup) throws InterruptedException {
+        for (int i = 0; i < connectorClasses.size(); i++) {
+            String connector = connectorClasses.get(i).getSimpleName();
+            connectCluster.configureConnector(connector, mm2Config.connectorBaseConfig(
+                new SourceAndTarget(primary, backup), connectorClasses.get(i)));
+        }
+        
+        // we wait for the connector and tasks to come up for each connector, so that when we do the
+        // actual testing, we are certain that the tasks are up and running; this will prevent
+        // flaky tests where the connector and tasks didn't start up in time for the tests to be
+        // run
+        List<String> connectorNames = connectorClasses.stream().map(x -> x.getSimpleName())
+                .collect(Collectors.toList());
+        for (String connector : connectorNames) {
+            connectCluster.assertions().assertConnectorAndAtLeastNumTasksAreRunning(connector, 1,
+                    "Connector " + connector + " tasks did not start in time on cluster: " + connectCluster);
+        }
+    }
+ 
+    /*
+     * delete all topics of the input kafka cluster
+     */
+    protected static void deleteAllTopics(EmbeddedKafkaCluster cluster) {
+        Admin client = cluster.createAdminClient();
+        try {
+            client.deleteTopics(client.listTopics().names().get());
+        } catch (Throwable e) {
+        }
+    }
+    
+    /*
+     * retrieve the config value based on the input cluster, topic and config name
+     */
+    protected static String getTopicConfig(EmbeddedKafkaCluster cluster, String topic, String configName) {
+        Admin client = cluster.createAdminClient();
+        Collection<ConfigResource> cr =  Collections.singleton(
+                new ConfigResource(ConfigResource.Type.TOPIC, topic)); 
+        try {
+            DescribeConfigsResult configsResult = client.describeConfigs(cr);
+            Config allConfigs = (Config) configsResult.all().get().values().toArray()[0];
+            Iterator configIterator = allConfigs.entries().iterator();
+            while (configIterator.hasNext()) {
+                ConfigEntry currentConfig = (ConfigEntry) configIterator.next();     
+                if (currentConfig.name().equals(configName)) {
+                    return currentConfig.value();
+                }
+            }
+        } catch (Throwable e) {
+        }
+        return null;
+    }
+    
+    /*
+     *  produce messages to the cluster and  topic 
+     */
+    protected void produceMessages(EmbeddedConnectCluster cluster, String topicName) {
+        Map<String, String> recordSent = expectedRecords(NUM_RECORDS_PRODUCED);
+        for (Map.Entry<String, String> entry : recordSent.entrySet()) {
+            cluster.kafka().produce(topicName, entry.getKey(), entry.getValue());
+        }
+    }
+
+    /*
+     * produce messages to the cluster and topic partition less than numPartitions 
+     */
+    protected void produceMessages(EmbeddedConnectCluster cluster, String topicName, int numPartitions) {
+        int cnt = 0;
+        for (int r = 0; r < NUM_RECORDS_PER_PARTITION; r++)
+            for (int p = 0; p < numPartitions; p++)
+                cluster.kafka().produce(topicName, p, "key", "value-" + cnt++);
+    }
+    
+    /*
+     * given consumer group, topics and expected number of records, make sure the consumer group
+     * offsets are eventually synced to the expected offset numbers
+     */
+    protected static <T> void waitForConsumerGroupOffsetSync(EmbeddedConnectCluster connect, 
+            Consumer<T, T> consumer, List<String> topics, String consumerGroupId, int numRecords)
+            throws InterruptedException {
+        Admin adminClient = connect.kafka().createAdminClient();
+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());
+        for (int partitionIndex = 0; partitionIndex < NUM_PARTITIONS; partitionIndex++) {
+            for (String topic : topics) {
+                tps.add(new TopicPartition(topic, partitionIndex));
+            }
+        }
+        long expectedTotalOffsets = numRecords * topics.size();
+
+        waitForCondition(() -> {
+            Map<TopicPartition, OffsetAndMetadata> consumerGroupOffsets =
+                    adminClient.listConsumerGroupOffsets(consumerGroupId).partitionsToOffsetAndMetadata().get();
+            long consumerGroupOffsetTotal = consumerGroupOffsets.values().stream()
+                    .mapToLong(metadata -> metadata.offset()).sum();
+
+            Map<TopicPartition, Long> offsets = consumer.endOffsets(tps, Duration.ofMillis(500));
+            long totalOffsets = offsets.values().stream().mapToLong(l -> l).sum();
+
+            // make sure the consumer group offsets are synced to expected number
+            return totalOffsets == expectedTotalOffsets && consumerGroupOffsetTotal > 0;
+        }, OFFSET_SYNC_DURATION_MS, "Consumer group offset sync is not complete in time");
+    }
+
+    /*
+     * make sure the consumer to consume expected number of records
+     */
+    protected static <T> void waitForConsumingAllRecords(Consumer<T, T> consumer, int numExpectedRecords) 
+            throws InterruptedException {
+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);
+        waitForCondition(() -> {
+            ConsumerRecords<T, T> records = consumer.poll(Duration.ofMillis(500));
+            return numExpectedRecords == totalConsumedRecords.addAndGet(records.count());
+        }, RECORD_CONSUME_DURATION_MS, "Consumer cannot consume all records in time");
+        consumer.commitSync();
+        consumer.close();
+    }
+   
+    /*
+     * MM2 config to use in integration tests
+     */
+    protected static Map<String, String> basicMM2Config() {
+        Map<String, String> mm2Props = new HashMap<>();
+        mm2Props.put("clusters", "primary, backup");
+        mm2Props.put("max.tasks", "10");
+        mm2Props.put("topics", "test-topic-.*, primary.test-topic-.*, backup.test-topic-.*");
+        mm2Props.put("groups", "consumer-group-.*");
+        mm2Props.put("primary->backup.enabled", "true");
+        mm2Props.put("backup->primary.enabled", "true");
+        mm2Props.put("sync.topic.acls.enabled", "false");
+        mm2Props.put("emit.checkpoints.interval.seconds", "1");
+        mm2Props.put("emit.heartbeats.interval.seconds", "1");
+        mm2Props.put("refresh.topics.interval.seconds", "1");
+        mm2Props.put("refresh.groups.interval.seconds", "1");
+        mm2Props.put("checkpoints.topic.replication.factor", "1");
+        mm2Props.put("heartbeats.topic.replication.factor", "1");
+        mm2Props.put("offset-syncs.topic.replication.factor", "1");
+        mm2Props.put("config.storage.replication.factor", "1");
+        mm2Props.put("offset.storage.replication.factor", "1");
+        mm2Props.put("status.storage.replication.factor", "1");
+        mm2Props.put("replication.factor", "1");
+        
+        return mm2Props;
+    }
+    
+    /*
+     * restart kafka broker and make sure it is successful
+     */
+    protected static void restartKafkaBroker(EmbeddedConnectCluster connect) throws InterruptedException {
+
+        connect.kafka().stopOnlyKafka();
+        log.trace("issue kafka stop");
+        connect.assertions().assertExactlyNumWorkersAreUp(NUM_WORKERS,
+                "Group of workers did not remain the same after broker shutdown");
+
+        // Allow for the workers to discover that the coordinator is unavailable, if the connector
+        // is set up on this current EmbeddedConnectCluster
+        Thread.sleep(TimeUnit.SECONDS.toMillis(10));
+
+        // Wait for the broker to be stopped
+        assertTrue("Failed to stop kafka broker within " + CONNECTOR_SETUP_DURATION_MS + "ms",
+                connect.kafka().runningBrokers().size() == 0);
+
+        connect.kafka().startOnlyKafkaOnSamePorts();
+        log.trace("issue kafka start");
+        // Allow for the kafka brokers to come back online
+        Thread.sleep(TimeUnit.SECONDS.toMillis(10));
+
+        connect.assertions().assertExactlyNumWorkersAreUp(NUM_WORKERS,
+                "Group of workers did not remain the same within the designated time.");
+
+        // Allow for the workers to rebalance and reach a steady state
+        Thread.sleep(TimeUnit.SECONDS.toMillis(10));
+
+        // Expect that the broker has started again
+        assertTrue("Failed to start kafka broker within " + CONNECTOR_SETUP_DURATION_MS + "ms",
+                connect.kafka().runningBrokers().size() > 0);
+    }
+    
+    protected void createTopics() {
+        // to verify topic config will be sync-ed across clusters
+        Map<String, String> topicConfig = new HashMap<>();
+        topicConfig.put(TopicConfig.CLEANUP_POLICY_CONFIG, TopicConfig.CLEANUP_POLICY_COMPACT);
+        // create these topics before starting the connectors so we don't need to wait for discovery
+        primary.kafka().createTopic("test-topic-1", NUM_PARTITIONS, 1, topicConfig);
+        primary.kafka().createTopic("backup.test-topic-1", 1);
+        primary.kafka().createTopic("heartbeats", 1);
+        backup.kafka().createTopic("test-topic-1", NUM_PARTITIONS);
+        backup.kafka().createTopic("primary.test-topic-1", 1);
+        backup.kafka().createTopic("heartbeats", 1);
+    }
+    
+    protected KafkaConsumer<String, String> createSslConsumer(Map<String, Object> consumerProps, String... topics) {
+        Map<String, Object> props = new HashMap<>(consumerProps);
+
+        if (props.get(ConsumerConfig.GROUP_ID_CONFIG) == null) {
+            props.put(ConsumerConfig.GROUP_ID_CONFIG, UUID.randomUUID().toString());
+        }
+        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, backup.kafka().bootstrapServers());
+        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, "false");
+        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
+        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringDeserializer");
+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringDeserializer");
+
+        // ssl config
+        props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        
+        KafkaConsumer<String, String> consumer;
+        try {
+            consumer = new KafkaConsumer<>(props);
+        } catch (Throwable t) {
+            throw new ConnectException("Failed to create consumer", t);
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510118905
id: 510121541
url: https://api.github.com/repos/apache/kafka/pulls/comments/510121541
body: We seem to use `poll(Duration.ofMillis(500))` in many places, can we have a constant?
diff_hunk: @@ -0,0 +1,372 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.errors.TimeoutException;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.mirror.MirrorCheckpointConnector;
+import org.apache.kafka.connect.mirror.MirrorClient;
+import org.apache.kafka.connect.mirror.MirrorHeartbeatConnector;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.MirrorSourceConnector;
+import org.apache.kafka.connect.mirror.utils.ThreadedConsumer;
+import org.apache.kafka.connect.mirror.utils.ThreadedProducer;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.Before;
+import org.junit.After;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.time.Duration;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Collections;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertNotNull;
+
+/**
+ * Tests MM2 replication and failover/failback logic.
+ *
+ * MM2 is configured with active/active replication between two Kafka clusters. Tests validate that
+ * records sent to either cluster arrive at the other cluster. Then, a consumer group is migrated from
+ * one cluster to the other and back. Tests validate that consumer offsets are translated and replicated
+ * between clusters during this failover and failback.
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationTest extends MirrorConnectorsIntegrationBaseTest {
+
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationTest.class);
+    
+    private static final List<Class> CONNECTOR_LIST = 
+            Arrays.asList(MirrorSourceConnector.class, MirrorCheckpointConnector.class, MirrorHeartbeatConnector.class);
+    
+    @Before
+    public void setup() throws InterruptedException {
+        startClusters();
+    }
+
+    @After
+    public void close() {
+        shutdownClusters();
+    }
+
+    @Test
+    public void testReplication() throws InterruptedException {
+        produceMessages(primary, "test-topic-1");
+        produceMessages(backup, "test-topic-1");
+        String consumerGroupName = "consumer-group-testReplication";
+        Map<String, Object> consumerProps = new HashMap<String, Object>() {{
+                put("group.id", consumerGroupName);
+                put("auto.offset.reset", "latest");
+            }};
+        // create consumers before starting the connectors so we don't need to wait for discovery
+        Consumer<byte[], byte[]> primaryConsumer = primary.kafka().createConsumerAndSubscribeTo(consumerProps, "test-topic-1");
+        waitForConsumingAllRecords(primaryConsumer, 0);
+
+        Consumer<byte[], byte[]> backupConsumer = backup.kafka().createConsumerAndSubscribeTo(consumerProps, "test-topic-1");
+        waitForConsumingAllRecords(backupConsumer, 0);
+        
+        mm2Config = new MirrorMakerConfig(mm2Props);
+
+        waitUntilMirrorMakerIsRunning(backup, CONNECTOR_LIST, mm2Config, "primary", "backup");
+        waitUntilMirrorMakerIsRunning(primary, CONNECTOR_LIST, mm2Config, "backup", "primary");   
+
+        MirrorClient primaryClient = new MirrorClient(mm2Config.clientConfig("primary"));
+        MirrorClient backupClient = new MirrorClient(mm2Config.clientConfig("backup"));
+        
+        assertEquals("topic config was not synced", TopicConfig.CLEANUP_POLICY_COMPACT, 
+                getTopicConfig(backup.kafka(), "primary.test-topic-1", TopicConfig.CLEANUP_POLICY_CONFIG));
+        
+        assertEquals("Records were not produced to primary cluster.", NUM_RECORDS_PRODUCED,
+            primary.kafka().consume(NUM_RECORDS_PRODUCED, RECORD_TRANSFER_DURATION_MS, "test-topic-1").count());
+        assertEquals("Records were not replicated to backup cluster.", NUM_RECORDS_PRODUCED,
+            backup.kafka().consume(NUM_RECORDS_PRODUCED, RECORD_TRANSFER_DURATION_MS, "primary.test-topic-1").count());
+        assertEquals("Records were not produced to backup cluster.", NUM_RECORDS_PRODUCED,
+            backup.kafka().consume(NUM_RECORDS_PRODUCED, RECORD_TRANSFER_DURATION_MS, "test-topic-1").count());
+        assertEquals("Records were not replicated to primary cluster.", NUM_RECORDS_PRODUCED,
+            primary.kafka().consume(NUM_RECORDS_PRODUCED, RECORD_TRANSFER_DURATION_MS, "backup.test-topic-1").count());
+        
+        assertEquals("Primary cluster doesn't have all records from both clusters.", NUM_RECORDS_PRODUCED * 2,
+            primary.kafka().consume(NUM_RECORDS_PRODUCED * 2, RECORD_TRANSFER_DURATION_MS, "backup.test-topic-1", "test-topic-1").count());
+        assertEquals("Backup cluster doesn't have all records from both clusters.", NUM_RECORDS_PRODUCED * 2,
+            backup.kafka().consume(NUM_RECORDS_PRODUCED * 2, RECORD_TRANSFER_DURATION_MS, "primary.test-topic-1", "test-topic-1").count());
+        
+        assertTrue("Heartbeats were not emitted to primary cluster.", primary.kafka().consume(1,
+            RECORD_TRANSFER_DURATION_MS, "heartbeats").count() > 0);
+        assertTrue("Heartbeats were not emitted to backup cluster.", backup.kafka().consume(1,
+            RECORD_TRANSFER_DURATION_MS, "heartbeats").count() > 0);
+        assertTrue("Heartbeats were not replicated downstream to backup cluster.", backup.kafka().consume(1,
+            RECORD_TRANSFER_DURATION_MS, "primary.heartbeats").count() > 0);
+        assertTrue("Heartbeats were not replicated downstream to primary cluster.", primary.kafka().consume(1,
+            RECORD_TRANSFER_DURATION_MS, "backup.heartbeats").count() > 0);
+        
+        assertTrue("Did not find upstream primary cluster.", backupClient.upstreamClusters().contains("primary"));
+        assertEquals("Did not calculate replication hops correctly.", 1, backupClient.replicationHops("primary"));
+        assertTrue("Did not find upstream backup cluster.", primaryClient.upstreamClusters().contains("backup"));
+        assertEquals("Did not calculate replication hops correctly.", 1, primaryClient.replicationHops("backup"));
+        assertTrue("Checkpoints were not emitted downstream to backup cluster.", backup.kafka().consume(1,
+            CHECKPOINT_DURATION_MS, "primary.checkpoints.internal").count() > 0);
+
+        Map<TopicPartition, OffsetAndMetadata> backupOffsets = backupClient.remoteConsumerOffsets(consumerGroupName, "primary",
+            Duration.ofMillis(CHECKPOINT_DURATION_MS));
+
+        assertTrue("Offsets not translated downstream to backup cluster. Found: " + backupOffsets, backupOffsets.containsKey(
+            new TopicPartition("primary.test-topic-1", 0)));
+
+        // Failover consumer group to backup cluster.
+        primaryConsumer = backup.kafka().createConsumer(Collections.singletonMap("group.id", consumerGroupName));
+        primaryConsumer.assign(backupOffsets.keySet());
+        backupOffsets.forEach(primaryConsumer::seek);
+        primaryConsumer.poll(Duration.ofMillis(500));
+        primaryConsumer.commitAsync();
+
+        assertTrue("Consumer failedover to zero offset.", primaryConsumer.position(new TopicPartition("primary.test-topic-1", 0)) > 0);
+        assertTrue("Consumer failedover beyond expected offset.", primaryConsumer.position(
+            new TopicPartition("primary.test-topic-1", 0)) <= NUM_RECORDS_PRODUCED);
+        assertTrue("Checkpoints were not emitted upstream to primary cluster.", primary.kafka().consume(1,
+            CHECKPOINT_DURATION_MS, "backup.checkpoints.internal").count() > 0);
+
+        primaryConsumer.close();
+
+        waitForCondition(() -> {
+            try {
+                return primaryClient.remoteConsumerOffsets(consumerGroupName, "backup",
+                    Duration.ofMillis(CHECKPOINT_DURATION_MS)).containsKey(new TopicPartition("backup.test-topic-1", 0));
+            } catch (Throwable e) {
+                return false;
+            }
+        }, CHECKPOINT_DURATION_MS, "Offsets not translated downstream to primary cluster.");
+
+        waitForCondition(() -> {
+            try {
+                return primaryClient.remoteConsumerOffsets(consumerGroupName, "backup",
+                    Duration.ofMillis(CHECKPOINT_DURATION_MS)).containsKey(new TopicPartition("test-topic-1", 0));
+            } catch (Throwable e) {
+                return false;
+            }
+        }, CHECKPOINT_DURATION_MS, "Offsets not translated upstream to primary cluster.");
+
+        Map<TopicPartition, OffsetAndMetadata> primaryOffsets = primaryClient.remoteConsumerOffsets(consumerGroupName, "backup",
+                Duration.ofMillis(CHECKPOINT_DURATION_MS));
+ 
+        // Failback consumer group to primary cluster
+        backupConsumer = primary.kafka().createConsumer(Collections.singletonMap("group.id", consumerGroupName));
+        backupConsumer.assign(primaryOffsets.keySet());
+        primaryOffsets.forEach(backupConsumer::seek);
+        backupConsumer.poll(Duration.ofMillis(500));
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510121541
id: 510155620
url: https://api.github.com/repos/apache/kafka/pulls/comments/510155620
body: Why is this field `protected` while `primaryBrokerProps` is `private`?
diff_hunk: @@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.CommonClientConfigs;
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.admin.Config;
+import org.apache.kafka.clients.admin.ConfigEntry;
+import org.apache.kafka.clients.admin.DescribeConfigsResult;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerConfig;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.KafkaConsumer;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.ConfigResource;
+import org.apache.kafka.common.config.SslConfigs;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.config.types.Password;
+import org.apache.kafka.common.utils.Exit;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.errors.ConnectException;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.SourceAndTarget;
+import org.apache.kafka.connect.util.clusters.EmbeddedConnectCluster;
+import org.apache.kafka.connect.util.clusters.EmbeddedKafkaCluster;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.experimental.categories.Category;
+
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.connect.mirror.TestUtils.expectedRecords;
+import static org.apache.kafka.connect.util.clusters.EmbeddedConnectClusterAssertions.CONNECTOR_SETUP_DURATION_MS;
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import kafka.server.KafkaConfig$;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+//import org.junit.After;
+
+/**
+ * Common Test functions for MM2 integration tests
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationBaseTest {
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationBaseTest.class);
+    
+    protected static final int NUM_RECORDS_PER_PARTITION = 10;
+    public static final int NUM_PARTITIONS = 10;
+    protected static final int NUM_RECORDS_PRODUCED = NUM_PARTITIONS * NUM_RECORDS_PER_PARTITION;
+    protected static final int RECORD_TRANSFER_DURATION_MS = 30_000;
+    protected static final int CHECKPOINT_DURATION_MS = 20_000;
+    protected static final int RECORD_CONSUME_DURATION_MS = 20_000;
+    protected static final int OFFSET_SYNC_DURATION_MS = 30_000;
+    protected static final int NUM_WORKERS = 3;
+
+    
+    protected Map<String, String> mm2Props;
+    protected MirrorMakerConfig mm2Config; 
+    protected EmbeddedConnectCluster primary;
+    protected EmbeddedConnectCluster backup;
+    
+    private final AtomicBoolean exited = new AtomicBoolean(false);
+    private Properties primaryBrokerProps = new Properties();
+    protected Properties backupBrokerProps = new Properties();
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510155620
id: 510156005
url: https://api.github.com/repos/apache/kafka/pulls/comments/510156005
body: Should we do `new HashMap<>();` like the line below? Why is it different?
diff_hunk: @@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.CommonClientConfigs;
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.admin.Config;
+import org.apache.kafka.clients.admin.ConfigEntry;
+import org.apache.kafka.clients.admin.DescribeConfigsResult;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerConfig;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.KafkaConsumer;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.ConfigResource;
+import org.apache.kafka.common.config.SslConfigs;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.config.types.Password;
+import org.apache.kafka.common.utils.Exit;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.errors.ConnectException;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.SourceAndTarget;
+import org.apache.kafka.connect.util.clusters.EmbeddedConnectCluster;
+import org.apache.kafka.connect.util.clusters.EmbeddedKafkaCluster;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.experimental.categories.Category;
+
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.connect.mirror.TestUtils.expectedRecords;
+import static org.apache.kafka.connect.util.clusters.EmbeddedConnectClusterAssertions.CONNECTOR_SETUP_DURATION_MS;
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import kafka.server.KafkaConfig$;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+//import org.junit.After;
+
+/**
+ * Common Test functions for MM2 integration tests
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationBaseTest {
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationBaseTest.class);
+    
+    protected static final int NUM_RECORDS_PER_PARTITION = 10;
+    public static final int NUM_PARTITIONS = 10;
+    protected static final int NUM_RECORDS_PRODUCED = NUM_PARTITIONS * NUM_RECORDS_PER_PARTITION;
+    protected static final int RECORD_TRANSFER_DURATION_MS = 30_000;
+    protected static final int CHECKPOINT_DURATION_MS = 20_000;
+    protected static final int RECORD_CONSUME_DURATION_MS = 20_000;
+    protected static final int OFFSET_SYNC_DURATION_MS = 30_000;
+    protected static final int NUM_WORKERS = 3;
+
+    
+    protected Map<String, String> mm2Props;
+    protected MirrorMakerConfig mm2Config; 
+    protected EmbeddedConnectCluster primary;
+    protected EmbeddedConnectCluster backup;
+    
+    private final AtomicBoolean exited = new AtomicBoolean(false);
+    private Properties primaryBrokerProps = new Properties();
+    protected Properties backupBrokerProps = new Properties();
+    private Map<String, String> primaryWorkerProps;
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510156005
id: 510161034
url: https://api.github.com/repos/apache/kafka/pulls/comments/510161034
body: This restarts all brokers. I find it strange this takes a `EmbeddedConnectCluster`. Also I wonder why this is static.
diff_hunk: @@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.CommonClientConfigs;
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.admin.Config;
+import org.apache.kafka.clients.admin.ConfigEntry;
+import org.apache.kafka.clients.admin.DescribeConfigsResult;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerConfig;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.KafkaConsumer;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.ConfigResource;
+import org.apache.kafka.common.config.SslConfigs;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.config.types.Password;
+import org.apache.kafka.common.utils.Exit;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.errors.ConnectException;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.SourceAndTarget;
+import org.apache.kafka.connect.util.clusters.EmbeddedConnectCluster;
+import org.apache.kafka.connect.util.clusters.EmbeddedKafkaCluster;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.experimental.categories.Category;
+
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.connect.mirror.TestUtils.expectedRecords;
+import static org.apache.kafka.connect.util.clusters.EmbeddedConnectClusterAssertions.CONNECTOR_SETUP_DURATION_MS;
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import kafka.server.KafkaConfig$;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+//import org.junit.After;
+
+/**
+ * Common Test functions for MM2 integration tests
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationBaseTest {
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationBaseTest.class);
+    
+    protected static final int NUM_RECORDS_PER_PARTITION = 10;
+    public static final int NUM_PARTITIONS = 10;
+    protected static final int NUM_RECORDS_PRODUCED = NUM_PARTITIONS * NUM_RECORDS_PER_PARTITION;
+    protected static final int RECORD_TRANSFER_DURATION_MS = 30_000;
+    protected static final int CHECKPOINT_DURATION_MS = 20_000;
+    protected static final int RECORD_CONSUME_DURATION_MS = 20_000;
+    protected static final int OFFSET_SYNC_DURATION_MS = 30_000;
+    protected static final int NUM_WORKERS = 3;
+
+    
+    protected Map<String, String> mm2Props;
+    protected MirrorMakerConfig mm2Config; 
+    protected EmbeddedConnectCluster primary;
+    protected EmbeddedConnectCluster backup;
+    
+    private final AtomicBoolean exited = new AtomicBoolean(false);
+    private Properties primaryBrokerProps = new Properties();
+    protected Properties backupBrokerProps = new Properties();
+    private Map<String, String> primaryWorkerProps;
+    private Map<String, String> backupWorkerProps = new HashMap<>();
+    private Properties sslProps = new Properties();
+    
+    private void loadSslPropsFromBrokerConfig() {       
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG));
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ((Password) backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG)).value());
+        sslProps.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, "SSL");
+    }
+    
+    protected void setSslConfig() {
+        // set SSL config for kafka connect worker
+        backupWorkerProps.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        // set SSL config for producer used by source task in MM2
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup.producer." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+    }
+    
+    protected void startClusters() throws InterruptedException {
+        primaryBrokerProps.put("auto.create.topics.enable", "false");
+        backupBrokerProps.put("auto.create.topics.enable", "false");
+        
+        mm2Props = basicMM2Config();
+        
+        // if backup kafka cluster contains ssl config, enable ssl of kafka connect and mm2
+        final Object listeners = backupBrokerProps.get(KafkaConfig$.MODULE$.ListenersProp());
+        if (listeners != null && listeners.toString().contains("SSL")) {
+            loadSslPropsFromBrokerConfig();
+            setSslConfig();
+        }
+
+        mm2Config = new MirrorMakerConfig(mm2Props); 
+        primaryWorkerProps = mm2Config.workerConfig(new SourceAndTarget("backup", "primary"));
+        backupWorkerProps.putAll(mm2Config.workerConfig(new SourceAndTarget("primary", "backup")));
+        
+        primary = new EmbeddedConnectCluster.Builder()
+                .name("primary-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(primaryBrokerProps)
+                .workerProps(primaryWorkerProps)
+                .build();
+
+        backup = new EmbeddedConnectCluster.Builder()
+                .name("backup-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(backupBrokerProps)
+                .workerProps(backupWorkerProps)
+                .build();
+        
+        primary.start();
+        primary.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of primary-connect-cluster did not start in time.");
+        
+        backup.start();
+        backup.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of backup-connect-cluster did not start in time.");
+
+        createTopics();
+ 
+        dummyConsumption();
+        
+        log.info("primary REST service: {}", primary.endpointForResource("connectors"));
+        log.info("backup REST service: {}", backup.endpointForResource("connectors"));
+        log.info("primary brokers: {}", primary.kafka().bootstrapServers());
+        log.info("backup brokers: {}", backup.kafka().bootstrapServers());
+        
+        // now that the brokers are running, we can finish setting up the Connectors
+        mm2Props.put("primary.bootstrap.servers", primary.kafka().bootstrapServers());
+        mm2Props.put("backup.bootstrap.servers", backup.kafka().bootstrapServers());
+        
+        Exit.setExitProcedure((status, errorCode) -> exited.set(true));
+    }
+    
+    public void shutdownClusters() {
+        for (String x : primary.connectors()) {
+            primary.deleteConnector(x);
+        }
+        for (String x : backup.connectors()) {
+            backup.deleteConnector(x);
+        }
+        deleteAllTopics(primary.kafka());
+        deleteAllTopics(backup.kafka());
+        primary.stop();
+        backup.stop();
+        try {
+            assertFalse(exited.get());
+        } finally {
+            Exit.resetExitProcedure();
+        }
+    }
+    /*
+     * launch the connectors on kafka connect cluster and check if they are running
+     */
+    protected static void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster, 
+            List<Class> connectorClasses, MirrorMakerConfig mm2Config, 
+            String primary, String backup) throws InterruptedException {
+        for (int i = 0; i < connectorClasses.size(); i++) {
+            String connector = connectorClasses.get(i).getSimpleName();
+            connectCluster.configureConnector(connector, mm2Config.connectorBaseConfig(
+                new SourceAndTarget(primary, backup), connectorClasses.get(i)));
+        }
+        
+        // we wait for the connector and tasks to come up for each connector, so that when we do the
+        // actual testing, we are certain that the tasks are up and running; this will prevent
+        // flaky tests where the connector and tasks didn't start up in time for the tests to be
+        // run
+        List<String> connectorNames = connectorClasses.stream().map(x -> x.getSimpleName())
+                .collect(Collectors.toList());
+        for (String connector : connectorNames) {
+            connectCluster.assertions().assertConnectorAndAtLeastNumTasksAreRunning(connector, 1,
+                    "Connector " + connector + " tasks did not start in time on cluster: " + connectCluster);
+        }
+    }
+ 
+    /*
+     * delete all topics of the input kafka cluster
+     */
+    protected static void deleteAllTopics(EmbeddedKafkaCluster cluster) {
+        Admin client = cluster.createAdminClient();
+        try {
+            client.deleteTopics(client.listTopics().names().get());
+        } catch (Throwable e) {
+        }
+    }
+    
+    /*
+     * retrieve the config value based on the input cluster, topic and config name
+     */
+    protected static String getTopicConfig(EmbeddedKafkaCluster cluster, String topic, String configName) {
+        Admin client = cluster.createAdminClient();
+        Collection<ConfigResource> cr =  Collections.singleton(
+                new ConfigResource(ConfigResource.Type.TOPIC, topic)); 
+        try {
+            DescribeConfigsResult configsResult = client.describeConfigs(cr);
+            Config allConfigs = (Config) configsResult.all().get().values().toArray()[0];
+            Iterator configIterator = allConfigs.entries().iterator();
+            while (configIterator.hasNext()) {
+                ConfigEntry currentConfig = (ConfigEntry) configIterator.next();     
+                if (currentConfig.name().equals(configName)) {
+                    return currentConfig.value();
+                }
+            }
+        } catch (Throwable e) {
+        }
+        return null;
+    }
+    
+    /*
+     *  produce messages to the cluster and  topic 
+     */
+    protected void produceMessages(EmbeddedConnectCluster cluster, String topicName) {
+        Map<String, String> recordSent = expectedRecords(NUM_RECORDS_PRODUCED);
+        for (Map.Entry<String, String> entry : recordSent.entrySet()) {
+            cluster.kafka().produce(topicName, entry.getKey(), entry.getValue());
+        }
+    }
+
+    /*
+     * produce messages to the cluster and topic partition less than numPartitions 
+     */
+    protected void produceMessages(EmbeddedConnectCluster cluster, String topicName, int numPartitions) {
+        int cnt = 0;
+        for (int r = 0; r < NUM_RECORDS_PER_PARTITION; r++)
+            for (int p = 0; p < numPartitions; p++)
+                cluster.kafka().produce(topicName, p, "key", "value-" + cnt++);
+    }
+    
+    /*
+     * given consumer group, topics and expected number of records, make sure the consumer group
+     * offsets are eventually synced to the expected offset numbers
+     */
+    protected static <T> void waitForConsumerGroupOffsetSync(EmbeddedConnectCluster connect, 
+            Consumer<T, T> consumer, List<String> topics, String consumerGroupId, int numRecords)
+            throws InterruptedException {
+        Admin adminClient = connect.kafka().createAdminClient();
+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());
+        for (int partitionIndex = 0; partitionIndex < NUM_PARTITIONS; partitionIndex++) {
+            for (String topic : topics) {
+                tps.add(new TopicPartition(topic, partitionIndex));
+            }
+        }
+        long expectedTotalOffsets = numRecords * topics.size();
+
+        waitForCondition(() -> {
+            Map<TopicPartition, OffsetAndMetadata> consumerGroupOffsets =
+                    adminClient.listConsumerGroupOffsets(consumerGroupId).partitionsToOffsetAndMetadata().get();
+            long consumerGroupOffsetTotal = consumerGroupOffsets.values().stream()
+                    .mapToLong(metadata -> metadata.offset()).sum();
+
+            Map<TopicPartition, Long> offsets = consumer.endOffsets(tps, Duration.ofMillis(500));
+            long totalOffsets = offsets.values().stream().mapToLong(l -> l).sum();
+
+            // make sure the consumer group offsets are synced to expected number
+            return totalOffsets == expectedTotalOffsets && consumerGroupOffsetTotal > 0;
+        }, OFFSET_SYNC_DURATION_MS, "Consumer group offset sync is not complete in time");
+    }
+
+    /*
+     * make sure the consumer to consume expected number of records
+     */
+    protected static <T> void waitForConsumingAllRecords(Consumer<T, T> consumer, int numExpectedRecords) 
+            throws InterruptedException {
+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);
+        waitForCondition(() -> {
+            ConsumerRecords<T, T> records = consumer.poll(Duration.ofMillis(500));
+            return numExpectedRecords == totalConsumedRecords.addAndGet(records.count());
+        }, RECORD_CONSUME_DURATION_MS, "Consumer cannot consume all records in time");
+        consumer.commitSync();
+        consumer.close();
+    }
+   
+    /*
+     * MM2 config to use in integration tests
+     */
+    protected static Map<String, String> basicMM2Config() {
+        Map<String, String> mm2Props = new HashMap<>();
+        mm2Props.put("clusters", "primary, backup");
+        mm2Props.put("max.tasks", "10");
+        mm2Props.put("topics", "test-topic-.*, primary.test-topic-.*, backup.test-topic-.*");
+        mm2Props.put("groups", "consumer-group-.*");
+        mm2Props.put("primary->backup.enabled", "true");
+        mm2Props.put("backup->primary.enabled", "true");
+        mm2Props.put("sync.topic.acls.enabled", "false");
+        mm2Props.put("emit.checkpoints.interval.seconds", "1");
+        mm2Props.put("emit.heartbeats.interval.seconds", "1");
+        mm2Props.put("refresh.topics.interval.seconds", "1");
+        mm2Props.put("refresh.groups.interval.seconds", "1");
+        mm2Props.put("checkpoints.topic.replication.factor", "1");
+        mm2Props.put("heartbeats.topic.replication.factor", "1");
+        mm2Props.put("offset-syncs.topic.replication.factor", "1");
+        mm2Props.put("config.storage.replication.factor", "1");
+        mm2Props.put("offset.storage.replication.factor", "1");
+        mm2Props.put("status.storage.replication.factor", "1");
+        mm2Props.put("replication.factor", "1");
+        
+        return mm2Props;
+    }
+    
+    /*
+     * restart kafka broker and make sure it is successful
+     */
+    protected static void restartKafkaBroker(EmbeddedConnectCluster connect) throws InterruptedException {
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510161034
id: 510161728
url: https://api.github.com/repos/apache/kafka/pulls/comments/510161728
body: Should we use this check as a condition to wait? Sleeping 10 secs feels pretty brittle
diff_hunk: @@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.CommonClientConfigs;
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.admin.Config;
+import org.apache.kafka.clients.admin.ConfigEntry;
+import org.apache.kafka.clients.admin.DescribeConfigsResult;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerConfig;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.KafkaConsumer;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.ConfigResource;
+import org.apache.kafka.common.config.SslConfigs;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.config.types.Password;
+import org.apache.kafka.common.utils.Exit;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.errors.ConnectException;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.SourceAndTarget;
+import org.apache.kafka.connect.util.clusters.EmbeddedConnectCluster;
+import org.apache.kafka.connect.util.clusters.EmbeddedKafkaCluster;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.experimental.categories.Category;
+
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.connect.mirror.TestUtils.expectedRecords;
+import static org.apache.kafka.connect.util.clusters.EmbeddedConnectClusterAssertions.CONNECTOR_SETUP_DURATION_MS;
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import kafka.server.KafkaConfig$;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+//import org.junit.After;
+
+/**
+ * Common Test functions for MM2 integration tests
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationBaseTest {
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationBaseTest.class);
+    
+    protected static final int NUM_RECORDS_PER_PARTITION = 10;
+    public static final int NUM_PARTITIONS = 10;
+    protected static final int NUM_RECORDS_PRODUCED = NUM_PARTITIONS * NUM_RECORDS_PER_PARTITION;
+    protected static final int RECORD_TRANSFER_DURATION_MS = 30_000;
+    protected static final int CHECKPOINT_DURATION_MS = 20_000;
+    protected static final int RECORD_CONSUME_DURATION_MS = 20_000;
+    protected static final int OFFSET_SYNC_DURATION_MS = 30_000;
+    protected static final int NUM_WORKERS = 3;
+
+    
+    protected Map<String, String> mm2Props;
+    protected MirrorMakerConfig mm2Config; 
+    protected EmbeddedConnectCluster primary;
+    protected EmbeddedConnectCluster backup;
+    
+    private final AtomicBoolean exited = new AtomicBoolean(false);
+    private Properties primaryBrokerProps = new Properties();
+    protected Properties backupBrokerProps = new Properties();
+    private Map<String, String> primaryWorkerProps;
+    private Map<String, String> backupWorkerProps = new HashMap<>();
+    private Properties sslProps = new Properties();
+    
+    private void loadSslPropsFromBrokerConfig() {       
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG));
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ((Password) backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG)).value());
+        sslProps.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, "SSL");
+    }
+    
+    protected void setSslConfig() {
+        // set SSL config for kafka connect worker
+        backupWorkerProps.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        // set SSL config for producer used by source task in MM2
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup.producer." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+    }
+    
+    protected void startClusters() throws InterruptedException {
+        primaryBrokerProps.put("auto.create.topics.enable", "false");
+        backupBrokerProps.put("auto.create.topics.enable", "false");
+        
+        mm2Props = basicMM2Config();
+        
+        // if backup kafka cluster contains ssl config, enable ssl of kafka connect and mm2
+        final Object listeners = backupBrokerProps.get(KafkaConfig$.MODULE$.ListenersProp());
+        if (listeners != null && listeners.toString().contains("SSL")) {
+            loadSslPropsFromBrokerConfig();
+            setSslConfig();
+        }
+
+        mm2Config = new MirrorMakerConfig(mm2Props); 
+        primaryWorkerProps = mm2Config.workerConfig(new SourceAndTarget("backup", "primary"));
+        backupWorkerProps.putAll(mm2Config.workerConfig(new SourceAndTarget("primary", "backup")));
+        
+        primary = new EmbeddedConnectCluster.Builder()
+                .name("primary-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(primaryBrokerProps)
+                .workerProps(primaryWorkerProps)
+                .build();
+
+        backup = new EmbeddedConnectCluster.Builder()
+                .name("backup-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(backupBrokerProps)
+                .workerProps(backupWorkerProps)
+                .build();
+        
+        primary.start();
+        primary.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of primary-connect-cluster did not start in time.");
+        
+        backup.start();
+        backup.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of backup-connect-cluster did not start in time.");
+
+        createTopics();
+ 
+        dummyConsumption();
+        
+        log.info("primary REST service: {}", primary.endpointForResource("connectors"));
+        log.info("backup REST service: {}", backup.endpointForResource("connectors"));
+        log.info("primary brokers: {}", primary.kafka().bootstrapServers());
+        log.info("backup brokers: {}", backup.kafka().bootstrapServers());
+        
+        // now that the brokers are running, we can finish setting up the Connectors
+        mm2Props.put("primary.bootstrap.servers", primary.kafka().bootstrapServers());
+        mm2Props.put("backup.bootstrap.servers", backup.kafka().bootstrapServers());
+        
+        Exit.setExitProcedure((status, errorCode) -> exited.set(true));
+    }
+    
+    public void shutdownClusters() {
+        for (String x : primary.connectors()) {
+            primary.deleteConnector(x);
+        }
+        for (String x : backup.connectors()) {
+            backup.deleteConnector(x);
+        }
+        deleteAllTopics(primary.kafka());
+        deleteAllTopics(backup.kafka());
+        primary.stop();
+        backup.stop();
+        try {
+            assertFalse(exited.get());
+        } finally {
+            Exit.resetExitProcedure();
+        }
+    }
+    /*
+     * launch the connectors on kafka connect cluster and check if they are running
+     */
+    protected static void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster, 
+            List<Class> connectorClasses, MirrorMakerConfig mm2Config, 
+            String primary, String backup) throws InterruptedException {
+        for (int i = 0; i < connectorClasses.size(); i++) {
+            String connector = connectorClasses.get(i).getSimpleName();
+            connectCluster.configureConnector(connector, mm2Config.connectorBaseConfig(
+                new SourceAndTarget(primary, backup), connectorClasses.get(i)));
+        }
+        
+        // we wait for the connector and tasks to come up for each connector, so that when we do the
+        // actual testing, we are certain that the tasks are up and running; this will prevent
+        // flaky tests where the connector and tasks didn't start up in time for the tests to be
+        // run
+        List<String> connectorNames = connectorClasses.stream().map(x -> x.getSimpleName())
+                .collect(Collectors.toList());
+        for (String connector : connectorNames) {
+            connectCluster.assertions().assertConnectorAndAtLeastNumTasksAreRunning(connector, 1,
+                    "Connector " + connector + " tasks did not start in time on cluster: " + connectCluster);
+        }
+    }
+ 
+    /*
+     * delete all topics of the input kafka cluster
+     */
+    protected static void deleteAllTopics(EmbeddedKafkaCluster cluster) {
+        Admin client = cluster.createAdminClient();
+        try {
+            client.deleteTopics(client.listTopics().names().get());
+        } catch (Throwable e) {
+        }
+    }
+    
+    /*
+     * retrieve the config value based on the input cluster, topic and config name
+     */
+    protected static String getTopicConfig(EmbeddedKafkaCluster cluster, String topic, String configName) {
+        Admin client = cluster.createAdminClient();
+        Collection<ConfigResource> cr =  Collections.singleton(
+                new ConfigResource(ConfigResource.Type.TOPIC, topic)); 
+        try {
+            DescribeConfigsResult configsResult = client.describeConfigs(cr);
+            Config allConfigs = (Config) configsResult.all().get().values().toArray()[0];
+            Iterator configIterator = allConfigs.entries().iterator();
+            while (configIterator.hasNext()) {
+                ConfigEntry currentConfig = (ConfigEntry) configIterator.next();     
+                if (currentConfig.name().equals(configName)) {
+                    return currentConfig.value();
+                }
+            }
+        } catch (Throwable e) {
+        }
+        return null;
+    }
+    
+    /*
+     *  produce messages to the cluster and  topic 
+     */
+    protected void produceMessages(EmbeddedConnectCluster cluster, String topicName) {
+        Map<String, String> recordSent = expectedRecords(NUM_RECORDS_PRODUCED);
+        for (Map.Entry<String, String> entry : recordSent.entrySet()) {
+            cluster.kafka().produce(topicName, entry.getKey(), entry.getValue());
+        }
+    }
+
+    /*
+     * produce messages to the cluster and topic partition less than numPartitions 
+     */
+    protected void produceMessages(EmbeddedConnectCluster cluster, String topicName, int numPartitions) {
+        int cnt = 0;
+        for (int r = 0; r < NUM_RECORDS_PER_PARTITION; r++)
+            for (int p = 0; p < numPartitions; p++)
+                cluster.kafka().produce(topicName, p, "key", "value-" + cnt++);
+    }
+    
+    /*
+     * given consumer group, topics and expected number of records, make sure the consumer group
+     * offsets are eventually synced to the expected offset numbers
+     */
+    protected static <T> void waitForConsumerGroupOffsetSync(EmbeddedConnectCluster connect, 
+            Consumer<T, T> consumer, List<String> topics, String consumerGroupId, int numRecords)
+            throws InterruptedException {
+        Admin adminClient = connect.kafka().createAdminClient();
+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());
+        for (int partitionIndex = 0; partitionIndex < NUM_PARTITIONS; partitionIndex++) {
+            for (String topic : topics) {
+                tps.add(new TopicPartition(topic, partitionIndex));
+            }
+        }
+        long expectedTotalOffsets = numRecords * topics.size();
+
+        waitForCondition(() -> {
+            Map<TopicPartition, OffsetAndMetadata> consumerGroupOffsets =
+                    adminClient.listConsumerGroupOffsets(consumerGroupId).partitionsToOffsetAndMetadata().get();
+            long consumerGroupOffsetTotal = consumerGroupOffsets.values().stream()
+                    .mapToLong(metadata -> metadata.offset()).sum();
+
+            Map<TopicPartition, Long> offsets = consumer.endOffsets(tps, Duration.ofMillis(500));
+            long totalOffsets = offsets.values().stream().mapToLong(l -> l).sum();
+
+            // make sure the consumer group offsets are synced to expected number
+            return totalOffsets == expectedTotalOffsets && consumerGroupOffsetTotal > 0;
+        }, OFFSET_SYNC_DURATION_MS, "Consumer group offset sync is not complete in time");
+    }
+
+    /*
+     * make sure the consumer to consume expected number of records
+     */
+    protected static <T> void waitForConsumingAllRecords(Consumer<T, T> consumer, int numExpectedRecords) 
+            throws InterruptedException {
+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);
+        waitForCondition(() -> {
+            ConsumerRecords<T, T> records = consumer.poll(Duration.ofMillis(500));
+            return numExpectedRecords == totalConsumedRecords.addAndGet(records.count());
+        }, RECORD_CONSUME_DURATION_MS, "Consumer cannot consume all records in time");
+        consumer.commitSync();
+        consumer.close();
+    }
+   
+    /*
+     * MM2 config to use in integration tests
+     */
+    protected static Map<String, String> basicMM2Config() {
+        Map<String, String> mm2Props = new HashMap<>();
+        mm2Props.put("clusters", "primary, backup");
+        mm2Props.put("max.tasks", "10");
+        mm2Props.put("topics", "test-topic-.*, primary.test-topic-.*, backup.test-topic-.*");
+        mm2Props.put("groups", "consumer-group-.*");
+        mm2Props.put("primary->backup.enabled", "true");
+        mm2Props.put("backup->primary.enabled", "true");
+        mm2Props.put("sync.topic.acls.enabled", "false");
+        mm2Props.put("emit.checkpoints.interval.seconds", "1");
+        mm2Props.put("emit.heartbeats.interval.seconds", "1");
+        mm2Props.put("refresh.topics.interval.seconds", "1");
+        mm2Props.put("refresh.groups.interval.seconds", "1");
+        mm2Props.put("checkpoints.topic.replication.factor", "1");
+        mm2Props.put("heartbeats.topic.replication.factor", "1");
+        mm2Props.put("offset-syncs.topic.replication.factor", "1");
+        mm2Props.put("config.storage.replication.factor", "1");
+        mm2Props.put("offset.storage.replication.factor", "1");
+        mm2Props.put("status.storage.replication.factor", "1");
+        mm2Props.put("replication.factor", "1");
+        
+        return mm2Props;
+    }
+    
+    /*
+     * restart kafka broker and make sure it is successful
+     */
+    protected static void restartKafkaBroker(EmbeddedConnectCluster connect) throws InterruptedException {
+
+        connect.kafka().stopOnlyKafka();
+        log.trace("issue kafka stop");
+        connect.assertions().assertExactlyNumWorkersAreUp(NUM_WORKERS,
+                "Group of workers did not remain the same after broker shutdown");
+
+        // Allow for the workers to discover that the coordinator is unavailable, if the connector
+        // is set up on this current EmbeddedConnectCluster
+        Thread.sleep(TimeUnit.SECONDS.toMillis(10));
+
+        // Wait for the broker to be stopped
+        assertTrue("Failed to stop kafka broker within " + CONNECTOR_SETUP_DURATION_MS + "ms",
+                connect.kafka().runningBrokers().size() == 0);
+
+        connect.kafka().startOnlyKafkaOnSamePorts();
+        log.trace("issue kafka start");
+        // Allow for the kafka brokers to come back online
+        Thread.sleep(TimeUnit.SECONDS.toMillis(10));
+
+        connect.assertions().assertExactlyNumWorkersAreUp(NUM_WORKERS,
+                "Group of workers did not remain the same within the designated time.");
+
+        // Allow for the workers to rebalance and reach a steady state
+        Thread.sleep(TimeUnit.SECONDS.toMillis(10));
+
+        // Expect that the broker has started again
+        assertTrue("Failed to start kafka broker within " + CONNECTOR_SETUP_DURATION_MS + "ms",
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510161728
id: 510166490
url: https://api.github.com/repos/apache/kafka/pulls/comments/510166490
body: Can we move this in the base class?
diff_hunk: @@ -0,0 +1,98 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.common.network.Mode;
+import org.apache.kafka.connect.mirror.MirrorCheckpointConnector;
+import org.apache.kafka.connect.mirror.MirrorHeartbeatConnector;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.MirrorSourceConnector;
+import org.apache.kafka.test.IntegrationTest;
+import org.apache.kafka.test.TestSslUtils;
+import org.apache.kafka.test.TestUtils;
+import kafka.server.KafkaConfig$;
+
+import org.junit.experimental.categories.Category;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+
+import org.junit.Before;
+import org.junit.After;
+import org.junit.Test;
+
+/**
+ * Tests MM2 replication with SSL enabled at backup kafka cluster
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationSSLTest extends MirrorConnectorsIntegrationBaseTest {
+
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationSSLTest.class);
+    
+    private static final List<Class> CONNECTOR_LIST = 
+            Arrays.asList(MirrorSourceConnector.class, MirrorCheckpointConnector.class, MirrorHeartbeatConnector.class);
+    
+    @Before
+    public void setup() throws InterruptedException {
+        try {
+            Map<String, Object> sslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, TestUtils.tempFile(), "testCert");
+            backupBrokerProps.put(KafkaConfig$.MODULE$.ListenersProp(), "SSL://localhost:0");
+            backupBrokerProps.put(KafkaConfig$.MODULE$.InterBrokerListenerNameProp(), "SSL");
+            backupBrokerProps.putAll(sslConfig);
+        } catch (final Exception e) {
+            throw new RuntimeException(e);
+        }
+        startClusters();
+    }
+    
+    @After
+    public void close() {
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationSSLTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510166490
id: 510166691
url: https://api.github.com/repos/apache/kafka/pulls/comments/510166691
body: Can we move this in the base class?
diff_hunk: @@ -0,0 +1,372 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.errors.TimeoutException;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.mirror.MirrorCheckpointConnector;
+import org.apache.kafka.connect.mirror.MirrorClient;
+import org.apache.kafka.connect.mirror.MirrorHeartbeatConnector;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.MirrorSourceConnector;
+import org.apache.kafka.connect.mirror.utils.ThreadedConsumer;
+import org.apache.kafka.connect.mirror.utils.ThreadedProducer;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.Before;
+import org.junit.After;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.time.Duration;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Collections;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertNotNull;
+
+/**
+ * Tests MM2 replication and failover/failback logic.
+ *
+ * MM2 is configured with active/active replication between two Kafka clusters. Tests validate that
+ * records sent to either cluster arrive at the other cluster. Then, a consumer group is migrated from
+ * one cluster to the other and back. Tests validate that consumer offsets are translated and replicated
+ * between clusters during this failover and failback.
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationTest extends MirrorConnectorsIntegrationBaseTest {
+
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationTest.class);
+    
+    private static final List<Class> CONNECTOR_LIST = 
+            Arrays.asList(MirrorSourceConnector.class, MirrorCheckpointConnector.class, MirrorHeartbeatConnector.class);
+    
+    @Before
+    public void setup() throws InterruptedException {
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510166691
id: 510198673
url: https://api.github.com/repos/apache/kafka/pulls/comments/510198673
body: Can this be `private`?
diff_hunk: @@ -0,0 +1,423 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.CommonClientConfigs;
+import org.apache.kafka.clients.admin.Admin;
+import org.apache.kafka.clients.admin.Config;
+import org.apache.kafka.clients.admin.ConfigEntry;
+import org.apache.kafka.clients.admin.DescribeConfigsResult;
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.clients.consumer.ConsumerConfig;
+import org.apache.kafka.clients.consumer.ConsumerRecords;
+import org.apache.kafka.clients.consumer.KafkaConsumer;
+import org.apache.kafka.clients.consumer.OffsetAndMetadata;
+import org.apache.kafka.common.config.ConfigResource;
+import org.apache.kafka.common.config.SslConfigs;
+import org.apache.kafka.common.config.TopicConfig;
+import org.apache.kafka.common.config.types.Password;
+import org.apache.kafka.common.utils.Exit;
+import org.apache.kafka.common.TopicPartition;
+import org.apache.kafka.connect.errors.ConnectException;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.SourceAndTarget;
+import org.apache.kafka.connect.util.clusters.EmbeddedConnectCluster;
+import org.apache.kafka.connect.util.clusters.EmbeddedKafkaCluster;
+import org.apache.kafka.test.IntegrationTest;
+import org.junit.experimental.categories.Category;
+
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
+import java.util.concurrent.TimeUnit;
+
+import static org.apache.kafka.connect.mirror.TestUtils.expectedRecords;
+import static org.apache.kafka.connect.util.clusters.EmbeddedConnectClusterAssertions.CONNECTOR_SETUP_DURATION_MS;
+import static org.apache.kafka.test.TestUtils.waitForCondition;
+import kafka.server.KafkaConfig$;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+//import org.junit.After;
+
+/**
+ * Common Test functions for MM2 integration tests
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationBaseTest {
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationBaseTest.class);
+    
+    protected static final int NUM_RECORDS_PER_PARTITION = 10;
+    public static final int NUM_PARTITIONS = 10;
+    protected static final int NUM_RECORDS_PRODUCED = NUM_PARTITIONS * NUM_RECORDS_PER_PARTITION;
+    protected static final int RECORD_TRANSFER_DURATION_MS = 30_000;
+    protected static final int CHECKPOINT_DURATION_MS = 20_000;
+    protected static final int RECORD_CONSUME_DURATION_MS = 20_000;
+    protected static final int OFFSET_SYNC_DURATION_MS = 30_000;
+    protected static final int NUM_WORKERS = 3;
+
+    
+    protected Map<String, String> mm2Props;
+    protected MirrorMakerConfig mm2Config; 
+    protected EmbeddedConnectCluster primary;
+    protected EmbeddedConnectCluster backup;
+    
+    private final AtomicBoolean exited = new AtomicBoolean(false);
+    private Properties primaryBrokerProps = new Properties();
+    protected Properties backupBrokerProps = new Properties();
+    private Map<String, String> primaryWorkerProps;
+    private Map<String, String> backupWorkerProps = new HashMap<>();
+    private Properties sslProps = new Properties();
+    
+    private void loadSslPropsFromBrokerConfig() {       
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG));
+        sslProps.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ((Password) backupBrokerProps.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG)).value());
+        sslProps.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, "SSL");
+    }
+    
+    protected void setSslConfig() {
+        // set SSL config for kafka connect worker
+        backupWorkerProps.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+        // set SSL config for producer used by source task in MM2
+        mm2Props.putAll(sslProps.entrySet().stream().collect(Collectors.toMap(
+            e -> "backup.producer." + String.valueOf(e.getKey()), e ->  String.valueOf(e.getValue()))));
+    }
+    
+    protected void startClusters() throws InterruptedException {
+        primaryBrokerProps.put("auto.create.topics.enable", "false");
+        backupBrokerProps.put("auto.create.topics.enable", "false");
+        
+        mm2Props = basicMM2Config();
+        
+        // if backup kafka cluster contains ssl config, enable ssl of kafka connect and mm2
+        final Object listeners = backupBrokerProps.get(KafkaConfig$.MODULE$.ListenersProp());
+        if (listeners != null && listeners.toString().contains("SSL")) {
+            loadSslPropsFromBrokerConfig();
+            setSslConfig();
+        }
+
+        mm2Config = new MirrorMakerConfig(mm2Props); 
+        primaryWorkerProps = mm2Config.workerConfig(new SourceAndTarget("backup", "primary"));
+        backupWorkerProps.putAll(mm2Config.workerConfig(new SourceAndTarget("primary", "backup")));
+        
+        primary = new EmbeddedConnectCluster.Builder()
+                .name("primary-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(primaryBrokerProps)
+                .workerProps(primaryWorkerProps)
+                .build();
+
+        backup = new EmbeddedConnectCluster.Builder()
+                .name("backup-connect-cluster")
+                .numWorkers(3)
+                .numBrokers(1)
+                .brokerProps(backupBrokerProps)
+                .workerProps(backupWorkerProps)
+                .build();
+        
+        primary.start();
+        primary.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of primary-connect-cluster did not start in time.");
+        
+        backup.start();
+        backup.assertions().assertAtLeastNumWorkersAreUp(3,
+                "Workers of backup-connect-cluster did not start in time.");
+
+        createTopics();
+ 
+        dummyConsumption();
+        
+        log.info("primary REST service: {}", primary.endpointForResource("connectors"));
+        log.info("backup REST service: {}", backup.endpointForResource("connectors"));
+        log.info("primary brokers: {}", primary.kafka().bootstrapServers());
+        log.info("backup brokers: {}", backup.kafka().bootstrapServers());
+        
+        // now that the brokers are running, we can finish setting up the Connectors
+        mm2Props.put("primary.bootstrap.servers", primary.kafka().bootstrapServers());
+        mm2Props.put("backup.bootstrap.servers", backup.kafka().bootstrapServers());
+        
+        Exit.setExitProcedure((status, errorCode) -> exited.set(true));
+    }
+    
+    public void shutdownClusters() {
+        for (String x : primary.connectors()) {
+            primary.deleteConnector(x);
+        }
+        for (String x : backup.connectors()) {
+            backup.deleteConnector(x);
+        }
+        deleteAllTopics(primary.kafka());
+        deleteAllTopics(backup.kafka());
+        primary.stop();
+        backup.stop();
+        try {
+            assertFalse(exited.get());
+        } finally {
+            Exit.resetExitProcedure();
+        }
+    }
+    /*
+     * launch the connectors on kafka connect cluster and check if they are running
+     */
+    protected static void waitUntilMirrorMakerIsRunning(EmbeddedConnectCluster connectCluster, 
+            List<Class> connectorClasses, MirrorMakerConfig mm2Config, 
+            String primary, String backup) throws InterruptedException {
+        for (int i = 0; i < connectorClasses.size(); i++) {
+            String connector = connectorClasses.get(i).getSimpleName();
+            connectCluster.configureConnector(connector, mm2Config.connectorBaseConfig(
+                new SourceAndTarget(primary, backup), connectorClasses.get(i)));
+        }
+        
+        // we wait for the connector and tasks to come up for each connector, so that when we do the
+        // actual testing, we are certain that the tasks are up and running; this will prevent
+        // flaky tests where the connector and tasks didn't start up in time for the tests to be
+        // run
+        List<String> connectorNames = connectorClasses.stream().map(x -> x.getSimpleName())
+                .collect(Collectors.toList());
+        for (String connector : connectorNames) {
+            connectCluster.assertions().assertConnectorAndAtLeastNumTasksAreRunning(connector, 1,
+                    "Connector " + connector + " tasks did not start in time on cluster: " + connectCluster);
+        }
+    }
+ 
+    /*
+     * delete all topics of the input kafka cluster
+     */
+    protected static void deleteAllTopics(EmbeddedKafkaCluster cluster) {
+        Admin client = cluster.createAdminClient();
+        try {
+            client.deleteTopics(client.listTopics().names().get());
+        } catch (Throwable e) {
+        }
+    }
+    
+    /*
+     * retrieve the config value based on the input cluster, topic and config name
+     */
+    protected static String getTopicConfig(EmbeddedKafkaCluster cluster, String topic, String configName) {
+        Admin client = cluster.createAdminClient();
+        Collection<ConfigResource> cr =  Collections.singleton(
+                new ConfigResource(ConfigResource.Type.TOPIC, topic)); 
+        try {
+            DescribeConfigsResult configsResult = client.describeConfigs(cr);
+            Config allConfigs = (Config) configsResult.all().get().values().toArray()[0];
+            Iterator configIterator = allConfigs.entries().iterator();
+            while (configIterator.hasNext()) {
+                ConfigEntry currentConfig = (ConfigEntry) configIterator.next();     
+                if (currentConfig.name().equals(configName)) {
+                    return currentConfig.value();
+                }
+            }
+        } catch (Throwable e) {
+        }
+        return null;
+    }
+    
+    /*
+     *  produce messages to the cluster and  topic 
+     */
+    protected void produceMessages(EmbeddedConnectCluster cluster, String topicName) {
+        Map<String, String> recordSent = expectedRecords(NUM_RECORDS_PRODUCED);
+        for (Map.Entry<String, String> entry : recordSent.entrySet()) {
+            cluster.kafka().produce(topicName, entry.getKey(), entry.getValue());
+        }
+    }
+
+    /*
+     * produce messages to the cluster and topic partition less than numPartitions 
+     */
+    protected void produceMessages(EmbeddedConnectCluster cluster, String topicName, int numPartitions) {
+        int cnt = 0;
+        for (int r = 0; r < NUM_RECORDS_PER_PARTITION; r++)
+            for (int p = 0; p < numPartitions; p++)
+                cluster.kafka().produce(topicName, p, "key", "value-" + cnt++);
+    }
+    
+    /*
+     * given consumer group, topics and expected number of records, make sure the consumer group
+     * offsets are eventually synced to the expected offset numbers
+     */
+    protected static <T> void waitForConsumerGroupOffsetSync(EmbeddedConnectCluster connect, 
+            Consumer<T, T> consumer, List<String> topics, String consumerGroupId, int numRecords)
+            throws InterruptedException {
+        Admin adminClient = connect.kafka().createAdminClient();
+        List<TopicPartition> tps = new ArrayList<>(NUM_PARTITIONS * topics.size());
+        for (int partitionIndex = 0; partitionIndex < NUM_PARTITIONS; partitionIndex++) {
+            for (String topic : topics) {
+                tps.add(new TopicPartition(topic, partitionIndex));
+            }
+        }
+        long expectedTotalOffsets = numRecords * topics.size();
+
+        waitForCondition(() -> {
+            Map<TopicPartition, OffsetAndMetadata> consumerGroupOffsets =
+                    adminClient.listConsumerGroupOffsets(consumerGroupId).partitionsToOffsetAndMetadata().get();
+            long consumerGroupOffsetTotal = consumerGroupOffsets.values().stream()
+                    .mapToLong(metadata -> metadata.offset()).sum();
+
+            Map<TopicPartition, Long> offsets = consumer.endOffsets(tps, Duration.ofMillis(500));
+            long totalOffsets = offsets.values().stream().mapToLong(l -> l).sum();
+
+            // make sure the consumer group offsets are synced to expected number
+            return totalOffsets == expectedTotalOffsets && consumerGroupOffsetTotal > 0;
+        }, OFFSET_SYNC_DURATION_MS, "Consumer group offset sync is not complete in time");
+    }
+
+    /*
+     * make sure the consumer to consume expected number of records
+     */
+    protected static <T> void waitForConsumingAllRecords(Consumer<T, T> consumer, int numExpectedRecords) 
+            throws InterruptedException {
+        final AtomicInteger totalConsumedRecords = new AtomicInteger(0);
+        waitForCondition(() -> {
+            ConsumerRecords<T, T> records = consumer.poll(Duration.ofMillis(500));
+            return numExpectedRecords == totalConsumedRecords.addAndGet(records.count());
+        }, RECORD_CONSUME_DURATION_MS, "Consumer cannot consume all records in time");
+        consumer.commitSync();
+        consumer.close();
+    }
+   
+    /*
+     * MM2 config to use in integration tests
+     */
+    protected static Map<String, String> basicMM2Config() {
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationBaseTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510198673
id: 510486514
url: https://api.github.com/repos/apache/kafka/pulls/comments/510486514
body: referred to the example at https://github.com/apache/kafka/blob/trunk/streams/src/test/java/org/apache/kafka/streams/integration/ResetIntegrationWithSslTest.java#L58
diff_hunk: @@ -0,0 +1,98 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.kafka.connect.mirror.integration;
+
+import org.apache.kafka.clients.consumer.Consumer;
+import org.apache.kafka.common.network.Mode;
+import org.apache.kafka.connect.mirror.MirrorCheckpointConnector;
+import org.apache.kafka.connect.mirror.MirrorHeartbeatConnector;
+import org.apache.kafka.connect.mirror.MirrorMakerConfig;
+import org.apache.kafka.connect.mirror.MirrorSourceConnector;
+import org.apache.kafka.test.IntegrationTest;
+import org.apache.kafka.test.TestSslUtils;
+import org.apache.kafka.test.TestUtils;
+import kafka.server.KafkaConfig$;
+
+import org.junit.experimental.categories.Category;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+
+import org.junit.Before;
+import org.junit.After;
+import org.junit.Test;
+
+/**
+ * Tests MM2 replication with SSL enabled at backup kafka cluster
+ */
+@Category(IntegrationTest.class)
+public class MirrorConnectorsIntegrationSSLTest extends MirrorConnectorsIntegrationBaseTest {
+
+    private static final Logger log = LoggerFactory.getLogger(MirrorConnectorsIntegrationSSLTest.class);
+    
+    private static final List<Class> CONNECTOR_LIST = 
+            Arrays.asList(MirrorSourceConnector.class, MirrorCheckpointConnector.class, MirrorHeartbeatConnector.class);
+    
+    @Before
+    public void setup() throws InterruptedException {
+        try {
+            Map<String, Object> sslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, TestUtils.tempFile(), "testCert");
+            backupBrokerProps.put(KafkaConfig$.MODULE$.ListenersProp(), "SSL://localhost:0");
+            backupBrokerProps.put(KafkaConfig$.MODULE$.InterBrokerListenerNameProp(), "SSL");
+            backupBrokerProps.putAll(sslConfig);
+        } catch (final Exception e) {
+            throw new RuntimeException(e);
path: connect/mirror/src/test/java/org/apache/kafka/connect/mirror/integration/MirrorConnectorsIntegrationSSLTest.java
html: https://github.com/apache/kafka/pull/9224#discussion_r510486514
pull_request_number: 9224
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9214/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9214/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9214"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9214"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9214/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9214"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/e09a64da06939e9fb8e29dbc68ba608c673fa0b6"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "f19cd6ca48ccd2971948c9589279bb8ee20e5d88",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Currently, users of Suppress in strict mode must either not configure a memory bound or consider a per-operator, per-partition bound. The former would result in the application crashing ungracefully if it needs too much memory, which is sub-optimal for some deployment strategies. The latter is nice for determinism, but is difficult to configure in practice.\r\n\r\nIn addition to suppress buffers, Streams has a record cache configuration. Currently, we make the assumption that all threads would probably use a uniform amount of cache space, but this assumption is clearly wrong in some cases.\r\n\r\nFinally, there are some applications that want to run multiple Streams instances in the same JVM, probably for running different Streams topologies.\r\n\r\nIn aggregate, there are quite a few \"pools\" of heap space that users need to configure if they want to avoid an OOME, and the more threads, applications, and Suppress operators there are, the more granular these pools become. Of course, the more granular the pools are, the lower utilization of the available memory we will see. Plus, especially for Suppression, very granular pool configuration means a higher likelihood that the operator will run out of space and shut the app down.\r\n\r\nThis POC demonstrates the feasibility of unifying all these pools with one logical bound on total memory usage for all caches and suppression buffers, across all operators/tasks and all threads, and even across all Streams instances in the JVM.\r\n\r\nMost of the tests pass right now, but not all of them. I also need to clean up a few more things before really starting a discussion.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9214/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9214/commits",
  "created_at": "2020-08-24T19:41:29Z",
  "diff_url": "https://github.com/apache/kafka/pull/9214.diff",
  "draft": false,
  "head": {
    "label": "vvcephei:poc-shared-cache-budget",
    "ref": "poc-shared-cache-budget",
    "repo": null,
    "sha": "e09a64da06939e9fb8e29dbc68ba608c673fa0b6",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/832787?v=4",
      "events_url": "https://api.github.com/users/vvcephei/events{/privacy}",
      "followers_url": "https://api.github.com/users/vvcephei/followers",
      "following_url": "https://api.github.com/users/vvcephei/following{/other_user}",
      "gists_url": "https://api.github.com/users/vvcephei/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vvcephei",
      "id": 832787,
      "login": "vvcephei",
      "node_id": "MDQ6VXNlcjgzMjc4Nw==",
      "organizations_url": "https://api.github.com/users/vvcephei/orgs",
      "received_events_url": "https://api.github.com/users/vvcephei/received_events",
      "repos_url": "https://api.github.com/users/vvcephei/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vvcephei/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vvcephei/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vvcephei"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9214",
  "id": 472726071,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9214",
  "labels": [
    {
      "color": "63edea",
      "default": false,
      "description": null,
      "id": 820747028,
      "name": "streams",
      "node_id": "MDU6TGFiZWw4MjA3NDcwMjg=",
      "url": "https://api.github.com/repos/apache/kafka/labels/streams"
    }
  ],
  "locked": false,
  "merge_commit_sha": "61e92f6a1f7f5f1ed21d49068791d091c5d562d8",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDcyNzI2MDcx",
  "number": 9214,
  "patch_url": "https://github.com/apache/kafka/pull/9214.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9214/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/e09a64da06939e9fb8e29dbc68ba608c673fa0b6",
  "title": "[DO NOT MERGE] POC: unify all jvm cache pools",
  "updated_at": "2020-08-24T19:41:38Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9214",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/832787?v=4",
    "events_url": "https://api.github.com/users/vvcephei/events{/privacy}",
    "followers_url": "https://api.github.com/users/vvcephei/followers",
    "following_url": "https://api.github.com/users/vvcephei/following{/other_user}",
    "gists_url": "https://api.github.com/users/vvcephei/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/vvcephei",
    "id": 832787,
    "login": "vvcephei",
    "node_id": "MDQ6VXNlcjgzMjc4Nw==",
    "organizations_url": "https://api.github.com/users/vvcephei/orgs",
    "received_events_url": "https://api.github.com/users/vvcephei/received_events",
    "repos_url": "https://api.github.com/users/vvcephei/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/vvcephei/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vvcephei/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/vvcephei"
  }
}
json_root is_array: false
json_root is_object: true
number: 9214
url: https://api.github.com/repos/apache/kafka/pulls/9214
title: [DO NOT MERGE] POC: unify all jvm cache pools
body: Currently, users of Suppress in strict mode must either not configure a memory bound or consider a per-operator, per-partition bound. The former would result in the application crashing ungracefully if it needs too much memory, which is sub-optimal for some deployment strategies. The latter is nice for determinism, but is difficult to configure in practice.

In addition to suppress buffers, Streams has a record cache configuration. Currently, we make the assumption that all threads would probably use a uniform amount of cache space, but this assumption is clearly wrong in some cases.

Finally, there are some applications that want to run multiple Streams instances in the same JVM, probably for running different Streams topologies.

In aggregate, there are quite a few "pools" of heap space that users need to configure if they want to avoid an OOME, and the more threads, applications, and Suppress operators there are, the more granular these pools become. Of course, the more granular the pools are, the lower utilization of the available memory we will see. Plus, especially for Suppression, very granular pool configuration means a higher likelihood that the operator will run out of space and shut the app down.

This POC demonstrates the feasibility of unifying all these pools with one logical bound on total memory usage for all caches and suppression buffers, across all operators/tasks and all threads, and even across all Streams instances in the JVM.

Most of the tests pass right now, but not all of them. I also need to clean up a few more things before really starting a discussion.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9214/comments
pull_request_number: 9214
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9213/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9213/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9213"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9213"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9213/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9213"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/fcec07ab84ac53d1114139b862fe4960575dcdbb"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "8af7b96bfbffb2455191beac41ec8db4f6d24e3b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This adds assertions to check that leader epoch lineages match between\r\nreplicas. These have been added to system tests that involve broker\r\nrestarts and that wait for replicas to rejoin the ISR by the end of the\r\ntest.\r\n\r\nI also moved wait_until_rejoin_isr from downgrade_test and upgrade_test\r\n as the implementation was the same in each.",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9213/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9213/commits",
  "created_at": "2020-08-24T16:49:51Z",
  "diff_url": "https://github.com/apache/kafka/pull/9213.diff",
  "draft": false,
  "head": {
    "label": "lbradstreet:leader-epochs-check",
    "ref": "leader-epochs-check",
    "repo": {
      "archive_url": "https://api.github.com/repos/lbradstreet/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/lbradstreet/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/lbradstreet/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/lbradstreet/kafka/branches{/branch}",
      "clone_url": "https://github.com/lbradstreet/kafka.git",
      "collaborators_url": "https://api.github.com/repos/lbradstreet/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/lbradstreet/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/lbradstreet/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/lbradstreet/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/lbradstreet/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/lbradstreet/kafka/contributors",
      "created_at": "2018-10-22T17:16:50Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/lbradstreet/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/lbradstreet/kafka/downloads",
      "events_url": "https://api.github.com/repos/lbradstreet/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/lbradstreet/kafka/forks",
      "full_name": "lbradstreet/kafka",
      "git_commits_url": "https://api.github.com/repos/lbradstreet/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/lbradstreet/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/lbradstreet/kafka/git/tags{/sha}",
      "git_url": "git://github.com/lbradstreet/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/lbradstreet/kafka/hooks",
      "html_url": "https://github.com/lbradstreet/kafka",
      "id": 154184520,
      "issue_comment_url": "https://api.github.com/repos/lbradstreet/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/lbradstreet/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/lbradstreet/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/lbradstreet/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/lbradstreet/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/lbradstreet/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/lbradstreet/kafka/merges",
      "milestones_url": "https://api.github.com/repos/lbradstreet/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxNTQxODQ1MjA=",
      "notifications_url": "https://api.github.com/repos/lbradstreet/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/252189?v=4",
        "events_url": "https://api.github.com/users/lbradstreet/events{/privacy}",
        "followers_url": "https://api.github.com/users/lbradstreet/followers",
        "following_url": "https://api.github.com/users/lbradstreet/following{/other_user}",
        "gists_url": "https://api.github.com/users/lbradstreet/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/lbradstreet",
        "id": 252189,
        "login": "lbradstreet",
        "node_id": "MDQ6VXNlcjI1MjE4OQ==",
        "organizations_url": "https://api.github.com/users/lbradstreet/orgs",
        "received_events_url": "https://api.github.com/users/lbradstreet/received_events",
        "repos_url": "https://api.github.com/users/lbradstreet/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/lbradstreet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lbradstreet/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/lbradstreet"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/lbradstreet/kafka/pulls{/number}",
      "pushed_at": "2020-09-26T14:20:07Z",
      "releases_url": "https://api.github.com/repos/lbradstreet/kafka/releases{/id}",
      "size": 102198,
      "ssh_url": "git@github.com:lbradstreet/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/lbradstreet/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/lbradstreet/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/lbradstreet/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/lbradstreet/kafka/subscription",
      "svn_url": "https://github.com/lbradstreet/kafka",
      "tags_url": "https://api.github.com/repos/lbradstreet/kafka/tags",
      "teams_url": "https://api.github.com/repos/lbradstreet/kafka/teams",
      "trees_url": "https://api.github.com/repos/lbradstreet/kafka/git/trees{/sha}",
      "updated_at": "2018-10-22T17:17:05Z",
      "url": "https://api.github.com/repos/lbradstreet/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "fcec07ab84ac53d1114139b862fe4960575dcdbb",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/252189?v=4",
      "events_url": "https://api.github.com/users/lbradstreet/events{/privacy}",
      "followers_url": "https://api.github.com/users/lbradstreet/followers",
      "following_url": "https://api.github.com/users/lbradstreet/following{/other_user}",
      "gists_url": "https://api.github.com/users/lbradstreet/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lbradstreet",
      "id": 252189,
      "login": "lbradstreet",
      "node_id": "MDQ6VXNlcjI1MjE4OQ==",
      "organizations_url": "https://api.github.com/users/lbradstreet/orgs",
      "received_events_url": "https://api.github.com/users/lbradstreet/received_events",
      "repos_url": "https://api.github.com/users/lbradstreet/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lbradstreet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lbradstreet/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lbradstreet"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9213",
  "id": 472641685,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9213",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "aa2bb2762807b4df6752f05264f574285688c287",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDcyNjQxNjg1",
  "number": 9213,
  "patch_url": "https://github.com/apache/kafka/pull/9213.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9213/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/fcec07ab84ac53d1114139b862fe4960575dcdbb",
  "title": "MINOR: add epoch lineage checks to system tests",
  "updated_at": "2020-08-25T23:45:43Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9213",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/252189?v=4",
    "events_url": "https://api.github.com/users/lbradstreet/events{/privacy}",
    "followers_url": "https://api.github.com/users/lbradstreet/followers",
    "following_url": "https://api.github.com/users/lbradstreet/following{/other_user}",
    "gists_url": "https://api.github.com/users/lbradstreet/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/lbradstreet",
    "id": 252189,
    "login": "lbradstreet",
    "node_id": "MDQ6VXNlcjI1MjE4OQ==",
    "organizations_url": "https://api.github.com/users/lbradstreet/orgs",
    "received_events_url": "https://api.github.com/users/lbradstreet/received_events",
    "repos_url": "https://api.github.com/users/lbradstreet/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/lbradstreet/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lbradstreet/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/lbradstreet"
  }
}
json_root is_array: false
json_root is_object: true
number: 9213
url: https://api.github.com/repos/apache/kafka/pulls/9213
title: MINOR: add epoch lineage checks to system tests
body: This adds assertions to check that leader epoch lineages match between
replicas. These have been added to system tests that involve broker
restarts and that wait for replicas to rejoin the ISR by the end of the
test.

I also moved wait_until_rejoin_isr from downgrade_test and upgrade_test
 as the implementation was the same in each.
review_comments: https://api.github.com/repos/apache/kafka/pulls/9213/comments
pull_request_number: 9213
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9210/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9210/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9210"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9210"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9210/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9210"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/59cd6b4bc7cf33ae5a8074851b4f55a9dc26c30e"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "8af7b96bfbffb2455191beac41ec8db4f6d24e3b",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This is an incomplete, proof-of-concept implementation of [KIP-655](https://cwiki.apache.org/confluence/display/KAFKA/KIP-655:+Windowed+Distinct+Operation+for+Kafka+Streams+API) for the sake of discussion/review only. \r\n\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9210/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9210/commits",
  "created_at": "2020-08-23T22:42:22Z",
  "diff_url": "https://github.com/apache/kafka/pull/9210.diff",
  "draft": false,
  "head": {
    "label": "inponomarev:kip-655",
    "ref": "kip-655",
    "repo": {
      "archive_url": "https://api.github.com/repos/inponomarev/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/inponomarev/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/inponomarev/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/inponomarev/kafka/branches{/branch}",
      "clone_url": "https://github.com/inponomarev/kafka.git",
      "collaborators_url": "https://api.github.com/repos/inponomarev/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/inponomarev/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/inponomarev/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/inponomarev/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/inponomarev/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/inponomarev/kafka/contributors",
      "created_at": "2020-07-19T10:39:28Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/inponomarev/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/inponomarev/kafka/downloads",
      "events_url": "https://api.github.com/repos/inponomarev/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/inponomarev/kafka/forks",
      "full_name": "inponomarev/kafka",
      "git_commits_url": "https://api.github.com/repos/inponomarev/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/inponomarev/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/inponomarev/kafka/git/tags{/sha}",
      "git_url": "git://github.com/inponomarev/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/inponomarev/kafka/hooks",
      "html_url": "https://github.com/inponomarev/kafka",
      "id": 280843937,
      "issue_comment_url": "https://api.github.com/repos/inponomarev/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/inponomarev/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/inponomarev/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/inponomarev/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/inponomarev/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/inponomarev/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/inponomarev/kafka/merges",
      "milestones_url": "https://api.github.com/repos/inponomarev/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyODA4NDM5Mzc=",
      "notifications_url": "https://api.github.com/repos/inponomarev/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/20153286?v=4",
        "events_url": "https://api.github.com/users/inponomarev/events{/privacy}",
        "followers_url": "https://api.github.com/users/inponomarev/followers",
        "following_url": "https://api.github.com/users/inponomarev/following{/other_user}",
        "gists_url": "https://api.github.com/users/inponomarev/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/inponomarev",
        "id": 20153286,
        "login": "inponomarev",
        "node_id": "MDQ6VXNlcjIwMTUzMjg2",
        "organizations_url": "https://api.github.com/users/inponomarev/orgs",
        "received_events_url": "https://api.github.com/users/inponomarev/received_events",
        "repos_url": "https://api.github.com/users/inponomarev/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/inponomarev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/inponomarev/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/inponomarev"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/inponomarev/kafka/pulls{/number}",
      "pushed_at": "2020-08-23T22:37:27Z",
      "releases_url": "https://api.github.com/repos/inponomarev/kafka/releases{/id}",
      "size": 104856,
      "ssh_url": "git@github.com:inponomarev/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/inponomarev/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/inponomarev/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/inponomarev/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/inponomarev/kafka/subscription",
      "svn_url": "https://github.com/inponomarev/kafka",
      "tags_url": "https://api.github.com/repos/inponomarev/kafka/tags",
      "teams_url": "https://api.github.com/repos/inponomarev/kafka/teams",
      "trees_url": "https://api.github.com/repos/inponomarev/kafka/git/trees{/sha}",
      "updated_at": "2020-08-07T14:28:02Z",
      "url": "https://api.github.com/repos/inponomarev/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "59cd6b4bc7cf33ae5a8074851b4f55a9dc26c30e",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/20153286?v=4",
      "events_url": "https://api.github.com/users/inponomarev/events{/privacy}",
      "followers_url": "https://api.github.com/users/inponomarev/followers",
      "following_url": "https://api.github.com/users/inponomarev/following{/other_user}",
      "gists_url": "https://api.github.com/users/inponomarev/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/inponomarev",
      "id": 20153286,
      "login": "inponomarev",
      "node_id": "MDQ6VXNlcjIwMTUzMjg2",
      "organizations_url": "https://api.github.com/users/inponomarev/orgs",
      "received_events_url": "https://api.github.com/users/inponomarev/received_events",
      "repos_url": "https://api.github.com/users/inponomarev/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/inponomarev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/inponomarev/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/inponomarev"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9210",
  "id": 472187383,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9210",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "8136344553713017324e8c8ecdc2546ec138fbef",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDcyMTg3Mzgz",
  "number": 9210,
  "patch_url": "https://github.com/apache/kafka/pull/9210.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9210/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/59cd6b4bc7cf33ae5a8074851b4f55a9dc26c30e",
  "title": "KAFKA-10369 [WIP] KIP-655 implementation",
  "updated_at": "2020-08-23T22:42:22Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9210",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/20153286?v=4",
    "events_url": "https://api.github.com/users/inponomarev/events{/privacy}",
    "followers_url": "https://api.github.com/users/inponomarev/followers",
    "following_url": "https://api.github.com/users/inponomarev/following{/other_user}",
    "gists_url": "https://api.github.com/users/inponomarev/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/inponomarev",
    "id": 20153286,
    "login": "inponomarev",
    "node_id": "MDQ6VXNlcjIwMTUzMjg2",
    "organizations_url": "https://api.github.com/users/inponomarev/orgs",
    "received_events_url": "https://api.github.com/users/inponomarev/received_events",
    "repos_url": "https://api.github.com/users/inponomarev/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/inponomarev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/inponomarev/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/inponomarev"
  }
}
json_root is_array: false
json_root is_object: true
number: 9210
url: https://api.github.com/repos/apache/kafka/pulls/9210
title: KAFKA-10369 [WIP] KIP-655 implementation
body: This is an incomplete, proof-of-concept implementation of [KIP-655](https://cwiki.apache.org/confluence/display/KAFKA/KIP-655:+Windowed+Distinct+Operation+for+Kafka+Streams+API) for the sake of discussion/review only. 


### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9210/comments
pull_request_number: 9210
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9204/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9204/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9204"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9204"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9204/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9204"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/3f50296f81c9e889d34d87ee31b59170d7094236"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "9cabc8c2b3836430879b01f543d0228a2fa83775",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "adding missing fields for --deep-iteration log messages.\r\n\r\nMissing fields include : partitionLeaderEpoch, baseSequence, lastSequence, etc.,",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9204/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9204/commits",
  "created_at": "2020-08-20T15:23:19Z",
  "diff_url": "https://github.com/apache/kafka/pull/9204.diff",
  "draft": false,
  "head": {
    "label": "iprithv:logs_change",
    "ref": "logs_change",
    "repo": {
      "archive_url": "https://api.github.com/repos/iprithv/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/iprithv/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/iprithv/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/iprithv/kafka/branches{/branch}",
      "clone_url": "https://github.com/iprithv/kafka.git",
      "collaborators_url": "https://api.github.com/repos/iprithv/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/iprithv/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/iprithv/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/iprithv/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/iprithv/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/iprithv/kafka/contributors",
      "created_at": "2020-08-10T16:35:57Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/iprithv/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/iprithv/kafka/downloads",
      "events_url": "https://api.github.com/repos/iprithv/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/iprithv/kafka/forks",
      "full_name": "iprithv/kafka",
      "git_commits_url": "https://api.github.com/repos/iprithv/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/iprithv/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/iprithv/kafka/git/tags{/sha}",
      "git_url": "git://github.com/iprithv/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/iprithv/kafka/hooks",
      "html_url": "https://github.com/iprithv/kafka",
      "id": 286527238,
      "issue_comment_url": "https://api.github.com/repos/iprithv/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/iprithv/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/iprithv/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/iprithv/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/iprithv/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/iprithv/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/iprithv/kafka/merges",
      "milestones_url": "https://api.github.com/repos/iprithv/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyODY1MjcyMzg=",
      "notifications_url": "https://api.github.com/repos/iprithv/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/48927540?v=4",
        "events_url": "https://api.github.com/users/iprithv/events{/privacy}",
        "followers_url": "https://api.github.com/users/iprithv/followers",
        "following_url": "https://api.github.com/users/iprithv/following{/other_user}",
        "gists_url": "https://api.github.com/users/iprithv/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/iprithv",
        "id": 48927540,
        "login": "iprithv",
        "node_id": "MDQ6VXNlcjQ4OTI3NTQw",
        "organizations_url": "https://api.github.com/users/iprithv/orgs",
        "received_events_url": "https://api.github.com/users/iprithv/received_events",
        "repos_url": "https://api.github.com/users/iprithv/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/iprithv/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/iprithv/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/iprithv"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/iprithv/kafka/pulls{/number}",
      "pushed_at": "2020-08-20T15:16:41Z",
      "releases_url": "https://api.github.com/repos/iprithv/kafka/releases{/id}",
      "size": 104397,
      "ssh_url": "git@github.com:iprithv/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/iprithv/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/iprithv/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/iprithv/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/iprithv/kafka/subscription",
      "svn_url": "https://github.com/iprithv/kafka",
      "tags_url": "https://api.github.com/repos/iprithv/kafka/tags",
      "teams_url": "https://api.github.com/repos/iprithv/kafka/teams",
      "trees_url": "https://api.github.com/repos/iprithv/kafka/git/trees{/sha}",
      "updated_at": "2020-08-10T16:35:59Z",
      "url": "https://api.github.com/repos/iprithv/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "3f50296f81c9e889d34d87ee31b59170d7094236",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/48927540?v=4",
      "events_url": "https://api.github.com/users/iprithv/events{/privacy}",
      "followers_url": "https://api.github.com/users/iprithv/followers",
      "following_url": "https://api.github.com/users/iprithv/following{/other_user}",
      "gists_url": "https://api.github.com/users/iprithv/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iprithv",
      "id": 48927540,
      "login": "iprithv",
      "node_id": "MDQ6VXNlcjQ4OTI3NTQw",
      "organizations_url": "https://api.github.com/users/iprithv/orgs",
      "received_events_url": "https://api.github.com/users/iprithv/received_events",
      "repos_url": "https://api.github.com/users/iprithv/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iprithv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iprithv/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iprithv"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9204",
  "id": 470985945,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9204",
  "labels": [
    {
      "color": "fbca04",
      "default": false,
      "description": "",
      "id": 851034845,
      "name": "tools",
      "node_id": "MDU6TGFiZWw4NTEwMzQ4NDU=",
      "url": "https://api.github.com/repos/apache/kafka/labels/tools"
    }
  ],
  "locked": false,
  "merge_commit_sha": "8255728e128fa348d19d1efc77a0b8c58f2250d2",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDcwOTg1OTQ1",
  "number": 9204,
  "patch_url": "https://github.com/apache/kafka/pull/9204.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9204/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/3f50296f81c9e889d34d87ee31b59170d7094236",
  "title": "KAFKA-6181 Examining log messages with {{--deep-iteration}} should show superset of fields",
  "updated_at": "2020-08-21T19:06:20Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9204",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/48927540?v=4",
    "events_url": "https://api.github.com/users/iprithv/events{/privacy}",
    "followers_url": "https://api.github.com/users/iprithv/followers",
    "following_url": "https://api.github.com/users/iprithv/following{/other_user}",
    "gists_url": "https://api.github.com/users/iprithv/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/iprithv",
    "id": 48927540,
    "login": "iprithv",
    "node_id": "MDQ6VXNlcjQ4OTI3NTQw",
    "organizations_url": "https://api.github.com/users/iprithv/orgs",
    "received_events_url": "https://api.github.com/users/iprithv/received_events",
    "repos_url": "https://api.github.com/users/iprithv/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/iprithv/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/iprithv/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/iprithv"
  }
}
json_root is_array: false
json_root is_object: true
number: 9204
url: https://api.github.com/repos/apache/kafka/pulls/9204
title: KAFKA-6181 Examining log messages with {{--deep-iteration}} should show superset of fields
body: adding missing fields for --deep-iteration log messages.

Missing fields include : partitionLeaderEpoch, baseSequence, lastSequence, etc.,
review_comments: https://api.github.com/repos/apache/kafka/pulls/9204/comments
pull_request_number: 9204
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9201/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9201/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9201"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9201"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9201/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9201"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/b1edba471c0a74042bccdbed751628210003d055"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "cf202cb6acf38c64a3e8b9e541673a12ee55eaaa",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Increase the amount of time available to the `test_verifiable_producer` test to login and get the process name for the verifiable producer from 5 seconds to 10 seconds.\r\n\r\nWe were seeing some test failures due to the assertion failing because the verifiable producer would complete before we could login, list the processes, and parse out the producer version. Previously, we were giving this operation 5 seconds to run, this PR bumps it up to 10 seconds. \r\n\r\nI verified locally that this does not flake, but even at 5 seconds I wasn't seeing any flakes. Ultimately we should find a better strategy than racing to query the producer process (as outlined in the existing comments). ",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9201/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9201/commits",
  "created_at": "2020-08-19T18:04:39Z",
  "diff_url": "https://github.com/apache/kafka/pull/9201.diff",
  "draft": false,
  "head": {
    "label": "gardnervickers:verifiable-producer-test-increase-time",
    "ref": "verifiable-producer-test-increase-time",
    "repo": {
      "archive_url": "https://api.github.com/repos/gardnervickers/kafka-1/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/gardnervickers/kafka-1/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/gardnervickers/kafka-1/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/gardnervickers/kafka-1/branches{/branch}",
      "clone_url": "https://github.com/gardnervickers/kafka-1.git",
      "collaborators_url": "https://api.github.com/repos/gardnervickers/kafka-1/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/gardnervickers/kafka-1/comments{/number}",
      "commits_url": "https://api.github.com/repos/gardnervickers/kafka-1/commits{/sha}",
      "compare_url": "https://api.github.com/repos/gardnervickers/kafka-1/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/gardnervickers/kafka-1/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/gardnervickers/kafka-1/contributors",
      "created_at": "2018-09-26T00:51:32Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/gardnervickers/kafka-1/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/gardnervickers/kafka-1/downloads",
      "events_url": "https://api.github.com/repos/gardnervickers/kafka-1/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/gardnervickers/kafka-1/forks",
      "full_name": "gardnervickers/kafka-1",
      "git_commits_url": "https://api.github.com/repos/gardnervickers/kafka-1/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/gardnervickers/kafka-1/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/gardnervickers/kafka-1/git/tags{/sha}",
      "git_url": "git://github.com/gardnervickers/kafka-1.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": "",
      "hooks_url": "https://api.github.com/repos/gardnervickers/kafka-1/hooks",
      "html_url": "https://github.com/gardnervickers/kafka-1",
      "id": 150347565,
      "issue_comment_url": "https://api.github.com/repos/gardnervickers/kafka-1/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/gardnervickers/kafka-1/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/gardnervickers/kafka-1/issues{/number}",
      "keys_url": "https://api.github.com/repos/gardnervickers/kafka-1/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/gardnervickers/kafka-1/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/gardnervickers/kafka-1/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/gardnervickers/kafka-1/merges",
      "milestones_url": "https://api.github.com/repos/gardnervickers/kafka-1/milestones{/number}",
      "mirror_url": null,
      "name": "kafka-1",
      "node_id": "MDEwOlJlcG9zaXRvcnkxNTAzNDc1NjU=",
      "notifications_url": "https://api.github.com/repos/gardnervickers/kafka-1/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/2684011?v=4",
        "events_url": "https://api.github.com/users/gardnervickers/events{/privacy}",
        "followers_url": "https://api.github.com/users/gardnervickers/followers",
        "following_url": "https://api.github.com/users/gardnervickers/following{/other_user}",
        "gists_url": "https://api.github.com/users/gardnervickers/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/gardnervickers",
        "id": 2684011,
        "login": "gardnervickers",
        "node_id": "MDQ6VXNlcjI2ODQwMTE=",
        "organizations_url": "https://api.github.com/users/gardnervickers/orgs",
        "received_events_url": "https://api.github.com/users/gardnervickers/received_events",
        "repos_url": "https://api.github.com/users/gardnervickers/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/gardnervickers/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gardnervickers/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/gardnervickers"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/gardnervickers/kafka-1/pulls{/number}",
      "pushed_at": "2020-10-16T17:18:02Z",
      "releases_url": "https://api.github.com/repos/gardnervickers/kafka-1/releases{/id}",
      "size": 103025,
      "ssh_url": "git@github.com:gardnervickers/kafka-1.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/gardnervickers/kafka-1/stargazers",
      "statuses_url": "https://api.github.com/repos/gardnervickers/kafka-1/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/gardnervickers/kafka-1/subscribers",
      "subscription_url": "https://api.github.com/repos/gardnervickers/kafka-1/subscription",
      "svn_url": "https://github.com/gardnervickers/kafka-1",
      "tags_url": "https://api.github.com/repos/gardnervickers/kafka-1/tags",
      "teams_url": "https://api.github.com/repos/gardnervickers/kafka-1/teams",
      "trees_url": "https://api.github.com/repos/gardnervickers/kafka-1/git/trees{/sha}",
      "updated_at": "2019-01-13T22:03:53Z",
      "url": "https://api.github.com/repos/gardnervickers/kafka-1",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "b1edba471c0a74042bccdbed751628210003d055",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/2684011?v=4",
      "events_url": "https://api.github.com/users/gardnervickers/events{/privacy}",
      "followers_url": "https://api.github.com/users/gardnervickers/followers",
      "following_url": "https://api.github.com/users/gardnervickers/following{/other_user}",
      "gists_url": "https://api.github.com/users/gardnervickers/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/gardnervickers",
      "id": 2684011,
      "login": "gardnervickers",
      "node_id": "MDQ6VXNlcjI2ODQwMTE=",
      "organizations_url": "https://api.github.com/users/gardnervickers/orgs",
      "received_events_url": "https://api.github.com/users/gardnervickers/received_events",
      "repos_url": "https://api.github.com/users/gardnervickers/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/gardnervickers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gardnervickers/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/gardnervickers"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9201",
  "id": 470327455,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9201",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "c8edf17e2bb65def5c0c676fb9d7c46bcb116c1e",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDcwMzI3NDU1",
  "number": 9201,
  "patch_url": "https://github.com/apache/kafka/pull/9201.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9201/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/b1edba471c0a74042bccdbed751628210003d055",
  "title": "MINOR: Increase the amount of time available to the `test_verifiable_producer` test",
  "updated_at": "2020-10-16T17:18:09Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9201",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/2684011?v=4",
    "events_url": "https://api.github.com/users/gardnervickers/events{/privacy}",
    "followers_url": "https://api.github.com/users/gardnervickers/followers",
    "following_url": "https://api.github.com/users/gardnervickers/following{/other_user}",
    "gists_url": "https://api.github.com/users/gardnervickers/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/gardnervickers",
    "id": 2684011,
    "login": "gardnervickers",
    "node_id": "MDQ6VXNlcjI2ODQwMTE=",
    "organizations_url": "https://api.github.com/users/gardnervickers/orgs",
    "received_events_url": "https://api.github.com/users/gardnervickers/received_events",
    "repos_url": "https://api.github.com/users/gardnervickers/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/gardnervickers/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gardnervickers/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/gardnervickers"
  }
}
json_root is_array: false
json_root is_object: true
number: 9201
url: https://api.github.com/repos/apache/kafka/pulls/9201
title: MINOR: Increase the amount of time available to the `test_verifiable_producer` test
body: Increase the amount of time available to the `test_verifiable_producer` test to login and get the process name for the verifiable producer from 5 seconds to 10 seconds.

We were seeing some test failures due to the assertion failing because the verifiable producer would complete before we could login, list the processes, and parse out the producer version. Previously, we were giving this operation 5 seconds to run, this PR bumps it up to 10 seconds. 

I verified locally that this does not flake, but even at 5 seconds I wasn't seeing any flakes. Ultimately we should find a better strategy than racing to query the producer process (as outlined in the existing comments). 
review_comments: https://api.github.com/repos/apache/kafka/pulls/9201/comments
pull_request_number: 9201
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9193/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9193/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9193"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9193"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9193/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9193"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/48a87948e7cb06e7ce55051ea95aa911bb992161"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "e8b2dcdee6f25e9344d52b84e86328ec616bf819",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "This is a starting point for the implementation of the tool proposed in [KIP-640](https://cwiki.apache.org/confluence/display/KAFKA/KIP-640%3A+Add+log+compression+analysis+tool).\r\n\r\nI consider this to be a work in progress, though we've been using this tool internally for some time with success. I haven't included any tests with this initial pass on the implementation, but I will follow up on this as the discussion moves along.\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9193/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9193/commits",
  "created_at": "2020-08-17T20:00:45Z",
  "diff_url": "https://github.com/apache/kafka/pull/9193.diff",
  "draft": false,
  "head": {
    "label": "chrisbeard:kip-640-kafka-compression-analyzer",
    "ref": "kip-640-kafka-compression-analyzer",
    "repo": {
      "archive_url": "https://api.github.com/repos/chrisbeard/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/chrisbeard/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/chrisbeard/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/chrisbeard/kafka/branches{/branch}",
      "clone_url": "https://github.com/chrisbeard/kafka.git",
      "collaborators_url": "https://api.github.com/repos/chrisbeard/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/chrisbeard/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/chrisbeard/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/chrisbeard/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/chrisbeard/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/chrisbeard/kafka/contributors",
      "created_at": "2019-12-26T20:15:59Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/chrisbeard/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/chrisbeard/kafka/downloads",
      "events_url": "https://api.github.com/repos/chrisbeard/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/chrisbeard/kafka/forks",
      "full_name": "chrisbeard/kafka",
      "git_commits_url": "https://api.github.com/repos/chrisbeard/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/chrisbeard/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/chrisbeard/kafka/git/tags{/sha}",
      "git_url": "git://github.com/chrisbeard/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/chrisbeard/kafka/hooks",
      "html_url": "https://github.com/chrisbeard/kafka",
      "id": 230323007,
      "issue_comment_url": "https://api.github.com/repos/chrisbeard/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/chrisbeard/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/chrisbeard/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/chrisbeard/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/chrisbeard/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/chrisbeard/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/chrisbeard/kafka/merges",
      "milestones_url": "https://api.github.com/repos/chrisbeard/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMzAzMjMwMDc=",
      "notifications_url": "https://api.github.com/repos/chrisbeard/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/2517058?v=4",
        "events_url": "https://api.github.com/users/chrisbeard/events{/privacy}",
        "followers_url": "https://api.github.com/users/chrisbeard/followers",
        "following_url": "https://api.github.com/users/chrisbeard/following{/other_user}",
        "gists_url": "https://api.github.com/users/chrisbeard/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/chrisbeard",
        "id": 2517058,
        "login": "chrisbeard",
        "node_id": "MDQ6VXNlcjI1MTcwNTg=",
        "organizations_url": "https://api.github.com/users/chrisbeard/orgs",
        "received_events_url": "https://api.github.com/users/chrisbeard/received_events",
        "repos_url": "https://api.github.com/users/chrisbeard/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/chrisbeard/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chrisbeard/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/chrisbeard"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/chrisbeard/kafka/pulls{/number}",
      "pushed_at": "2020-08-17T18:41:35Z",
      "releases_url": "https://api.github.com/repos/chrisbeard/kafka/releases{/id}",
      "size": 92888,
      "ssh_url": "git@github.com:chrisbeard/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/chrisbeard/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/chrisbeard/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/chrisbeard/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/chrisbeard/kafka/subscription",
      "svn_url": "https://github.com/chrisbeard/kafka",
      "tags_url": "https://api.github.com/repos/chrisbeard/kafka/tags",
      "teams_url": "https://api.github.com/repos/chrisbeard/kafka/teams",
      "trees_url": "https://api.github.com/repos/chrisbeard/kafka/git/trees{/sha}",
      "updated_at": "2019-12-26T20:16:02Z",
      "url": "https://api.github.com/repos/chrisbeard/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "48a87948e7cb06e7ce55051ea95aa911bb992161",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/2517058?v=4",
      "events_url": "https://api.github.com/users/chrisbeard/events{/privacy}",
      "followers_url": "https://api.github.com/users/chrisbeard/followers",
      "following_url": "https://api.github.com/users/chrisbeard/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisbeard/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chrisbeard",
      "id": 2517058,
      "login": "chrisbeard",
      "node_id": "MDQ6VXNlcjI1MTcwNTg=",
      "organizations_url": "https://api.github.com/users/chrisbeard/orgs",
      "received_events_url": "https://api.github.com/users/chrisbeard/received_events",
      "repos_url": "https://api.github.com/users/chrisbeard/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chrisbeard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisbeard/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chrisbeard"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9193",
  "id": 469039863,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9193",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "d838cf437de9b3ca89ac4d4230959a2dc8980cb1",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDY5MDM5ODYz",
  "number": 9193,
  "patch_url": "https://github.com/apache/kafka/pull/9193.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9193/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/48a87948e7cb06e7ce55051ea95aa911bb992161",
  "title": "KAFKA-10281: [WIP] Add log compression analysis tool KIP-640",
  "updated_at": "2020-08-17T20:00:45Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9193",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/2517058?v=4",
    "events_url": "https://api.github.com/users/chrisbeard/events{/privacy}",
    "followers_url": "https://api.github.com/users/chrisbeard/followers",
    "following_url": "https://api.github.com/users/chrisbeard/following{/other_user}",
    "gists_url": "https://api.github.com/users/chrisbeard/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/chrisbeard",
    "id": 2517058,
    "login": "chrisbeard",
    "node_id": "MDQ6VXNlcjI1MTcwNTg=",
    "organizations_url": "https://api.github.com/users/chrisbeard/orgs",
    "received_events_url": "https://api.github.com/users/chrisbeard/received_events",
    "repos_url": "https://api.github.com/users/chrisbeard/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/chrisbeard/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chrisbeard/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/chrisbeard"
  }
}
json_root is_array: false
json_root is_object: true
number: 9193
url: https://api.github.com/repos/apache/kafka/pulls/9193
title: KAFKA-10281: [WIP] Add log compression analysis tool KIP-640
body: This is a starting point for the implementation of the tool proposed in [KIP-640](https://cwiki.apache.org/confluence/display/KAFKA/KIP-640%3A+Add+log+compression+analysis+tool).

I consider this to be a work in progress, though we've been using this tool internally for some time with success. I haven't included any tests with this initial pass on the implementation, but I will follow up on this as the discussion moves along.

review_comments: https://api.github.com/repos/apache/kafka/pulls/9193/comments
pull_request_number: 9193
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9188/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9188/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9188"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9188"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9188/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9188"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/dae0430ee95a8936e1091269e0ee9ff25b69b078"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "d8d9d1a559c6564a7690ddaeebaeb53a52ceec4a",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "… may have data\r\n\r\nThere are a couple of different situations which can result in\r\nBUFFER_OVERFLOW on read with the current implementation, due to the\r\nwhile loop structure (such as TLS compression with identical buffer\r\nsizes, or buffers sizes that differ to optimize modes where the cipher\r\ntext is larger than the plain text.)  The JDK documentation indicates\r\nthat a buffer of getApplicationBufferSize() bytes will be enough for a\r\nsingle unwrap operation, but the SslTransportLayer loop may call unwrap\r\nwith an application buffer which isn't empty.\r\n\r\nThe current implementation will check dst for space and then move data\r\nfrom the application buffer.  It will then continue the loop and may try\r\nto unwrap() again without verifying that there are\r\ngetApplicationBufferSize() bytes free in the application buffer. If,\r\ninstead, the loop moves data into dst, and then breaks the loop if dst\r\nis full, then unwrap() should never be called with data in the\r\napplication buffer.\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9188/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9188/commits",
  "created_at": "2020-08-17T01:47:26Z",
  "diff_url": "https://github.com/apache/kafka/pull/9188.diff",
  "draft": false,
  "head": {
    "label": "Spatterjaaay:fix-with-break-better",
    "ref": "fix-with-break-better",
    "repo": {
      "archive_url": "https://api.github.com/repos/Spatterjaaay/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/Spatterjaaay/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/Spatterjaaay/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/Spatterjaaay/kafka/branches{/branch}",
      "clone_url": "https://github.com/Spatterjaaay/kafka.git",
      "collaborators_url": "https://api.github.com/repos/Spatterjaaay/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/Spatterjaaay/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/Spatterjaaay/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/Spatterjaaay/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/Spatterjaaay/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/Spatterjaaay/kafka/contributors",
      "created_at": "2019-04-05T06:48:40Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/Spatterjaaay/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/Spatterjaaay/kafka/downloads",
      "events_url": "https://api.github.com/repos/Spatterjaaay/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/Spatterjaaay/kafka/forks",
      "full_name": "Spatterjaaay/kafka",
      "git_commits_url": "https://api.github.com/repos/Spatterjaaay/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/Spatterjaaay/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/Spatterjaaay/kafka/git/tags{/sha}",
      "git_url": "git://github.com/Spatterjaaay/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/Spatterjaaay/kafka/hooks",
      "html_url": "https://github.com/Spatterjaaay/kafka",
      "id": 179632288,
      "issue_comment_url": "https://api.github.com/repos/Spatterjaaay/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/Spatterjaaay/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/Spatterjaaay/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/Spatterjaaay/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/Spatterjaaay/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/Spatterjaaay/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/Spatterjaaay/kafka/merges",
      "milestones_url": "https://api.github.com/repos/Spatterjaaay/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxNzk2MzIyODg=",
      "notifications_url": "https://api.github.com/repos/Spatterjaaay/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/22312890?v=4",
        "events_url": "https://api.github.com/users/Spatterjaaay/events{/privacy}",
        "followers_url": "https://api.github.com/users/Spatterjaaay/followers",
        "following_url": "https://api.github.com/users/Spatterjaaay/following{/other_user}",
        "gists_url": "https://api.github.com/users/Spatterjaaay/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/Spatterjaaay",
        "id": 22312890,
        "login": "Spatterjaaay",
        "node_id": "MDQ6VXNlcjIyMzEyODkw",
        "organizations_url": "https://api.github.com/users/Spatterjaaay/orgs",
        "received_events_url": "https://api.github.com/users/Spatterjaaay/received_events",
        "repos_url": "https://api.github.com/users/Spatterjaaay/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/Spatterjaaay/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Spatterjaaay/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/Spatterjaaay"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/Spatterjaaay/kafka/pulls{/number}",
      "pushed_at": "2020-08-17T01:42:35Z",
      "releases_url": "https://api.github.com/repos/Spatterjaaay/kafka/releases{/id}",
      "size": 101126,
      "ssh_url": "git@github.com:Spatterjaaay/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/Spatterjaaay/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/Spatterjaaay/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/Spatterjaaay/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/Spatterjaaay/kafka/subscription",
      "svn_url": "https://github.com/Spatterjaaay/kafka",
      "tags_url": "https://api.github.com/repos/Spatterjaaay/kafka/tags",
      "teams_url": "https://api.github.com/repos/Spatterjaaay/kafka/teams",
      "trees_url": "https://api.github.com/repos/Spatterjaaay/kafka/git/trees{/sha}",
      "updated_at": "2020-08-17T01:38:49Z",
      "url": "https://api.github.com/repos/Spatterjaaay/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "dae0430ee95a8936e1091269e0ee9ff25b69b078",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/22312890?v=4",
      "events_url": "https://api.github.com/users/Spatterjaaay/events{/privacy}",
      "followers_url": "https://api.github.com/users/Spatterjaaay/followers",
      "following_url": "https://api.github.com/users/Spatterjaaay/following{/other_user}",
      "gists_url": "https://api.github.com/users/Spatterjaaay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Spatterjaaay",
      "id": 22312890,
      "login": "Spatterjaaay",
      "node_id": "MDQ6VXNlcjIyMzEyODkw",
      "organizations_url": "https://api.github.com/users/Spatterjaaay/orgs",
      "received_events_url": "https://api.github.com/users/Spatterjaaay/received_events",
      "repos_url": "https://api.github.com/users/Spatterjaaay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Spatterjaaay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Spatterjaaay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Spatterjaaay"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9188",
  "id": 468535518,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9188",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "bdf565e7e7ad658d8febf8151e2fa9543680a074",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDY4NTM1NTE4",
  "number": 9188,
  "patch_url": "https://github.com/apache/kafka/pull/9188.patch",
  "requested_reviewers": [
    {
      "avatar_url": "https://avatars0.githubusercontent.com/u/13164074?v=4",
      "events_url": "https://api.github.com/users/rajinisivaram/events{/privacy}",
      "followers_url": "https://api.github.com/users/rajinisivaram/followers",
      "following_url": "https://api.github.com/users/rajinisivaram/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajinisivaram/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rajinisivaram",
      "id": 13164074,
      "login": "rajinisivaram",
      "node_id": "MDQ6VXNlcjEzMTY0MDc0",
      "organizations_url": "https://api.github.com/users/rajinisivaram/orgs",
      "received_events_url": "https://api.github.com/users/rajinisivaram/received_events",
      "repos_url": "https://api.github.com/users/rajinisivaram/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rajinisivaram/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajinisivaram/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rajinisivaram"
    }
  ],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9188/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/dae0430ee95a8936e1091269e0ee9ff25b69b078",
  "title": "break when dst is full so that unwrap isn't called when appreadbuffer…",
  "updated_at": "2020-09-29T00:52:55Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9188",
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/22312890?v=4",
    "events_url": "https://api.github.com/users/Spatterjaaay/events{/privacy}",
    "followers_url": "https://api.github.com/users/Spatterjaaay/followers",
    "following_url": "https://api.github.com/users/Spatterjaaay/following{/other_user}",
    "gists_url": "https://api.github.com/users/Spatterjaaay/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/Spatterjaaay",
    "id": 22312890,
    "login": "Spatterjaaay",
    "node_id": "MDQ6VXNlcjIyMzEyODkw",
    "organizations_url": "https://api.github.com/users/Spatterjaaay/orgs",
    "received_events_url": "https://api.github.com/users/Spatterjaaay/received_events",
    "repos_url": "https://api.github.com/users/Spatterjaaay/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/Spatterjaaay/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Spatterjaaay/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/Spatterjaaay"
  }
}
json_root is_array: false
json_root is_object: true
number: 9188
url: https://api.github.com/repos/apache/kafka/pulls/9188
title: break when dst is full so that unwrap isn't called when appreadbuffer…
body: … may have data

There are a couple of different situations which can result in
BUFFER_OVERFLOW on read with the current implementation, due to the
while loop structure (such as TLS compression with identical buffer
sizes, or buffers sizes that differ to optimize modes where the cipher
text is larger than the plain text.)  The JDK documentation indicates
that a buffer of getApplicationBufferSize() bytes will be enough for a
single unwrap operation, but the SslTransportLayer loop may call unwrap
with an application buffer which isn't empty.

The current implementation will check dst for space and then move data
from the application buffer.  It will then continue the loop and may try
to unwrap() again without verifying that there are
getApplicationBufferSize() bytes free in the application buffer. If,
instead, the loop moves data into dst, and then breaks the loop if dst
is full, then unwrap() should never be called with data in the
application buffer.

review_comments: https://api.github.com/repos/apache/kafka/pulls/9188/comments
pull_request_number: 9188
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9180/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9180/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9180"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9180"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9180/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9180"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/4392b83db79fa01f82ebb84508904858de8b7714"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "5645d906fa319206a9270c080926a21dfddc852a",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "Corrected unit tests. ",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9180/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9180/commits",
  "created_at": "2020-08-14T10:18:26Z",
  "diff_url": "https://github.com/apache/kafka/pull/9180.diff",
  "draft": false,
  "head": {
    "label": "sanketfajage:code-cleanup",
    "ref": "code-cleanup",
    "repo": {
      "archive_url": "https://api.github.com/repos/sanketfajage/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/sanketfajage/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/sanketfajage/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/sanketfajage/kafka/branches{/branch}",
      "clone_url": "https://github.com/sanketfajage/kafka.git",
      "collaborators_url": "https://api.github.com/repos/sanketfajage/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/sanketfajage/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/sanketfajage/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/sanketfajage/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/sanketfajage/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/sanketfajage/kafka/contributors",
      "created_at": "2020-07-24T14:24:18Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/sanketfajage/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/sanketfajage/kafka/downloads",
      "events_url": "https://api.github.com/repos/sanketfajage/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/sanketfajage/kafka/forks",
      "full_name": "sanketfajage/kafka",
      "git_commits_url": "https://api.github.com/repos/sanketfajage/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/sanketfajage/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/sanketfajage/kafka/git/tags{/sha}",
      "git_url": "git://github.com/sanketfajage/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/sanketfajage/kafka/hooks",
      "html_url": "https://github.com/sanketfajage/kafka",
      "id": 282239684,
      "issue_comment_url": "https://api.github.com/repos/sanketfajage/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/sanketfajage/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/sanketfajage/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/sanketfajage/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/sanketfajage/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/sanketfajage/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/sanketfajage/kafka/merges",
      "milestones_url": "https://api.github.com/repos/sanketfajage/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyODIyMzk2ODQ=",
      "notifications_url": "https://api.github.com/repos/sanketfajage/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/23031210?v=4",
        "events_url": "https://api.github.com/users/sanketfajage/events{/privacy}",
        "followers_url": "https://api.github.com/users/sanketfajage/followers",
        "following_url": "https://api.github.com/users/sanketfajage/following{/other_user}",
        "gists_url": "https://api.github.com/users/sanketfajage/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/sanketfajage",
        "id": 23031210,
        "login": "sanketfajage",
        "node_id": "MDQ6VXNlcjIzMDMxMjEw",
        "organizations_url": "https://api.github.com/users/sanketfajage/orgs",
        "received_events_url": "https://api.github.com/users/sanketfajage/received_events",
        "repos_url": "https://api.github.com/users/sanketfajage/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/sanketfajage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sanketfajage/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/sanketfajage"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/sanketfajage/kafka/pulls{/number}",
      "pushed_at": "2020-08-14T10:16:19Z",
      "releases_url": "https://api.github.com/repos/sanketfajage/kafka/releases{/id}",
      "size": 103871,
      "ssh_url": "git@github.com:sanketfajage/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/sanketfajage/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/sanketfajage/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/sanketfajage/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/sanketfajage/kafka/subscription",
      "svn_url": "https://github.com/sanketfajage/kafka",
      "tags_url": "https://api.github.com/repos/sanketfajage/kafka/tags",
      "teams_url": "https://api.github.com/repos/sanketfajage/kafka/teams",
      "trees_url": "https://api.github.com/repos/sanketfajage/kafka/git/trees{/sha}",
      "updated_at": "2020-07-24T14:24:21Z",
      "url": "https://api.github.com/repos/sanketfajage/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "4392b83db79fa01f82ebb84508904858de8b7714",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/23031210?v=4",
      "events_url": "https://api.github.com/users/sanketfajage/events{/privacy}",
      "followers_url": "https://api.github.com/users/sanketfajage/followers",
      "following_url": "https://api.github.com/users/sanketfajage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanketfajage/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/sanketfajage",
      "id": 23031210,
      "login": "sanketfajage",
      "node_id": "MDQ6VXNlcjIzMDMxMjEw",
      "organizations_url": "https://api.github.com/users/sanketfajage/orgs",
      "received_events_url": "https://api.github.com/users/sanketfajage/received_events",
      "repos_url": "https://api.github.com/users/sanketfajage/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/sanketfajage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanketfajage/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/sanketfajage"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9180",
  "id": 467901227,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9180",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "bdc910c13461abbf5f1609fee9c00ea585cf404b",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDY3OTAxMjI3",
  "number": 9180,
  "patch_url": "https://github.com/apache/kafka/pull/9180.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9180/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/4392b83db79fa01f82ebb84508904858de8b7714",
  "title": "MINOR: corrected unit tests in AbstractConfigTest.java- fixed invalid assertions",
  "updated_at": "2020-10-22T08:56:16Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9180",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/23031210?v=4",
    "events_url": "https://api.github.com/users/sanketfajage/events{/privacy}",
    "followers_url": "https://api.github.com/users/sanketfajage/followers",
    "following_url": "https://api.github.com/users/sanketfajage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sanketfajage/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/sanketfajage",
    "id": 23031210,
    "login": "sanketfajage",
    "node_id": "MDQ6VXNlcjIzMDMxMjEw",
    "organizations_url": "https://api.github.com/users/sanketfajage/orgs",
    "received_events_url": "https://api.github.com/users/sanketfajage/received_events",
    "repos_url": "https://api.github.com/users/sanketfajage/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/sanketfajage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sanketfajage/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/sanketfajage"
  }
}
json_root is_array: false
json_root is_object: true
number: 9180
url: https://api.github.com/repos/apache/kafka/pulls/9180
title: MINOR: corrected unit tests in AbstractConfigTest.java- fixed invalid assertions
body: Corrected unit tests. 
review_comments: https://api.github.com/repos/apache/kafka/pulls/9180/comments
pull_request_number: 9180
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9176/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9176/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9176"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9176"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9176/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9176"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/4a76258901031ce9c7c083bcb4a065aaeb404c67"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "d0800b3f7c135c97ec8632c247fc02946527c0a2",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "### Context \r\nI need to create topics on the fly from database table names (cdc) and I'm replacing all `_` with `-`.\r\nWith current RegexRouter I can't do this in one call (actually if I don't know the number of `_` I don't know how many times I need to call the transformer).\r\n\r\nThat's the reason why I implemented a new flag to allow replaceAll on RegexRouter.\r\n\r\n### Change applied\r\nI added a new flag `replaceAll` of type `Boolean` with default value `false` which allows to apply a regex replacement in all occurencces of the topic name.\r\nI updated the description of the transformer and added 2 tests to cover previous and new behaviour.\r\n\r\n### Testing strategy (Unit test)\r\nI created a new topic name with two `_` symbols (`sample_table_name`).\r\nI called a regex with current implementation expecting only the first `_` to be substituted.\r\nI called a regex with new flag expecting all `_` to be replaced with `-`.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [x] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9176/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9176/commits",
  "created_at": "2020-08-13T12:48:30Z",
  "diff_url": "https://github.com/apache/kafka/pull/9176.diff",
  "draft": false,
  "head": {
    "label": "carlos-verdes:feature/kafka-connect-regex-topic-router-replace-all",
    "ref": "feature/kafka-connect-regex-topic-router-replace-all",
    "repo": {
      "archive_url": "https://api.github.com/repos/carlos-verdes/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/carlos-verdes/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/carlos-verdes/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/carlos-verdes/kafka/branches{/branch}",
      "clone_url": "https://github.com/carlos-verdes/kafka.git",
      "collaborators_url": "https://api.github.com/repos/carlos-verdes/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/carlos-verdes/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/carlos-verdes/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/carlos-verdes/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/carlos-verdes/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/carlos-verdes/kafka/contributors",
      "created_at": "2020-08-13T10:21:18Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/carlos-verdes/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/carlos-verdes/kafka/downloads",
      "events_url": "https://api.github.com/repos/carlos-verdes/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/carlos-verdes/kafka/forks",
      "full_name": "carlos-verdes/kafka",
      "git_commits_url": "https://api.github.com/repos/carlos-verdes/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/carlos-verdes/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/carlos-verdes/kafka/git/tags{/sha}",
      "git_url": "git://github.com/carlos-verdes/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/carlos-verdes/kafka/hooks",
      "html_url": "https://github.com/carlos-verdes/kafka",
      "id": 287247732,
      "issue_comment_url": "https://api.github.com/repos/carlos-verdes/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/carlos-verdes/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/carlos-verdes/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/carlos-verdes/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/carlos-verdes/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/carlos-verdes/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/carlos-verdes/kafka/merges",
      "milestones_url": "https://api.github.com/repos/carlos-verdes/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyODcyNDc3MzI=",
      "notifications_url": "https://api.github.com/repos/carlos-verdes/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/8631522?v=4",
        "events_url": "https://api.github.com/users/carlos-verdes/events{/privacy}",
        "followers_url": "https://api.github.com/users/carlos-verdes/followers",
        "following_url": "https://api.github.com/users/carlos-verdes/following{/other_user}",
        "gists_url": "https://api.github.com/users/carlos-verdes/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/carlos-verdes",
        "id": 8631522,
        "login": "carlos-verdes",
        "node_id": "MDQ6VXNlcjg2MzE1MjI=",
        "organizations_url": "https://api.github.com/users/carlos-verdes/orgs",
        "received_events_url": "https://api.github.com/users/carlos-verdes/received_events",
        "repos_url": "https://api.github.com/users/carlos-verdes/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/carlos-verdes/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/carlos-verdes/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/carlos-verdes"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/carlos-verdes/kafka/pulls{/number}",
      "pushed_at": "2020-08-13T12:39:25Z",
      "releases_url": "https://api.github.com/repos/carlos-verdes/kafka/releases{/id}",
      "size": 104584,
      "ssh_url": "git@github.com:carlos-verdes/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/carlos-verdes/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/carlos-verdes/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/carlos-verdes/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/carlos-verdes/kafka/subscription",
      "svn_url": "https://github.com/carlos-verdes/kafka",
      "tags_url": "https://api.github.com/repos/carlos-verdes/kafka/tags",
      "teams_url": "https://api.github.com/repos/carlos-verdes/kafka/teams",
      "trees_url": "https://api.github.com/repos/carlos-verdes/kafka/git/trees{/sha}",
      "updated_at": "2020-08-13T10:21:20Z",
      "url": "https://api.github.com/repos/carlos-verdes/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "4a76258901031ce9c7c083bcb4a065aaeb404c67",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/8631522?v=4",
      "events_url": "https://api.github.com/users/carlos-verdes/events{/privacy}",
      "followers_url": "https://api.github.com/users/carlos-verdes/followers",
      "following_url": "https://api.github.com/users/carlos-verdes/following{/other_user}",
      "gists_url": "https://api.github.com/users/carlos-verdes/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/carlos-verdes",
      "id": 8631522,
      "login": "carlos-verdes",
      "node_id": "MDQ6VXNlcjg2MzE1MjI=",
      "organizations_url": "https://api.github.com/users/carlos-verdes/orgs",
      "received_events_url": "https://api.github.com/users/carlos-verdes/received_events",
      "repos_url": "https://api.github.com/users/carlos-verdes/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/carlos-verdes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carlos-verdes/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/carlos-verdes"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9176",
  "id": 467363227,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9176",
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "",
      "id": 851037639,
      "name": "connect",
      "node_id": "MDU6TGFiZWw4NTEwMzc2Mzk=",
      "url": "https://api.github.com/repos/apache/kafka/labels/connect"
    },
    {
      "color": "a01d16",
      "default": false,
      "description": "Requires or implements a KIP",
      "id": 2129035451,
      "name": "kip",
      "node_id": "MDU6TGFiZWwyMTI5MDM1NDUx",
      "url": "https://api.github.com/repos/apache/kafka/labels/kip"
    }
  ],
  "locked": false,
  "merge_commit_sha": "f6102a82e4aeb26d23ce375628651c600b77e62f",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDY3MzYzMjI3",
  "number": 9176,
  "patch_url": "https://github.com/apache/kafka/pull/9176.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9176/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/4a76258901031ce9c7c083bcb4a065aaeb404c67",
  "title": "Allow replace all for RegexRouter",
  "updated_at": "2020-08-19T13:46:29Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9176",
  "user": {
    "avatar_url": "https://avatars2.githubusercontent.com/u/8631522?v=4",
    "events_url": "https://api.github.com/users/carlos-verdes/events{/privacy}",
    "followers_url": "https://api.github.com/users/carlos-verdes/followers",
    "following_url": "https://api.github.com/users/carlos-verdes/following{/other_user}",
    "gists_url": "https://api.github.com/users/carlos-verdes/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/carlos-verdes",
    "id": 8631522,
    "login": "carlos-verdes",
    "node_id": "MDQ6VXNlcjg2MzE1MjI=",
    "organizations_url": "https://api.github.com/users/carlos-verdes/orgs",
    "received_events_url": "https://api.github.com/users/carlos-verdes/received_events",
    "repos_url": "https://api.github.com/users/carlos-verdes/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/carlos-verdes/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carlos-verdes/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/carlos-verdes"
  }
}
json_root is_array: false
json_root is_object: true
number: 9176
url: https://api.github.com/repos/apache/kafka/pulls/9176
title: Allow replace all for RegexRouter
body: ### Context 
I need to create topics on the fly from database table names (cdc) and I'm replacing all `_` with `-`.
With current RegexRouter I can't do this in one call (actually if I don't know the number of `_` I don't know how many times I need to call the transformer).

That's the reason why I implemented a new flag to allow replaceAll on RegexRouter.

### Change applied
I added a new flag `replaceAll` of type `Boolean` with default value `false` which allows to apply a regex replacement in all occurencces of the topic name.
I updated the description of the transformer and added 2 tests to cover previous and new behaviour.

### Testing strategy (Unit test)
I created a new topic name with two `_` symbols (`sample_table_name`).
I called a regex with current implementation expecting only the first `_` to be substituted.
I called a regex with new flag expecting all `_` to be replaced with `-`.

### Committer Checklist (excluded from commit message)
- [x] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9176/comments
pull_request_number: 9176
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9169/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9169/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9169"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9169"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9169/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9169"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/b6e468ddfec5ef7d25d259c3efa71bd09f8e1ab0"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "CONTRIBUTOR",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "aa287acb2eed07cf6d75c10e71f051f538a57872",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "There is already a scheduler (see https://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/server/KafkaServer.scala#L264) using default thread prefix so the others should define different thread name. Otherwise, it is hard to distinguish them by JVM profiler.\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [ ] Verify design and implementation \r\n- [ ] Verify test coverage and CI build status\r\n- [ ] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9169/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9169/commits",
  "created_at": "2020-08-12T14:10:57Z",
  "diff_url": "https://github.com/apache/kafka/pull/9169.diff",
  "draft": false,
  "head": {
    "label": "chia7712:MINOR-9169",
    "ref": "MINOR-9169",
    "repo": {
      "archive_url": "https://api.github.com/repos/chia7712/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/chia7712/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/chia7712/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/chia7712/kafka/branches{/branch}",
      "clone_url": "https://github.com/chia7712/kafka.git",
      "collaborators_url": "https://api.github.com/repos/chia7712/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/chia7712/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/chia7712/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/chia7712/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/chia7712/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/chia7712/kafka/contributors",
      "created_at": "2018-03-14T12:43:46Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/chia7712/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/chia7712/kafka/downloads",
      "events_url": "https://api.github.com/repos/chia7712/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/chia7712/kafka/forks",
      "full_name": "chia7712/kafka",
      "git_commits_url": "https://api.github.com/repos/chia7712/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/chia7712/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/chia7712/kafka/git/tags{/sha}",
      "git_url": "git://github.com/chia7712/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/chia7712/kafka/hooks",
      "html_url": "https://github.com/chia7712/kafka",
      "id": 125210946,
      "issue_comment_url": "https://api.github.com/repos/chia7712/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/chia7712/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/chia7712/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/chia7712/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/chia7712/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/chia7712/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/chia7712/kafka/merges",
      "milestones_url": "https://api.github.com/repos/chia7712/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjUyMTA5NDY=",
      "notifications_url": "https://api.github.com/repos/chia7712/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
        "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
        "followers_url": "https://api.github.com/users/chia7712/followers",
        "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
        "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/chia7712",
        "id": 6234750,
        "login": "chia7712",
        "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
        "organizations_url": "https://api.github.com/users/chia7712/orgs",
        "received_events_url": "https://api.github.com/users/chia7712/received_events",
        "repos_url": "https://api.github.com/users/chia7712/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/chia7712"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/chia7712/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T03:45:34Z",
      "releases_url": "https://api.github.com/repos/chia7712/kafka/releases{/id}",
      "size": 102819,
      "ssh_url": "git@github.com:chia7712/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/chia7712/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/chia7712/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/chia7712/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/chia7712/kafka/subscription",
      "svn_url": "https://github.com/chia7712/kafka",
      "tags_url": "https://api.github.com/repos/chia7712/kafka/tags",
      "teams_url": "https://api.github.com/repos/chia7712/kafka/teams",
      "trees_url": "https://api.github.com/repos/chia7712/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:44:24Z",
      "url": "https://api.github.com/repos/chia7712/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "b6e468ddfec5ef7d25d259c3efa71bd09f8e1ab0",
    "user": {
      "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
      "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
      "followers_url": "https://api.github.com/users/chia7712/followers",
      "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
      "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/chia7712",
      "id": 6234750,
      "login": "chia7712",
      "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
      "organizations_url": "https://api.github.com/users/chia7712/orgs",
      "received_events_url": "https://api.github.com/users/chia7712/received_events",
      "repos_url": "https://api.github.com/users/chia7712/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/chia7712"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9169",
  "id": 466797842,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9169",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "e82a1e805293651cc80195564fa7a4a72aad300d",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDY2Nzk3ODQy",
  "number": 9169,
  "patch_url": "https://github.com/apache/kafka/pull/9169.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9169/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/b6e468ddfec5ef7d25d259c3efa71bd09f8e1ab0",
  "title": "MINOR: the scheduler used to perform rebalance should have thread prefix",
  "updated_at": "2020-10-27T12:31:52Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9169",
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/6234750?v=4",
    "events_url": "https://api.github.com/users/chia7712/events{/privacy}",
    "followers_url": "https://api.github.com/users/chia7712/followers",
    "following_url": "https://api.github.com/users/chia7712/following{/other_user}",
    "gists_url": "https://api.github.com/users/chia7712/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/chia7712",
    "id": 6234750,
    "login": "chia7712",
    "node_id": "MDQ6VXNlcjYyMzQ3NTA=",
    "organizations_url": "https://api.github.com/users/chia7712/orgs",
    "received_events_url": "https://api.github.com/users/chia7712/received_events",
    "repos_url": "https://api.github.com/users/chia7712/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/chia7712/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chia7712/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/chia7712"
  }
}
json_root is_array: false
json_root is_object: true
number: 9169
url: https://api.github.com/repos/apache/kafka/pulls/9169
title: MINOR: the scheduler used to perform rebalance should have thread prefix
body: There is already a scheduler (see https://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/server/KafkaServer.scala#L264) using default thread prefix so the others should define different thread name. Otherwise, it is hard to distinguish them by JVM profiler.

### Committer Checklist (excluded from commit message)
- [ ] Verify design and implementation 
- [ ] Verify test coverage and CI build status
- [ ] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9169/comments
pull_request_number: 9169
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9167/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9167/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9167"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9167"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9167/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9167"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/b339b748c35cea2108649384add5e43fd45ec772"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "7915d5e5f826a71c11e1c9183c84702410f7209a",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "*More detailed description of your change,\r\nif necessary. The PR title and PR message become\r\nthe squashed commit message, so use a separate\r\ncomment to ping reviewers.*\r\n\r\n*Summary of testing strategy (including rationale)\r\nfor the feature or bug fix. Unit and/or integration\r\ntests are expected for any behaviour change and\r\nsystem tests should be considered for larger changes.*\r\n\r\n### Committer Checklist (excluded from commit message)\r\n- [x] Verify design and implementation \r\n- [x] Verify test coverage and CI build status\r\n- [x] Verify documentation (including upgrade notes)\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9167/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9167/commits",
  "created_at": "2020-08-12T03:45:10Z",
  "diff_url": "https://github.com/apache/kafka/pull/9167.diff",
  "draft": false,
  "head": {
    "label": "aluode99:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/aluode99/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/aluode99/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/aluode99/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/aluode99/kafka/branches{/branch}",
      "clone_url": "https://github.com/aluode99/kafka.git",
      "collaborators_url": "https://api.github.com/repos/aluode99/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/aluode99/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/aluode99/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/aluode99/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/aluode99/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/aluode99/kafka/contributors",
      "created_at": "2019-07-11T01:22:42Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/aluode99/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/aluode99/kafka/downloads",
      "events_url": "https://api.github.com/repos/aluode99/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/aluode99/kafka/forks",
      "full_name": "aluode99/kafka",
      "git_commits_url": "https://api.github.com/repos/aluode99/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/aluode99/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/aluode99/kafka/git/tags{/sha}",
      "git_url": "git://github.com/aluode99/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/aluode99/kafka/hooks",
      "html_url": "https://github.com/aluode99/kafka",
      "id": 196297570,
      "issue_comment_url": "https://api.github.com/repos/aluode99/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/aluode99/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/aluode99/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/aluode99/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/aluode99/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/aluode99/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/aluode99/kafka/merges",
      "milestones_url": "https://api.github.com/repos/aluode99/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkxOTYyOTc1NzA=",
      "notifications_url": "https://api.github.com/repos/aluode99/kafka/notifications{?since,all,participating}",
      "open_issues": 0,
      "open_issues_count": 0,
      "owner": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/15179646?v=4",
        "events_url": "https://api.github.com/users/aluode99/events{/privacy}",
        "followers_url": "https://api.github.com/users/aluode99/followers",
        "following_url": "https://api.github.com/users/aluode99/following{/other_user}",
        "gists_url": "https://api.github.com/users/aluode99/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/aluode99",
        "id": 15179646,
        "login": "aluode99",
        "node_id": "MDQ6VXNlcjE1MTc5NjQ2",
        "organizations_url": "https://api.github.com/users/aluode99/orgs",
        "received_events_url": "https://api.github.com/users/aluode99/received_events",
        "repos_url": "https://api.github.com/users/aluode99/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/aluode99/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/aluode99/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/aluode99"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/aluode99/kafka/pulls{/number}",
      "pushed_at": "2020-08-13T03:27:05Z",
      "releases_url": "https://api.github.com/repos/aluode99/kafka/releases{/id}",
      "size": 85629,
      "ssh_url": "git@github.com:aluode99/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/aluode99/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/aluode99/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/aluode99/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/aluode99/kafka/subscription",
      "svn_url": "https://github.com/aluode99/kafka",
      "tags_url": "https://api.github.com/repos/aluode99/kafka/tags",
      "teams_url": "https://api.github.com/repos/aluode99/kafka/teams",
      "trees_url": "https://api.github.com/repos/aluode99/kafka/git/trees{/sha}",
      "updated_at": "2020-08-13T03:27:11Z",
      "url": "https://api.github.com/repos/aluode99/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "b339b748c35cea2108649384add5e43fd45ec772",
    "user": {
      "avatar_url": "https://avatars1.githubusercontent.com/u/15179646?v=4",
      "events_url": "https://api.github.com/users/aluode99/events{/privacy}",
      "followers_url": "https://api.github.com/users/aluode99/followers",
      "following_url": "https://api.github.com/users/aluode99/following{/other_user}",
      "gists_url": "https://api.github.com/users/aluode99/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/aluode99",
      "id": 15179646,
      "login": "aluode99",
      "node_id": "MDQ6VXNlcjE1MTc5NjQ2",
      "organizations_url": "https://api.github.com/users/aluode99/orgs",
      "received_events_url": "https://api.github.com/users/aluode99/received_events",
      "repos_url": "https://api.github.com/users/aluode99/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/aluode99/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aluode99/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/aluode99"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9167",
  "id": 466488398,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9167",
  "labels": [
    {
      "color": "0052cc",
      "default": false,
      "description": "",
      "id": 851037639,
      "name": "connect",
      "node_id": "MDU6TGFiZWw4NTEwMzc2Mzk=",
      "url": "https://api.github.com/repos/apache/kafka/labels/connect"
    }
  ],
  "locked": false,
  "merge_commit_sha": "9bc488227e660d829e9e6e6c1a0ddf2bf20bc83e",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDY2NDg4Mzk4",
  "number": 9167,
  "patch_url": "https://github.com/apache/kafka/pull/9167.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9167/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/b339b748c35cea2108649384add5e43fd45ec772",
  "title": "KAFKA-9941;WorkerSinkTask：When a record triggers a RetriableException and the retry is processed successfully, its offset does not commit.",
  "updated_at": "2020-08-18T05:54:35Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9167",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/15179646?v=4",
    "events_url": "https://api.github.com/users/aluode99/events{/privacy}",
    "followers_url": "https://api.github.com/users/aluode99/followers",
    "following_url": "https://api.github.com/users/aluode99/following{/other_user}",
    "gists_url": "https://api.github.com/users/aluode99/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/aluode99",
    "id": 15179646,
    "login": "aluode99",
    "node_id": "MDQ6VXNlcjE1MTc5NjQ2",
    "organizations_url": "https://api.github.com/users/aluode99/orgs",
    "received_events_url": "https://api.github.com/users/aluode99/received_events",
    "repos_url": "https://api.github.com/users/aluode99/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/aluode99/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aluode99/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/aluode99"
  }
}
json_root is_array: false
json_root is_object: true
number: 9167
url: https://api.github.com/repos/apache/kafka/pulls/9167
title: KAFKA-9941;WorkerSinkTask：When a record triggers a RetriableException and the retry is processed successfully, its offset does not commit.
body: *More detailed description of your change,
if necessary. The PR title and PR message become
the squashed commit message, so use a separate
comment to ping reviewers.*

*Summary of testing strategy (including rationale)
for the feature or bug fix. Unit and/or integration
tests are expected for any behaviour change and
system tests should be considered for larger changes.*

### Committer Checklist (excluded from commit message)
- [x] Verify design and implementation 
- [x] Verify test coverage and CI build status
- [x] Verify documentation (including upgrade notes)

review_comments: https://api.github.com/repos/apache/kafka/pulls/9167/comments
pull_request_number: 9167
repository_id: 1
{
  "_links": {
    "comments": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9161/comments"
    },
    "commits": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9161/commits"
    },
    "html": {
      "href": "https://github.com/apache/kafka/pull/9161"
    },
    "issue": {
      "href": "https://api.github.com/repos/apache/kafka/issues/9161"
    },
    "review_comment": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}"
    },
    "review_comments": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9161/comments"
    },
    "self": {
      "href": "https://api.github.com/repos/apache/kafka/pulls/9161"
    },
    "statuses": {
      "href": "https://api.github.com/repos/apache/kafka/statuses/76c319c0a812f7311f05e97374ab26387de75dd9"
    }
  },
  "active_lock_reason": null,
  "assignee": null,
  "assignees": [],
  "author_association": "NONE",
  "base": {
    "label": "apache:trunk",
    "ref": "trunk",
    "repo": {
      "archive_url": "https://api.github.com/repos/apache/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/apache/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/apache/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/apache/kafka/branches{/branch}",
      "clone_url": "https://github.com/apache/kafka.git",
      "collaborators_url": "https://api.github.com/repos/apache/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/apache/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/apache/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/apache/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/apache/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/apache/kafka/contributors",
      "created_at": "2011-08-15T18:06:16Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/apache/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/apache/kafka/downloads",
      "events_url": "https://api.github.com/repos/apache/kafka/events",
      "fork": false,
      "forks": 9167,
      "forks_count": 9167,
      "forks_url": "https://api.github.com/repos/apache/kafka/forks",
      "full_name": "apache/kafka",
      "git_commits_url": "https://api.github.com/repos/apache/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/apache/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/apache/kafka/git/tags{/sha}",
      "git_url": "git://github.com/apache/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/apache/kafka/hooks",
      "html_url": "https://github.com/apache/kafka",
      "id": 2211243,
      "issue_comment_url": "https://api.github.com/repos/apache/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/apache/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/apache/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/apache/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/apache/kafka/labels{/name}",
      "language": "Java",
      "languages_url": "https://api.github.com/repos/apache/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/apache/kafka/merges",
      "milestones_url": "https://api.github.com/repos/apache/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyMjExMjQz",
      "notifications_url": "https://api.github.com/repos/apache/kafka/notifications{?since,all,participating}",
      "open_issues": 753,
      "open_issues_count": 753,
      "owner": {
        "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
        "events_url": "https://api.github.com/users/apache/events{/privacy}",
        "followers_url": "https://api.github.com/users/apache/followers",
        "following_url": "https://api.github.com/users/apache/following{/other_user}",
        "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/apache",
        "id": 47359,
        "login": "apache",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
        "organizations_url": "https://api.github.com/users/apache/orgs",
        "received_events_url": "https://api.github.com/users/apache/received_events",
        "repos_url": "https://api.github.com/users/apache/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/apache"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/apache/kafka/pulls{/number}",
      "pushed_at": "2020-10-28T04:02:17Z",
      "releases_url": "https://api.github.com/repos/apache/kafka/releases{/id}",
      "size": 108113,
      "ssh_url": "git@github.com:apache/kafka.git",
      "stargazers_count": 17159,
      "stargazers_url": "https://api.github.com/repos/apache/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/apache/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/apache/kafka/subscription",
      "svn_url": "https://github.com/apache/kafka",
      "tags_url": "https://api.github.com/repos/apache/kafka/tags",
      "teams_url": "https://api.github.com/repos/apache/kafka/teams",
      "trees_url": "https://api.github.com/repos/apache/kafka/git/trees{/sha}",
      "updated_at": "2020-10-28T02:38:43Z",
      "url": "https://api.github.com/repos/apache/kafka",
      "watchers": 17159,
      "watchers_count": 17159
    },
    "sha": "3e6dcb14dd9716f07d1ba96b1b06b78e55e92de1",
    "user": {
      "avatar_url": "https://avatars0.githubusercontent.com/u/47359?v=4",
      "events_url": "https://api.github.com/users/apache/events{/privacy}",
      "followers_url": "https://api.github.com/users/apache/followers",
      "following_url": "https://api.github.com/users/apache/following{/other_user}",
      "gists_url": "https://api.github.com/users/apache/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apache",
      "id": 47359,
      "login": "apache",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjQ3MzU5",
      "organizations_url": "https://api.github.com/users/apache/orgs",
      "received_events_url": "https://api.github.com/users/apache/received_events",
      "repos_url": "https://api.github.com/users/apache/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/apache/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/apache/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/apache"
    }
  },
  "body": "The condition to see a detailed stats is conditionned by the time.\r\n     if (currentTimeMillis - lastReportTime >= config.reportingInterval)\r\n       if (config.showDetailedStats)\r\n\r\nBut when you finish the loop, you haven t the last stats of the performance tests. Just the previous status exists.\r\n\r\n \r\n\r\nI propose just to remove the condition to show the final statistic result.\r\n",
  "closed_at": null,
  "comments_url": "https://api.github.com/repos/apache/kafka/issues/9161/comments",
  "commits_url": "https://api.github.com/repos/apache/kafka/pulls/9161/commits",
  "created_at": "2020-08-11T13:07:37Z",
  "diff_url": "https://github.com/apache/kafka/pull/9161.diff",
  "draft": false,
  "head": {
    "label": "enablecloud:KAFKA-10385",
    "ref": "KAFKA-10385",
    "repo": {
      "archive_url": "https://api.github.com/repos/enablecloud/kafka/{archive_format}{/ref}",
      "archived": false,
      "assignees_url": "https://api.github.com/repos/enablecloud/kafka/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/enablecloud/kafka/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/enablecloud/kafka/branches{/branch}",
      "clone_url": "https://github.com/enablecloud/kafka.git",
      "collaborators_url": "https://api.github.com/repos/enablecloud/kafka/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/enablecloud/kafka/comments{/number}",
      "commits_url": "https://api.github.com/repos/enablecloud/kafka/commits{/sha}",
      "compare_url": "https://api.github.com/repos/enablecloud/kafka/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/enablecloud/kafka/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/enablecloud/kafka/contributors",
      "created_at": "2020-08-11T12:59:41Z",
      "default_branch": "trunk",
      "deployments_url": "https://api.github.com/repos/enablecloud/kafka/deployments",
      "description": "Mirror of Apache Kafka",
      "disabled": false,
      "downloads_url": "https://api.github.com/repos/enablecloud/kafka/downloads",
      "events_url": "https://api.github.com/repos/enablecloud/kafka/events",
      "fork": true,
      "forks": 0,
      "forks_count": 0,
      "forks_url": "https://api.github.com/repos/enablecloud/kafka/forks",
      "full_name": "enablecloud/kafka",
      "git_commits_url": "https://api.github.com/repos/enablecloud/kafka/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/enablecloud/kafka/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/enablecloud/kafka/git/tags{/sha}",
      "git_url": "git://github.com/enablecloud/kafka.git",
      "has_downloads": true,
      "has_issues": false,
      "has_pages": false,
      "has_projects": true,
      "has_wiki": false,
      "homepage": null,
      "hooks_url": "https://api.github.com/repos/enablecloud/kafka/hooks",
      "html_url": "https://github.com/enablecloud/kafka",
      "id": 286745351,
      "issue_comment_url": "https://api.github.com/repos/enablecloud/kafka/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/enablecloud/kafka/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/enablecloud/kafka/issues{/number}",
      "keys_url": "https://api.github.com/repos/enablecloud/kafka/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/enablecloud/kafka/labels{/name}",
      "language": null,
      "languages_url": "https://api.github.com/repos/enablecloud/kafka/languages",
      "license": {
        "key": "apache-2.0",
        "name": "Apache License 2.0",
        "node_id": "MDc6TGljZW5zZTI=",
        "spdx_id": "Apache-2.0",
        "url": "https://api.github.com/licenses/apache-2.0"
      },
      "merges_url": "https://api.github.com/repos/enablecloud/kafka/merges",
      "milestones_url": "https://api.github.com/repos/enablecloud/kafka/milestones{/number}",
      "mirror_url": null,
      "name": "kafka",
      "node_id": "MDEwOlJlcG9zaXRvcnkyODY3NDUzNTE=",
      "notifications_url": "https://api.github.com/repos/enablecloud/kafka/notifications{?since,all,participating}",
      "open_issues": 1,
      "open_issues_count": 1,
      "owner": {
        "avatar_url": "https://avatars2.githubusercontent.com/u/32901573?v=4",
        "events_url": "https://api.github.com/users/enablecloud/events{/privacy}",
        "followers_url": "https://api.github.com/users/enablecloud/followers",
        "following_url": "https://api.github.com/users/enablecloud/following{/other_user}",
        "gists_url": "https://api.github.com/users/enablecloud/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/enablecloud",
        "id": 32901573,
        "login": "enablecloud",
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjMyOTAxNTcz",
        "organizations_url": "https://api.github.com/users/enablecloud/orgs",
        "received_events_url": "https://api.github.com/users/enablecloud/received_events",
        "repos_url": "https://api.github.com/users/enablecloud/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/enablecloud/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/enablecloud/subscriptions",
        "type": "Organization",
        "url": "https://api.github.com/users/enablecloud"
      },
      "private": false,
      "pulls_url": "https://api.github.com/repos/enablecloud/kafka/pulls{/number}",
      "pushed_at": "2020-08-11T13:06:59Z",
      "releases_url": "https://api.github.com/repos/enablecloud/kafka/releases{/id}",
      "size": 104459,
      "ssh_url": "git@github.com:enablecloud/kafka.git",
      "stargazers_count": 0,
      "stargazers_url": "https://api.github.com/repos/enablecloud/kafka/stargazers",
      "statuses_url": "https://api.github.com/repos/enablecloud/kafka/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/enablecloud/kafka/subscribers",
      "subscription_url": "https://api.github.com/repos/enablecloud/kafka/subscription",
      "svn_url": "https://github.com/enablecloud/kafka",
      "tags_url": "https://api.github.com/repos/enablecloud/kafka/tags",
      "teams_url": "https://api.github.com/repos/enablecloud/kafka/teams",
      "trees_url": "https://api.github.com/repos/enablecloud/kafka/git/trees{/sha}",
      "updated_at": "2020-08-11T12:59:43Z",
      "url": "https://api.github.com/repos/enablecloud/kafka",
      "watchers": 0,
      "watchers_count": 0
    },
    "sha": "76c319c0a812f7311f05e97374ab26387de75dd9",
    "user": {
      "avatar_url": "https://avatars2.githubusercontent.com/u/32901573?v=4",
      "events_url": "https://api.github.com/users/enablecloud/events{/privacy}",
      "followers_url": "https://api.github.com/users/enablecloud/followers",
      "following_url": "https://api.github.com/users/enablecloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/enablecloud/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/enablecloud",
      "id": 32901573,
      "login": "enablecloud",
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjMyOTAxNTcz",
      "organizations_url": "https://api.github.com/users/enablecloud/orgs",
      "received_events_url": "https://api.github.com/users/enablecloud/received_events",
      "repos_url": "https://api.github.com/users/enablecloud/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/enablecloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/enablecloud/subscriptions",
      "type": "Organization",
      "url": "https://api.github.com/users/enablecloud"
    }
  },
  "html_url": "https://github.com/apache/kafka/pull/9161",
  "id": 466093141,
  "issue_url": "https://api.github.com/repos/apache/kafka/issues/9161",
  "labels": [],
  "locked": false,
  "merge_commit_sha": "0a1ceccf139e3fe132c44f04218c09242a9fd7a4",
  "merged_at": null,
  "milestone": null,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NDY2MDkzMTQx",
  "number": 9161,
  "patch_url": "https://github.com/apache/kafka/pull/9161.patch",
  "requested_reviewers": [],
  "requested_teams": [],
  "review_comment_url": "https://api.github.com/repos/apache/kafka/pulls/comments{/number}",
  "review_comments_url": "https://api.github.com/repos/apache/kafka/pulls/9161/comments",
  "state": "open",
  "statuses_url": "https://api.github.com/repos/apache/kafka/statuses/76c319c0a812f7311f05e97374ab26387de75dd9",
  "title": "KAFKA-10385 - Remove no print stat when on detailed stat mode on Consumer Perf",
  "updated_at": "2020-08-21T19:26:57Z",
  "url": "https://api.github.com/repos/apache/kafka/pulls/9161",
  "user": {
    "avatar_url": "https://avatars1.githubusercontent.com/u/1083623?v=4",
    "events_url": "https://api.github.com/users/sebadiaz/events{/privacy}",
    "followers_url": "https://api.github.com/users/sebadiaz/followers",
    "following_url": "https://api.github.com/users/sebadiaz/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebadiaz/gists{/gist_id}",
    "gravatar_id": "",
    "html_url": "https://github.com/sebadiaz",
    "id": 1083623,
    "login": "sebadiaz",
    "node_id": "MDQ6VXNlcjEwODM2MjM=",
    "organizations_url": "https://api.github.com/users/sebadiaz/orgs",
    "received_events_url": "https://api.github.com/users/sebadiaz/received_events",
    "repos_url": "https://api.github.com/users/sebadiaz/repos",
    "site_admin": false,
    "starred_url": "https://api.github.com/users/sebadiaz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebadiaz/subscriptions",
    "type": "User",
    "url": "https://api.github.com/users/sebadiaz"
  }
}
json_root is_array: false
json_root is_object: true
number: 9161
url: https://api.github.com/repos/apache/kafka/pulls/9161
title: KAFKA-10385 - Remove no print stat when on detailed stat mode on Consumer Perf
body: The condition to see a detailed stats is conditionned by the time.
     if (currentTimeMillis - lastReportTime >= config.reportingInterval)
       if (config.showDetailedStats)

But when you finish the loop, you haven t the last stats of the performance tests. Just the previous status exists.

 

I propose just to remove the condition to show the final statistic result.

review_comments: https://api.github.com/repos/apache/kafka/pulls/9161/comments
pull_request_number: 9161
repository_id: 1
